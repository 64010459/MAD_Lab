
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000276d0  08009b40  08009b40  00019b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031210  08031210  000501fc  2**0
                  CONTENTS
  4 .ARM          00000008  08031210  08031210  00041210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031218  08031218  000501fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031218  08031218  00041218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803121c  0803121c  0004121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08031220  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001fc  0803141c  000501fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0803141c  00050564  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000501fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0005022a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fc8  00000000  00000000  0005026d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fd  00000000  00000000  00066235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  00069c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001062  00000000  00000000  0006b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b1d5  00000000  00000000  0006c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bac5  00000000  00000000  00097397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101668  00000000  00000000  000b2e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006984  00000000  00000000  001b44c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001bae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001fc 	.word	0x200001fc
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b28 	.word	0x08009b28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000200 	.word	0x20000200
 800023c:	08009b28 	.word	0x08009b28

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a8c      	ldr	r2, [pc, #560]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b87      	ldr	r3, [pc, #540]	; (8000838 <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a86      	ldr	r2, [pc, #536]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b84      	ldr	r3, [pc, #528]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b81      	ldr	r3, [pc, #516]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a80      	ldr	r2, [pc, #512]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b7b      	ldr	r3, [pc, #492]	; (8000838 <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a7a      	ldr	r2, [pc, #488]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a74      	ldr	r2, [pc, #464]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a68      	ldr	r2, [pc, #416]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2168      	movs	r1, #104	; 0x68
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <MX_GPIO_Init+0x250>)
 80006c8:	f002 fe62 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006d2:	485b      	ldr	r0, [pc, #364]	; (8000840 <MX_GPIO_Init+0x254>)
 80006d4:	f002 fe5c 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4859      	ldr	r0, [pc, #356]	; (8000844 <MX_GPIO_Init+0x258>)
 80006de:	f002 fe57 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e8:	4857      	ldr	r0, [pc, #348]	; (8000848 <MX_GPIO_Init+0x25c>)
 80006ea:	f002 fe51 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ee:	2314      	movs	r3, #20
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	484e      	ldr	r0, [pc, #312]	; (800083c <MX_GPIO_Init+0x250>)
 8000702:	f002 fc81 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000706:	2368      	movs	r3, #104	; 0x68
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4847      	ldr	r0, [pc, #284]	; (800083c <MX_GPIO_Init+0x250>)
 800071e:	f002 fc73 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000738:	f002 fc66 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	483c      	ldr	r0, [pc, #240]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000758:	f002 fc56 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075c:	2386      	movs	r3, #134	; 0x86
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4835      	ldr	r0, [pc, #212]	; (800084c <MX_GPIO_Init+0x260>)
 8000778:	f002 fc46 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4829      	ldr	r0, [pc, #164]	; (8000840 <MX_GPIO_Init+0x254>)
 800079a:	f002 fc35 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <MX_GPIO_Init+0x254>)
 80007b8:	f002 fc26 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x258>)
 80007d4:	f002 fc18 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0x258>)
 80007ec:	f002 fc0c 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0x25c>)
 800080a:	f002 fbfd 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x258>)
 800082c:	f002 fbec 	bl	8003008 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020400 	.word	0x40020400
 8000844:	40021800 	.word	0x40021800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000

08000850 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f002 fd9a 	bl	80033c4 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fe41 	bl	800151c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f003 f9eb 	bl	8003c78 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fe38 	bl	800151c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f003 fa2d 	bl	8003d0e <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fe2f 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000218 	.word	0x20000218
 80008c8:	40005400 	.word	0x40005400
 80008cc:	20404768 	.word	0x20404768

080008d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_I2C_MspInit+0x7c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d128      	bne.n	8000944 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_I2C_MspInit+0x80>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a16      	ldr	r2, [pc, #88]	; (8000950 <HAL_I2C_MspInit+0x80>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_I2C_MspInit+0x80>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800090a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000910:	2312      	movs	r3, #18
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091c:	2304      	movs	r3, #4
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <HAL_I2C_MspInit+0x84>)
 8000928:	f002 fb6e 	bl	8003008 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_I2C_MspInit+0x80>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_I2C_MspInit+0x80>)
 8000932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_I2C_MspInit+0x80>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40005400 	.word	0x40005400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400

08000958 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800095c:	f3bf 8f4f 	dsb	sy
}
 8000960:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000962:	f3bf 8f6f 	isb	sy
}
 8000966:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <SCB_EnableICache+0x48>)
 800096a:	2200      	movs	r2, #0
 800096c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
}
 8000974:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000976:	f3bf 8f6f 	isb	sy
}
 800097a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <SCB_EnableICache+0x48>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <SCB_EnableICache+0x48>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000986:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <SCB_EnableDCache+0x84>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009b2:	f3bf 8f4f 	dsb	sy
}
 80009b6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <SCB_EnableDCache+0x84>)
 80009ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009be:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	0b5b      	lsrs	r3, r3, #13
 80009c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009c8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009d2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	015a      	lsls	r2, r3, #5
 80009d8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009dc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009e2:	4911      	ldr	r1, [pc, #68]	; (8000a28 <SCB_EnableDCache+0x84>)
 80009e4:	4313      	orrs	r3, r2
 80009e6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	60ba      	str	r2, [r7, #8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1ef      	bne.n	80009d4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	1e5a      	subs	r2, r3, #1
 80009f8:	60fa      	str	r2, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e5      	bne.n	80009ca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009fe:	f3bf 8f4f 	dsb	sy
}
 8000a02:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SCB_EnableDCache+0x84>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <SCB_EnableDCache+0x84>)
 8000a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a10:	f3bf 8f4f 	dsb	sy
}
 8000a14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a16:	f3bf 8f6f 	isb	sy
}
 8000a1a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	00000000 	.word	0x00000000

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a34:	f7ff ff90 	bl	8000958 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a38:	f7ff ffb4 	bl	80009a4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f002 f942 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f8dc 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f7ff fdd2 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a48:	f001 f832 	bl	8001ab0 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000a4c:	f000 fd9e 	bl	800158c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000a50:	f000 ff54 	bl	80018fc <MX_TIM1_Init>
  MX_RNG_Init();
 8000a54:	f000 fd66 	bl	8001524 <MX_RNG_Init>
  MX_I2C1_Init();
 8000a58:	f7ff fefa 	bl	8000850 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a5c:	f000 ffa2 	bl	80019a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000a60:	f001 fcf4 	bl	800244c <ILI9341_Init>
	cmdBuffer[0] = 0x03;
 8000a64:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <main+0x1a0>)
 8000a66:	2203      	movs	r2, #3
 8000a68:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8000a6a:	4b59      	ldr	r3, [pc, #356]	; (8000bd0 <main+0x1a0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8000a70:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <main+0x1a0>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	709a      	strb	r2, [r3, #2]
	ILI9341_Fill_Screen(bgCode);
 8000a76:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <main+0x1a4>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fe92 	bl	80027a4 <ILI9341_Fill_Screen>

    HAL_TIM_Base_Start_IT(&htim2);
 8000a80:	4855      	ldr	r0, [pc, #340]	; (8000bd8 <main+0x1a8>)
 8000a82:	f004 fee9 	bl	8005858 <HAL_TIM_Base_Start_IT>
//		HAL_ADC_Start(&hadc1);
//		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
//		}
//		adc_val = HAL_ADC_GetValue(&hadc1);
//		adc_val = average_16(adc_val);
		if (abs(last_adc_val - adc_val) > 150) {
 8000a86:	4b55      	ldr	r3, [pc, #340]	; (8000bdc <main+0x1ac>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <main+0x1b0>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bfb8      	it	lt
 8000a96:	425b      	neglt	r3, r3
 8000a98:	2b96      	cmp	r3, #150	; 0x96
 8000a9a:	dd5e      	ble.n	8000b5a <main+0x12a>
			last_adc_val = adc_val;
 8000a9c:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <main+0x1b0>)
 8000a9e:	881a      	ldrh	r2, [r3, #0]
 8000aa0:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <main+0x1ac>)
 8000aa2:	801a      	strh	r2, [r3, #0]
			bg = (float) adc_val / 4095.0 * 100.0;
 8000aa4:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <main+0x1b0>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ab4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8000bb0 <main+0x180>
 8000ab8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000abc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8000bb8 <main+0x188>
 8000ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ac4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac8:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <main+0x1b4>)
 8000aca:	edc3 7a00 	vstr	s15, [r3]
			if (bg < 20) {
 8000ace:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <main+0x1b4>)
 8000ad0:	edd3 7a00 	vldr	s15, [r3]
 8000ad4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	d502      	bpl.n	8000ae8 <main+0xb8>
				bg = 20;
 8000ae2:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <main+0x1b4>)
 8000ae4:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <main+0x1b8>)
 8000ae6:	601a      	str	r2, [r3, #0]
			}
			bgCode = ((int) (31.0 / 100.0 * bg) << 11)
 8000ae8:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <main+0x1b4>)
 8000aea:	edd3 7a00 	vldr	s15, [r3]
 8000aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af2:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8000bc0 <main+0x190>
 8000af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000afe:	ee17 3a90 	vmov	r3, s15
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	02db      	lsls	r3, r3, #11
 8000b06:	b29a      	uxth	r2, r3
					+ ((int) (63.0 / 100.0 * bg) << 5)
 8000b08:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <main+0x1b4>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b12:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8000bc8 <main+0x198>
 8000b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b1e:	ee17 3a90 	vmov	r3, s15
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	015b      	lsls	r3, r3, #5
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
					+ ((int) (31.0 / 100.0 * bg));
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <main+0x1b4>)
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000bc0 <main+0x190>
 8000b3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b42:	ee17 3a90 	vmov	r3, s15
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
			bgCode = ((int) (31.0 / 100.0 * bg) << 11)
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x1a4>)
 8000b4e:	801a      	strh	r2, [r3, #0]
			ILI9341_Fill_Screen(bgCode);
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <main+0x1a4>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fe25 	bl	80027a4 <ILI9341_Fill_Screen>
		}
		if (state == 1) {
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <main+0x1bc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d105      	bne.n	8000b6e <main+0x13e>
			display1();
 8000b62:	f000 f921 	bl	8000da8 <display1>
			isState2 = 0;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <main+0x1c0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e78b      	b.n	8000a86 <main+0x56>
		} else if (state == 2 && isState2 == 0) {
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <main+0x1bc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d187      	bne.n	8000a86 <main+0x56>
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <main+0x1c0>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d183      	bne.n	8000a86 <main+0x56>
			display2();
 8000b7e:	f000 fc55 	bl	800142c <display2>
			isState2 = 1;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <main+0x1c0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
			if (count - startTime > 5000) {
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <main+0x1c4>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <main+0x1c8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b96:	4293      	cmp	r3, r2
 8000b98:	f67f af75 	bls.w	8000a86 <main+0x56>
				state = 1;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <main+0x1bc>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
				ILI9341_Fill_Screen(bgCode);
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <main+0x1a4>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fdfc 	bl	80027a4 <ILI9341_Fill_Screen>
		if (abs(last_adc_val - adc_val) > 150) {
 8000bac:	e76b      	b.n	8000a86 <main+0x56>
 8000bae:	bf00      	nop
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	40affe00 	.word	0x40affe00
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	40590000 	.word	0x40590000
 8000bc0:	3d70a3d7 	.word	0x3d70a3d7
 8000bc4:	3fd3d70a 	.word	0x3fd3d70a
 8000bc8:	c28f5c29 	.word	0xc28f5c29
 8000bcc:	3fe428f5 	.word	0x3fe428f5
 8000bd0:	2000026c 	.word	0x2000026c
 8000bd4:	2000001c 	.word	0x2000001c
 8000bd8:	20000344 	.word	0x20000344
 8000bdc:	2000001e 	.word	0x2000001e
 8000be0:	20000014 	.word	0x20000014
 8000be4:	20000018 	.word	0x20000018
 8000be8:	41a00000 	.word	0x41a00000
 8000bec:	20000020 	.word	0x20000020
 8000bf0:	2000027e 	.word	0x2000027e
 8000bf4:	20000264 	.word	0x20000264
 8000bf8:	20000278 	.word	0x20000278

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b8      	sub	sp, #224	; 0xe0
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c06:	2234      	movs	r2, #52	; 0x34
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 fc01 	bl	8007412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	2290      	movs	r2, #144	; 0x90
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f006 fbf2 	bl	8007412 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c2e:	f003 f8bb 	bl	8003da8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <SystemClock_Config+0x128>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a3b      	ldr	r2, [pc, #236]	; (8000d24 <SystemClock_Config+0x128>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <SystemClock_Config+0x128>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <SystemClock_Config+0x12c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <SystemClock_Config+0x12c>)
 8000c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <SystemClock_Config+0x12c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c84:	23d8      	movs	r3, #216	; 0xd8
 8000c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c90:	2309      	movs	r3, #9
 8000c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f8e1 	bl	8003e68 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cac:	f000 fc36 	bl	800151c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cb0:	f003 f88a 	bl	8003dc8 <HAL_PWREx_EnableOverDrive>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cba:	f000 fc2f 	bl	800151c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ce0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fb6c 	bl	80043c4 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000cf2:	f000 fc13 	bl	800151c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <SystemClock_Config+0x130>)
 8000cf8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fd7f 	bl	8004810 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000d18:	f000 fc00 	bl	800151c <Error_Handler>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	37e0      	adds	r7, #224	; 0xe0
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000
 8000d2c:	00204100 	.word	0x00204100

08000d30 <CRC16_2>:

	i = (i == 15 ? 0 : i + 1);

	return totle >> 4;
}
uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d40:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	737b      	strb	r3, [r7, #13]

	while (lenght--) {
 8000d46:	e023      	b.n	8000d90 <CRC16_2+0x60>
		crc ^= *ptr++;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	4053      	eors	r3, r2
 8000d56:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	e015      	b.n	8000d8a <CRC16_2+0x5a>
			if ((crc & 0x01) != 0) {
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00a      	beq.n	8000d7e <CRC16_2+0x4e>
				crc >>= 1;
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	085b      	lsrs	r3, r3, #1
 8000d6c:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000d74:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	81fb      	strh	r3, [r7, #14]
 8000d7c:	e002      	b.n	8000d84 <CRC16_2+0x54>
			} else {
				crc >>= 1;
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	085b      	lsrs	r3, r3, #1
 8000d82:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++) {
 8000d84:	7b7b      	ldrb	r3, [r7, #13]
 8000d86:	3301      	adds	r3, #1
 8000d88:	737b      	strb	r3, [r7, #13]
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	2b07      	cmp	r3, #7
 8000d8e:	d9e6      	bls.n	8000d5e <CRC16_2+0x2e>
	while (lenght--) {
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	70fa      	strb	r2, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1d6      	bne.n	8000d48 <CRC16_2+0x18>
			}
		}
	}
	return crc;
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <display1>:
void display1() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	ed2d 8b02 	vpush	{d8}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 8000db2:	23c8      	movs	r3, #200	; 0xc8
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2303      	movs	r3, #3
 8000db8:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <display1+0xb4>)
 8000dba:	21b8      	movs	r1, #184	; 0xb8
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <display1+0xb8>)
 8000dbe:	f002 fb91 	bl	80034e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 8000dc2:	23c8      	movs	r3, #200	; 0xc8
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <display1+0xb4>)
 8000dca:	21b8      	movs	r1, #184	; 0xb8
 8000dcc:	4824      	ldr	r0, [pc, #144]	; (8000e60 <display1+0xb8>)
 8000dce:	f002 fb89 	bl	80034e4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f001 ffe2 	bl	8002d9c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1, dataBuffer, 8, 200);
 8000dd8:	23c8      	movs	r3, #200	; 0xc8
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2308      	movs	r3, #8
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <display1+0xbc>)
 8000de0:	21b8      	movs	r1, #184	; 0xb8
 8000de2:	481f      	ldr	r0, [pc, #124]	; (8000e60 <display1+0xb8>)
 8000de4:	f002 fc72 	bl	80036cc <HAL_I2C_Master_Receive>
	uint16_t Rcrc = dataBuffer[7] << 8;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <display1+0xbc>)
 8000dea:	79db      	ldrb	r3, [r3, #7]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	84fb      	strh	r3, [r7, #38]	; 0x26
	Rcrc += dataBuffer[6];
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <display1+0xbc>)
 8000df4:	799b      	ldrb	r3, [r3, #6]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dfa:	4413      	add	r3, r2
 8000dfc:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8000dfe:	2106      	movs	r1, #6
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <display1+0xbc>)
 8000e02:	f7ff ff95 	bl	8000d30 <CRC16_2>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d14b      	bne.n	8000ea8 <display1+0x100>
		uint16_t temp = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <display1+0xbc>)
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <display1+0xbc>)
 8000e20:	795b      	ldrb	r3, [r3, #5]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	84bb      	strh	r3, [r7, #36]	; 0x24
		t = temp / 10.0;
 8000e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e32:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000e36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <display1+0xc0>)
 8000e40:	edc3 7a00 	vstr	s15, [r3]
		t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <display1+0xbc>)
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	09db      	lsrs	r3, r3, #7
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10d      	bne.n	8000e6c <display1+0xc4>
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <display1+0xc0>)
 8000e52:	edd3 7a00 	vldr	s15, [r3]
 8000e56:	eef1 7a67 	vneg.f32	s15, s15
 8000e5a:	e00a      	b.n	8000e72 <display1+0xca>
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	20000218 	.word	0x20000218
 8000e64:	20000270 	.word	0x20000270
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	4bcd      	ldr	r3, [pc, #820]	; (80011a4 <display1+0x3fc>)
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	4bcc      	ldr	r3, [pc, #816]	; (80011a4 <display1+0x3fc>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3];
 8000e78:	4bcb      	ldr	r3, [pc, #812]	; (80011a8 <display1+0x400>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4bc9      	ldr	r3, [pc, #804]	; (80011a8 <display1+0x400>)
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	847b      	strh	r3, [r7, #34]	; 0x22
		h = humi / 10.0;
 8000e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e96:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000e9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea2:	4bc2      	ldr	r3, [pc, #776]	; (80011ac <display1+0x404>)
 8000ea4:	edc3 7a00 	vstr	s15, [r3]
	}

	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f001 fa71 	bl	8002390 <ILI9341_Set_Rotation>
	char Temp_Buffer_text[20];
	sprintf(Temp_Buffer_text, "%.1f C", t);
 8000eae:	4bbd      	ldr	r3, [pc, #756]	; (80011a4 <display1+0x3fc>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eb8:	1d38      	adds	r0, r7, #4
 8000eba:	ec53 2b17 	vmov	r2, r3, d7
 8000ebe:	49bc      	ldr	r1, [pc, #752]	; (80011b0 <display1+0x408>)
 8000ec0:	f006 fa44 	bl	800734c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 15, 20, BLACK, 2, bgCode);
 8000ec4:	4bbb      	ldr	r3, [pc, #748]	; (80011b4 <display1+0x40c>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	1d38      	adds	r0, r7, #4
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2302      	movs	r3, #2
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2214      	movs	r2, #20
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	f000 ffab 	bl	8001e30 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "%.1f %%RH", h);
 8000eda:	4bb4      	ldr	r3, [pc, #720]	; (80011ac <display1+0x404>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee4:	1d38      	adds	r0, r7, #4
 8000ee6:	ec53 2b17 	vmov	r2, r3, d7
 8000eea:	49b3      	ldr	r1, [pc, #716]	; (80011b8 <display1+0x410>)
 8000eec:	f006 fa2e 	bl	800734c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 170, 20, BLACK, 2, bgCode);
 8000ef0:	4bb0      	ldr	r3, [pc, #704]	; (80011b4 <display1+0x40c>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	1d38      	adds	r0, r7, #4
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	2214      	movs	r2, #20
 8000f00:	21aa      	movs	r1, #170	; 0xaa
 8000f02:	f000 ff95 	bl	8001e30 <ILI9341_Draw_Text>

	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000f06:	2003      	movs	r0, #3
 8000f08:	f001 fa42 	bl	8002390 <ILI9341_Set_Rotation>
	uint16_t position_array[2];
	if (TP_Touchpad_Pressed()) {
 8000f0c:	f001 feca 	bl	8002ca4 <TP_Touchpad_Pressed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8127 	beq.w	8001166 <display1+0x3be>
		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fe00 	bl	8002b20 <TP_Read_Coordinates>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	f040 811f 	bne.w	8001166 <display1+0x3be>
			y_pos = position_array[0];
 8000f28:	883a      	ldrh	r2, [r7, #0]
 8000f2a:	4ba4      	ldr	r3, [pc, #656]	; (80011bc <display1+0x414>)
 8000f2c:	801a      	strh	r2, [r3, #0]
			x_pos = position_array[1];
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	4ba3      	ldr	r3, [pc, #652]	; (80011c0 <display1+0x418>)
 8000f32:	801a      	strh	r2, [r3, #0]
			//ILI9341_Fill_Screen(bgCode);
			y_pos = 240-y_pos;
 8000f34:	4ba1      	ldr	r3, [pc, #644]	; (80011bc <display1+0x414>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b9f      	ldr	r3, [pc, #636]	; (80011bc <display1+0x414>)
 8000f40:	801a      	strh	r2, [r3, #0]
//			sprintf(Temp_Buffer_text, "%d %d", x_pos,y_pos);
//			ILI9341_Draw_Text(Temp_Buffer_text, 10, 65, BLACK, 2, bgCode);
			if (sqrt(pow(x_pos - 30, 2) + pow(y_pos - 85, 2)) <= 22.0) {
 8000f42:	4b9f      	ldr	r3, [pc, #636]	; (80011c0 <display1+0x418>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	3b1e      	subs	r3, #30
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f50:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f54:	eeb0 0b47 	vmov.f64	d0, d7
 8000f58:	f008 fb22 	bl	80095a0 <pow>
 8000f5c:	eeb0 8b40 	vmov.f64	d8, d0
 8000f60:	4b96      	ldr	r3, [pc, #600]	; (80011bc <display1+0x414>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	3b55      	subs	r3, #85	; 0x55
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f72:	eeb0 0b47 	vmov.f64	d0, d7
 8000f76:	f008 fb13 	bl	80095a0 <pow>
 8000f7a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f7e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f82:	eeb0 0b47 	vmov.f64	d0, d7
 8000f86:	f008 fab7 	bl	80094f8 <sqrt>
 8000f8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8e:	eeb3 6b06 	vmov.f64	d6, #54	; 0x41b00000  22.0
 8000f92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9a:	d81c      	bhi.n	8000fd6 <display1+0x22e>
				R += 10.0;
 8000f9c:	4b89      	ldr	r3, [pc, #548]	; (80011c4 <display1+0x41c>)
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000faa:	4b86      	ldr	r3, [pc, #536]	; (80011c4 <display1+0x41c>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
				if (R > 100) {
 8000fb0:	4b84      	ldr	r3, [pc, #528]	; (80011c4 <display1+0x41c>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80011c8 <display1+0x420>
 8000fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	dd08      	ble.n	8000fd6 <display1+0x22e>
					R = 0;
 8000fc4:	4b7f      	ldr	r3, [pc, #508]	; (80011c4 <display1+0x41c>)
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
					ILI9341_Fill_Screen(bgCode);
 8000fcc:	4b79      	ldr	r3, [pc, #484]	; (80011b4 <display1+0x40c>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fbe7 	bl	80027a4 <ILI9341_Fill_Screen>
				}
			}
			if (sqrt(pow(x_pos - 30, 2) + pow(y_pos - 145, 2)) <= 22.0) {
 8000fd6:	4b7a      	ldr	r3, [pc, #488]	; (80011c0 <display1+0x418>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	3b1e      	subs	r3, #30
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fe4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fe8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fec:	f008 fad8 	bl	80095a0 <pow>
 8000ff0:	eeb0 8b40 	vmov.f64	d8, d0
 8000ff4:	4b71      	ldr	r3, [pc, #452]	; (80011bc <display1+0x414>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	3b91      	subs	r3, #145	; 0x91
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001002:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001006:	eeb0 0b47 	vmov.f64	d0, d7
 800100a:	f008 fac9 	bl	80095a0 <pow>
 800100e:	eeb0 7b40 	vmov.f64	d7, d0
 8001012:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001016:	eeb0 0b47 	vmov.f64	d0, d7
 800101a:	f008 fa6d 	bl	80094f8 <sqrt>
 800101e:	eeb0 7b40 	vmov.f64	d7, d0
 8001022:	eeb3 6b06 	vmov.f64	d6, #54	; 0x41b00000  22.0
 8001026:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	d81c      	bhi.n	800106a <display1+0x2c2>
				G += 10.0;
 8001030:	4b66      	ldr	r3, [pc, #408]	; (80011cc <display1+0x424>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <display1+0x424>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
				if (G > 100) {
 8001044:	4b61      	ldr	r3, [pc, #388]	; (80011cc <display1+0x424>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80011c8 <display1+0x420>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd08      	ble.n	800106a <display1+0x2c2>
					G = 0;
 8001058:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <display1+0x424>)
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
					ILI9341_Fill_Screen(bgCode);
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <display1+0x40c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fb9d 	bl	80027a4 <ILI9341_Fill_Screen>
				}
			}
			if (sqrt(pow(x_pos - 30, 2) + pow(y_pos - 205, 2)) <= 22.0) {
 800106a:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <display1+0x418>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	3b1e      	subs	r3, #30
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001078:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800107c:	eeb0 0b47 	vmov.f64	d0, d7
 8001080:	f008 fa8e 	bl	80095a0 <pow>
 8001084:	eeb0 8b40 	vmov.f64	d8, d0
 8001088:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <display1+0x414>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	3bcd      	subs	r3, #205	; 0xcd
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001096:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800109a:	eeb0 0b47 	vmov.f64	d0, d7
 800109e:	f008 fa7f 	bl	80095a0 <pow>
 80010a2:	eeb0 7b40 	vmov.f64	d7, d0
 80010a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80010aa:	eeb0 0b47 	vmov.f64	d0, d7
 80010ae:	f008 fa23 	bl	80094f8 <sqrt>
 80010b2:	eeb0 7b40 	vmov.f64	d7, d0
 80010b6:	eeb3 6b06 	vmov.f64	d6, #54	; 0x41b00000  22.0
 80010ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	d81c      	bhi.n	80010fe <display1+0x356>
				B += 10.0;
 80010c4:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <display1+0x428>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <display1+0x428>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]
				if (B > 100) {
 80010d8:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <display1+0x428>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80011c8 <display1+0x420>
 80010e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	dd08      	ble.n	80010fe <display1+0x356>
					B = 0;
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <display1+0x428>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
					ILI9341_Fill_Screen(bgCode);
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <display1+0x40c>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fb53 	bl	80027a4 <ILI9341_Fill_Screen>
				}
			}
			if (sqrt(pow(x_pos - 130, 2) + pow(y_pos - 32, 2)) <= 25.0) {
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <display1+0x418>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3b82      	subs	r3, #130	; 0x82
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800110c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001110:	eeb0 0b47 	vmov.f64	d0, d7
 8001114:	f008 fa44 	bl	80095a0 <pow>
 8001118:	eeb0 8b40 	vmov.f64	d8, d0
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <display1+0x414>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	3b20      	subs	r3, #32
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800112a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800112e:	eeb0 0b47 	vmov.f64	d0, d7
 8001132:	f008 fa35 	bl	80095a0 <pow>
 8001136:	eeb0 7b40 	vmov.f64	d7, d0
 800113a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800113e:	eeb0 0b47 	vmov.f64	d0, d7
 8001142:	f008 f9d9 	bl	80094f8 <sqrt>
 8001146:	eeb0 7b40 	vmov.f64	d7, d0
 800114a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 800114e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d806      	bhi.n	8001166 <display1+0x3be>
				state = 2;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <display1+0x42c>)
 800115a:	2202      	movs	r2, #2
 800115c:	601a      	str	r2, [r3, #0]
				startTime = count;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <display1+0x430>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <display1+0x434>)
 8001164:	6013      	str	r3, [r2, #0]
			}

		}
	}
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001166:	2001      	movs	r0, #1
 8001168:	f001 f912 	bl	8002390 <ILI9341_Set_Rotation>
	ILI9341_Draw_Filled_Circle(30, 85, 22, RED); //x y
 800116c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001170:	2216      	movs	r2, #22
 8001172:	2155      	movs	r1, #85	; 0x55
 8001174:	201e      	movs	r0, #30
 8001176:	f000 fd38 	bl	8001bea <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(30, 145, 22, GREEN);
 800117a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800117e:	2216      	movs	r2, #22
 8001180:	2191      	movs	r1, #145	; 0x91
 8001182:	201e      	movs	r0, #30
 8001184:	f000 fd31 	bl	8001bea <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(30, 205, 22, BLUE);
 8001188:	231f      	movs	r3, #31
 800118a:	2216      	movs	r2, #22
 800118c:	21cd      	movs	r1, #205	; 0xcd
 800118e:	201e      	movs	r0, #30
 8001190:	f000 fd2b 	bl	8001bea <ILI9341_Draw_Filled_Circle>

	mixColor = (((int) (31.0 * R / 100.0)) << 11)
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <display1+0x41c>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800119e:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 80011a2:	e01d      	b.n	80011e0 <display1+0x438>
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000270 	.word	0x20000270
 80011ac:	20000004 	.word	0x20000004
 80011b0:	08009b40 	.word	0x08009b40
 80011b4:	2000001c 	.word	0x2000001c
 80011b8:	08009b48 	.word	0x08009b48
 80011bc:	2000026a 	.word	0x2000026a
 80011c0:	20000268 	.word	0x20000268
 80011c4:	20000008 	.word	0x20000008
 80011c8:	42c80000 	.word	0x42c80000
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000010 	.word	0x20000010
 80011d4:	20000020 	.word	0x20000020
 80011d8:	20000264 	.word	0x20000264
 80011dc:	20000278 	.word	0x20000278
 80011e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011e4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 80013f8 <display1+0x650>
 80011e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	02db      	lsls	r3, r3, #11
 80011f8:	b29a      	uxth	r2, r3
			+ (((int) (63.0 * G / 100.0)) << 5) + (((int) (31.0 * B / 100.0)));
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <display1+0x668>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001204:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8001400 <display1+0x658>
 8001208:	ee27 6b06 	vmul.f64	d6, d7, d6
 800120c:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 80013f8 <display1+0x650>
 8001210:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001214:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001218:	ee17 3a90 	vmov	r3, s15
 800121c:	b29b      	uxth	r3, r3
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	b29b      	uxth	r3, r3
 8001222:	4413      	add	r3, r2
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <display1+0x66c>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001230:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8001234:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001238:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 80013f8 <display1+0x650>
 800123c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001240:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001244:	ee17 3a90 	vmov	r3, s15
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b29a      	uxth	r2, r3
	mixColor = (((int) (31.0 * R / 100.0)) << 11)
 800124e:	4b72      	ldr	r3, [pc, #456]	; (8001418 <display1+0x670>)
 8001250:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Filled_Circle(130, 32, 25, mixColor);
 8001252:	4b71      	ldr	r3, [pc, #452]	; (8001418 <display1+0x670>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2219      	movs	r2, #25
 8001258:	2120      	movs	r1, #32
 800125a:	2082      	movs	r0, #130	; 0x82
 800125c:	f000 fcc5 	bl	8001bea <ILI9341_Draw_Filled_Circle>

	int w1, w2;
	w1 = (int) (R * 1.35);
 8001260:	4b6e      	ldr	r3, [pc, #440]	; (800141c <display1+0x674>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800126a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001408 <display1+0x660>
 800126e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001272:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001276:	ee17 3a90 	vmov	r3, s15
 800127a:	61fb      	str	r3, [r7, #28]
	w2 = 135 - w1;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 8001282:	61bb      	str	r3, [r7, #24]
	ILI9341_Draw_Rectangle(60, 70, w1, 30, 0xF800);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	b29a      	uxth	r2, r3
 8001288:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	231e      	movs	r3, #30
 8001290:	2146      	movs	r1, #70	; 0x46
 8001292:	203c      	movs	r0, #60	; 0x3c
 8001294:	f001 fb86 	bl	80029a4 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(60 + w1, 70, w2, 30, 0xFC10);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	b29b      	uxth	r3, r3
 800129c:	333c      	adds	r3, #60	; 0x3c
 800129e:	b298      	uxth	r0, r3
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	231e      	movs	r3, #30
 80012ac:	2146      	movs	r1, #70	; 0x46
 80012ae:	f001 fb79 	bl	80029a4 <ILI9341_Draw_Rectangle>
	sprintf(Temp_Buffer_text, "%.0f %%", R);
 80012b2:	4b5a      	ldr	r3, [pc, #360]	; (800141c <display1+0x674>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012bc:	1d38      	adds	r0, r7, #4
 80012be:	ec53 2b17 	vmov	r2, r3, d7
 80012c2:	4957      	ldr	r1, [pc, #348]	; (8001420 <display1+0x678>)
 80012c4:	f006 f842 	bl	800734c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 205, 77, BLACK, 2, bgCode);
 80012c8:	4b56      	ldr	r3, [pc, #344]	; (8001424 <display1+0x67c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	1d38      	adds	r0, r7, #4
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2302      	movs	r3, #2
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	224d      	movs	r2, #77	; 0x4d
 80012d8:	21cd      	movs	r1, #205	; 0xcd
 80012da:	f000 fda9 	bl	8001e30 <ILI9341_Draw_Text>

	w1 = (int) (G * 1.35);
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <display1+0x668>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e8:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001408 <display1+0x660>
 80012ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	61fb      	str	r3, [r7, #28]
	w2 = 135 - w1;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 8001300:	61bb      	str	r3, [r7, #24]
	ILI9341_Draw_Rectangle(60, 130, w1, 30, GREEN);
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	b29a      	uxth	r2, r3
 8001306:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	231e      	movs	r3, #30
 800130e:	2182      	movs	r1, #130	; 0x82
 8001310:	203c      	movs	r0, #60	; 0x3c
 8001312:	f001 fb47 	bl	80029a4 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(60 + w1, 130, w2, 30, 0x87F0);
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	b29b      	uxth	r3, r3
 800131a:	333c      	adds	r3, #60	; 0x3c
 800131c:	b298      	uxth	r0, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	b29a      	uxth	r2, r3
 8001322:	f248 73f0 	movw	r3, #34800	; 0x87f0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	231e      	movs	r3, #30
 800132a:	2182      	movs	r1, #130	; 0x82
 800132c:	f001 fb3a 	bl	80029a4 <ILI9341_Draw_Rectangle>
	sprintf(Temp_Buffer_text, "%.0f %%", G);
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <display1+0x668>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800133a:	1d38      	adds	r0, r7, #4
 800133c:	ec53 2b17 	vmov	r2, r3, d7
 8001340:	4937      	ldr	r1, [pc, #220]	; (8001420 <display1+0x678>)
 8001342:	f006 f803 	bl	800734c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 205, 137, BLACK, 2, bgCode);
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <display1+0x67c>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	1d38      	adds	r0, r7, #4
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	2302      	movs	r3, #2
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2289      	movs	r2, #137	; 0x89
 8001356:	21cd      	movs	r1, #205	; 0xcd
 8001358:	f000 fd6a 	bl	8001e30 <ILI9341_Draw_Text>

	w1 = (int) (B * 1.35);
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <display1+0x66c>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001366:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001408 <display1+0x660>
 800136a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800136e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	61fb      	str	r3, [r7, #28]
	w2 = 135 - w1;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 800137e:	61bb      	str	r3, [r7, #24]
	ILI9341_Draw_Rectangle(60, 190, w1, 30, BLUE);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	b29a      	uxth	r2, r3
 8001384:	231f      	movs	r3, #31
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	231e      	movs	r3, #30
 800138a:	21be      	movs	r1, #190	; 0xbe
 800138c:	203c      	movs	r0, #60	; 0x3c
 800138e:	f001 fb09 	bl	80029a4 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(60 + w1, 190, w2, 30, 0x841F);
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	b29b      	uxth	r3, r3
 8001396:	333c      	adds	r3, #60	; 0x3c
 8001398:	b298      	uxth	r0, r3
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	b29a      	uxth	r2, r3
 800139e:	f248 431f 	movw	r3, #33823	; 0x841f
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	231e      	movs	r3, #30
 80013a6:	21be      	movs	r1, #190	; 0xbe
 80013a8:	f001 fafc 	bl	80029a4 <ILI9341_Draw_Rectangle>
	sprintf(Temp_Buffer_text, "%.0f %%", B);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <display1+0x66c>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b6:	1d38      	adds	r0, r7, #4
 80013b8:	ec53 2b17 	vmov	r2, r3, d7
 80013bc:	4918      	ldr	r1, [pc, #96]	; (8001420 <display1+0x678>)
 80013be:	f005 ffc5 	bl	800734c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 205, 197, BLACK, 2, bgCode);
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <display1+0x67c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	1d38      	adds	r0, r7, #4
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2302      	movs	r3, #2
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	22c5      	movs	r2, #197	; 0xc5
 80013d2:	21cd      	movs	r1, #205	; 0xcd
 80013d4:	f000 fd2c 	bl	8001e30 <ILI9341_Draw_Text>
	if (state == 2) {
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <display1+0x680>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d104      	bne.n	80013ea <display1+0x642>
		ILI9341_Fill_Screen(bgCode);
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <display1+0x67c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f9dd 	bl	80027a4 <ILI9341_Fill_Screen>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	ecbd 8b02 	vpop	{d8}
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40590000 	.word	0x40590000
 8001400:	00000000 	.word	0x00000000
 8001404:	404f8000 	.word	0x404f8000
 8001408:	9999999a 	.word	0x9999999a
 800140c:	3ff59999 	.word	0x3ff59999
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000010 	.word	0x20000010
 8001418:	2000027c 	.word	0x2000027c
 800141c:	20000008 	.word	0x20000008
 8001420:	08009b54 	.word	0x08009b54
 8001424:	2000001c 	.word	0x2000001c
 8001428:	20000020 	.word	0x20000020

0800142c <display2>:
void display2() {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 ffac 	bl	8002390 <ILI9341_Set_Rotation>
	ILI9341_Draw_Image((const char*) img_view, SCREEN_HORIZONTAL_1);
 8001438:	2101      	movs	r1, #1
 800143a:	482e      	ldr	r0, [pc, #184]	; (80014f4 <display2+0xc8>)
 800143c:	f000 fd28 	bl	8001e90 <ILI9341_Draw_Image>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 ffa5 	bl	8002390 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Group No.5", 200, 90, mixColor, 1, bgCode);
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <display2+0xcc>)
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <display2+0xd0>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	2301      	movs	r3, #1
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	225a      	movs	r2, #90	; 0x5a
 8001458:	21c8      	movs	r1, #200	; 0xc8
 800145a:	4829      	ldr	r0, [pc, #164]	; (8001500 <display2+0xd4>)
 800145c:	f000 fce8 	bl	8001e30 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Boonyawee", 200, 110, mixColor, 1, bgCode);
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <display2+0xcc>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <display2+0xd0>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2301      	movs	r3, #1
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	226e      	movs	r2, #110	; 0x6e
 8001472:	21c8      	movs	r1, #200	; 0xc8
 8001474:	4823      	ldr	r0, [pc, #140]	; (8001504 <display2+0xd8>)
 8001476:	f000 fcdb 	bl	8001e30 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Kreesaeng", 200, 130, mixColor, 1, bgCode);
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <display2+0xcc>)
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <display2+0xd0>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	2301      	movs	r3, #1
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	2282      	movs	r2, #130	; 0x82
 800148c:	21c8      	movs	r1, #200	; 0xc8
 800148e:	481e      	ldr	r0, [pc, #120]	; (8001508 <display2+0xdc>)
 8001490:	f000 fcce 	bl	8001e30 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("64010459", 200, 150, mixColor, 1, bgCode);
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <display2+0xcc>)
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <display2+0xd0>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	2296      	movs	r2, #150	; 0x96
 80014a6:	21c8      	movs	r1, #200	; 0xc8
 80014a8:	4818      	ldr	r0, [pc, #96]	; (800150c <display2+0xe0>)
 80014aa:	f000 fcc1 	bl	8001e30 <ILI9341_Draw_Text>
	while(1){
		if (count - startTime > 5000) {
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <display2+0xe4>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <display2+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014bc:	4293      	cmp	r3, r2
 80014be:	d908      	bls.n	80014d2 <display2+0xa6>
			state = 1;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <display2+0xec>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
			ILI9341_Fill_Screen(bgCode);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <display2+0xd0>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f96a 	bl	80027a4 <ILI9341_Fill_Screen>
			break;
 80014d0:	e00c      	b.n	80014ec <display2+0xc0>
		}
	if (TP_Touchpad_Pressed()) {
 80014d2:	f001 fbe7 	bl	8002ca4 <TP_Touchpad_Pressed>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0e8      	beq.n	80014ae <display2+0x82>
		state = 1;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <display2+0xec>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
		ILI9341_Fill_Screen(bgCode);
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <display2+0xd0>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f95c 	bl	80027a4 <ILI9341_Fill_Screen>
		break;

	}}
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08009b8c 	.word	0x08009b8c
 80014f8:	2000027c 	.word	0x2000027c
 80014fc:	2000001c 	.word	0x2000001c
 8001500:	08009b5c 	.word	0x08009b5c
 8001504:	08009b68 	.word	0x08009b68
 8001508:	08009b74 	.word	0x08009b74
 800150c:	08009b80 	.word	0x08009b80
 8001510:	20000264 	.word	0x20000264
 8001514:	20000278 	.word	0x20000278
 8001518:	20000020 	.word	0x20000020

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x4>
	...

08001524 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_RNG_Init+0x20>)
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <MX_RNG_Init+0x24>)
 800152c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_RNG_Init+0x20>)
 8001530:	f003 fd96 	bl	8005060 <HAL_RNG_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800153a:	f7ff ffef 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000280 	.word	0x20000280
 8001548:	50060800 	.word	0x50060800

0800154c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_RNG_MspInit+0x38>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10b      	bne.n	8001576 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_RNG_MspInit+0x3c>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_RNG_MspInit+0x3c>)
 8001564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001568:	6353      	str	r3, [r2, #52]	; 0x34
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_RNG_MspInit+0x3c>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	50060800 	.word	0x50060800
 8001588:	40023800 	.word	0x40023800

0800158c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_SPI5_Init+0x74>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <MX_SPI5_Init+0x78>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_SPI5_Init+0x74>)
 8001598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800159c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_SPI5_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_SPI5_Init+0x74>)
 80015a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015aa:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_SPI5_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_SPI5_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_SPI5_Init+0x74>)
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_SPI5_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_SPI5_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_SPI5_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_SPI5_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_SPI5_Init+0x74>)
 80015da:	2207      	movs	r2, #7
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_SPI5_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_SPI5_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_SPI5_Init+0x74>)
 80015ec:	f003 fd62 	bl	80050b4 <HAL_SPI_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f7ff ff91 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000290 	.word	0x20000290
 8001604:	40015000 	.word	0x40015000

08001608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_SPI_MspInit+0x7c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d128      	bne.n	800167c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_SPI_MspInit+0x80>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_SPI_MspInit+0x80>)
 8001630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_SPI_MspInit+0x80>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_SPI_MspInit+0x80>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_SPI_MspInit+0x80>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_SPI_MspInit+0x80>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800165a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800166c:	2305      	movs	r3, #5
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_SPI_MspInit+0x84>)
 8001678:	f001 fcc6 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40015000 	.word	0x40015000
 8001688:	40023800 	.word	0x40023800
 800168c:	40021400 	.word	0x40021400

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x44>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x44>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x44>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x44>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x44>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x44>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f001 fb3e 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <TIM2_IRQHandler+0x18>)
 80016ea:	f004 f92d 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  count++;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <TIM2_IRQHandler+0x1c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a02      	ldr	r2, [pc, #8]	; (8001700 <TIM2_IRQHandler+0x1c>)
 80016f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000344 	.word	0x20000344
 8001700:	20000264 	.word	0x20000264

08001704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_kill>:

int _kill(int pid, int sig)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171e:	f005 fecb 	bl	80074b8 <__errno>
 8001722:	4603      	mov	r3, r0
 8001724:	2216      	movs	r2, #22
 8001726:	601a      	str	r2, [r3, #0]
	return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_exit>:

void _exit (int status)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffe7 	bl	8001714 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001746:	e7fe      	b.n	8001746 <_exit+0x12>

08001748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
	}

return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e009      	b.n	80017a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf1      	blt.n	8001794 <_write+0x12>
	}
	return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_close>:

int _close(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e2:	605a      	str	r2, [r3, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_isatty>:

int _isatty(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f005 fe30 	bl	80074b8 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20080000 	.word	0x20080000
 8001884:	00000400 	.word	0x00000400
 8001888:	200002f4 	.word	0x200002f4
 800188c:	20000568 	.word	0x20000568

08001890 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <SystemInit+0x5c>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <SystemInit+0x5c>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <SystemInit+0x60>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <SystemInit+0x60>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <SystemInit+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <SystemInit+0x60>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <SystemInit+0x60>)
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <SystemInit+0x64>)
 80018be:	4013      	ands	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <SystemInit+0x60>)
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <SystemInit+0x68>)
 80018c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <SystemInit+0x60>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <SystemInit+0x60>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SystemInit+0x60>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SystemInit+0x5c>)
 80018dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e0:	609a      	str	r2, [r3, #8]
#endif
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	fef6ffff 	.word	0xfef6ffff
 80018f8:	24003010 	.word	0x24003010

080018fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <MX_TIM1_Init+0xa0>)
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <MX_TIM1_Init+0xa4>)
 800191e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_TIM1_Init+0xa0>)
 8001922:	f242 720f 	movw	r2, #9999	; 0x270f
 8001926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_TIM1_Init+0xa0>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_TIM1_Init+0xa0>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_TIM1_Init+0xa0>)
 8001936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_TIM1_Init+0xa0>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_TIM1_Init+0xa0>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <MX_TIM1_Init+0xa0>)
 800194a:	f003 ff2d 	bl	80057a8 <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001954:	f7ff fde2 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <MX_TIM1_Init+0xa0>)
 8001966:	f004 f90f 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001970:	f7ff fdd4 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_TIM1_Init+0xa0>)
 8001986:	f004 fb31 	bl	8005fec <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001990:	f7ff fdc4 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200002f8 	.word	0x200002f8
 80019a0:	40010000 	.word	0x40010000

080019a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21600-0;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019cc:	f245 4260 	movw	r2, #21600	; 0x5460
 80019d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5-1;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019da:	2204      	movs	r2, #4
 80019dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ec:	f003 fedc 	bl	80057a8 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019f6:	f7ff fd91 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a08:	f004 f8be 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a12:	f7ff fd83 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a24:	f004 fae2 	bl	8005fec <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a2e:	f7ff fd75 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000344 	.word	0x20000344

08001a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <HAL_TIM_Base_MspInit+0x68>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10c      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a6a:	e018      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d113      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2101      	movs	r1, #1
 8001a92:	201c      	movs	r0, #28
 8001a94:	f001 fa81 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a98:	201c      	movs	r0, #28
 8001a9a:	f001 fa9a 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <MX_USART3_UART_Init+0x5c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART3_UART_Init+0x58>)
 8001af4:	f004 fb26 	bl	8006144 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001afe:	f7ff fd0d 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000390 	.word	0x20000390
 8001b0c:	40004800 	.word	0x40004800

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_UART_MspInit+0x7c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d128      	bne.n	8001b84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_MspInit+0x80>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b74:	2307      	movs	r3, #7
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_MspInit+0x84>)
 8001b80:	f001 fa42 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	; 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020c00 	.word	0x40020c00

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b9e:	e003      	b.n	8001ba8 <LoopCopyDataInit>

08001ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ba6:	3104      	adds	r1, #4

08001ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba8:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bb0:	d3f6      	bcc.n	8001ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bb4:	e002      	b.n	8001bbc <LoopFillZerobss>

08001bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb8:	f842 3b04 	str.w	r3, [r2], #4

08001bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bc0:	d3f9      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff fe65 	bl	8001890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f005 fc7d 	bl	80074c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7fe ff31 	bl	8000a30 <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001bd4:	08031220 	.word	0x08031220
  ldr  r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bdc:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8001be0:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8001be4:	20000564 	.word	0x20000564

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>

08001bea <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001bea:	b590      	push	{r4, r7, lr}
 8001bec:	b08b      	sub	sp, #44	; 0x2c
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	4608      	mov	r0, r1
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	80bb      	strh	r3, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	f1c3 0301 	rsb	r3, r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001c22:	e061      	b.n	8001ce8 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e018      	b.n	8001c60 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	b298      	uxth	r0, r3
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	883a      	ldrh	r2, [r7, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f000 fdd6 	bl	80027f0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	b298      	uxth	r0, r3
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	88ba      	ldrh	r2, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	883a      	ldrh	r2, [r7, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f000 fdcb 	bl	80027f0 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	88fa      	ldrh	r2, [r7, #6]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dde0      	ble.n	8001c2e <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e018      	b.n	8001ca8 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	88bb      	ldrh	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	883a      	ldrh	r2, [r7, #0]
 8001c86:	4619      	mov	r1, r3
 8001c88:	f000 fdb2 	bl	80027f0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	b298      	uxth	r0, r3
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	88ba      	ldrh	r2, [r7, #4]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	883a      	ldrh	r2, [r7, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f000 fda7 	bl	80027f0 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	4413      	add	r3, r2
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dde0      	ble.n	8001c76 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005a      	lsls	r2, r3, #1
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	dd09      	ble.n	8001ce8 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	da99      	bge.n	8001c24 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	372c      	adds	r7, #44	; 0x2c
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}
	...

08001cfc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	71fb      	strb	r3, [r7, #7]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71bb      	strb	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	717b      	strb	r3, [r7, #5]
 8001d16:	4613      	mov	r3, r2
 8001d18:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	2b1f      	cmp	r3, #31
 8001d22:	d802      	bhi.n	8001d2a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	e002      	b.n	8001d30 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	3b20      	subs	r3, #32
 8001d2e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	753b      	strb	r3, [r7, #20]
 8001d34:	e012      	b.n	8001d5c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001d36:	7dfa      	ldrb	r2, [r7, #23]
 8001d38:	7d38      	ldrb	r0, [r7, #20]
 8001d3a:	7d39      	ldrb	r1, [r7, #20]
 8001d3c:	4c3b      	ldr	r4, [pc, #236]	; (8001e2c <ILI9341_Draw_Char+0x130>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4423      	add	r3, r4
 8001d48:	4403      	add	r3, r0
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	f101 0318 	add.w	r3, r1, #24
 8001d50:	443b      	add	r3, r7
 8001d52:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001d56:	7d3b      	ldrb	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	753b      	strb	r3, [r7, #20]
 8001d5c:	7d3b      	ldrb	r3, [r7, #20]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d9e9      	bls.n	8001d36 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	b298      	uxth	r0, r3
 8001d66:	797b      	ldrb	r3, [r7, #5]
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	b29c      	uxth	r4, r3
 8001d7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4623      	mov	r3, r4
 8001d82:	f000 fe0f 	bl	80029a4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	757b      	strb	r3, [r7, #21]
 8001d8a:	e047      	b.n	8001e1c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75bb      	strb	r3, [r7, #22]
 8001d90:	e03e      	b.n	8001e10 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001d92:	7d7b      	ldrb	r3, [r7, #21]
 8001d94:	3318      	adds	r3, #24
 8001d96:	443b      	add	r3, r7
 8001d98:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	7dbb      	ldrb	r3, [r7, #22]
 8001da0:	fa42 f303 	asr.w	r3, r2, r3
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02e      	beq.n	8001e0a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001dac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d110      	bne.n	8001dd4 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	7d7b      	ldrb	r3, [r7, #21]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	b298      	uxth	r0, r3
 8001dbe:	797b      	ldrb	r3, [r7, #5]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	7dbb      	ldrb	r3, [r7, #22]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f000 fd0f 	bl	80027f0 <ILI9341_Draw_Pixel>
 8001dd2:	e01a      	b.n	8001e0a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	7d7b      	ldrb	r3, [r7, #21]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001dde:	fb11 f303 	smulbb	r3, r1, r3
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	b298      	uxth	r0, r3
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	7dbb      	ldrb	r3, [r7, #22]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001df2:	fb11 f303 	smulbb	r3, r1, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	b299      	uxth	r1, r3
 8001dfc:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001dfe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4623      	mov	r3, r4
 8001e06:	f000 fdcd 	bl	80029a4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001e0a:	7dbb      	ldrb	r3, [r7, #22]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	75bb      	strb	r3, [r7, #22]
 8001e10:	7dbb      	ldrb	r3, [r7, #22]
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	d9bd      	bls.n	8001d92 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001e16:	7d7b      	ldrb	r3, [r7, #21]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	757b      	strb	r3, [r7, #21]
 8001e1c:	7d7b      	ldrb	r3, [r7, #21]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d9b4      	bls.n	8001d8c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	0802f3a4 	.word	0x0802f3a4

08001e30 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	4608      	mov	r0, r1
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	70fb      	strb	r3, [r7, #3]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70bb      	strb	r3, [r7, #2]
 8001e46:	4613      	mov	r3, r2
 8001e48:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001e4a:	e017      	b.n	8001e7c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	7818      	ldrb	r0, [r3, #0]
 8001e54:	883c      	ldrh	r4, [r7, #0]
 8001e56:	78ba      	ldrb	r2, [r7, #2]
 8001e58:	78f9      	ldrb	r1, [r7, #3]
 8001e5a:	8bbb      	ldrh	r3, [r7, #28]
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	8b3b      	ldrh	r3, [r7, #24]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4623      	mov	r3, r4
 8001e64:	f7ff ff4a 	bl	8001cfc <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001e68:	8b3b      	ldrh	r3, [r7, #24]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	0052      	lsls	r2, r2, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	4413      	add	r3, r2
 8001e7a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e3      	bne.n	8001e4c <ILI9341_Draw_Text+0x1c>
    }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}
	...

08001e90 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e9c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001ea0:	6018      	str	r0, [r3, #0]
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ea8:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001eac:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8001eae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001eb2:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d15e      	bne.n	8001f7a <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f000 fa67 	bl	8002390 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001ec2:	23f0      	movs	r3, #240	; 0xf0
 8001ec4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f9f6 	bl	80022bc <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed6:	48c4      	ldr	r0, [pc, #784]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8001ed8:	f001 fa5a 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee2:	48c1      	ldr	r0, [pc, #772]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8001ee4:	f001 fa54 	bl	8003390 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001ef4:	e035      	b.n	8001f62 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001efc:	e019      	b.n	8001f32 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001efe:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001f02:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f06:	4413      	add	r3, r2
 8001f08:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001f0c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	7819      	ldrb	r1, [r3, #0]
 8001f16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f1a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001f1e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f22:	4413      	add	r3, r2
 8001f24:	460a      	mov	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001f28:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001f32:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f3a:	d3e0      	bcc.n	8001efe <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001f3c:	f107 010c 	add.w	r1, r7, #12
 8001f40:	230a      	movs	r3, #10
 8001f42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f46:	48a9      	ldr	r0, [pc, #676]	; (80021ec <ILI9341_Draw_Image+0x35c>)
 8001f48:	f003 f95f 	bl	800520a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001f4c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f54:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001f58:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001f62:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f66:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001f6a:	d9c4      	bls.n	8001ef6 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f72:	489d      	ldr	r0, [pc, #628]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8001f74:	f001 fa0c 	bl	8003390 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8001f78:	e130      	b.n	80021dc <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8001f7a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f7e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d15e      	bne.n	8002046 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 fa01 	bl	8002390 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001f8e:	23f0      	movs	r3, #240	; 0xf0
 8001f90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f94:	2100      	movs	r1, #0
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f990 	bl	80022bc <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa2:	4891      	ldr	r0, [pc, #580]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8001fa4:	f001 f9f4 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fae:	488e      	ldr	r0, [pc, #568]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8001fb0:	f001 f9ee 	bl	8003390 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001fc0:	e035      	b.n	800202e <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001fc8:	e019      	b.n	8001ffe <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001fca:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001fce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001fd8:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	7819      	ldrb	r1, [r3, #0]
 8001fe2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001fe6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001fea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001fee:	4413      	add	r3, r2
 8001ff0:	460a      	mov	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001ff4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001ffe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002006:	d3e0      	bcc.n	8001fca <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002008:	f107 010c 	add.w	r1, r7, #12
 800200c:	230a      	movs	r3, #10
 800200e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002012:	4876      	ldr	r0, [pc, #472]	; (80021ec <ILI9341_Draw_Image+0x35c>)
 8002014:	f003 f8f9 	bl	800520a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002018:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800201c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002020:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002024:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002028:	3301      	adds	r3, #1
 800202a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800202e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002032:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002036:	d9c4      	bls.n	8001fc2 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203e:	486a      	ldr	r0, [pc, #424]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8002040:	f001 f9a6 	bl	8003390 <HAL_GPIO_WritePin>
}
 8002044:	e0ca      	b.n	80021dc <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8002046:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800204a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d15e      	bne.n	8002112 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8002054:	2002      	movs	r0, #2
 8002056:	f000 f99b 	bl	8002390 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 800205a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800205e:	22f0      	movs	r2, #240	; 0xf0
 8002060:	2100      	movs	r1, #0
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f92a 	bl	80022bc <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	485e      	ldr	r0, [pc, #376]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8002070:	f001 f98e 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207a:	485b      	ldr	r0, [pc, #364]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 800207c:	f001 f988 	bl	8003390 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800208c:	e035      	b.n	80020fa <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002094:	e019      	b.n	80020ca <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002096:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800209a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800209e:	4413      	add	r3, r2
 80020a0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80020a4:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	7819      	ldrb	r1, [r3, #0]
 80020ae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80020b2:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80020b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80020ba:	4413      	add	r3, r2
 80020bc:	460a      	mov	r2, r1
 80020be:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80020c0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80020c4:	3301      	adds	r3, #1
 80020c6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80020ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80020ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020d2:	d3e0      	bcc.n	8002096 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80020d4:	f107 010c 	add.w	r1, r7, #12
 80020d8:	230a      	movs	r3, #10
 80020da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020de:	4843      	ldr	r0, [pc, #268]	; (80021ec <ILI9341_Draw_Image+0x35c>)
 80020e0:	f003 f893 	bl	800520a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80020e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80020e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020ec:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80020f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80020f4:	3301      	adds	r3, #1
 80020f6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80020fa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80020fe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002102:	d9c4      	bls.n	800208e <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210a:	4837      	ldr	r0, [pc, #220]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 800210c:	f001 f940 	bl	8003390 <HAL_GPIO_WritePin>
}
 8002110:	e064      	b.n	80021dc <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8002112:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002116:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d15d      	bne.n	80021dc <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f935 	bl	8002390 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002126:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800212a:	22f0      	movs	r2, #240	; 0xf0
 800212c:	2100      	movs	r1, #0
 800212e:	2000      	movs	r0, #0
 8002130:	f000 f8c4 	bl	80022bc <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800213a:	482b      	ldr	r0, [pc, #172]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 800213c:	f001 f928 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002146:	4828      	ldr	r0, [pc, #160]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 8002148:	f001 f922 	bl	8003390 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002158:	e035      	b.n	80021c6 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002160:	e019      	b.n	8002196 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002162:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002166:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800216a:	4413      	add	r3, r2
 800216c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002170:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4413      	add	r3, r2
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800217e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002182:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002186:	4413      	add	r3, r2
 8002188:	460a      	mov	r2, r1
 800218a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800218c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002190:	3301      	adds	r3, #1
 8002192:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002196:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800219a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800219e:	d3e0      	bcc.n	8002162 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80021a0:	f107 010c 	add.w	r1, r7, #12
 80021a4:	230a      	movs	r3, #10
 80021a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021aa:	4810      	ldr	r0, [pc, #64]	; (80021ec <ILI9341_Draw_Image+0x35c>)
 80021ac:	f003 f82d 	bl	800520a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80021b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80021b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80021b8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80021bc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80021c0:	3301      	adds	r3, #1
 80021c2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80021c6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80021ca:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80021ce:	d9c4      	bls.n	800215a <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <ILI9341_Draw_Image+0x358>)
 80021d8:	f001 f8da 	bl	8003390 <HAL_GPIO_WritePin>
}
 80021dc:	bf00      	nop
 80021de:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40020800 	.word	0x40020800
 80021ec:	20000290 	.word	0x20000290

080021f0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80021f4:	f7ff f9ca 	bl	800158c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80021f8:	f7fe f9f8 	bl	80005ec <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002202:	4802      	ldr	r0, [pc, #8]	; (800220c <ILI9341_SPI_Init+0x1c>)
 8002204:	f001 f8c4 	bl	8003390 <HAL_GPIO_WritePin>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40020800 	.word	0x40020800

08002210 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800221a:	1df9      	adds	r1, r7, #7
 800221c:	2301      	movs	r3, #1
 800221e:	2201      	movs	r2, #1
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <ILI9341_SPI_Send+0x20>)
 8002222:	f002 fff2 	bl	800520a <HAL_SPI_Transmit>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000290 	.word	0x20000290

08002234 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002244:	480b      	ldr	r0, [pc, #44]	; (8002274 <ILI9341_Write_Command+0x40>)
 8002246:	f001 f8a3 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002250:	4808      	ldr	r0, [pc, #32]	; (8002274 <ILI9341_Write_Command+0x40>)
 8002252:	f001 f89d 	bl	8003390 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ffd9 	bl	8002210 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <ILI9341_Write_Command+0x40>)
 8002266:	f001 f893 	bl	8003390 <HAL_GPIO_WritePin>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020800 	.word	0x40020800

08002278 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002282:	2201      	movs	r2, #1
 8002284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <ILI9341_Write_Data+0x40>)
 800228a:	f001 f881 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002294:	4808      	ldr	r0, [pc, #32]	; (80022b8 <ILI9341_Write_Data+0x40>)
 8002296:	f001 f87b 	bl	8003390 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ffb7 	bl	8002210 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80022a2:	2201      	movs	r2, #1
 80022a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <ILI9341_Write_Data+0x40>)
 80022aa:	f001 f871 	bl	8003390 <HAL_GPIO_WritePin>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40020800 	.word	0x40020800

080022bc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4604      	mov	r4, r0
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4623      	mov	r3, r4
 80022cc:	80fb      	strh	r3, [r7, #6]
 80022ce:	4603      	mov	r3, r0
 80022d0:	80bb      	strh	r3, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80022da:	202a      	movs	r0, #42	; 0x2a
 80022dc:	f7ff ffaa 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffc5 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ffc0 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ffb9 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ffb4 	bl	8002278 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002310:	202b      	movs	r0, #43	; 0x2b
 8002312:	f7ff ff8f 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	b29b      	uxth	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffaa 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ffa5 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800232e:	883b      	ldrh	r3, [r7, #0]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	b29b      	uxth	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff9e 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800233c:	883b      	ldrh	r3, [r7, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff99 	bl	8002278 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002346:	202c      	movs	r0, #44	; 0x2c
 8002348:	f7ff ff74 	bl	8002234 <ILI9341_Write_Command>
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}

08002354 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800235e:	480b      	ldr	r0, [pc, #44]	; (800238c <ILI9341_Reset+0x38>)
 8002360:	f001 f816 	bl	8003390 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002364:	20c8      	movs	r0, #200	; 0xc8
 8002366:	f000 fd19 	bl	8002d9c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002370:	4806      	ldr	r0, [pc, #24]	; (800238c <ILI9341_Reset+0x38>)
 8002372:	f001 f80d 	bl	8003390 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002376:	20c8      	movs	r0, #200	; 0xc8
 8002378:	f000 fd10 	bl	8002d9c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002382:	4802      	ldr	r0, [pc, #8]	; (800238c <ILI9341_Reset+0x38>)
 8002384:	f001 f804 	bl	8003390 <HAL_GPIO_WritePin>
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020800 	.word	0x40020800

08002390 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800239e:	2036      	movs	r0, #54	; 0x36
 80023a0:	f7ff ff48 	bl	8002234 <ILI9341_Write_Command>
HAL_Delay(1);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f000 fcf9 	bl	8002d9c <HAL_Delay>
	
switch(screen_rotation) 
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d837      	bhi.n	8002420 <ILI9341_Set_Rotation+0x90>
 80023b0:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <ILI9341_Set_Rotation+0x28>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023df 	.word	0x080023df
 80023c0:	080023f5 	.word	0x080023f5
 80023c4:	0800240b 	.word	0x0800240b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80023c8:	2048      	movs	r0, #72	; 0x48
 80023ca:	f7ff ff55 	bl	8002278 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <ILI9341_Set_Rotation+0x9c>)
 80023d0:	22f0      	movs	r2, #240	; 0xf0
 80023d2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <ILI9341_Set_Rotation+0xa0>)
 80023d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023da:	801a      	strh	r2, [r3, #0]
			break;
 80023dc:	e021      	b.n	8002422 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80023de:	2028      	movs	r0, #40	; 0x28
 80023e0:	f7ff ff4a 	bl	8002278 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <ILI9341_Set_Rotation+0x9c>)
 80023e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023ea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <ILI9341_Set_Rotation+0xa0>)
 80023ee:	22f0      	movs	r2, #240	; 0xf0
 80023f0:	801a      	strh	r2, [r3, #0]
			break;
 80023f2:	e016      	b.n	8002422 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80023f4:	2088      	movs	r0, #136	; 0x88
 80023f6:	f7ff ff3f 	bl	8002278 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <ILI9341_Set_Rotation+0x9c>)
 80023fc:	22f0      	movs	r2, #240	; 0xf0
 80023fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <ILI9341_Set_Rotation+0xa0>)
 8002402:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002406:	801a      	strh	r2, [r3, #0]
			break;
 8002408:	e00b      	b.n	8002422 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800240a:	20e8      	movs	r0, #232	; 0xe8
 800240c:	f7ff ff34 	bl	8002278 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <ILI9341_Set_Rotation+0x9c>)
 8002412:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002416:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <ILI9341_Set_Rotation+0xa0>)
 800241a:	22f0      	movs	r2, #240	; 0xf0
 800241c:	801a      	strh	r2, [r3, #0]
			break;
 800241e:	e000      	b.n	8002422 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002420:	bf00      	nop
	}
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000002a 	.word	0x2000002a
 8002430:	20000028 	.word	0x20000028

08002434 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800243e:	4802      	ldr	r0, [pc, #8]	; (8002448 <ILI9341_Enable+0x14>)
 8002440:	f000 ffa6 	bl	8003390 <HAL_GPIO_WritePin>
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40020800 	.word	0x40020800

0800244c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002450:	f7ff fff0 	bl	8002434 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002454:	f7ff fecc 	bl	80021f0 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002458:	f7ff ff7c 	bl	8002354 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fee9 	bl	8002234 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002466:	f000 fc99 	bl	8002d9c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800246a:	20cb      	movs	r0, #203	; 0xcb
 800246c:	f7ff fee2 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002470:	2039      	movs	r0, #57	; 0x39
 8002472:	f7ff ff01 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002476:	202c      	movs	r0, #44	; 0x2c
 8002478:	f7ff fefe 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff fefb 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002482:	2034      	movs	r0, #52	; 0x34
 8002484:	f7ff fef8 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002488:	2002      	movs	r0, #2
 800248a:	f7ff fef5 	bl	8002278 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800248e:	20cf      	movs	r0, #207	; 0xcf
 8002490:	f7ff fed0 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002494:	2000      	movs	r0, #0
 8002496:	f7ff feef 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800249a:	20c1      	movs	r0, #193	; 0xc1
 800249c:	f7ff feec 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80024a0:	2030      	movs	r0, #48	; 0x30
 80024a2:	f7ff fee9 	bl	8002278 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80024a6:	20e8      	movs	r0, #232	; 0xe8
 80024a8:	f7ff fec4 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80024ac:	2085      	movs	r0, #133	; 0x85
 80024ae:	f7ff fee3 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff fee0 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80024b8:	2078      	movs	r0, #120	; 0x78
 80024ba:	f7ff fedd 	bl	8002278 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80024be:	20ea      	movs	r0, #234	; 0xea
 80024c0:	f7ff feb8 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff fed7 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff fed4 	bl	8002278 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80024d0:	20ed      	movs	r0, #237	; 0xed
 80024d2:	f7ff feaf 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80024d6:	2064      	movs	r0, #100	; 0x64
 80024d8:	f7ff fece 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80024dc:	2003      	movs	r0, #3
 80024de:	f7ff fecb 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80024e2:	2012      	movs	r0, #18
 80024e4:	f7ff fec8 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80024e8:	2081      	movs	r0, #129	; 0x81
 80024ea:	f7ff fec5 	bl	8002278 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80024ee:	20f7      	movs	r0, #247	; 0xf7
 80024f0:	f7ff fea0 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80024f4:	2020      	movs	r0, #32
 80024f6:	f7ff febf 	bl	8002278 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80024fa:	20c0      	movs	r0, #192	; 0xc0
 80024fc:	f7ff fe9a 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002500:	2023      	movs	r0, #35	; 0x23
 8002502:	f7ff feb9 	bl	8002278 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002506:	20c1      	movs	r0, #193	; 0xc1
 8002508:	f7ff fe94 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800250c:	2010      	movs	r0, #16
 800250e:	f7ff feb3 	bl	8002278 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002512:	20c5      	movs	r0, #197	; 0xc5
 8002514:	f7ff fe8e 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002518:	203e      	movs	r0, #62	; 0x3e
 800251a:	f7ff fead 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800251e:	2028      	movs	r0, #40	; 0x28
 8002520:	f7ff feaa 	bl	8002278 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002524:	20c7      	movs	r0, #199	; 0xc7
 8002526:	f7ff fe85 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800252a:	2086      	movs	r0, #134	; 0x86
 800252c:	f7ff fea4 	bl	8002278 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002530:	2036      	movs	r0, #54	; 0x36
 8002532:	f7ff fe7f 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002536:	2048      	movs	r0, #72	; 0x48
 8002538:	f7ff fe9e 	bl	8002278 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800253c:	203a      	movs	r0, #58	; 0x3a
 800253e:	f7ff fe79 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002542:	2055      	movs	r0, #85	; 0x55
 8002544:	f7ff fe98 	bl	8002278 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002548:	20b1      	movs	r0, #177	; 0xb1
 800254a:	f7ff fe73 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7ff fe92 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002554:	2018      	movs	r0, #24
 8002556:	f7ff fe8f 	bl	8002278 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800255a:	20b6      	movs	r0, #182	; 0xb6
 800255c:	f7ff fe6a 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002560:	2008      	movs	r0, #8
 8002562:	f7ff fe89 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002566:	2082      	movs	r0, #130	; 0x82
 8002568:	f7ff fe86 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800256c:	2027      	movs	r0, #39	; 0x27
 800256e:	f7ff fe83 	bl	8002278 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002572:	20f2      	movs	r0, #242	; 0xf2
 8002574:	f7ff fe5e 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff fe7d 	bl	8002278 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800257e:	2026      	movs	r0, #38	; 0x26
 8002580:	f7ff fe58 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002584:	2001      	movs	r0, #1
 8002586:	f7ff fe77 	bl	8002278 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800258a:	20e0      	movs	r0, #224	; 0xe0
 800258c:	f7ff fe52 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002590:	200f      	movs	r0, #15
 8002592:	f7ff fe71 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002596:	2031      	movs	r0, #49	; 0x31
 8002598:	f7ff fe6e 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800259c:	202b      	movs	r0, #43	; 0x2b
 800259e:	f7ff fe6b 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80025a2:	200c      	movs	r0, #12
 80025a4:	f7ff fe68 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80025a8:	200e      	movs	r0, #14
 80025aa:	f7ff fe65 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80025ae:	2008      	movs	r0, #8
 80025b0:	f7ff fe62 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80025b4:	204e      	movs	r0, #78	; 0x4e
 80025b6:	f7ff fe5f 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80025ba:	20f1      	movs	r0, #241	; 0xf1
 80025bc:	f7ff fe5c 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80025c0:	2037      	movs	r0, #55	; 0x37
 80025c2:	f7ff fe59 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80025c6:	2007      	movs	r0, #7
 80025c8:	f7ff fe56 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80025cc:	2010      	movs	r0, #16
 80025ce:	f7ff fe53 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80025d2:	2003      	movs	r0, #3
 80025d4:	f7ff fe50 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80025d8:	200e      	movs	r0, #14
 80025da:	f7ff fe4d 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80025de:	2009      	movs	r0, #9
 80025e0:	f7ff fe4a 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff fe47 	bl	8002278 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80025ea:	20e1      	movs	r0, #225	; 0xe1
 80025ec:	f7ff fe22 	bl	8002234 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff fe41 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80025f6:	200e      	movs	r0, #14
 80025f8:	f7ff fe3e 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80025fc:	2014      	movs	r0, #20
 80025fe:	f7ff fe3b 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002602:	2003      	movs	r0, #3
 8002604:	f7ff fe38 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002608:	2011      	movs	r0, #17
 800260a:	f7ff fe35 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800260e:	2007      	movs	r0, #7
 8002610:	f7ff fe32 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002614:	2031      	movs	r0, #49	; 0x31
 8002616:	f7ff fe2f 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800261a:	20c1      	movs	r0, #193	; 0xc1
 800261c:	f7ff fe2c 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002620:	2048      	movs	r0, #72	; 0x48
 8002622:	f7ff fe29 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002626:	2008      	movs	r0, #8
 8002628:	f7ff fe26 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800262c:	200f      	movs	r0, #15
 800262e:	f7ff fe23 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002632:	200c      	movs	r0, #12
 8002634:	f7ff fe20 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002638:	2031      	movs	r0, #49	; 0x31
 800263a:	f7ff fe1d 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800263e:	2036      	movs	r0, #54	; 0x36
 8002640:	f7ff fe1a 	bl	8002278 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002644:	200f      	movs	r0, #15
 8002646:	f7ff fe17 	bl	8002278 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800264a:	2011      	movs	r0, #17
 800264c:	f7ff fdf2 	bl	8002234 <ILI9341_Write_Command>
HAL_Delay(120);
 8002650:	2078      	movs	r0, #120	; 0x78
 8002652:	f000 fba3 	bl	8002d9c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002656:	2029      	movs	r0, #41	; 0x29
 8002658:	f7ff fdec 	bl	8002234 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fe97 	bl	8002390 <ILI9341_Set_Rotation>
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800266c:	b08d      	sub	sp, #52	; 0x34
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	6039      	str	r1, [r7, #0]
 8002674:	80fb      	strh	r3, [r7, #6]
 8002676:	466b      	mov	r3, sp
 8002678:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002686:	d202      	bcs.n	800268e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268c:	e002      	b.n	8002694 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800268e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002694:	2201      	movs	r2, #1
 8002696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800269a:	4840      	ldr	r0, [pc, #256]	; (800279c <ILI9341_Draw_Colour_Burst+0x134>)
 800269c:	f000 fe78 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a6:	483d      	ldr	r0, [pc, #244]	; (800279c <ILI9341_Draw_Colour_Burst+0x134>)
 80026a8:	f000 fe72 	bl	8003390 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80026b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026b8:	460b      	mov	r3, r1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	2300      	movs	r3, #0
 80026c0:	4688      	mov	r8, r1
 80026c2:	4699      	mov	r9, r3
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d8:	2300      	movs	r3, #0
 80026da:	460c      	mov	r4, r1
 80026dc:	461d      	mov	r5, r3
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	00eb      	lsls	r3, r5, #3
 80026e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ec:	00e2      	lsls	r2, r4, #3
 80026ee:	1dcb      	adds	r3, r1, #7
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	ebad 0d03 	sub.w	sp, sp, r3
 80026f8:	466b      	mov	r3, sp
 80026fa:	3300      	adds	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	e00e      	b.n	8002722 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	4413      	add	r3, r2
 800270a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800270e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	3301      	adds	r3, #1
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	b2d1      	uxtb	r1, r2
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	3302      	adds	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	429a      	cmp	r2, r3
 8002728:	d3ec      	bcc.n	8002704 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002744:	fb01 f202 	mul.w	r2, r1, r2
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e009      	b.n	800276c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	b29a      	uxth	r2, r3
 800275c:	230a      	movs	r3, #10
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	480f      	ldr	r0, [pc, #60]	; (80027a0 <ILI9341_Draw_Colour_Burst+0x138>)
 8002762:	f002 fd52 	bl	800520a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	3301      	adds	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3f1      	bcc.n	8002758 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	b29a      	uxth	r2, r3
 8002778:	230a      	movs	r3, #10
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	4808      	ldr	r0, [pc, #32]	; (80027a0 <ILI9341_Draw_Colour_Burst+0x138>)
 800277e:	f002 fd44 	bl	800520a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <ILI9341_Draw_Colour_Burst+0x134>)
 800278a:	f000 fe01 	bl	8003390 <HAL_GPIO_WritePin>
 800278e:	46b5      	mov	sp, r6
}
 8002790:	bf00      	nop
 8002792:	3734      	adds	r7, #52	; 0x34
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800279a:	bf00      	nop
 800279c:	40020800 	.word	0x40020800
 80027a0:	20000290 	.word	0x20000290

080027a4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <ILI9341_Fill_Screen+0x44>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <ILI9341_Fill_Screen+0x48>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff fd7d 	bl	80022bc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <ILI9341_Fill_Screen+0x44>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <ILI9341_Fill_Screen+0x48>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff44 	bl	8002668 <ILI9341_Draw_Colour_Burst>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000002a 	.word	0x2000002a
 80027ec:	20000028 	.word	0x20000028

080027f0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
 80027fa:	460b      	mov	r3, r1
 80027fc:	80bb      	strh	r3, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002802:	4b64      	ldr	r3, [pc, #400]	; (8002994 <ILI9341_Draw_Pixel+0x1a4>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	429a      	cmp	r2, r3
 800280c:	f080 80be 	bcs.w	800298c <ILI9341_Draw_Pixel+0x19c>
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <ILI9341_Draw_Pixel+0x1a8>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	88ba      	ldrh	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	f080 80b7 	bcs.w	800298c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800281e:	2200      	movs	r2, #0
 8002820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002824:	485d      	ldr	r0, [pc, #372]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002826:	f000 fdb3 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002830:	485a      	ldr	r0, [pc, #360]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002832:	f000 fdad 	bl	8003390 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002836:	202a      	movs	r0, #42	; 0x2a
 8002838:	f7ff fcea 	bl	8002210 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800283c:	2201      	movs	r2, #1
 800283e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002842:	4856      	ldr	r0, [pc, #344]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002844:	f000 fda4 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284e:	4853      	ldr	r0, [pc, #332]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002850:	f000 fd9e 	bl	8003390 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800285a:	4850      	ldr	r0, [pc, #320]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 800285c:	f000 fd98 	bl	8003390 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29b      	uxth	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	753b      	strb	r3, [r7, #20]
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	757b      	strb	r3, [r7, #21]
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	3301      	adds	r3, #1
 8002874:	121b      	asrs	r3, r3, #8
 8002876:	b2db      	uxtb	r3, r3
 8002878:	75bb      	strb	r3, [r7, #22]
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	3301      	adds	r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002884:	f107 0114 	add.w	r1, r7, #20
 8002888:	2301      	movs	r3, #1
 800288a:	2204      	movs	r2, #4
 800288c:	4844      	ldr	r0, [pc, #272]	; (80029a0 <ILI9341_Draw_Pixel+0x1b0>)
 800288e:	f002 fcbc 	bl	800520a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002898:	4840      	ldr	r0, [pc, #256]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 800289a:	f000 fd79 	bl	8003390 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028a4:	483d      	ldr	r0, [pc, #244]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 80028a6:	f000 fd73 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b0:	483a      	ldr	r0, [pc, #232]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 80028b2:	f000 fd6d 	bl	8003390 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80028b6:	202b      	movs	r0, #43	; 0x2b
 80028b8:	f7ff fcaa 	bl	8002210 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028c2:	4836      	ldr	r0, [pc, #216]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 80028c4:	f000 fd64 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80028c8:	2201      	movs	r2, #1
 80028ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ce:	4833      	ldr	r0, [pc, #204]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 80028d0:	f000 fd5e 	bl	8003390 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028d4:	2200      	movs	r2, #0
 80028d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028da:	4830      	ldr	r0, [pc, #192]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 80028dc:	f000 fd58 	bl	8003390 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80028e0:	88bb      	ldrh	r3, [r7, #4]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	743b      	strb	r3, [r7, #16]
 80028ea:	88bb      	ldrh	r3, [r7, #4]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	747b      	strb	r3, [r7, #17]
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	3301      	adds	r3, #1
 80028f4:	121b      	asrs	r3, r3, #8
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	74bb      	strb	r3, [r7, #18]
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002904:	f107 0110 	add.w	r1, r7, #16
 8002908:	2301      	movs	r3, #1
 800290a:	2204      	movs	r2, #4
 800290c:	4824      	ldr	r0, [pc, #144]	; (80029a0 <ILI9341_Draw_Pixel+0x1b0>)
 800290e:	f002 fc7c 	bl	800520a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002912:	2201      	movs	r2, #1
 8002914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002918:	4820      	ldr	r0, [pc, #128]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 800291a:	f000 fd39 	bl	8003390 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800291e:	2200      	movs	r2, #0
 8002920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002924:	481d      	ldr	r0, [pc, #116]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002926:	f000 fd33 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800292a:	2200      	movs	r2, #0
 800292c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002930:	481a      	ldr	r0, [pc, #104]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002932:	f000 fd2d 	bl	8003390 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002936:	202c      	movs	r0, #44	; 0x2c
 8002938:	f7ff fc6a 	bl	8002210 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002942:	4816      	ldr	r0, [pc, #88]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002944:	f000 fd24 	bl	8003390 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002948:	2201      	movs	r2, #1
 800294a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800294e:	4813      	ldr	r0, [pc, #76]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002950:	f000 fd1e 	bl	8003390 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800295a:	4810      	ldr	r0, [pc, #64]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 800295c:	f000 fd18 	bl	8003390 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	b29b      	uxth	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	733b      	strb	r3, [r7, #12]
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002970:	f107 010c 	add.w	r1, r7, #12
 8002974:	2301      	movs	r3, #1
 8002976:	2202      	movs	r2, #2
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <ILI9341_Draw_Pixel+0x1b0>)
 800297a:	f002 fc46 	bl	800520a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800297e:	2201      	movs	r2, #1
 8002980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <ILI9341_Draw_Pixel+0x1ac>)
 8002986:	f000 fd03 	bl	8003390 <HAL_GPIO_WritePin>
 800298a:	e000      	b.n	800298e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800298c:	bf00      	nop
	
}
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000002a 	.word	0x2000002a
 8002998:	20000028 	.word	0x20000028
 800299c:	40020800 	.word	0x40020800
 80029a0:	20000290 	.word	0x20000290

080029a4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4604      	mov	r4, r0
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4623      	mov	r3, r4
 80029b4:	80fb      	strh	r3, [r7, #6]
 80029b6:	4603      	mov	r3, r0
 80029b8:	80bb      	strh	r3, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	807b      	strh	r3, [r7, #2]
 80029be:	4613      	mov	r3, r2
 80029c0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <ILI9341_Draw_Rectangle+0xb0>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d23d      	bcs.n	8002a4a <ILI9341_Draw_Rectangle+0xa6>
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <ILI9341_Draw_Rectangle+0xb4>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	88ba      	ldrh	r2, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d237      	bcs.n	8002a4a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	4413      	add	r3, r2
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <ILI9341_Draw_Rectangle+0xb0>)
 80029e2:	8812      	ldrh	r2, [r2, #0]
 80029e4:	b292      	uxth	r2, r2
 80029e6:	4293      	cmp	r3, r2
 80029e8:	dd05      	ble.n	80029f6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <ILI9341_Draw_Rectangle+0xb0>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80029f6:	88ba      	ldrh	r2, [r7, #4]
 80029f8:	883b      	ldrh	r3, [r7, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <ILI9341_Draw_Rectangle+0xb4>)
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	b292      	uxth	r2, r2
 8002a02:	4293      	cmp	r3, r2
 8002a04:	dd05      	ble.n	8002a12 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <ILI9341_Draw_Rectangle+0xb4>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	4413      	add	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29c      	uxth	r4, r3
 8002a1e:	88ba      	ldrh	r2, [r7, #4]
 8002a20:	883b      	ldrh	r3, [r7, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	88b9      	ldrh	r1, [r7, #4]
 8002a2c:	88f8      	ldrh	r0, [r7, #6]
 8002a2e:	4622      	mov	r2, r4
 8002a30:	f7ff fc44 	bl	80022bc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002a34:	883b      	ldrh	r3, [r7, #0]
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	8b3b      	ldrh	r3, [r7, #24]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fe10 	bl	8002668 <ILI9341_Draw_Colour_Burst>
 8002a48:	e000      	b.n	8002a4c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002a4a:	bf00      	nop
}
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd90      	pop	{r4, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000002a 	.word	0x2000002a
 8002a58:	20000028 	.word	0x20000028

08002a5c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002a62:	2310      	movs	r3, #16
 8002a64:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002a6a:	e019      	b.n	8002aa0 <TP_Read+0x44>
    {
        value <<= 1;
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	2108      	movs	r1, #8
 8002a76:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <TP_Read+0x54>)
 8002a78:	f000 fc8a 	bl	8003390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2108      	movs	r1, #8
 8002a80:	480b      	ldr	r0, [pc, #44]	; (8002ab0 <TP_Read+0x54>)
 8002a82:	f000 fc85 	bl	8003390 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002a86:	2110      	movs	r1, #16
 8002a88:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <TP_Read+0x54>)
 8002a8a:	f000 fc69 	bl	8003360 <HAL_GPIO_ReadPin>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <TP_Read+0x3e>
        {
            value++;
 8002a94:	88bb      	ldrh	r3, [r7, #4]
 8002a96:	3301      	adds	r3, #1
 8002a98:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e2      	bne.n	8002a6c <TP_Read+0x10>
    };

    return value;
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2108      	movs	r1, #8
 8002ac6:	4815      	ldr	r0, [pc, #84]	; (8002b1c <TP_Write+0x68>)
 8002ac8:	f000 fc62 	bl	8003390 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002acc:	e01e      	b.n	8002b0c <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	da05      	bge.n	8002ae2 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2120      	movs	r1, #32
 8002ada:	4810      	ldr	r0, [pc, #64]	; (8002b1c <TP_Write+0x68>)
 8002adc:	f000 fc58 	bl	8003390 <HAL_GPIO_WritePin>
 8002ae0:	e004      	b.n	8002aec <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	480d      	ldr	r0, [pc, #52]	; (8002b1c <TP_Write+0x68>)
 8002ae8:	f000 fc52 	bl	8003390 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	2108      	movs	r1, #8
 8002af6:	4809      	ldr	r0, [pc, #36]	; (8002b1c <TP_Write+0x68>)
 8002af8:	f000 fc4a 	bl	8003390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002afc:	2200      	movs	r2, #0
 8002afe:	2108      	movs	r1, #8
 8002b00:	4806      	ldr	r0, [pc, #24]	; (8002b1c <TP_Write+0x68>)
 8002b02:	f000 fc45 	bl	8003390 <HAL_GPIO_WritePin>
        i--;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1dd      	bne.n	8002ace <TP_Write+0x1a>
    };
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000

08002b20 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2108      	movs	r1, #8
 8002b2c:	485a      	ldr	r0, [pc, #360]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002b2e:	f000 fc2f 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002b32:	2201      	movs	r2, #1
 8002b34:	2120      	movs	r1, #32
 8002b36:	4858      	ldr	r0, [pc, #352]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002b38:	f000 fc2a 	bl	8003390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	4855      	ldr	r0, [pc, #340]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002b42:	f000 fc25 	bl	8003390 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b56:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	484d      	ldr	r0, [pc, #308]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002b62:	f000 fc15 	bl	8003390 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002b66:	e023      	b.n	8002bb0 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002b68:	2090      	movs	r0, #144	; 0x90
 8002b6a:	f7ff ffa3 	bl	8002ab4 <TP_Write>

				rawy = TP_Read();	
 8002b6e:	f7ff ff75 	bl	8002a5c <TP_Read>
 8002b72:	4603      	mov	r3, r0
 8002b74:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002b86:	20d0      	movs	r0, #208	; 0xd0
 8002b88:	f7ff ff94 	bl	8002ab4 <TP_Write>
        rawx = TP_Read();
 8002b8c:	f7ff ff66 	bl	8002a5c <TP_Read>
 8002b90:	4603      	mov	r3, r0
 8002b92:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002b94:	89bb      	ldrh	r3, [r7, #12]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4413      	add	r3, r2
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002b9c:	89bb      	ldrh	r3, [r7, #12]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	61fb      	str	r3, [r7, #28]
        samples--;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	3301      	adds	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <TP_Read_Coordinates+0xa4>
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	4837      	ldr	r0, [pc, #220]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002bba:	f000 fbd1 	bl	8003360 <HAL_GPIO_ReadPin>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0d1      	beq.n	8002b68 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	4833      	ldr	r0, [pc, #204]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002bca:	f000 fbe1 	bl	8003390 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd4:	d14d      	bne.n	8002c72 <TP_Read_Coordinates+0x152>
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	482f      	ldr	r0, [pc, #188]	; (8002c98 <TP_Read_Coordinates+0x178>)
 8002bda:	f000 fbc1 	bl	8003360 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d146      	bne.n	8002c72 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002c00:	89bb      	ldrh	r3, [r7, #12]
 8002c02:	425b      	negs	r3, r3
 8002c04:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	425b      	negs	r3, r3
 8002c0a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002c0c:	89ba      	ldrh	r2, [r7, #12]
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <TP_Read_Coordinates+0x17c>)
 8002c10:	fba3 1302 	umull	r1, r3, r3, r2
 8002c14:	1ad2      	subs	r2, r2, r3
 8002c16:	0852      	lsrs	r2, r2, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c2a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002c90 <TP_Read_Coordinates+0x170>
 8002c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c36:	ee17 3a90 	vmov	r3, s15
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <TP_Read_Coordinates+0x180>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	09db      	lsrs	r3, r3, #7
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b0f      	subs	r3, #15
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c56:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002c90 <TP_Read_Coordinates+0x170>
 8002c5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3302      	adds	r3, #2
 8002c62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c66:	ee17 2a90 	vmov	r2, s15
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e007      	b.n	8002c82 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002c80:	2300      	movs	r3, #0
		}
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	f3af 8000 	nop.w
 8002c90:	28f5c28f 	.word	0x28f5c28f
 8002c94:	3ff28f5c 	.word	0x3ff28f5c
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	e01e01e1 	.word	0xe01e01e1
 8002ca0:	a0a0a0a1 	.word	0xa0a0a0a1

08002ca4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002ca8:	2104      	movs	r1, #4
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <TP_Touchpad_Pressed+0x1c>)
 8002cac:	f000 fb58 	bl	8003360 <HAL_GPIO_ReadPin>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002cba:	2300      	movs	r3, #0
	}
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_Init+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_Init+0x34>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x34>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x34>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f94f 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7fe fcd0 	bl	8001690 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f967 	bl	8002fee <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f92f 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000024 	.word	0x20000024
 8002d54:	20000030 	.word	0x20000030
 8002d58:	2000002c 	.word	0x2000002c

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000030 	.word	0x20000030
 8002d80:	20000414 	.word	0x20000414

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000414 	.word	0x20000414

08002d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d005      	beq.n	8002dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_Delay+0x44>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dc2:	bf00      	nop
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d8f7      	bhi.n	8002dc4 <HAL_Delay+0x28>
  {
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000030 	.word	0x20000030

08002de4 <__NVIC_SetPriorityGrouping>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <__NVIC_SetPriorityGrouping+0x40>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <__NVIC_SetPriorityGrouping+0x40>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	05fa0000 	.word	0x05fa0000

08002e2c <__NVIC_GetPriorityGrouping>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff29 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff3e 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff8e 	bl	8002ed8 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5d 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff31 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e175      	b.n	8003314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 8164 	bne.w	800330e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d00b      	beq.n	8003066 <HAL_GPIO_Init+0x5e>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800305a:	2b11      	cmp	r3, #17
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b12      	cmp	r3, #18
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x100>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b12      	cmp	r3, #18
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80be 	beq.w	800330e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_GPIO_Init+0x324>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_GPIO_Init+0x324>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b63      	ldr	r3, [pc, #396]	; (800332c <HAL_GPIO_Init+0x324>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031aa:	4a61      	ldr	r2, [pc, #388]	; (8003330 <HAL_GPIO_Init+0x328>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_GPIO_Init+0x32c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d037      	beq.n	8003246 <HAL_GPIO_Init+0x23e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a57      	ldr	r2, [pc, #348]	; (8003338 <HAL_GPIO_Init+0x330>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_GPIO_Init+0x23a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_GPIO_Init+0x334>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02b      	beq.n	800323e <HAL_GPIO_Init+0x236>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a55      	ldr	r2, [pc, #340]	; (8003340 <HAL_GPIO_Init+0x338>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d025      	beq.n	800323a <HAL_GPIO_Init+0x232>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <HAL_GPIO_Init+0x33c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01f      	beq.n	8003236 <HAL_GPIO_Init+0x22e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a53      	ldr	r2, [pc, #332]	; (8003348 <HAL_GPIO_Init+0x340>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x22a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_GPIO_Init+0x344>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x226>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a51      	ldr	r2, [pc, #324]	; (8003350 <HAL_GPIO_Init+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x222>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a50      	ldr	r2, [pc, #320]	; (8003354 <HAL_GPIO_Init+0x34c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	; (8003358 <HAL_GPIO_Init+0x350>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x21a>
 800321e:	2309      	movs	r3, #9
 8003220:	e012      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003222:	230a      	movs	r3, #10
 8003224:	e010      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003226:	2308      	movs	r3, #8
 8003228:	e00e      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800322a:	2307      	movs	r3, #7
 800322c:	e00c      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800322e:	2306      	movs	r3, #6
 8003230:	e00a      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003232:	2305      	movs	r3, #5
 8003234:	e008      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003236:	2304      	movs	r3, #4
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800323a:	2303      	movs	r3, #3
 800323c:	e004      	b.n	8003248 <HAL_GPIO_Init+0x240>
 800323e:	2302      	movs	r3, #2
 8003240:	e002      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_GPIO_Init+0x240>
 8003246:	2300      	movs	r3, #0
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	4093      	lsls	r3, r2
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003258:	4935      	ldr	r1, [pc, #212]	; (8003330 <HAL_GPIO_Init+0x328>)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <HAL_GPIO_Init+0x354>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <HAL_GPIO_Init+0x354>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003290:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_GPIO_Init+0x354>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b4:	4a29      	ldr	r2, [pc, #164]	; (800335c <HAL_GPIO_Init+0x354>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <HAL_GPIO_Init+0x354>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <HAL_GPIO_Init+0x354>)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_GPIO_Init+0x354>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <HAL_GPIO_Init+0x354>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	f67f ae86 	bls.w	8003028 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	40013800 	.word	0x40013800
 8003334:	40020000 	.word	0x40020000
 8003338:	40020400 	.word	0x40020400
 800333c:	40020800 	.word	0x40020800
 8003340:	40020c00 	.word	0x40020c00
 8003344:	40021000 	.word	0x40021000
 8003348:	40021400 	.word	0x40021400
 800334c:	40021800 	.word	0x40021800
 8003350:	40021c00 	.word	0x40021c00
 8003354:	40022000 	.word	0x40022000
 8003358:	40022400 	.word	0x40022400
 800335c:	40013c00 	.word	0x40013c00

08003360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e001      	b.n	8003382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fa70 	bl	80008d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	e006      	b.n	800344c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800344a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d104      	bne.n	800345e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800345c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_I2C_Init+0x11c>)
 800346a:	430b      	orrs	r3, r1
 800346c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800347c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	ea42 0103 	orr.w	r1, r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1a      	ldr	r2, [r3, #32]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	02008000 	.word	0x02008000

080034e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	461a      	mov	r2, r3
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
 80034f4:	4613      	mov	r3, r2
 80034f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b20      	cmp	r3, #32
 8003502:	f040 80da 	bne.w	80036ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_I2C_Master_Transmit+0x30>
 8003510:	2302      	movs	r3, #2
 8003512:	e0d3      	b.n	80036bc <HAL_I2C_Master_Transmit+0x1d8>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351c:	f7ff fc32 	bl	8002d84 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2319      	movs	r3, #25
 8003528:	2201      	movs	r2, #1
 800352a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f9e6 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0be      	b.n	80036bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	2bff      	cmp	r3, #255	; 0xff
 800356e:	d90e      	bls.n	800358e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb48 	bl	8003c1c <I2C_TransferConfig>
 800358c:	e06c      	b.n	8003668 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	b2da      	uxtb	r2, r3
 800359e:	8979      	ldrh	r1, [r7, #10]
 80035a0:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fb37 	bl	8003c1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80035ae:	e05b      	b.n	8003668 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	6a39      	ldr	r1, [r7, #32]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f9e3 	bl	8003980 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e07b      	b.n	80036bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d034      	beq.n	8003668 <HAL_I2C_Master_Transmit+0x184>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	d130      	bne.n	8003668 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f975 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e04d      	b.n	80036bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	2bff      	cmp	r3, #255	; 0xff
 8003628:	d90e      	bls.n	8003648 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8979      	ldrh	r1, [r7, #10]
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 faeb 	bl	8003c1c <I2C_TransferConfig>
 8003646:	e00f      	b.n	8003668 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	b2da      	uxtb	r2, r3
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fada 	bl	8003c1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d19e      	bne.n	80035b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6a39      	ldr	r1, [r7, #32]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f9c2 	bl	8003a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01a      	b.n	80036bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2220      	movs	r2, #32
 800368c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800369a:	400b      	ands	r3, r1
 800369c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	80002000 	.word	0x80002000
 80036c8:	fe00e800 	.word	0xfe00e800

080036cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	461a      	mov	r2, r3
 80036d8:	460b      	mov	r3, r1
 80036da:	817b      	strh	r3, [r7, #10]
 80036dc:	4613      	mov	r3, r2
 80036de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	f040 80db 	bne.w	80038a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_I2C_Master_Receive+0x30>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0d4      	b.n	80038a6 <HAL_I2C_Master_Receive+0x1da>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003704:	f7ff fb3e 	bl	8002d84 <HAL_GetTick>
 8003708:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2319      	movs	r3, #25
 8003710:	2201      	movs	r2, #1
 8003712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f8f2 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0bf      	b.n	80038a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2222      	movs	r2, #34	; 0x22
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2210      	movs	r2, #16
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	893a      	ldrh	r2, [r7, #8]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	2bff      	cmp	r3, #255	; 0xff
 8003756:	d90e      	bls.n	8003776 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <HAL_I2C_Master_Receive+0x1e4>)
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa54 	bl	8003c1c <I2C_TransferConfig>
 8003774:	e06d      	b.n	8003852 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	b2da      	uxtb	r2, r3
 8003786:	8979      	ldrh	r1, [r7, #10]
 8003788:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_I2C_Master_Receive+0x1e4>)
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fa43 	bl	8003c1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003796:	e05c      	b.n	8003852 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	6a39      	ldr	r1, [r7, #32]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f96b 	bl	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e07c      	b.n	80038a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d034      	beq.n	8003852 <HAL_I2C_Master_Receive+0x186>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d130      	bne.n	8003852 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f880 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e04d      	b.n	80038a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2bff      	cmp	r3, #255	; 0xff
 8003812:	d90e      	bls.n	8003832 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	b2da      	uxtb	r2, r3
 8003820:	8979      	ldrh	r1, [r7, #10]
 8003822:	2300      	movs	r3, #0
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f9f6 	bl	8003c1c <I2C_TransferConfig>
 8003830:	e00f      	b.n	8003852 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f9e5 	bl	8003c1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d19d      	bne.n	8003798 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	6a39      	ldr	r1, [r7, #32]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f8cd 	bl	8003a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e01a      	b.n	80038a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2220      	movs	r2, #32
 8003876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_I2C_Master_Receive+0x1e8>)
 8003884:	400b      	ands	r3, r1
 8003886:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	80002400 	.word	0x80002400
 80038b4:	fe00e800 	.word	0xfe00e800

080038b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d103      	bne.n	80038d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d007      	beq.n	80038f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	619a      	str	r2, [r3, #24]
  }
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003910:	e022      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d01e      	beq.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391a:	f7ff fa33 	bl	8002d84 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e00f      	b.n	8003978 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4013      	ands	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	429a      	cmp	r2, r3
 8003974:	d0cd      	beq.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800398c:	e02c      	b.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f8dc 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e02a      	b.n	80039f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d01e      	beq.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7ff f9eb 	bl	8002d84 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e007      	b.n	80039f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d1cb      	bne.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a0c:	e028      	b.n	8003a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f89c 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e026      	b.n	8003a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7ff f9af 	bl	8002d84 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d1cf      	bne.n	8003a0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a84:	e055      	b.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f860 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e053      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d129      	bne.n	8003afc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d105      	bne.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e03f      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003ad6:	400b      	ands	r3, r1
 8003ad8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e022      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7ff f942 	bl	8002d84 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e007      	b.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d1a2      	bne.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	fe00e800 	.word	0xfe00e800

08003b50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d151      	bne.n	8003c0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b6a:	e022      	b.n	8003bb2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d01e      	beq.n	8003bb2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7ff f906 	bl	8002d84 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_IsAcknowledgeFailed+0x3a>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d113      	bne.n	8003bb2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e02e      	b.n	8003c10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d1d5      	bne.n	8003b6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fe71 	bl	80038b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <I2C_IsAcknowledgeFailed+0xc8>)
 8003be2:	400b      	ands	r3, r1
 8003be4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	fe00e800 	.word	0xfe00e800

08003c1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	817b      	strh	r3, [r7, #10]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	0d5b      	lsrs	r3, r3, #21
 8003c38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <I2C_TransferConfig+0x58>)
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	43db      	mvns	r3, r3
 8003c42:	ea02 0103 	and.w	r1, r2, r3
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c4c:	7a7b      	ldrb	r3, [r7, #9]
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	03ff63ff 	.word	0x03ff63ff

08003c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d138      	bne.n	8003d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e032      	b.n	8003d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d139      	bne.n	8003d98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e033      	b.n	8003d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2224      	movs	r2, #36	; 0x24
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40007000 	.word	0x40007000

08003dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df6:	f7fe ffc5 	bl	8002d84 <HAL_GetTick>
 8003dfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dfc:	e009      	b.n	8003e12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dfe:	f7fe ffc1 	bl	8002d84 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e0c:	d901      	bls.n	8003e12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e022      	b.n	8003e58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d1ee      	bne.n	8003dfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2c:	f7fe ffaa 	bl	8002d84 <HAL_GetTick>
 8003e30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e32:	e009      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e34:	f7fe ffa6 	bl	8002d84 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e42:	d901      	bls.n	8003e48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e007      	b.n	8003e58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e54:	d1ee      	bne.n	8003e34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40007000 	.word	0x40007000

08003e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e29b      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8087 	beq.w	8003f9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e8c:	4b96      	ldr	r3, [pc, #600]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d00c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e98:	4b93      	ldr	r3, [pc, #588]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d112      	bne.n	8003eca <HAL_RCC_OscConfig+0x62>
 8003ea4:	4b90      	ldr	r3, [pc, #576]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb2:	4b8d      	ldr	r3, [pc, #564]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d06c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x130>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d168      	bne.n	8003f98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e275      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x7a>
 8003ed4:	4b84      	ldr	r3, [pc, #528]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a83      	ldr	r2, [pc, #524]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e02e      	b.n	8003f40 <HAL_RCC_OscConfig+0xd8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x9c>
 8003eea:	4b7f      	ldr	r3, [pc, #508]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7e      	ldr	r2, [pc, #504]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7b      	ldr	r2, [pc, #492]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e01d      	b.n	8003f40 <HAL_RCC_OscConfig+0xd8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0xc0>
 8003f0e:	4b76      	ldr	r3, [pc, #472]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a75      	ldr	r2, [pc, #468]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a72      	ldr	r2, [pc, #456]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0xd8>
 8003f28:	4b6f      	ldr	r3, [pc, #444]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b6c      	ldr	r3, [pc, #432]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6b      	ldr	r2, [pc, #428]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe ff1c 	bl	8002d84 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fe ff18 	bl	8002d84 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e229      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe8>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe ff08 	bl	8002d84 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fe ff04 	bl	8002d84 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e215      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x110>
 8003f96:	e000      	b.n	8003f9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d069      	beq.n	800407a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa6:	4b50      	ldr	r3, [pc, #320]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x190>
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d116      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x17a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e1e9      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	493d      	ldr	r1, [pc, #244]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff6:	e040      	b.n	800407a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d023      	beq.n	8004048 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004000:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a38      	ldr	r2, [pc, #224]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fe feba 	bl	8002d84 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004014:	f7fe feb6 	bl	8002d84 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1c7      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4929      	ldr	r1, [pc, #164]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
 8004046:	e018      	b.n	800407a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe fe96 	bl	8002d84 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405c:	f7fe fe92 	bl	8002d84 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e1a3      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d038      	beq.n	80040f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d019      	beq.n	80040c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fe fe73 	bl	8002d84 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fe fe6f 	bl	8002d84 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e180      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 80040b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x23a>
 80040c0:	e01a      	b.n	80040f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_RCC_OscConfig+0x280>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fe fe59 	bl	8002d84 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fe fe55 	bl	8002d84 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d903      	bls.n	80040ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e166      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
 80040e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b92      	ldr	r3, [pc, #584]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ee      	bne.n	80040d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a4 	beq.w	800424e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004106:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	4b89      	ldr	r3, [pc, #548]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	4a88      	ldr	r2, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411c:	6413      	str	r3, [r2, #64]	; 0x40
 800411e:	4b86      	ldr	r3, [pc, #536]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	4b83      	ldr	r3, [pc, #524]	; (800433c <HAL_RCC_OscConfig+0x4d4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800413a:	4b80      	ldr	r3, [pc, #512]	; (800433c <HAL_RCC_OscConfig+0x4d4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7f      	ldr	r2, [pc, #508]	; (800433c <HAL_RCC_OscConfig+0x4d4>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004146:	f7fe fe1d 	bl	8002d84 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fe fe19 	bl	8002d84 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b64      	cmp	r3, #100	; 0x64
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e12a      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004160:	4b76      	ldr	r3, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x4d4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x31a>
 8004174:	4b70      	ldr	r3, [pc, #448]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a6f      	ldr	r2, [pc, #444]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
 8004180:	e02d      	b.n	80041de <HAL_RCC_OscConfig+0x376>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x33c>
 800418a:	4b6b      	ldr	r3, [pc, #428]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a6a      	ldr	r2, [pc, #424]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
 8004196:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	e01c      	b.n	80041de <HAL_RCC_OscConfig+0x376>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCC_OscConfig+0x35e>
 80041ac:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a61      	ldr	r2, [pc, #388]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	f043 0304 	orr.w	r3, r3, #4
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	4b5f      	ldr	r3, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a5e      	ldr	r2, [pc, #376]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	e00b      	b.n	80041de <HAL_RCC_OscConfig+0x376>
 80041c6:	4b5c      	ldr	r3, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a5b      	ldr	r2, [pc, #364]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	4b59      	ldr	r3, [pc, #356]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a58      	ldr	r2, [pc, #352]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d015      	beq.n	8004212 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fe fdcd 	bl	8002d84 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	e00a      	b.n	8004204 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fe fdc9 	bl	8002d84 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0d8      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004204:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ee      	beq.n	80041ee <HAL_RCC_OscConfig+0x386>
 8004210:	e014      	b.n	800423c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fe fdb7 	bl	8002d84 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421a:	f7fe fdb3 	bl	8002d84 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e0c2      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ee      	bne.n	800421a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80ae 	beq.w	80043b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004258:	4b37      	ldr	r3, [pc, #220]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b08      	cmp	r3, #8
 8004262:	d06d      	beq.n	8004340 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d14b      	bne.n	8004304 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a31      	ldr	r2, [pc, #196]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fe fd84 	bl	8002d84 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004280:	f7fe fd80 	bl	8002d84 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e091      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	491b      	ldr	r1, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a18      	ldr	r2, [pc, #96]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fd52 	bl	8002d84 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fd4e 	bl	8002d84 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e05f      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x47c>
 8004302:	e057      	b.n	80043b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800430e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe fd38 	bl	8002d84 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fe fd34 	bl	8002d84 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e045      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	4b03      	ldr	r3, [pc, #12]	; (8004338 <HAL_RCC_OscConfig+0x4d0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x4b0>
 8004336:	e03d      	b.n	80043b4 <HAL_RCC_OscConfig+0x54c>
 8004338:	40023800 	.word	0x40023800
 800433c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004340:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <HAL_RCC_OscConfig+0x558>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d030      	beq.n	80043b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	429a      	cmp	r2, r3
 800435a:	d129      	bne.n	80043b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d122      	bne.n	80043b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004376:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004378:	4293      	cmp	r3, r2
 800437a:	d119      	bne.n	80043b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	3b01      	subs	r3, #1
 800438a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d10f      	bne.n	80043b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0d0      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b6a      	ldr	r3, [pc, #424]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d910      	bls.n	800440c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b67      	ldr	r3, [pc, #412]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 020f 	bic.w	r2, r3, #15
 80043f2:	4965      	ldr	r1, [pc, #404]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b8      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a58      	ldr	r2, [pc, #352]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 800442a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800442e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800443c:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a52      	ldr	r2, [pc, #328]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004446:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	494d      	ldr	r1, [pc, #308]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d040      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d115      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e073      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06b      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 0203 	bic.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4936      	ldr	r1, [pc, #216]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fe fc64 	bl	8002d84 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fe fc60 	bl	8002d84 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e053      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d210      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	4922      	ldr	r1, [pc, #136]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e032      	b.n	800457e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4916      	ldr	r1, [pc, #88]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	490e      	ldr	r1, [pc, #56]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004556:	f000 f821 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490a      	ldr	r1, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1cc>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1d0>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1d4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fbc0 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00
 800458c:	40023800 	.word	0x40023800
 8004590:	0802f38c 	.word	0x0802f38c
 8004594:	20000024 	.word	0x20000024
 8004598:	2000002c 	.word	0x2000002c

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b094      	sub	sp, #80	; 0x50
 80045a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
 80045a8:	2300      	movs	r3, #0
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	2300      	movs	r3, #0
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b4:	4b79      	ldr	r3, [pc, #484]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d00d      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x40>
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	f200 80e1 	bhi.w	8004788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ce:	e0db      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d4:	e0db      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d6:	4b73      	ldr	r3, [pc, #460]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045da:	e0d8      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045dc:	4b6f      	ldr	r3, [pc, #444]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045e6:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d063      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	2200      	movs	r2, #0
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
 8004606:	2300      	movs	r3, #0
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004620:	0150      	lsls	r0, r2, #5
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4621      	mov	r1, r4
 8004628:	1a51      	subs	r1, r2, r1
 800462a:	6139      	str	r1, [r7, #16]
 800462c:	4629      	mov	r1, r5
 800462e:	eb63 0301 	sbc.w	r3, r3, r1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004640:	4659      	mov	r1, fp
 8004642:	018b      	lsls	r3, r1, #6
 8004644:	4651      	mov	r1, sl
 8004646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464a:	4651      	mov	r1, sl
 800464c:	018a      	lsls	r2, r1, #6
 800464e:	4651      	mov	r1, sl
 8004650:	ebb2 0801 	subs.w	r8, r2, r1
 8004654:	4659      	mov	r1, fp
 8004656:	eb63 0901 	sbc.w	r9, r3, r1
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466e:	4690      	mov	r8, r2
 8004670:	4699      	mov	r9, r3
 8004672:	4623      	mov	r3, r4
 8004674:	eb18 0303 	adds.w	r3, r8, r3
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	462b      	mov	r3, r5
 800467c:	eb49 0303 	adc.w	r3, r9, r3
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800468e:	4629      	mov	r1, r5
 8004690:	024b      	lsls	r3, r1, #9
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004698:	4621      	mov	r1, r4
 800469a:	024a      	lsls	r2, r1, #9
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ac:	f7fb fe20 	bl	80002f0 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	e058      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	2200      	movs	r2, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	4611      	mov	r1, r2
 80046c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
 80046d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	0159      	lsls	r1, r3, #5
 80046e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e6:	0150      	lsls	r0, r2, #5
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4641      	mov	r1, r8
 80046ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800470c:	ebb2 040a 	subs.w	r4, r2, sl
 8004710:	eb63 050b 	sbc.w	r5, r3, fp
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	00eb      	lsls	r3, r5, #3
 800471e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004722:	00e2      	lsls	r2, r4, #3
 8004724:	4614      	mov	r4, r2
 8004726:	461d      	mov	r5, r3
 8004728:	4643      	mov	r3, r8
 800472a:	18e3      	adds	r3, r4, r3
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	464b      	mov	r3, r9
 8004730:	eb45 0303 	adc.w	r3, r5, r3
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004742:	4629      	mov	r1, r5
 8004744:	028b      	lsls	r3, r1, #10
 8004746:	4621      	mov	r1, r4
 8004748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800474c:	4621      	mov	r1, r4
 800474e:	028a      	lsls	r2, r1, #10
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004756:	2200      	movs	r2, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	f7fb fdc6 	bl	80002f0 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4613      	mov	r3, r2
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	3301      	adds	r3, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800477c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800477e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004786:	e002      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800478a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800478c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004790:	4618      	mov	r0, r3
 8004792:	3750      	adds	r7, #80	; 0x50
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	007a1200 	.word	0x007a1200

080047a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000024 	.word	0x20000024

080047c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c4:	f7ff fff0 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	0802f39c 	.word	0x0802f39c

080047e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047ec:	f7ff ffdc 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0b5b      	lsrs	r3, r3, #13
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4903      	ldr	r1, [pc, #12]	; (800480c <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	0802f39c 	.word	0x0802f39c

08004810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d012      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004838:	4b69      	ldr	r3, [pc, #420]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a68      	ldr	r2, [pc, #416]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004842:	6093      	str	r3, [r2, #8]
 8004844:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	4964      	ldr	r1, [pc, #400]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800485a:	2301      	movs	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d017      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800486a:	4b5d      	ldr	r3, [pc, #372]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	4959      	ldr	r1, [pc, #356]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004888:	d101      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800488a:	2301      	movs	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004896:	2301      	movs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d017      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048a6:	4b4e      	ldr	r3, [pc, #312]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	494a      	ldr	r1, [pc, #296]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c4:	d101      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 808b 	beq.w	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f4:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	4a39      	ldr	r2, [pc, #228]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004900:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800490c:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a34      	ldr	r2, [pc, #208]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fe fa34 	bl	8002d84 <HAL_GetTick>
 800491c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004920:	f7fe fa30 	bl	8002d84 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e38f      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004932:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800493e:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d035      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d02e      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004966:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004970:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d114      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fe f9f8 	bl	8002d84 <HAL_GetTick>
 8004994:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004996:	e00a      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fe f9f4 	bl	8002d84 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e351      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0ee      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c6:	d111      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	4901      	ldr	r1, [pc, #4]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
 80049de:	e00b      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40007000 	.word	0x40007000
 80049e8:	0ffffcff 	.word	0x0ffffcff
 80049ec:	4bac      	ldr	r3, [pc, #688]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4aab      	ldr	r2, [pc, #684]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049f6:	6093      	str	r3, [r2, #8]
 80049f8:	4ba9      	ldr	r3, [pc, #676]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a04:	49a6      	ldr	r1, [pc, #664]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d010      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a16:	4ba2      	ldr	r3, [pc, #648]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1c:	4aa0      	ldr	r2, [pc, #640]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a26:	4b9e      	ldr	r3, [pc, #632]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	499b      	ldr	r1, [pc, #620]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a44:	4b96      	ldr	r3, [pc, #600]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a52:	4993      	ldr	r1, [pc, #588]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a66:	4b8e      	ldr	r3, [pc, #568]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a74:	498a      	ldr	r1, [pc, #552]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a88:	4b85      	ldr	r3, [pc, #532]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	4982      	ldr	r1, [pc, #520]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aaa:	4b7d      	ldr	r3, [pc, #500]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4979      	ldr	r1, [pc, #484]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004acc:	4b74      	ldr	r3, [pc, #464]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	4971      	ldr	r1, [pc, #452]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aee:	4b6c      	ldr	r3, [pc, #432]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f023 020c 	bic.w	r2, r3, #12
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afc:	4968      	ldr	r1, [pc, #416]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b10:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	4960      	ldr	r1, [pc, #384]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b32:	4b5b      	ldr	r3, [pc, #364]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	4957      	ldr	r1, [pc, #348]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b54:	4b52      	ldr	r3, [pc, #328]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	494f      	ldr	r1, [pc, #316]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	4946      	ldr	r1, [pc, #280]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b98:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	493e      	ldr	r1, [pc, #248]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc8:	4935      	ldr	r1, [pc, #212]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bdc:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bea:	492d      	ldr	r1, [pc, #180]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d011      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0c:	4924      	ldr	r1, [pc, #144]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3e:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	4914      	ldr	r1, [pc, #80]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c70:	490b      	ldr	r1, [pc, #44]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00f      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c84:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c94:	4902      	ldr	r1, [pc, #8]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cb0:	4b8a      	ldr	r3, [pc, #552]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	4986      	ldr	r1, [pc, #536]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00b      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cd4:	4b81      	ldr	r3, [pc, #516]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	497d      	ldr	r1, [pc, #500]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d006      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80d6 	beq.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d00:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a75      	ldr	r2, [pc, #468]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fe f83a 	bl	8002d84 <HAL_GetTick>
 8004d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d14:	f7fe f836 	bl	8002d84 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e195      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d26:	4b6d      	ldr	r3, [pc, #436]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d021      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d11d      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d46:	4b65      	ldr	r3, [pc, #404]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5a:	0e1b      	lsrs	r3, r3, #24
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	019a      	lsls	r2, r3, #6
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	071b      	lsls	r3, r3, #28
 8004d7a:	4958      	ldr	r1, [pc, #352]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dac:	d129      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dae:	4b4b      	ldr	r3, [pc, #300]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dbc:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc2:	0f1b      	lsrs	r3, r3, #28
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	019a      	lsls	r2, r3, #6
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	493e      	ldr	r1, [pc, #248]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dea:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df0:	f023 021f 	bic.w	r2, r3, #31
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	4938      	ldr	r1, [pc, #224]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01d      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e0e:	4b33      	ldr	r3, [pc, #204]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e14:	0e1b      	lsrs	r3, r3, #24
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e1c:	4b2f      	ldr	r3, [pc, #188]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	0f1b      	lsrs	r3, r3, #28
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	019a      	lsls	r2, r3, #6
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	431a      	orrs	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	061b      	lsls	r3, r3, #24
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	071b      	lsls	r3, r3, #28
 8004e42:	4926      	ldr	r1, [pc, #152]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d011      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	019a      	lsls	r2, r3, #6
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	491a      	ldr	r1, [pc, #104]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fd ff7d 	bl	8002d84 <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e8e:	f7fd ff79 	bl	8002d84 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b64      	cmp	r3, #100	; 0x64
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0d8      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	f040 80ce 	bne.w	8005050 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fd ff60 	bl	8002d84 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ec8:	f7fd ff5c 	bl	8002d84 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d904      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0bb      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ee0:	4b5e      	ldr	r3, [pc, #376]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eec:	d0ec      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02e      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d12a      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f16:	4b51      	ldr	r3, [pc, #324]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f24:	4b4d      	ldr	r3, [pc, #308]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	0f1b      	lsrs	r3, r3, #28
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	019a      	lsls	r2, r3, #6
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	061b      	lsls	r3, r3, #24
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	071b      	lsls	r3, r3, #28
 8004f4a:	4944      	ldr	r1, [pc, #272]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f52:	4b42      	ldr	r3, [pc, #264]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	3b01      	subs	r3, #1
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	493d      	ldr	r1, [pc, #244]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d022      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f80:	d11d      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f82:	4b36      	ldr	r3, [pc, #216]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	0e1b      	lsrs	r3, r3, #24
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f90:	4b32      	ldr	r3, [pc, #200]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	0f1b      	lsrs	r3, r3, #28
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	019a      	lsls	r2, r3, #6
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	431a      	orrs	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	4929      	ldr	r1, [pc, #164]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d028      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	0e1b      	lsrs	r3, r3, #24
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fd8:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	019a      	lsls	r2, r3, #6
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	4917      	ldr	r1, [pc, #92]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4911      	ldr	r1, [pc, #68]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0e      	ldr	r2, [pc, #56]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fd feac 	bl	8002d84 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005030:	f7fd fea8 	bl	8002d84 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e007      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800504a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800504e:	d1ef      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800

08005060 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e01c      	b.n	80050ac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	795b      	ldrb	r3, [r3, #5]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fa62 	bl	800154c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0204 	orr.w	r2, r2, #4
 800509c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e09d      	b.n	8005202 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d108      	bne.n	80050e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d6:	d009      	beq.n	80050ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	61da      	str	r2, [r3, #28]
 80050de:	e005      	b.n	80050ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc fa7e 	bl	8001608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800512c:	d902      	bls.n	8005134 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e002      	b.n	800513a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005138:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005142:	d007      	beq.n	8005154 <HAL_SPI_Init+0xa0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800514c:	d002      	beq.n	8005154 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	ea42 0103 	orr.w	r1, r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f003 0204 	and.w	r2, r3, #4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051d0:	ea42 0103 	orr.w	r1, r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_SPI_Transmit+0x22>
 8005228:	2302      	movs	r3, #2
 800522a:	e158      	b.n	80054de <HAL_SPI_Transmit+0x2d4>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005234:	f7fd fda6 	bl	8002d84 <HAL_GetTick>
 8005238:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800524e:	e13d      	b.n	80054cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_SPI_Transmit+0x52>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005260:	e134      	b.n	80054cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2203      	movs	r2, #3
 8005266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ac:	d10f      	bne.n	80052ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d007      	beq.n	80052ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052f4:	d94b      	bls.n	800538e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_Transmit+0xfa>
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d13e      	bne.n	8005382 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005328:	e02b      	b.n	8005382 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d112      	bne.n	800535e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	1c9a      	adds	r2, r3, #2
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800535c:	e011      	b.n	8005382 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800535e:	f7fd fd11 	bl	8002d84 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d803      	bhi.n	8005376 <HAL_SPI_Transmit+0x16c>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d102      	bne.n	800537c <HAL_SPI_Transmit+0x172>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005380:	e0a4      	b.n	80054cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ce      	bne.n	800532a <HAL_SPI_Transmit+0x120>
 800538c:	e07c      	b.n	8005488 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_SPI_Transmit+0x192>
 8005396:	8afb      	ldrh	r3, [r7, #22]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d170      	bne.n	800547e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d912      	bls.n	80053cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	881a      	ldrh	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	1c9a      	adds	r2, r3, #2
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b02      	subs	r3, #2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ca:	e058      	b.n	800547e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053f2:	e044      	b.n	800547e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d12b      	bne.n	800545a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d912      	bls.n	8005432 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	881a      	ldrh	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	1c9a      	adds	r2, r3, #2
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b02      	subs	r3, #2
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005430:	e025      	b.n	800547e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005458:	e011      	b.n	800547e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545a:	f7fd fc93 	bl	8002d84 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d803      	bhi.n	8005472 <HAL_SPI_Transmit+0x268>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d102      	bne.n	8005478 <HAL_SPI_Transmit+0x26e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800547c:	e026      	b.n	80054cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1b5      	bne.n	80053f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f945 	bl	800571c <SPI_EndRxTxTransaction>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10a      	bne.n	80054bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e000      	b.n	80054cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80054ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054f8:	f7fd fc44 	bl	8002d84 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	4413      	add	r3, r2
 8005506:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005508:	f7fd fc3c 	bl	8002d84 <HAL_GetTick>
 800550c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800550e:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	015b      	lsls	r3, r3, #5
 8005514:	0d1b      	lsrs	r3, r3, #20
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800551e:	e054      	b.n	80055ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d050      	beq.n	80055ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005528:	f7fd fc2c 	bl	8002d84 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	429a      	cmp	r2, r3
 8005536:	d902      	bls.n	800553e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d13d      	bne.n	80055ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800554c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005556:	d111      	bne.n	800557c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005560:	d004      	beq.n	800556c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556a:	d107      	bne.n	800557c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005584:	d10f      	bne.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e017      	b.n	80055ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4013      	ands	r3, r2
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d19b      	bne.n	8005520 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000024 	.word	0x20000024

080055f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005606:	f7fd fbbd 	bl	8002d84 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	4413      	add	r3, r2
 8005614:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005616:	f7fd fbb5 	bl	8002d84 <HAL_GetTick>
 800561a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800561c:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	00da      	lsls	r2, r3, #3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	0d1b      	lsrs	r3, r3, #20
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	e062      	b.n	80056fc <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800563c:	d109      	bne.n	8005652 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005650:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d050      	beq.n	80056fc <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800565a:	f7fd fb93 	bl	8002d84 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	429a      	cmp	r2, r3
 8005668:	d902      	bls.n	8005670 <SPI_WaitFifoStateUntilTimeout+0x78>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d13d      	bne.n	80056ec <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800567e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005688:	d111      	bne.n	80056ae <SPI_WaitFifoStateUntilTimeout+0xb6>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005692:	d004      	beq.n	800569e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d107      	bne.n	80056ae <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	d10f      	bne.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e010      	b.n	800570e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d194      	bne.n	8005636 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000024 	.word	0x20000024

0800571c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ff5f 	bl	80055f8 <SPI_WaitFifoStateUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e027      	b.n	80057a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	2180      	movs	r1, #128	; 0x80
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fec4 	bl	80054e8 <SPI_WaitFlagStateUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e014      	b.n	80057a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff38 	bl	80055f8 <SPI_WaitFifoStateUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e000      	b.n	80057a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e049      	b.n	800584e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fc f936 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f000 fac6 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d001      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e054      	b.n	800591a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a26      	ldr	r2, [pc, #152]	; (8005928 <HAL_TIM_Base_Start_IT+0xd0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d01d      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_TIM_Base_Start_IT+0xd4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a21      	ldr	r2, [pc, #132]	; (8005930 <HAL_TIM_Base_Start_IT+0xd8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <HAL_TIM_Base_Start_IT+0xdc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <HAL_TIM_Base_Start_IT+0xe0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <HAL_TIM_Base_Start_IT+0xe4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <HAL_TIM_Base_Start_IT+0xe8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d115      	bne.n	8005904 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_TIM_Base_Start_IT+0xec>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d015      	beq.n	8005916 <HAL_TIM_Base_Start_IT+0xbe>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d011      	beq.n	8005916 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	e008      	b.n	8005916 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e000      	b.n	8005918 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800
 8005944:	00010007 	.word	0x00010007

08005948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0202 	mvn.w	r2, #2
 8005974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9d6 	bl	8005d3c <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9c8 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f9d9 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0204 	mvn.w	r2, #4
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9ac 	bl	8005d3c <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f99e 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9af 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0208 	mvn.w	r2, #8
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2204      	movs	r2, #4
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f982 	bl	8005d3c <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f974 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f985 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d122      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0210 	mvn.w	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2208      	movs	r2, #8
 8005a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f958 	bl	8005d3c <HAL_TIM_IC_CaptureCallback>
 8005a8c:	e005      	b.n	8005a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f94a 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f95b 	bl	8005d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0201 	mvn.w	r2, #1
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f924 	bl	8005d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb12 	bl	800611c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d10e      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d107      	bne.n	8005b26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fb05 	bl	8006130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d10e      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d107      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f909 	bl	8005d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d10e      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d107      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f06f 0220 	mvn.w	r2, #32
 8005b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fac5 	bl	8006108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIM_ConfigClockSource+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e0b3      	b.n	8005d08 <HAL_TIM_ConfigClockSource+0x180>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4b55      	ldr	r3, [pc, #340]	; (8005d10 <HAL_TIM_ConfigClockSource+0x188>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd8:	d03e      	beq.n	8005c58 <HAL_TIM_ConfigClockSource+0xd0>
 8005bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bde:	f200 8087 	bhi.w	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be6:	f000 8085 	beq.w	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bee:	d87f      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005bf0:	2b70      	cmp	r3, #112	; 0x70
 8005bf2:	d01a      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0xa2>
 8005bf4:	2b70      	cmp	r3, #112	; 0x70
 8005bf6:	d87b      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005bf8:	2b60      	cmp	r3, #96	; 0x60
 8005bfa:	d050      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x116>
 8005bfc:	2b60      	cmp	r3, #96	; 0x60
 8005bfe:	d877      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005c00:	2b50      	cmp	r3, #80	; 0x50
 8005c02:	d03c      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0xf6>
 8005c04:	2b50      	cmp	r3, #80	; 0x50
 8005c06:	d873      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d058      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x136>
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	d86f      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005c10:	2b30      	cmp	r3, #48	; 0x30
 8005c12:	d064      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x156>
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d86b      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d060      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x156>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d867      	bhi.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d05c      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x156>
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d05a      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c28:	e062      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6899      	ldr	r1, [r3, #8]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f000 f9b7 	bl	8005fac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	609a      	str	r2, [r3, #8]
      break;
 8005c56:	e04e      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	6899      	ldr	r1, [r3, #8]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f000 f9a0 	bl	8005fac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7a:	609a      	str	r2, [r3, #8]
      break;
 8005c7c:	e03b      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6859      	ldr	r1, [r3, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f000 f914 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2150      	movs	r1, #80	; 0x50
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f96d 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005c9c:	e02b      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f000 f933 	bl	8005f16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2160      	movs	r1, #96	; 0x60
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f95d 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e01b      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6859      	ldr	r1, [r3, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f000 f8f4 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2140      	movs	r1, #64	; 0x40
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f94d 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005cdc:	e00b      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 f944 	bl	8005f76 <TIM_ITRx_SetConfig>
        break;
 8005cee:	e002      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005cf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	fffeff88 	.word	0xfffeff88

08005d14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d00f      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3d      	ldr	r2, [pc, #244]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3c      	ldr	r2, [pc, #240]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3b      	ldr	r2, [pc, #236]	; (8005e98 <TIM_Base_SetConfig+0x120>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d027      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d023      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01f      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	; (8005e98 <TIM_Base_SetConfig+0x120>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d017      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <TIM_Base_SetConfig+0x128>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a27      	ldr	r2, [pc, #156]	; (8005ea4 <TIM_Base_SetConfig+0x12c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <TIM_Base_SetConfig+0x130>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a25      	ldr	r2, [pc, #148]	; (8005eac <TIM_Base_SetConfig+0x134>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <TIM_Base_SetConfig+0x138>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <TIM_Base_SetConfig+0x13c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_Base_SetConfig+0xf8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <TIM_Base_SetConfig+0x124>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d103      	bne.n	8005e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	615a      	str	r2, [r3, #20]
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800
 8005eac:	40001800 	.word	0x40001800
 8005eb0:	40001c00 	.word	0x40001c00
 8005eb4:	40002000 	.word	0x40002000

08005eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 030a 	bic.w	r3, r3, #10
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0210 	bic.w	r2, r3, #16
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	031b      	lsls	r3, r3, #12
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f043 0307 	orr.w	r3, r3, #7
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	609a      	str	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	021a      	lsls	r2, r3, #8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006000:	2302      	movs	r3, #2
 8006002:	e06d      	b.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a30      	ldr	r2, [pc, #192]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800603e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a20      	ldr	r2, [pc, #128]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d01d      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1a      	ldr	r2, [pc, #104]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d10c      	bne.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40014000 	.word	0x40014000
 8006104:	40001800 	.word	0x40001800

08006108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e040      	b.n	80061d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fcd2 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f82c 	bl	80061e0 <UART_SetConfig>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e022      	b.n	80061d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa84 	bl	80066a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb0b 	bl	80067ec <UART_CheckIdleState>
 80061d6:	4603      	mov	r3, r0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4ba6      	ldr	r3, [pc, #664]	; (80064a4 <UART_SetConfig+0x2c4>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	430b      	orrs	r3, r1
 8006216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a94      	ldr	r2, [pc, #592]	; (80064a8 <UART_SetConfig+0x2c8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d120      	bne.n	800629e <UART_SetConfig+0xbe>
 800625c:	4b93      	ldr	r3, [pc, #588]	; (80064ac <UART_SetConfig+0x2cc>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b03      	cmp	r3, #3
 8006268:	d816      	bhi.n	8006298 <UART_SetConfig+0xb8>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <UART_SetConfig+0x90>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006281 	.word	0x08006281
 8006274:	0800628d 	.word	0x0800628d
 8006278:	08006287 	.word	0x08006287
 800627c:	08006293 	.word	0x08006293
 8006280:	2301      	movs	r3, #1
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e150      	b.n	8006528 <UART_SetConfig+0x348>
 8006286:	2302      	movs	r3, #2
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e14d      	b.n	8006528 <UART_SetConfig+0x348>
 800628c:	2304      	movs	r3, #4
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e14a      	b.n	8006528 <UART_SetConfig+0x348>
 8006292:	2308      	movs	r3, #8
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e147      	b.n	8006528 <UART_SetConfig+0x348>
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e144      	b.n	8006528 <UART_SetConfig+0x348>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a83      	ldr	r2, [pc, #524]	; (80064b0 <UART_SetConfig+0x2d0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d132      	bne.n	800630e <UART_SetConfig+0x12e>
 80062a8:	4b80      	ldr	r3, [pc, #512]	; (80064ac <UART_SetConfig+0x2cc>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d828      	bhi.n	8006308 <UART_SetConfig+0x128>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <UART_SetConfig+0xdc>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	08006309 	.word	0x08006309
 80062c4:	08006309 	.word	0x08006309
 80062c8:	08006309 	.word	0x08006309
 80062cc:	080062fd 	.word	0x080062fd
 80062d0:	08006309 	.word	0x08006309
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006309 	.word	0x08006309
 80062dc:	080062f7 	.word	0x080062f7
 80062e0:	08006309 	.word	0x08006309
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006309 	.word	0x08006309
 80062ec:	08006303 	.word	0x08006303
 80062f0:	2300      	movs	r3, #0
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e118      	b.n	8006528 <UART_SetConfig+0x348>
 80062f6:	2302      	movs	r3, #2
 80062f8:	77fb      	strb	r3, [r7, #31]
 80062fa:	e115      	b.n	8006528 <UART_SetConfig+0x348>
 80062fc:	2304      	movs	r3, #4
 80062fe:	77fb      	strb	r3, [r7, #31]
 8006300:	e112      	b.n	8006528 <UART_SetConfig+0x348>
 8006302:	2308      	movs	r3, #8
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e10f      	b.n	8006528 <UART_SetConfig+0x348>
 8006308:	2310      	movs	r3, #16
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e10c      	b.n	8006528 <UART_SetConfig+0x348>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a68      	ldr	r2, [pc, #416]	; (80064b4 <UART_SetConfig+0x2d4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d120      	bne.n	800635a <UART_SetConfig+0x17a>
 8006318:	4b64      	ldr	r3, [pc, #400]	; (80064ac <UART_SetConfig+0x2cc>)
 800631a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006322:	2b30      	cmp	r3, #48	; 0x30
 8006324:	d013      	beq.n	800634e <UART_SetConfig+0x16e>
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d814      	bhi.n	8006354 <UART_SetConfig+0x174>
 800632a:	2b20      	cmp	r3, #32
 800632c:	d009      	beq.n	8006342 <UART_SetConfig+0x162>
 800632e:	2b20      	cmp	r3, #32
 8006330:	d810      	bhi.n	8006354 <UART_SetConfig+0x174>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <UART_SetConfig+0x15c>
 8006336:	2b10      	cmp	r3, #16
 8006338:	d006      	beq.n	8006348 <UART_SetConfig+0x168>
 800633a:	e00b      	b.n	8006354 <UART_SetConfig+0x174>
 800633c:	2300      	movs	r3, #0
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e0f2      	b.n	8006528 <UART_SetConfig+0x348>
 8006342:	2302      	movs	r3, #2
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e0ef      	b.n	8006528 <UART_SetConfig+0x348>
 8006348:	2304      	movs	r3, #4
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e0ec      	b.n	8006528 <UART_SetConfig+0x348>
 800634e:	2308      	movs	r3, #8
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e0e9      	b.n	8006528 <UART_SetConfig+0x348>
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e0e6      	b.n	8006528 <UART_SetConfig+0x348>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a56      	ldr	r2, [pc, #344]	; (80064b8 <UART_SetConfig+0x2d8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d120      	bne.n	80063a6 <UART_SetConfig+0x1c6>
 8006364:	4b51      	ldr	r3, [pc, #324]	; (80064ac <UART_SetConfig+0x2cc>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800636e:	2bc0      	cmp	r3, #192	; 0xc0
 8006370:	d013      	beq.n	800639a <UART_SetConfig+0x1ba>
 8006372:	2bc0      	cmp	r3, #192	; 0xc0
 8006374:	d814      	bhi.n	80063a0 <UART_SetConfig+0x1c0>
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	d009      	beq.n	800638e <UART_SetConfig+0x1ae>
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d810      	bhi.n	80063a0 <UART_SetConfig+0x1c0>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <UART_SetConfig+0x1a8>
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d006      	beq.n	8006394 <UART_SetConfig+0x1b4>
 8006386:	e00b      	b.n	80063a0 <UART_SetConfig+0x1c0>
 8006388:	2300      	movs	r3, #0
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e0cc      	b.n	8006528 <UART_SetConfig+0x348>
 800638e:	2302      	movs	r3, #2
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e0c9      	b.n	8006528 <UART_SetConfig+0x348>
 8006394:	2304      	movs	r3, #4
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e0c6      	b.n	8006528 <UART_SetConfig+0x348>
 800639a:	2308      	movs	r3, #8
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e0c3      	b.n	8006528 <UART_SetConfig+0x348>
 80063a0:	2310      	movs	r3, #16
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e0c0      	b.n	8006528 <UART_SetConfig+0x348>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a44      	ldr	r2, [pc, #272]	; (80064bc <UART_SetConfig+0x2dc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d125      	bne.n	80063fc <UART_SetConfig+0x21c>
 80063b0:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <UART_SetConfig+0x2cc>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063be:	d017      	beq.n	80063f0 <UART_SetConfig+0x210>
 80063c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c4:	d817      	bhi.n	80063f6 <UART_SetConfig+0x216>
 80063c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ca:	d00b      	beq.n	80063e4 <UART_SetConfig+0x204>
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d811      	bhi.n	80063f6 <UART_SetConfig+0x216>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <UART_SetConfig+0x1fe>
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063da:	d006      	beq.n	80063ea <UART_SetConfig+0x20a>
 80063dc:	e00b      	b.n	80063f6 <UART_SetConfig+0x216>
 80063de:	2300      	movs	r3, #0
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e0a1      	b.n	8006528 <UART_SetConfig+0x348>
 80063e4:	2302      	movs	r3, #2
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e09e      	b.n	8006528 <UART_SetConfig+0x348>
 80063ea:	2304      	movs	r3, #4
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e09b      	b.n	8006528 <UART_SetConfig+0x348>
 80063f0:	2308      	movs	r3, #8
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e098      	b.n	8006528 <UART_SetConfig+0x348>
 80063f6:	2310      	movs	r3, #16
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e095      	b.n	8006528 <UART_SetConfig+0x348>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <UART_SetConfig+0x2e0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d125      	bne.n	8006452 <UART_SetConfig+0x272>
 8006406:	4b29      	ldr	r3, [pc, #164]	; (80064ac <UART_SetConfig+0x2cc>)
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006414:	d017      	beq.n	8006446 <UART_SetConfig+0x266>
 8006416:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800641a:	d817      	bhi.n	800644c <UART_SetConfig+0x26c>
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d00b      	beq.n	800643a <UART_SetConfig+0x25a>
 8006422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006426:	d811      	bhi.n	800644c <UART_SetConfig+0x26c>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <UART_SetConfig+0x254>
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d006      	beq.n	8006440 <UART_SetConfig+0x260>
 8006432:	e00b      	b.n	800644c <UART_SetConfig+0x26c>
 8006434:	2301      	movs	r3, #1
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e076      	b.n	8006528 <UART_SetConfig+0x348>
 800643a:	2302      	movs	r3, #2
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e073      	b.n	8006528 <UART_SetConfig+0x348>
 8006440:	2304      	movs	r3, #4
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e070      	b.n	8006528 <UART_SetConfig+0x348>
 8006446:	2308      	movs	r3, #8
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e06d      	b.n	8006528 <UART_SetConfig+0x348>
 800644c:	2310      	movs	r3, #16
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e06a      	b.n	8006528 <UART_SetConfig+0x348>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <UART_SetConfig+0x2e4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d138      	bne.n	80064ce <UART_SetConfig+0x2ee>
 800645c:	4b13      	ldr	r3, [pc, #76]	; (80064ac <UART_SetConfig+0x2cc>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006466:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800646a:	d017      	beq.n	800649c <UART_SetConfig+0x2bc>
 800646c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006470:	d82a      	bhi.n	80064c8 <UART_SetConfig+0x2e8>
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006476:	d00b      	beq.n	8006490 <UART_SetConfig+0x2b0>
 8006478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647c:	d824      	bhi.n	80064c8 <UART_SetConfig+0x2e8>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <UART_SetConfig+0x2aa>
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	d006      	beq.n	8006496 <UART_SetConfig+0x2b6>
 8006488:	e01e      	b.n	80064c8 <UART_SetConfig+0x2e8>
 800648a:	2300      	movs	r3, #0
 800648c:	77fb      	strb	r3, [r7, #31]
 800648e:	e04b      	b.n	8006528 <UART_SetConfig+0x348>
 8006490:	2302      	movs	r3, #2
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e048      	b.n	8006528 <UART_SetConfig+0x348>
 8006496:	2304      	movs	r3, #4
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e045      	b.n	8006528 <UART_SetConfig+0x348>
 800649c:	2308      	movs	r3, #8
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e042      	b.n	8006528 <UART_SetConfig+0x348>
 80064a2:	bf00      	nop
 80064a4:	efff69f3 	.word	0xefff69f3
 80064a8:	40011000 	.word	0x40011000
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40004400 	.word	0x40004400
 80064b4:	40004800 	.word	0x40004800
 80064b8:	40004c00 	.word	0x40004c00
 80064bc:	40005000 	.word	0x40005000
 80064c0:	40011400 	.word	0x40011400
 80064c4:	40007800 	.word	0x40007800
 80064c8:	2310      	movs	r3, #16
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e02c      	b.n	8006528 <UART_SetConfig+0x348>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a72      	ldr	r2, [pc, #456]	; (800669c <UART_SetConfig+0x4bc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d125      	bne.n	8006524 <UART_SetConfig+0x344>
 80064d8:	4b71      	ldr	r3, [pc, #452]	; (80066a0 <UART_SetConfig+0x4c0>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064e6:	d017      	beq.n	8006518 <UART_SetConfig+0x338>
 80064e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064ec:	d817      	bhi.n	800651e <UART_SetConfig+0x33e>
 80064ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f2:	d00b      	beq.n	800650c <UART_SetConfig+0x32c>
 80064f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f8:	d811      	bhi.n	800651e <UART_SetConfig+0x33e>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <UART_SetConfig+0x326>
 80064fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006502:	d006      	beq.n	8006512 <UART_SetConfig+0x332>
 8006504:	e00b      	b.n	800651e <UART_SetConfig+0x33e>
 8006506:	2300      	movs	r3, #0
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e00d      	b.n	8006528 <UART_SetConfig+0x348>
 800650c:	2302      	movs	r3, #2
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e00a      	b.n	8006528 <UART_SetConfig+0x348>
 8006512:	2304      	movs	r3, #4
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e007      	b.n	8006528 <UART_SetConfig+0x348>
 8006518:	2308      	movs	r3, #8
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e004      	b.n	8006528 <UART_SetConfig+0x348>
 800651e:	2310      	movs	r3, #16
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e001      	b.n	8006528 <UART_SetConfig+0x348>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	d15c      	bne.n	80065ec <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8006532:	7ffb      	ldrb	r3, [r7, #31]
 8006534:	2b08      	cmp	r3, #8
 8006536:	d828      	bhi.n	800658a <UART_SetConfig+0x3aa>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0x360>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006565 	.word	0x08006565
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006575 	.word	0x08006575
 800654c:	0800658b 	.word	0x0800658b
 8006550:	0800657b 	.word	0x0800657b
 8006554:	0800658b 	.word	0x0800658b
 8006558:	0800658b 	.word	0x0800658b
 800655c:	0800658b 	.word	0x0800658b
 8006560:	08006583 	.word	0x08006583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006564:	f7fe f92c 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8006568:	61b8      	str	r0, [r7, #24]
        break;
 800656a:	e013      	b.n	8006594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800656c:	f7fe f93c 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 8006570:	61b8      	str	r0, [r7, #24]
        break;
 8006572:	e00f      	b.n	8006594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006574:	4b4b      	ldr	r3, [pc, #300]	; (80066a4 <UART_SetConfig+0x4c4>)
 8006576:	61bb      	str	r3, [r7, #24]
        break;
 8006578:	e00c      	b.n	8006594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657a:	f7fe f80f 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800657e:	61b8      	str	r0, [r7, #24]
        break;
 8006580:	e008      	b.n	8006594 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006586:	61bb      	str	r3, [r7, #24]
        break;
 8006588:	e004      	b.n	8006594 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	77bb      	strb	r3, [r7, #30]
        break;
 8006592:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d074      	beq.n	8006684 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	005a      	lsls	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	441a      	add	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d916      	bls.n	80065e6 <UART_SetConfig+0x406>
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065be:	d212      	bcs.n	80065e6 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f023 030f 	bic.w	r3, r3, #15
 80065c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	89fb      	ldrh	r3, [r7, #14]
 80065d8:	4313      	orrs	r3, r2
 80065da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	89fa      	ldrh	r2, [r7, #14]
 80065e2:	60da      	str	r2, [r3, #12]
 80065e4:	e04e      	b.n	8006684 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	77bb      	strb	r3, [r7, #30]
 80065ea:	e04b      	b.n	8006684 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065ec:	7ffb      	ldrb	r3, [r7, #31]
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d827      	bhi.n	8006642 <UART_SetConfig+0x462>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <UART_SetConfig+0x418>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	08006643 	.word	0x08006643
 8006608:	08006633 	.word	0x08006633
 800660c:	08006643 	.word	0x08006643
 8006610:	08006643 	.word	0x08006643
 8006614:	08006643 	.word	0x08006643
 8006618:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fe f8d0 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8006620:	61b8      	str	r0, [r7, #24]
        break;
 8006622:	e013      	b.n	800664c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006624:	f7fe f8e0 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 8006628:	61b8      	str	r0, [r7, #24]
        break;
 800662a:	e00f      	b.n	800664c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <UART_SetConfig+0x4c4>)
 800662e:	61bb      	str	r3, [r7, #24]
        break;
 8006630:	e00c      	b.n	800664c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006632:	f7fd ffb3 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8006636:	61b8      	str	r0, [r7, #24]
        break;
 8006638:	e008      	b.n	800664c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800663e:	61bb      	str	r3, [r7, #24]
        break;
 8006640:	e004      	b.n	800664c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	77bb      	strb	r3, [r7, #30]
        break;
 800664a:	bf00      	nop
    }

    if (pclk != 0U)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d018      	beq.n	8006684 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	085a      	lsrs	r2, r3, #1
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	441a      	add	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	b29b      	uxth	r3, r3
 8006666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d908      	bls.n	8006680 <UART_SetConfig+0x4a0>
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d204      	bcs.n	8006680 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	e001      	b.n	8006684 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006690:	7fbb      	ldrb	r3, [r7, #30]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40007c00 	.word	0x40007c00
 80066a0:	40023800 	.word	0x40023800
 80066a4:	00f42400 	.word	0x00f42400

080066a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01a      	beq.n	80067be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a6:	d10a      	bne.n	80067be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067fc:	f7fc fac2 	bl	8002d84 <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b08      	cmp	r3, #8
 800680e:	d10e      	bne.n	800682e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f82d 	bl	800687e <UART_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e023      	b.n	8006876 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b04      	cmp	r3, #4
 800683a:	d10e      	bne.n	800685a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800683c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f817 	bl	800687e <UART_WaitOnFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e00d      	b.n	8006876 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688e:	e05e      	b.n	800694e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d05a      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006898:	f7fc fa74 	bl	8002d84 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <UART_WaitOnFlagUntilTimeout+0x30>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d11b      	bne.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e043      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02c      	beq.n	800694e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006902:	d124      	bne.n	800694e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800691c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e00f      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4013      	ands	r3, r2
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	429a      	cmp	r2, r3
 800696a:	d091      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <__cvt>:
 8006976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006978:	ed2d 8b02 	vpush	{d8}
 800697c:	eeb0 8b40 	vmov.f64	d8, d0
 8006980:	b085      	sub	sp, #20
 8006982:	4617      	mov	r7, r2
 8006984:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006986:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006988:	ee18 2a90 	vmov	r2, s17
 800698c:	f025 0520 	bic.w	r5, r5, #32
 8006990:	2a00      	cmp	r2, #0
 8006992:	bfb6      	itet	lt
 8006994:	222d      	movlt	r2, #45	; 0x2d
 8006996:	2200      	movge	r2, #0
 8006998:	eeb1 8b40 	vneglt.f64	d8, d0
 800699c:	2d46      	cmp	r5, #70	; 0x46
 800699e:	460c      	mov	r4, r1
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	d004      	beq.n	80069ae <__cvt+0x38>
 80069a4:	2d45      	cmp	r5, #69	; 0x45
 80069a6:	d100      	bne.n	80069aa <__cvt+0x34>
 80069a8:	3401      	adds	r4, #1
 80069aa:	2102      	movs	r1, #2
 80069ac:	e000      	b.n	80069b0 <__cvt+0x3a>
 80069ae:	2103      	movs	r1, #3
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	ab02      	add	r3, sp, #8
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	4622      	mov	r2, r4
 80069ba:	4633      	mov	r3, r6
 80069bc:	eeb0 0b48 	vmov.f64	d0, d8
 80069c0:	f000 fe2e 	bl	8007620 <_dtoa_r>
 80069c4:	2d47      	cmp	r5, #71	; 0x47
 80069c6:	d101      	bne.n	80069cc <__cvt+0x56>
 80069c8:	07fb      	lsls	r3, r7, #31
 80069ca:	d51a      	bpl.n	8006a02 <__cvt+0x8c>
 80069cc:	2d46      	cmp	r5, #70	; 0x46
 80069ce:	eb00 0204 	add.w	r2, r0, r4
 80069d2:	d10c      	bne.n	80069ee <__cvt+0x78>
 80069d4:	7803      	ldrb	r3, [r0, #0]
 80069d6:	2b30      	cmp	r3, #48	; 0x30
 80069d8:	d107      	bne.n	80069ea <__cvt+0x74>
 80069da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80069de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e2:	bf1c      	itt	ne
 80069e4:	f1c4 0401 	rsbne	r4, r4, #1
 80069e8:	6034      	strne	r4, [r6, #0]
 80069ea:	6833      	ldr	r3, [r6, #0]
 80069ec:	441a      	add	r2, r3
 80069ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80069f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f6:	bf08      	it	eq
 80069f8:	9203      	streq	r2, [sp, #12]
 80069fa:	2130      	movs	r1, #48	; 0x30
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d307      	bcc.n	8006a12 <__cvt+0x9c>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a06:	1a1b      	subs	r3, r3, r0
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	b005      	add	sp, #20
 8006a0c:	ecbd 8b02 	vpop	{d8}
 8006a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a12:	1c5c      	adds	r4, r3, #1
 8006a14:	9403      	str	r4, [sp, #12]
 8006a16:	7019      	strb	r1, [r3, #0]
 8006a18:	e7f0      	b.n	80069fc <__cvt+0x86>

08006a1a <__exponent>:
 8006a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	bfb8      	it	lt
 8006a22:	4249      	neglt	r1, r1
 8006a24:	f803 2b02 	strb.w	r2, [r3], #2
 8006a28:	bfb4      	ite	lt
 8006a2a:	222d      	movlt	r2, #45	; 0x2d
 8006a2c:	222b      	movge	r2, #43	; 0x2b
 8006a2e:	2909      	cmp	r1, #9
 8006a30:	7042      	strb	r2, [r0, #1]
 8006a32:	dd2a      	ble.n	8006a8a <__exponent+0x70>
 8006a34:	f10d 0207 	add.w	r2, sp, #7
 8006a38:	4617      	mov	r7, r2
 8006a3a:	260a      	movs	r6, #10
 8006a3c:	4694      	mov	ip, r2
 8006a3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a42:	fb06 1415 	mls	r4, r6, r5, r1
 8006a46:	3430      	adds	r4, #48	; 0x30
 8006a48:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	2c63      	cmp	r4, #99	; 0x63
 8006a50:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a54:	4629      	mov	r1, r5
 8006a56:	dcf1      	bgt.n	8006a3c <__exponent+0x22>
 8006a58:	3130      	adds	r1, #48	; 0x30
 8006a5a:	f1ac 0402 	sub.w	r4, ip, #2
 8006a5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a62:	1c41      	adds	r1, r0, #1
 8006a64:	4622      	mov	r2, r4
 8006a66:	42ba      	cmp	r2, r7
 8006a68:	d30a      	bcc.n	8006a80 <__exponent+0x66>
 8006a6a:	f10d 0209 	add.w	r2, sp, #9
 8006a6e:	eba2 020c 	sub.w	r2, r2, ip
 8006a72:	42bc      	cmp	r4, r7
 8006a74:	bf88      	it	hi
 8006a76:	2200      	movhi	r2, #0
 8006a78:	4413      	add	r3, r2
 8006a7a:	1a18      	subs	r0, r3, r0
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a80:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a84:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a88:	e7ed      	b.n	8006a66 <__exponent+0x4c>
 8006a8a:	2330      	movs	r3, #48	; 0x30
 8006a8c:	3130      	adds	r1, #48	; 0x30
 8006a8e:	7083      	strb	r3, [r0, #2]
 8006a90:	70c1      	strb	r1, [r0, #3]
 8006a92:	1d03      	adds	r3, r0, #4
 8006a94:	e7f1      	b.n	8006a7a <__exponent+0x60>
	...

08006a98 <_printf_float>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	b08b      	sub	sp, #44	; 0x2c
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	f000 fcbb 	bl	8007424 <_localeconv_r>
 8006aae:	f8d0 b000 	ldr.w	fp, [r0]
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	f7f9 fc14 	bl	80002e0 <strlen>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9308      	str	r3, [sp, #32]
 8006abc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ac4:	6822      	ldr	r2, [r4, #0]
 8006ac6:	3307      	adds	r3, #7
 8006ac8:	f023 0307 	bic.w	r3, r3, #7
 8006acc:	f103 0108 	add.w	r1, r3, #8
 8006ad0:	f8c8 1000 	str.w	r1, [r8]
 8006ad4:	ed93 0b00 	vldr	d0, [r3]
 8006ad8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006d38 <_printf_float+0x2a0>
 8006adc:	eeb0 7bc0 	vabs.f64	d7, d0
 8006ae0:	eeb4 7b46 	vcmp.f64	d7, d6
 8006ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006aec:	4682      	mov	sl, r0
 8006aee:	dd24      	ble.n	8006b3a <_printf_float+0xa2>
 8006af0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	d502      	bpl.n	8006b00 <_printf_float+0x68>
 8006afa:	232d      	movs	r3, #45	; 0x2d
 8006afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b00:	498f      	ldr	r1, [pc, #572]	; (8006d40 <_printf_float+0x2a8>)
 8006b02:	4b90      	ldr	r3, [pc, #576]	; (8006d44 <_printf_float+0x2ac>)
 8006b04:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b08:	bf94      	ite	ls
 8006b0a:	4688      	movls	r8, r1
 8006b0c:	4698      	movhi	r8, r3
 8006b0e:	2303      	movs	r3, #3
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	f022 0204 	bic.w	r2, r2, #4
 8006b16:	2300      	movs	r3, #0
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	9700      	str	r7, [sp, #0]
 8006b1e:	4633      	mov	r3, r6
 8006b20:	aa09      	add	r2, sp, #36	; 0x24
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f9d1 	bl	8006ecc <_printf_common>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	f040 808a 	bne.w	8006c44 <_printf_float+0x1ac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	b00b      	add	sp, #44	; 0x2c
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b42:	d709      	bvc.n	8006b58 <_printf_float+0xc0>
 8006b44:	ee10 3a90 	vmov	r3, s1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bfbc      	itt	lt
 8006b4c:	232d      	movlt	r3, #45	; 0x2d
 8006b4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b52:	497d      	ldr	r1, [pc, #500]	; (8006d48 <_printf_float+0x2b0>)
 8006b54:	4b7d      	ldr	r3, [pc, #500]	; (8006d4c <_printf_float+0x2b4>)
 8006b56:	e7d5      	b.n	8006b04 <_printf_float+0x6c>
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006b5e:	9104      	str	r1, [sp, #16]
 8006b60:	1c59      	adds	r1, r3, #1
 8006b62:	d13c      	bne.n	8006bde <_printf_float+0x146>
 8006b64:	2306      	movs	r3, #6
 8006b66:	6063      	str	r3, [r4, #4]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9303      	str	r3, [sp, #12]
 8006b6c:	ab08      	add	r3, sp, #32
 8006b6e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b76:	ab07      	add	r3, sp, #28
 8006b78:	6861      	ldr	r1, [r4, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	6022      	str	r2, [r4, #0]
 8006b7e:	f10d 031b 	add.w	r3, sp, #27
 8006b82:	4628      	mov	r0, r5
 8006b84:	f7ff fef7 	bl	8006976 <__cvt>
 8006b88:	9b04      	ldr	r3, [sp, #16]
 8006b8a:	9907      	ldr	r1, [sp, #28]
 8006b8c:	2b47      	cmp	r3, #71	; 0x47
 8006b8e:	4680      	mov	r8, r0
 8006b90:	d108      	bne.n	8006ba4 <_printf_float+0x10c>
 8006b92:	1cc8      	adds	r0, r1, #3
 8006b94:	db02      	blt.n	8006b9c <_printf_float+0x104>
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	dd41      	ble.n	8006c20 <_printf_float+0x188>
 8006b9c:	f1a9 0902 	sub.w	r9, r9, #2
 8006ba0:	fa5f f989 	uxtb.w	r9, r9
 8006ba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ba8:	d820      	bhi.n	8006bec <_printf_float+0x154>
 8006baa:	3901      	subs	r1, #1
 8006bac:	464a      	mov	r2, r9
 8006bae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bb2:	9107      	str	r1, [sp, #28]
 8006bb4:	f7ff ff31 	bl	8006a1a <__exponent>
 8006bb8:	9a08      	ldr	r2, [sp, #32]
 8006bba:	9004      	str	r0, [sp, #16]
 8006bbc:	1813      	adds	r3, r2, r0
 8006bbe:	2a01      	cmp	r2, #1
 8006bc0:	6123      	str	r3, [r4, #16]
 8006bc2:	dc02      	bgt.n	8006bca <_printf_float+0x132>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	07d2      	lsls	r2, r2, #31
 8006bc8:	d501      	bpl.n	8006bce <_printf_float+0x136>
 8006bca:	3301      	adds	r3, #1
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0a2      	beq.n	8006b1c <_printf_float+0x84>
 8006bd6:	232d      	movs	r3, #45	; 0x2d
 8006bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bdc:	e79e      	b.n	8006b1c <_printf_float+0x84>
 8006bde:	9904      	ldr	r1, [sp, #16]
 8006be0:	2947      	cmp	r1, #71	; 0x47
 8006be2:	d1c1      	bne.n	8006b68 <_printf_float+0xd0>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1bf      	bne.n	8006b68 <_printf_float+0xd0>
 8006be8:	2301      	movs	r3, #1
 8006bea:	e7bc      	b.n	8006b66 <_printf_float+0xce>
 8006bec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006bf0:	d118      	bne.n	8006c24 <_printf_float+0x18c>
 8006bf2:	2900      	cmp	r1, #0
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	dd0b      	ble.n	8006c10 <_printf_float+0x178>
 8006bf8:	6121      	str	r1, [r4, #16]
 8006bfa:	b913      	cbnz	r3, 8006c02 <_printf_float+0x16a>
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	07d0      	lsls	r0, r2, #31
 8006c00:	d502      	bpl.n	8006c08 <_printf_float+0x170>
 8006c02:	3301      	adds	r3, #1
 8006c04:	440b      	add	r3, r1
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	e7de      	b.n	8006bce <_printf_float+0x136>
 8006c10:	b913      	cbnz	r3, 8006c18 <_printf_float+0x180>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	07d2      	lsls	r2, r2, #31
 8006c16:	d501      	bpl.n	8006c1c <_printf_float+0x184>
 8006c18:	3302      	adds	r3, #2
 8006c1a:	e7f4      	b.n	8006c06 <_printf_float+0x16e>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e7f2      	b.n	8006c06 <_printf_float+0x16e>
 8006c20:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	4299      	cmp	r1, r3
 8006c28:	db05      	blt.n	8006c36 <_printf_float+0x19e>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	6121      	str	r1, [r4, #16]
 8006c2e:	07d8      	lsls	r0, r3, #31
 8006c30:	d5ea      	bpl.n	8006c08 <_printf_float+0x170>
 8006c32:	1c4b      	adds	r3, r1, #1
 8006c34:	e7e7      	b.n	8006c06 <_printf_float+0x16e>
 8006c36:	2900      	cmp	r1, #0
 8006c38:	bfd4      	ite	le
 8006c3a:	f1c1 0202 	rsble	r2, r1, #2
 8006c3e:	2201      	movgt	r2, #1
 8006c40:	4413      	add	r3, r2
 8006c42:	e7e0      	b.n	8006c06 <_printf_float+0x16e>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	055a      	lsls	r2, r3, #21
 8006c48:	d407      	bmi.n	8006c5a <_printf_float+0x1c2>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	d12a      	bne.n	8006cae <_printf_float+0x216>
 8006c58:	e76a      	b.n	8006b30 <_printf_float+0x98>
 8006c5a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c5e:	f240 80e0 	bls.w	8006e22 <_printf_float+0x38a>
 8006c62:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6e:	d133      	bne.n	8006cd8 <_printf_float+0x240>
 8006c70:	4a37      	ldr	r2, [pc, #220]	; (8006d50 <_printf_float+0x2b8>)
 8006c72:	2301      	movs	r3, #1
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f43f af58 	beq.w	8006b30 <_printf_float+0x98>
 8006c80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	db02      	blt.n	8006c8e <_printf_float+0x1f6>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	07d8      	lsls	r0, r3, #31
 8006c8c:	d50f      	bpl.n	8006cae <_printf_float+0x216>
 8006c8e:	4653      	mov	r3, sl
 8006c90:	465a      	mov	r2, fp
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f af49 	beq.w	8006b30 <_printf_float+0x98>
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	f104 091a 	add.w	r9, r4, #26
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	4543      	cmp	r3, r8
 8006cac:	dc09      	bgt.n	8006cc2 <_printf_float+0x22a>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	079b      	lsls	r3, r3, #30
 8006cb2:	f100 8106 	bmi.w	8006ec2 <_printf_float+0x42a>
 8006cb6:	68e0      	ldr	r0, [r4, #12]
 8006cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cba:	4298      	cmp	r0, r3
 8006cbc:	bfb8      	it	lt
 8006cbe:	4618      	movlt	r0, r3
 8006cc0:	e738      	b.n	8006b34 <_printf_float+0x9c>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	464a      	mov	r2, r9
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f af2f 	beq.w	8006b30 <_printf_float+0x98>
 8006cd2:	f108 0801 	add.w	r8, r8, #1
 8006cd6:	e7e6      	b.n	8006ca6 <_printf_float+0x20e>
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dc3a      	bgt.n	8006d54 <_printf_float+0x2bc>
 8006cde:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <_printf_float+0x2b8>)
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f af21 	beq.w	8006b30 <_printf_float+0x98>
 8006cee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	d102      	bne.n	8006cfc <_printf_float+0x264>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	07d9      	lsls	r1, r3, #31
 8006cfa:	d5d8      	bpl.n	8006cae <_printf_float+0x216>
 8006cfc:	4653      	mov	r3, sl
 8006cfe:	465a      	mov	r2, fp
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af12 	beq.w	8006b30 <_printf_float+0x98>
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	f104 0a1a 	add.w	sl, r4, #26
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	425b      	negs	r3, r3
 8006d18:	454b      	cmp	r3, r9
 8006d1a:	dc01      	bgt.n	8006d20 <_printf_float+0x288>
 8006d1c:	9b08      	ldr	r3, [sp, #32]
 8006d1e:	e795      	b.n	8006c4c <_printf_float+0x1b4>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4652      	mov	r2, sl
 8006d24:	4631      	mov	r1, r6
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b8      	blx	r7
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f43f af00 	beq.w	8006b30 <_printf_float+0x98>
 8006d30:	f109 0901 	add.w	r9, r9, #1
 8006d34:	e7ee      	b.n	8006d14 <_printf_float+0x27c>
 8006d36:	bf00      	nop
 8006d38:	ffffffff 	.word	0xffffffff
 8006d3c:	7fefffff 	.word	0x7fefffff
 8006d40:	0802f5e4 	.word	0x0802f5e4
 8006d44:	0802f5e8 	.word	0x0802f5e8
 8006d48:	0802f5ec 	.word	0x0802f5ec
 8006d4c:	0802f5f0 	.word	0x0802f5f0
 8006d50:	0802f5f4 	.word	0x0802f5f4
 8006d54:	9a08      	ldr	r2, [sp, #32]
 8006d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bfa8      	it	ge
 8006d5c:	461a      	movge	r2, r3
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	4691      	mov	r9, r2
 8006d62:	dc38      	bgt.n	8006dd6 <_printf_float+0x33e>
 8006d64:	2300      	movs	r3, #0
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d6c:	f104 021a 	add.w	r2, r4, #26
 8006d70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d72:	9905      	ldr	r1, [sp, #20]
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	eba3 0309 	sub.w	r3, r3, r9
 8006d7a:	428b      	cmp	r3, r1
 8006d7c:	dc33      	bgt.n	8006de6 <_printf_float+0x34e>
 8006d7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	db3c      	blt.n	8006e00 <_printf_float+0x368>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	d439      	bmi.n	8006e00 <_printf_float+0x368>
 8006d8c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006d90:	eba2 0903 	sub.w	r9, r2, r3
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	4591      	cmp	r9, r2
 8006d9a:	bfa8      	it	ge
 8006d9c:	4691      	movge	r9, r2
 8006d9e:	f1b9 0f00 	cmp.w	r9, #0
 8006da2:	dc35      	bgt.n	8006e10 <_printf_float+0x378>
 8006da4:	f04f 0800 	mov.w	r8, #0
 8006da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dac:	f104 0a1a 	add.w	sl, r4, #26
 8006db0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	eba3 0309 	sub.w	r3, r3, r9
 8006dba:	4543      	cmp	r3, r8
 8006dbc:	f77f af77 	ble.w	8006cae <_printf_float+0x216>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4652      	mov	r2, sl
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f aeb0 	beq.w	8006b30 <_printf_float+0x98>
 8006dd0:	f108 0801 	add.w	r8, r8, #1
 8006dd4:	e7ec      	b.n	8006db0 <_printf_float+0x318>
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4642      	mov	r2, r8
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	d1bf      	bne.n	8006d64 <_printf_float+0x2cc>
 8006de4:	e6a4      	b.n	8006b30 <_printf_float+0x98>
 8006de6:	2301      	movs	r3, #1
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	9204      	str	r2, [sp, #16]
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	f43f ae9d 	beq.w	8006b30 <_printf_float+0x98>
 8006df6:	9b05      	ldr	r3, [sp, #20]
 8006df8:	9a04      	ldr	r2, [sp, #16]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	9305      	str	r3, [sp, #20]
 8006dfe:	e7b7      	b.n	8006d70 <_printf_float+0x2d8>
 8006e00:	4653      	mov	r3, sl
 8006e02:	465a      	mov	r2, fp
 8006e04:	4631      	mov	r1, r6
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b8      	blx	r7
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d1be      	bne.n	8006d8c <_printf_float+0x2f4>
 8006e0e:	e68f      	b.n	8006b30 <_printf_float+0x98>
 8006e10:	9a04      	ldr	r2, [sp, #16]
 8006e12:	464b      	mov	r3, r9
 8006e14:	4442      	add	r2, r8
 8006e16:	4631      	mov	r1, r6
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d1c1      	bne.n	8006da4 <_printf_float+0x30c>
 8006e20:	e686      	b.n	8006b30 <_printf_float+0x98>
 8006e22:	9a08      	ldr	r2, [sp, #32]
 8006e24:	2a01      	cmp	r2, #1
 8006e26:	dc01      	bgt.n	8006e2c <_printf_float+0x394>
 8006e28:	07db      	lsls	r3, r3, #31
 8006e2a:	d537      	bpl.n	8006e9c <_printf_float+0x404>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4642      	mov	r2, r8
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f ae7a 	beq.w	8006b30 <_printf_float+0x98>
 8006e3c:	4653      	mov	r3, sl
 8006e3e:	465a      	mov	r2, fp
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f ae72 	beq.w	8006b30 <_printf_float+0x98>
 8006e4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	d01a      	beq.n	8006e92 <_printf_float+0x3fa>
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f108 0201 	add.w	r2, r8, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d10e      	bne.n	8006e8a <_printf_float+0x3f2>
 8006e6c:	e660      	b.n	8006b30 <_printf_float+0x98>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	464a      	mov	r2, r9
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f ae59 	beq.w	8006b30 <_printf_float+0x98>
 8006e7e:	f108 0801 	add.w	r8, r8, #1
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	4543      	cmp	r3, r8
 8006e88:	dcf1      	bgt.n	8006e6e <_printf_float+0x3d6>
 8006e8a:	9b04      	ldr	r3, [sp, #16]
 8006e8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e90:	e6dd      	b.n	8006c4e <_printf_float+0x1b6>
 8006e92:	f04f 0800 	mov.w	r8, #0
 8006e96:	f104 091a 	add.w	r9, r4, #26
 8006e9a:	e7f2      	b.n	8006e82 <_printf_float+0x3ea>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	e7df      	b.n	8006e62 <_printf_float+0x3ca>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	464a      	mov	r2, r9
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f ae3f 	beq.w	8006b30 <_printf_float+0x98>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	4543      	cmp	r3, r8
 8006ebe:	dcf0      	bgt.n	8006ea2 <_printf_float+0x40a>
 8006ec0:	e6f9      	b.n	8006cb6 <_printf_float+0x21e>
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	f104 0919 	add.w	r9, r4, #25
 8006eca:	e7f4      	b.n	8006eb6 <_printf_float+0x41e>

08006ecc <_printf_common>:
 8006ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	4699      	mov	r9, r3
 8006ed4:	688a      	ldr	r2, [r1, #8]
 8006ed6:	690b      	ldr	r3, [r1, #16]
 8006ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bfb8      	it	lt
 8006ee0:	4613      	movlt	r3, r2
 8006ee2:	6033      	str	r3, [r6, #0]
 8006ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ee8:	4607      	mov	r7, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	b10a      	cbz	r2, 8006ef2 <_printf_common+0x26>
 8006eee:	3301      	adds	r3, #1
 8006ef0:	6033      	str	r3, [r6, #0]
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	0699      	lsls	r1, r3, #26
 8006ef6:	bf42      	ittt	mi
 8006ef8:	6833      	ldrmi	r3, [r6, #0]
 8006efa:	3302      	addmi	r3, #2
 8006efc:	6033      	strmi	r3, [r6, #0]
 8006efe:	6825      	ldr	r5, [r4, #0]
 8006f00:	f015 0506 	ands.w	r5, r5, #6
 8006f04:	d106      	bne.n	8006f14 <_printf_common+0x48>
 8006f06:	f104 0a19 	add.w	sl, r4, #25
 8006f0a:	68e3      	ldr	r3, [r4, #12]
 8006f0c:	6832      	ldr	r2, [r6, #0]
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	dc26      	bgt.n	8006f62 <_printf_common+0x96>
 8006f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f18:	1e13      	subs	r3, r2, #0
 8006f1a:	6822      	ldr	r2, [r4, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	0692      	lsls	r2, r2, #26
 8006f22:	d42b      	bmi.n	8006f7c <_printf_common+0xb0>
 8006f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f28:	4649      	mov	r1, r9
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	47c0      	blx	r8
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d01e      	beq.n	8006f70 <_printf_common+0xa4>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	6922      	ldr	r2, [r4, #16]
 8006f36:	f003 0306 	and.w	r3, r3, #6
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	bf02      	ittt	eq
 8006f3e:	68e5      	ldreq	r5, [r4, #12]
 8006f40:	6833      	ldreq	r3, [r6, #0]
 8006f42:	1aed      	subeq	r5, r5, r3
 8006f44:	68a3      	ldr	r3, [r4, #8]
 8006f46:	bf0c      	ite	eq
 8006f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f4c:	2500      	movne	r5, #0
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bfc4      	itt	gt
 8006f52:	1a9b      	subgt	r3, r3, r2
 8006f54:	18ed      	addgt	r5, r5, r3
 8006f56:	2600      	movs	r6, #0
 8006f58:	341a      	adds	r4, #26
 8006f5a:	42b5      	cmp	r5, r6
 8006f5c:	d11a      	bne.n	8006f94 <_printf_common+0xc8>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	e008      	b.n	8006f74 <_printf_common+0xa8>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4652      	mov	r2, sl
 8006f66:	4649      	mov	r1, r9
 8006f68:	4638      	mov	r0, r7
 8006f6a:	47c0      	blx	r8
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d103      	bne.n	8006f78 <_printf_common+0xac>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f78:	3501      	adds	r5, #1
 8006f7a:	e7c6      	b.n	8006f0a <_printf_common+0x3e>
 8006f7c:	18e1      	adds	r1, r4, r3
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	2030      	movs	r0, #48	; 0x30
 8006f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f86:	4422      	add	r2, r4
 8006f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f90:	3302      	adds	r3, #2
 8006f92:	e7c7      	b.n	8006f24 <_printf_common+0x58>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4622      	mov	r2, r4
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d0e6      	beq.n	8006f70 <_printf_common+0xa4>
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7d9      	b.n	8006f5a <_printf_common+0x8e>
	...

08006fa8 <_printf_i>:
 8006fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	7e0f      	ldrb	r7, [r1, #24]
 8006fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fb0:	2f78      	cmp	r7, #120	; 0x78
 8006fb2:	4691      	mov	r9, r2
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	469a      	mov	sl, r3
 8006fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fbe:	d807      	bhi.n	8006fd0 <_printf_i+0x28>
 8006fc0:	2f62      	cmp	r7, #98	; 0x62
 8006fc2:	d80a      	bhi.n	8006fda <_printf_i+0x32>
 8006fc4:	2f00      	cmp	r7, #0
 8006fc6:	f000 80d4 	beq.w	8007172 <_printf_i+0x1ca>
 8006fca:	2f58      	cmp	r7, #88	; 0x58
 8006fcc:	f000 80c0 	beq.w	8007150 <_printf_i+0x1a8>
 8006fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fd8:	e03a      	b.n	8007050 <_printf_i+0xa8>
 8006fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fde:	2b15      	cmp	r3, #21
 8006fe0:	d8f6      	bhi.n	8006fd0 <_printf_i+0x28>
 8006fe2:	a101      	add	r1, pc, #4	; (adr r1, 8006fe8 <_printf_i+0x40>)
 8006fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe8:	08007041 	.word	0x08007041
 8006fec:	08007055 	.word	0x08007055
 8006ff0:	08006fd1 	.word	0x08006fd1
 8006ff4:	08006fd1 	.word	0x08006fd1
 8006ff8:	08006fd1 	.word	0x08006fd1
 8006ffc:	08006fd1 	.word	0x08006fd1
 8007000:	08007055 	.word	0x08007055
 8007004:	08006fd1 	.word	0x08006fd1
 8007008:	08006fd1 	.word	0x08006fd1
 800700c:	08006fd1 	.word	0x08006fd1
 8007010:	08006fd1 	.word	0x08006fd1
 8007014:	08007159 	.word	0x08007159
 8007018:	08007081 	.word	0x08007081
 800701c:	08007113 	.word	0x08007113
 8007020:	08006fd1 	.word	0x08006fd1
 8007024:	08006fd1 	.word	0x08006fd1
 8007028:	0800717b 	.word	0x0800717b
 800702c:	08006fd1 	.word	0x08006fd1
 8007030:	08007081 	.word	0x08007081
 8007034:	08006fd1 	.word	0x08006fd1
 8007038:	08006fd1 	.word	0x08006fd1
 800703c:	0800711b 	.word	0x0800711b
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	602a      	str	r2, [r5, #0]
 8007048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800704c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007050:	2301      	movs	r3, #1
 8007052:	e09f      	b.n	8007194 <_printf_i+0x1ec>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	0607      	lsls	r7, r0, #24
 800705a:	f103 0104 	add.w	r1, r3, #4
 800705e:	6029      	str	r1, [r5, #0]
 8007060:	d501      	bpl.n	8007066 <_printf_i+0xbe>
 8007062:	681e      	ldr	r6, [r3, #0]
 8007064:	e003      	b.n	800706e <_printf_i+0xc6>
 8007066:	0646      	lsls	r6, r0, #25
 8007068:	d5fb      	bpl.n	8007062 <_printf_i+0xba>
 800706a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800706e:	2e00      	cmp	r6, #0
 8007070:	da03      	bge.n	800707a <_printf_i+0xd2>
 8007072:	232d      	movs	r3, #45	; 0x2d
 8007074:	4276      	negs	r6, r6
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707a:	485a      	ldr	r0, [pc, #360]	; (80071e4 <_printf_i+0x23c>)
 800707c:	230a      	movs	r3, #10
 800707e:	e012      	b.n	80070a6 <_printf_i+0xfe>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	6029      	str	r1, [r5, #0]
 8007088:	0605      	lsls	r5, r0, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xe8>
 800708c:	681e      	ldr	r6, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0xee>
 8007090:	0641      	lsls	r1, r0, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xe4>
 8007094:	881e      	ldrh	r6, [r3, #0]
 8007096:	4853      	ldr	r0, [pc, #332]	; (80071e4 <_printf_i+0x23c>)
 8007098:	2f6f      	cmp	r7, #111	; 0x6f
 800709a:	bf0c      	ite	eq
 800709c:	2308      	moveq	r3, #8
 800709e:	230a      	movne	r3, #10
 80070a0:	2100      	movs	r1, #0
 80070a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070a6:	6865      	ldr	r5, [r4, #4]
 80070a8:	60a5      	str	r5, [r4, #8]
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	bfa2      	ittt	ge
 80070ae:	6821      	ldrge	r1, [r4, #0]
 80070b0:	f021 0104 	bicge.w	r1, r1, #4
 80070b4:	6021      	strge	r1, [r4, #0]
 80070b6:	b90e      	cbnz	r6, 80070bc <_printf_i+0x114>
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	d04b      	beq.n	8007154 <_printf_i+0x1ac>
 80070bc:	4615      	mov	r5, r2
 80070be:	fbb6 f1f3 	udiv	r1, r6, r3
 80070c2:	fb03 6711 	mls	r7, r3, r1, r6
 80070c6:	5dc7      	ldrb	r7, [r0, r7]
 80070c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070cc:	4637      	mov	r7, r6
 80070ce:	42bb      	cmp	r3, r7
 80070d0:	460e      	mov	r6, r1
 80070d2:	d9f4      	bls.n	80070be <_printf_i+0x116>
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d10b      	bne.n	80070f0 <_printf_i+0x148>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	07de      	lsls	r6, r3, #31
 80070dc:	d508      	bpl.n	80070f0 <_printf_i+0x148>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6861      	ldr	r1, [r4, #4]
 80070e2:	4299      	cmp	r1, r3
 80070e4:	bfde      	ittt	le
 80070e6:	2330      	movle	r3, #48	; 0x30
 80070e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070f0:	1b52      	subs	r2, r2, r5
 80070f2:	6122      	str	r2, [r4, #16]
 80070f4:	f8cd a000 	str.w	sl, [sp]
 80070f8:	464b      	mov	r3, r9
 80070fa:	aa03      	add	r2, sp, #12
 80070fc:	4621      	mov	r1, r4
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff fee4 	bl	8006ecc <_printf_common>
 8007104:	3001      	adds	r0, #1
 8007106:	d14a      	bne.n	800719e <_printf_i+0x1f6>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	b004      	add	sp, #16
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f043 0320 	orr.w	r3, r3, #32
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	4833      	ldr	r0, [pc, #204]	; (80071e8 <_printf_i+0x240>)
 800711c:	2778      	movs	r7, #120	; 0x78
 800711e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	6829      	ldr	r1, [r5, #0]
 8007126:	061f      	lsls	r7, r3, #24
 8007128:	f851 6b04 	ldr.w	r6, [r1], #4
 800712c:	d402      	bmi.n	8007134 <_printf_i+0x18c>
 800712e:	065f      	lsls	r7, r3, #25
 8007130:	bf48      	it	mi
 8007132:	b2b6      	uxthmi	r6, r6
 8007134:	07df      	lsls	r7, r3, #31
 8007136:	bf48      	it	mi
 8007138:	f043 0320 	orrmi.w	r3, r3, #32
 800713c:	6029      	str	r1, [r5, #0]
 800713e:	bf48      	it	mi
 8007140:	6023      	strmi	r3, [r4, #0]
 8007142:	b91e      	cbnz	r6, 800714c <_printf_i+0x1a4>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	f023 0320 	bic.w	r3, r3, #32
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	2310      	movs	r3, #16
 800714e:	e7a7      	b.n	80070a0 <_printf_i+0xf8>
 8007150:	4824      	ldr	r0, [pc, #144]	; (80071e4 <_printf_i+0x23c>)
 8007152:	e7e4      	b.n	800711e <_printf_i+0x176>
 8007154:	4615      	mov	r5, r2
 8007156:	e7bd      	b.n	80070d4 <_printf_i+0x12c>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	6826      	ldr	r6, [r4, #0]
 800715c:	6961      	ldr	r1, [r4, #20]
 800715e:	1d18      	adds	r0, r3, #4
 8007160:	6028      	str	r0, [r5, #0]
 8007162:	0635      	lsls	r5, r6, #24
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	d501      	bpl.n	800716c <_printf_i+0x1c4>
 8007168:	6019      	str	r1, [r3, #0]
 800716a:	e002      	b.n	8007172 <_printf_i+0x1ca>
 800716c:	0670      	lsls	r0, r6, #25
 800716e:	d5fb      	bpl.n	8007168 <_printf_i+0x1c0>
 8007170:	8019      	strh	r1, [r3, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	4615      	mov	r5, r2
 8007178:	e7bc      	b.n	80070f4 <_printf_i+0x14c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	1d1a      	adds	r2, r3, #4
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	681d      	ldr	r5, [r3, #0]
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	2100      	movs	r1, #0
 8007186:	4628      	mov	r0, r5
 8007188:	f7f9 f85a 	bl	8000240 <memchr>
 800718c:	b108      	cbz	r0, 8007192 <_printf_i+0x1ea>
 800718e:	1b40      	subs	r0, r0, r5
 8007190:	6060      	str	r0, [r4, #4]
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	6123      	str	r3, [r4, #16]
 8007196:	2300      	movs	r3, #0
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719c:	e7aa      	b.n	80070f4 <_printf_i+0x14c>
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	462a      	mov	r2, r5
 80071a2:	4649      	mov	r1, r9
 80071a4:	4640      	mov	r0, r8
 80071a6:	47d0      	blx	sl
 80071a8:	3001      	adds	r0, #1
 80071aa:	d0ad      	beq.n	8007108 <_printf_i+0x160>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	079b      	lsls	r3, r3, #30
 80071b0:	d413      	bmi.n	80071da <_printf_i+0x232>
 80071b2:	68e0      	ldr	r0, [r4, #12]
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	4298      	cmp	r0, r3
 80071b8:	bfb8      	it	lt
 80071ba:	4618      	movlt	r0, r3
 80071bc:	e7a6      	b.n	800710c <_printf_i+0x164>
 80071be:	2301      	movs	r3, #1
 80071c0:	4632      	mov	r2, r6
 80071c2:	4649      	mov	r1, r9
 80071c4:	4640      	mov	r0, r8
 80071c6:	47d0      	blx	sl
 80071c8:	3001      	adds	r0, #1
 80071ca:	d09d      	beq.n	8007108 <_printf_i+0x160>
 80071cc:	3501      	adds	r5, #1
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	9903      	ldr	r1, [sp, #12]
 80071d2:	1a5b      	subs	r3, r3, r1
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dcf2      	bgt.n	80071be <_printf_i+0x216>
 80071d8:	e7eb      	b.n	80071b2 <_printf_i+0x20a>
 80071da:	2500      	movs	r5, #0
 80071dc:	f104 0619 	add.w	r6, r4, #25
 80071e0:	e7f5      	b.n	80071ce <_printf_i+0x226>
 80071e2:	bf00      	nop
 80071e4:	0802f5f6 	.word	0x0802f5f6
 80071e8:	0802f607 	.word	0x0802f607

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f000 f902 	bl	8007412 <memset>
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x38>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x3c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <std+0x40>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <std+0x44>)
 800721c:	6224      	str	r4, [r4, #32]
 800721e:	6323      	str	r3, [r4, #48]	; 0x30
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	0800738d 	.word	0x0800738d
 8007228:	080073af 	.word	0x080073af
 800722c:	080073e7 	.word	0x080073e7
 8007230:	0800740b 	.word	0x0800740b

08007234 <stdio_exit_handler>:
 8007234:	4a02      	ldr	r2, [pc, #8]	; (8007240 <stdio_exit_handler+0xc>)
 8007236:	4903      	ldr	r1, [pc, #12]	; (8007244 <stdio_exit_handler+0x10>)
 8007238:	4803      	ldr	r0, [pc, #12]	; (8007248 <stdio_exit_handler+0x14>)
 800723a:	f000 b869 	b.w	8007310 <_fwalk_sglue>
 800723e:	bf00      	nop
 8007240:	20000034 	.word	0x20000034
 8007244:	08008dad 	.word	0x08008dad
 8007248:	20000040 	.word	0x20000040

0800724c <cleanup_stdio>:
 800724c:	6841      	ldr	r1, [r0, #4]
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <cleanup_stdio+0x34>)
 8007250:	4299      	cmp	r1, r3
 8007252:	b510      	push	{r4, lr}
 8007254:	4604      	mov	r4, r0
 8007256:	d001      	beq.n	800725c <cleanup_stdio+0x10>
 8007258:	f001 fda8 	bl	8008dac <_fflush_r>
 800725c:	68a1      	ldr	r1, [r4, #8]
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <cleanup_stdio+0x38>)
 8007260:	4299      	cmp	r1, r3
 8007262:	d002      	beq.n	800726a <cleanup_stdio+0x1e>
 8007264:	4620      	mov	r0, r4
 8007266:	f001 fda1 	bl	8008dac <_fflush_r>
 800726a:	68e1      	ldr	r1, [r4, #12]
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <cleanup_stdio+0x3c>)
 800726e:	4299      	cmp	r1, r3
 8007270:	d004      	beq.n	800727c <cleanup_stdio+0x30>
 8007272:	4620      	mov	r0, r4
 8007274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007278:	f001 bd98 	b.w	8008dac <_fflush_r>
 800727c:	bd10      	pop	{r4, pc}
 800727e:	bf00      	nop
 8007280:	20000418 	.word	0x20000418
 8007284:	20000480 	.word	0x20000480
 8007288:	200004e8 	.word	0x200004e8

0800728c <global_stdio_init.part.0>:
 800728c:	b510      	push	{r4, lr}
 800728e:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <global_stdio_init.part.0+0x30>)
 8007290:	4c0b      	ldr	r4, [pc, #44]	; (80072c0 <global_stdio_init.part.0+0x34>)
 8007292:	4a0c      	ldr	r2, [pc, #48]	; (80072c4 <global_stdio_init.part.0+0x38>)
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	4620      	mov	r0, r4
 8007298:	2200      	movs	r2, #0
 800729a:	2104      	movs	r1, #4
 800729c:	f7ff ffa6 	bl	80071ec <std>
 80072a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072a4:	2201      	movs	r2, #1
 80072a6:	2109      	movs	r1, #9
 80072a8:	f7ff ffa0 	bl	80071ec <std>
 80072ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072b0:	2202      	movs	r2, #2
 80072b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b6:	2112      	movs	r1, #18
 80072b8:	f7ff bf98 	b.w	80071ec <std>
 80072bc:	20000550 	.word	0x20000550
 80072c0:	20000418 	.word	0x20000418
 80072c4:	08007235 	.word	0x08007235

080072c8 <__sfp_lock_acquire>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__sfp_lock_acquire+0x8>)
 80072ca:	f000 b91f 	b.w	800750c <__retarget_lock_acquire_recursive>
 80072ce:	bf00      	nop
 80072d0:	20000559 	.word	0x20000559

080072d4 <__sfp_lock_release>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__sfp_lock_release+0x8>)
 80072d6:	f000 b91a 	b.w	800750e <__retarget_lock_release_recursive>
 80072da:	bf00      	nop
 80072dc:	20000559 	.word	0x20000559

080072e0 <__sinit>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	f7ff fff0 	bl	80072c8 <__sfp_lock_acquire>
 80072e8:	6a23      	ldr	r3, [r4, #32]
 80072ea:	b11b      	cbz	r3, 80072f4 <__sinit+0x14>
 80072ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f0:	f7ff bff0 	b.w	80072d4 <__sfp_lock_release>
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <__sinit+0x28>)
 80072f6:	6223      	str	r3, [r4, #32]
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <__sinit+0x2c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1f5      	bne.n	80072ec <__sinit+0xc>
 8007300:	f7ff ffc4 	bl	800728c <global_stdio_init.part.0>
 8007304:	e7f2      	b.n	80072ec <__sinit+0xc>
 8007306:	bf00      	nop
 8007308:	0800724d 	.word	0x0800724d
 800730c:	20000550 	.word	0x20000550

08007310 <_fwalk_sglue>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4607      	mov	r7, r0
 8007316:	4688      	mov	r8, r1
 8007318:	4614      	mov	r4, r2
 800731a:	2600      	movs	r6, #0
 800731c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007320:	f1b9 0901 	subs.w	r9, r9, #1
 8007324:	d505      	bpl.n	8007332 <_fwalk_sglue+0x22>
 8007326:	6824      	ldr	r4, [r4, #0]
 8007328:	2c00      	cmp	r4, #0
 800732a:	d1f7      	bne.n	800731c <_fwalk_sglue+0xc>
 800732c:	4630      	mov	r0, r6
 800732e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d907      	bls.n	8007348 <_fwalk_sglue+0x38>
 8007338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800733c:	3301      	adds	r3, #1
 800733e:	d003      	beq.n	8007348 <_fwalk_sglue+0x38>
 8007340:	4629      	mov	r1, r5
 8007342:	4638      	mov	r0, r7
 8007344:	47c0      	blx	r8
 8007346:	4306      	orrs	r6, r0
 8007348:	3568      	adds	r5, #104	; 0x68
 800734a:	e7e9      	b.n	8007320 <_fwalk_sglue+0x10>

0800734c <siprintf>:
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b500      	push	{lr}
 8007350:	b09c      	sub	sp, #112	; 0x70
 8007352:	ab1d      	add	r3, sp, #116	; 0x74
 8007354:	9002      	str	r0, [sp, #8]
 8007356:	9006      	str	r0, [sp, #24]
 8007358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800735c:	4809      	ldr	r0, [pc, #36]	; (8007384 <siprintf+0x38>)
 800735e:	9107      	str	r1, [sp, #28]
 8007360:	9104      	str	r1, [sp, #16]
 8007362:	4909      	ldr	r1, [pc, #36]	; (8007388 <siprintf+0x3c>)
 8007364:	f853 2b04 	ldr.w	r2, [r3], #4
 8007368:	9105      	str	r1, [sp, #20]
 800736a:	6800      	ldr	r0, [r0, #0]
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	a902      	add	r1, sp, #8
 8007370:	f001 fb98 	bl	8008aa4 <_svfiprintf_r>
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	b01c      	add	sp, #112	; 0x70
 800737c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007380:	b003      	add	sp, #12
 8007382:	4770      	bx	lr
 8007384:	2000008c 	.word	0x2000008c
 8007388:	ffff0208 	.word	0xffff0208

0800738c <__sread>:
 800738c:	b510      	push	{r4, lr}
 800738e:	460c      	mov	r4, r1
 8007390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007394:	f000 f86c 	bl	8007470 <_read_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	bfab      	itete	ge
 800739c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800739e:	89a3      	ldrhlt	r3, [r4, #12]
 80073a0:	181b      	addge	r3, r3, r0
 80073a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073a6:	bfac      	ite	ge
 80073a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073aa:	81a3      	strhlt	r3, [r4, #12]
 80073ac:	bd10      	pop	{r4, pc}

080073ae <__swrite>:
 80073ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b2:	461f      	mov	r7, r3
 80073b4:	898b      	ldrh	r3, [r1, #12]
 80073b6:	05db      	lsls	r3, r3, #23
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	4616      	mov	r6, r2
 80073be:	d505      	bpl.n	80073cc <__swrite+0x1e>
 80073c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c4:	2302      	movs	r3, #2
 80073c6:	2200      	movs	r2, #0
 80073c8:	f000 f840 	bl	800744c <_lseek_r>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	4628      	mov	r0, r5
 80073de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	f000 b857 	b.w	8007494 <_write_r>

080073e6 <__sseek>:
 80073e6:	b510      	push	{r4, lr}
 80073e8:	460c      	mov	r4, r1
 80073ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ee:	f000 f82d 	bl	800744c <_lseek_r>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	bf15      	itete	ne
 80073f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80073fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007402:	81a3      	strheq	r3, [r4, #12]
 8007404:	bf18      	it	ne
 8007406:	81a3      	strhne	r3, [r4, #12]
 8007408:	bd10      	pop	{r4, pc}

0800740a <__sclose>:
 800740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740e:	f000 b80d 	b.w	800742c <_close_r>

08007412 <memset>:
 8007412:	4402      	add	r2, r0
 8007414:	4603      	mov	r3, r0
 8007416:	4293      	cmp	r3, r2
 8007418:	d100      	bne.n	800741c <memset+0xa>
 800741a:	4770      	bx	lr
 800741c:	f803 1b01 	strb.w	r1, [r3], #1
 8007420:	e7f9      	b.n	8007416 <memset+0x4>
	...

08007424 <_localeconv_r>:
 8007424:	4800      	ldr	r0, [pc, #0]	; (8007428 <_localeconv_r+0x4>)
 8007426:	4770      	bx	lr
 8007428:	20000180 	.word	0x20000180

0800742c <_close_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d06      	ldr	r5, [pc, #24]	; (8007448 <_close_r+0x1c>)
 8007430:	2300      	movs	r3, #0
 8007432:	4604      	mov	r4, r0
 8007434:	4608      	mov	r0, r1
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	f7fa f9bf 	bl	80017ba <_close>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_close_r+0x1a>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_close_r+0x1a>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000554 	.word	0x20000554

0800744c <_lseek_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d07      	ldr	r5, [pc, #28]	; (800746c <_lseek_r+0x20>)
 8007450:	4604      	mov	r4, r0
 8007452:	4608      	mov	r0, r1
 8007454:	4611      	mov	r1, r2
 8007456:	2200      	movs	r2, #0
 8007458:	602a      	str	r2, [r5, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	f7fa f9d4 	bl	8001808 <_lseek>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_lseek_r+0x1e>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b103      	cbz	r3, 800746a <_lseek_r+0x1e>
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	20000554 	.word	0x20000554

08007470 <_read_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d07      	ldr	r5, [pc, #28]	; (8007490 <_read_r+0x20>)
 8007474:	4604      	mov	r4, r0
 8007476:	4608      	mov	r0, r1
 8007478:	4611      	mov	r1, r2
 800747a:	2200      	movs	r2, #0
 800747c:	602a      	str	r2, [r5, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f7fa f962 	bl	8001748 <_read>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d102      	bne.n	800748e <_read_r+0x1e>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b103      	cbz	r3, 800748e <_read_r+0x1e>
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	20000554 	.word	0x20000554

08007494 <_write_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d07      	ldr	r5, [pc, #28]	; (80074b4 <_write_r+0x20>)
 8007498:	4604      	mov	r4, r0
 800749a:	4608      	mov	r0, r1
 800749c:	4611      	mov	r1, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	602a      	str	r2, [r5, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	f7fa f96d 	bl	8001782 <_write>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d102      	bne.n	80074b2 <_write_r+0x1e>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	b103      	cbz	r3, 80074b2 <_write_r+0x1e>
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	20000554 	.word	0x20000554

080074b8 <__errno>:
 80074b8:	4b01      	ldr	r3, [pc, #4]	; (80074c0 <__errno+0x8>)
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	2000008c 	.word	0x2000008c

080074c4 <__libc_init_array>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	4d0d      	ldr	r5, [pc, #52]	; (80074fc <__libc_init_array+0x38>)
 80074c8:	4c0d      	ldr	r4, [pc, #52]	; (8007500 <__libc_init_array+0x3c>)
 80074ca:	1b64      	subs	r4, r4, r5
 80074cc:	10a4      	asrs	r4, r4, #2
 80074ce:	2600      	movs	r6, #0
 80074d0:	42a6      	cmp	r6, r4
 80074d2:	d109      	bne.n	80074e8 <__libc_init_array+0x24>
 80074d4:	4d0b      	ldr	r5, [pc, #44]	; (8007504 <__libc_init_array+0x40>)
 80074d6:	4c0c      	ldr	r4, [pc, #48]	; (8007508 <__libc_init_array+0x44>)
 80074d8:	f002 fb26 	bl	8009b28 <_init>
 80074dc:	1b64      	subs	r4, r4, r5
 80074de:	10a4      	asrs	r4, r4, #2
 80074e0:	2600      	movs	r6, #0
 80074e2:	42a6      	cmp	r6, r4
 80074e4:	d105      	bne.n	80074f2 <__libc_init_array+0x2e>
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ec:	4798      	blx	r3
 80074ee:	3601      	adds	r6, #1
 80074f0:	e7ee      	b.n	80074d0 <__libc_init_array+0xc>
 80074f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f6:	4798      	blx	r3
 80074f8:	3601      	adds	r6, #1
 80074fa:	e7f2      	b.n	80074e2 <__libc_init_array+0x1e>
 80074fc:	08031218 	.word	0x08031218
 8007500:	08031218 	.word	0x08031218
 8007504:	08031218 	.word	0x08031218
 8007508:	0803121c 	.word	0x0803121c

0800750c <__retarget_lock_acquire_recursive>:
 800750c:	4770      	bx	lr

0800750e <__retarget_lock_release_recursive>:
 800750e:	4770      	bx	lr

08007510 <quorem>:
 8007510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	6903      	ldr	r3, [r0, #16]
 8007516:	690c      	ldr	r4, [r1, #16]
 8007518:	42a3      	cmp	r3, r4
 800751a:	4607      	mov	r7, r0
 800751c:	db7e      	blt.n	800761c <quorem+0x10c>
 800751e:	3c01      	subs	r4, #1
 8007520:	f101 0814 	add.w	r8, r1, #20
 8007524:	f100 0514 	add.w	r5, r0, #20
 8007528:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007536:	3301      	adds	r3, #1
 8007538:	429a      	cmp	r2, r3
 800753a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800753e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007542:	fbb2 f6f3 	udiv	r6, r2, r3
 8007546:	d331      	bcc.n	80075ac <quorem+0x9c>
 8007548:	f04f 0e00 	mov.w	lr, #0
 800754c:	4640      	mov	r0, r8
 800754e:	46ac      	mov	ip, r5
 8007550:	46f2      	mov	sl, lr
 8007552:	f850 2b04 	ldr.w	r2, [r0], #4
 8007556:	b293      	uxth	r3, r2
 8007558:	fb06 e303 	mla	r3, r6, r3, lr
 800755c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007560:	0c1a      	lsrs	r2, r3, #16
 8007562:	b29b      	uxth	r3, r3
 8007564:	ebaa 0303 	sub.w	r3, sl, r3
 8007568:	f8dc a000 	ldr.w	sl, [ip]
 800756c:	fa13 f38a 	uxtah	r3, r3, sl
 8007570:	fb06 220e 	mla	r2, r6, lr, r2
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800757c:	b292      	uxth	r2, r2
 800757e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007586:	f8bd 3000 	ldrh.w	r3, [sp]
 800758a:	4581      	cmp	r9, r0
 800758c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007590:	f84c 3b04 	str.w	r3, [ip], #4
 8007594:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007598:	d2db      	bcs.n	8007552 <quorem+0x42>
 800759a:	f855 300b 	ldr.w	r3, [r5, fp]
 800759e:	b92b      	cbnz	r3, 80075ac <quorem+0x9c>
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	3b04      	subs	r3, #4
 80075a4:	429d      	cmp	r5, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	d32c      	bcc.n	8007604 <quorem+0xf4>
 80075aa:	613c      	str	r4, [r7, #16]
 80075ac:	4638      	mov	r0, r7
 80075ae:	f001 f91f 	bl	80087f0 <__mcmp>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	db22      	blt.n	80075fc <quorem+0xec>
 80075b6:	3601      	adds	r6, #1
 80075b8:	4629      	mov	r1, r5
 80075ba:	2000      	movs	r0, #0
 80075bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80075c0:	f8d1 c000 	ldr.w	ip, [r1]
 80075c4:	b293      	uxth	r3, r2
 80075c6:	1ac3      	subs	r3, r0, r3
 80075c8:	0c12      	lsrs	r2, r2, #16
 80075ca:	fa13 f38c 	uxtah	r3, r3, ip
 80075ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80075d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075dc:	45c1      	cmp	r9, r8
 80075de:	f841 3b04 	str.w	r3, [r1], #4
 80075e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075e6:	d2e9      	bcs.n	80075bc <quorem+0xac>
 80075e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075f0:	b922      	cbnz	r2, 80075fc <quorem+0xec>
 80075f2:	3b04      	subs	r3, #4
 80075f4:	429d      	cmp	r5, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	d30a      	bcc.n	8007610 <quorem+0x100>
 80075fa:	613c      	str	r4, [r7, #16]
 80075fc:	4630      	mov	r0, r6
 80075fe:	b003      	add	sp, #12
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	3b04      	subs	r3, #4
 8007608:	2a00      	cmp	r2, #0
 800760a:	d1ce      	bne.n	80075aa <quorem+0x9a>
 800760c:	3c01      	subs	r4, #1
 800760e:	e7c9      	b.n	80075a4 <quorem+0x94>
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	3b04      	subs	r3, #4
 8007614:	2a00      	cmp	r2, #0
 8007616:	d1f0      	bne.n	80075fa <quorem+0xea>
 8007618:	3c01      	subs	r4, #1
 800761a:	e7eb      	b.n	80075f4 <quorem+0xe4>
 800761c:	2000      	movs	r0, #0
 800761e:	e7ee      	b.n	80075fe <quorem+0xee>

08007620 <_dtoa_r>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	ed2d 8b02 	vpush	{d8}
 8007628:	69c5      	ldr	r5, [r0, #28]
 800762a:	b091      	sub	sp, #68	; 0x44
 800762c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007630:	ec59 8b10 	vmov	r8, r9, d0
 8007634:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007636:	9106      	str	r1, [sp, #24]
 8007638:	4606      	mov	r6, r0
 800763a:	9208      	str	r2, [sp, #32]
 800763c:	930c      	str	r3, [sp, #48]	; 0x30
 800763e:	b975      	cbnz	r5, 800765e <_dtoa_r+0x3e>
 8007640:	2010      	movs	r0, #16
 8007642:	f000 fda5 	bl	8008190 <malloc>
 8007646:	4602      	mov	r2, r0
 8007648:	61f0      	str	r0, [r6, #28]
 800764a:	b920      	cbnz	r0, 8007656 <_dtoa_r+0x36>
 800764c:	4ba6      	ldr	r3, [pc, #664]	; (80078e8 <_dtoa_r+0x2c8>)
 800764e:	21ef      	movs	r1, #239	; 0xef
 8007650:	48a6      	ldr	r0, [pc, #664]	; (80078ec <_dtoa_r+0x2cc>)
 8007652:	f001 fc0b 	bl	8008e6c <__assert_func>
 8007656:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800765a:	6005      	str	r5, [r0, #0]
 800765c:	60c5      	str	r5, [r0, #12]
 800765e:	69f3      	ldr	r3, [r6, #28]
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	b151      	cbz	r1, 800767a <_dtoa_r+0x5a>
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	604a      	str	r2, [r1, #4]
 8007668:	2301      	movs	r3, #1
 800766a:	4093      	lsls	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
 800766e:	4630      	mov	r0, r6
 8007670:	f000 fe82 	bl	8008378 <_Bfree>
 8007674:	69f3      	ldr	r3, [r6, #28]
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f1b9 0300 	subs.w	r3, r9, #0
 800767e:	bfbb      	ittet	lt
 8007680:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007684:	9303      	strlt	r3, [sp, #12]
 8007686:	2300      	movge	r3, #0
 8007688:	2201      	movlt	r2, #1
 800768a:	bfac      	ite	ge
 800768c:	6023      	strge	r3, [r4, #0]
 800768e:	6022      	strlt	r2, [r4, #0]
 8007690:	4b97      	ldr	r3, [pc, #604]	; (80078f0 <_dtoa_r+0x2d0>)
 8007692:	9c03      	ldr	r4, [sp, #12]
 8007694:	43a3      	bics	r3, r4
 8007696:	d11c      	bne.n	80076d2 <_dtoa_r+0xb2>
 8007698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800769a:	f242 730f 	movw	r3, #9999	; 0x270f
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80076a4:	ea53 0308 	orrs.w	r3, r3, r8
 80076a8:	f000 84fb 	beq.w	80080a2 <_dtoa_r+0xa82>
 80076ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076ae:	b963      	cbnz	r3, 80076ca <_dtoa_r+0xaa>
 80076b0:	4b90      	ldr	r3, [pc, #576]	; (80078f4 <_dtoa_r+0x2d4>)
 80076b2:	e020      	b.n	80076f6 <_dtoa_r+0xd6>
 80076b4:	4b90      	ldr	r3, [pc, #576]	; (80078f8 <_dtoa_r+0x2d8>)
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	3308      	adds	r3, #8
 80076ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	9801      	ldr	r0, [sp, #4]
 80076c0:	b011      	add	sp, #68	; 0x44
 80076c2:	ecbd 8b02 	vpop	{d8}
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ca:	4b8a      	ldr	r3, [pc, #552]	; (80078f4 <_dtoa_r+0x2d4>)
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	3303      	adds	r3, #3
 80076d0:	e7f3      	b.n	80076ba <_dtoa_r+0x9a>
 80076d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80076d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	d10c      	bne.n	80076fa <_dtoa_r+0xda>
 80076e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076e2:	2301      	movs	r3, #1
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 84d7 	beq.w	800809c <_dtoa_r+0xa7c>
 80076ee:	4b83      	ldr	r3, [pc, #524]	; (80078fc <_dtoa_r+0x2dc>)
 80076f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	e7e1      	b.n	80076be <_dtoa_r+0x9e>
 80076fa:	aa0e      	add	r2, sp, #56	; 0x38
 80076fc:	a90f      	add	r1, sp, #60	; 0x3c
 80076fe:	4630      	mov	r0, r6
 8007700:	eeb0 0b48 	vmov.f64	d0, d8
 8007704:	f001 f91a 	bl	800893c <__d2b>
 8007708:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800770c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800770e:	4605      	mov	r5, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d046      	beq.n	80077a2 <_dtoa_r+0x182>
 8007714:	eeb0 7b48 	vmov.f64	d7, d8
 8007718:	ee18 1a90 	vmov	r1, s17
 800771c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007720:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007724:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007728:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800772c:	2000      	movs	r0, #0
 800772e:	ee07 1a90 	vmov	s15, r1
 8007732:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007736:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80078d0 <_dtoa_r+0x2b0>
 800773a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800773e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80078d8 <_dtoa_r+0x2b8>
 8007742:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007746:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80078e0 <_dtoa_r+0x2c0>
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007752:	eeb0 7b46 	vmov.f64	d7, d6
 8007756:	eea4 7b05 	vfma.f64	d7, d4, d5
 800775a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800775e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007766:	ee16 ba90 	vmov	fp, s13
 800776a:	9009      	str	r0, [sp, #36]	; 0x24
 800776c:	d508      	bpl.n	8007780 <_dtoa_r+0x160>
 800776e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007772:	eeb4 6b47 	vcmp.f64	d6, d7
 8007776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777a:	bf18      	it	ne
 800777c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007780:	f1bb 0f16 	cmp.w	fp, #22
 8007784:	d82b      	bhi.n	80077de <_dtoa_r+0x1be>
 8007786:	495e      	ldr	r1, [pc, #376]	; (8007900 <_dtoa_r+0x2e0>)
 8007788:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800778c:	ed91 7b00 	vldr	d7, [r1]
 8007790:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007798:	d501      	bpl.n	800779e <_dtoa_r+0x17e>
 800779a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800779e:	2100      	movs	r1, #0
 80077a0:	e01e      	b.n	80077e0 <_dtoa_r+0x1c0>
 80077a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80077aa:	2920      	cmp	r1, #32
 80077ac:	bfc1      	itttt	gt
 80077ae:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80077b2:	408c      	lslgt	r4, r1
 80077b4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80077b8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80077bc:	bfd6      	itet	le
 80077be:	f1c1 0120 	rsble	r1, r1, #32
 80077c2:	4321      	orrgt	r1, r4
 80077c4:	fa08 f101 	lslle.w	r1, r8, r1
 80077c8:	ee07 1a90 	vmov	s15, r1
 80077cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80077d0:	3b01      	subs	r3, #1
 80077d2:	ee17 1a90 	vmov	r1, s15
 80077d6:	2001      	movs	r0, #1
 80077d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80077dc:	e7a7      	b.n	800772e <_dtoa_r+0x10e>
 80077de:	2101      	movs	r1, #1
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	1e53      	subs	r3, r2, #1
 80077e4:	9305      	str	r3, [sp, #20]
 80077e6:	bf45      	ittet	mi
 80077e8:	f1c2 0301 	rsbmi	r3, r2, #1
 80077ec:	9304      	strmi	r3, [sp, #16]
 80077ee:	2300      	movpl	r3, #0
 80077f0:	2300      	movmi	r3, #0
 80077f2:	bf4c      	ite	mi
 80077f4:	9305      	strmi	r3, [sp, #20]
 80077f6:	9304      	strpl	r3, [sp, #16]
 80077f8:	f1bb 0f00 	cmp.w	fp, #0
 80077fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80077fe:	db18      	blt.n	8007832 <_dtoa_r+0x212>
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007806:	445b      	add	r3, fp
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	2300      	movs	r3, #0
 800780c:	9a06      	ldr	r2, [sp, #24]
 800780e:	2a09      	cmp	r2, #9
 8007810:	d848      	bhi.n	80078a4 <_dtoa_r+0x284>
 8007812:	2a05      	cmp	r2, #5
 8007814:	bfc4      	itt	gt
 8007816:	3a04      	subgt	r2, #4
 8007818:	9206      	strgt	r2, [sp, #24]
 800781a:	9a06      	ldr	r2, [sp, #24]
 800781c:	f1a2 0202 	sub.w	r2, r2, #2
 8007820:	bfcc      	ite	gt
 8007822:	2400      	movgt	r4, #0
 8007824:	2401      	movle	r4, #1
 8007826:	2a03      	cmp	r2, #3
 8007828:	d847      	bhi.n	80078ba <_dtoa_r+0x29a>
 800782a:	e8df f002 	tbb	[pc, r2]
 800782e:	2d0b      	.short	0x2d0b
 8007830:	392b      	.short	0x392b
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	2200      	movs	r2, #0
 8007836:	eba3 030b 	sub.w	r3, r3, fp
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	920a      	str	r2, [sp, #40]	; 0x28
 800783e:	f1cb 0300 	rsb	r3, fp, #0
 8007842:	e7e3      	b.n	800780c <_dtoa_r+0x1ec>
 8007844:	2200      	movs	r2, #0
 8007846:	9207      	str	r2, [sp, #28]
 8007848:	9a08      	ldr	r2, [sp, #32]
 800784a:	2a00      	cmp	r2, #0
 800784c:	dc38      	bgt.n	80078c0 <_dtoa_r+0x2a0>
 800784e:	f04f 0a01 	mov.w	sl, #1
 8007852:	46d1      	mov	r9, sl
 8007854:	4652      	mov	r2, sl
 8007856:	f8cd a020 	str.w	sl, [sp, #32]
 800785a:	69f7      	ldr	r7, [r6, #28]
 800785c:	2100      	movs	r1, #0
 800785e:	2004      	movs	r0, #4
 8007860:	f100 0c14 	add.w	ip, r0, #20
 8007864:	4594      	cmp	ip, r2
 8007866:	d930      	bls.n	80078ca <_dtoa_r+0x2aa>
 8007868:	6079      	str	r1, [r7, #4]
 800786a:	4630      	mov	r0, r6
 800786c:	930d      	str	r3, [sp, #52]	; 0x34
 800786e:	f000 fd43 	bl	80082f8 <_Balloc>
 8007872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007874:	9001      	str	r0, [sp, #4]
 8007876:	4602      	mov	r2, r0
 8007878:	2800      	cmp	r0, #0
 800787a:	d145      	bne.n	8007908 <_dtoa_r+0x2e8>
 800787c:	4b21      	ldr	r3, [pc, #132]	; (8007904 <_dtoa_r+0x2e4>)
 800787e:	f240 11af 	movw	r1, #431	; 0x1af
 8007882:	e6e5      	b.n	8007650 <_dtoa_r+0x30>
 8007884:	2201      	movs	r2, #1
 8007886:	e7de      	b.n	8007846 <_dtoa_r+0x226>
 8007888:	2200      	movs	r2, #0
 800788a:	9207      	str	r2, [sp, #28]
 800788c:	9a08      	ldr	r2, [sp, #32]
 800788e:	eb0b 0a02 	add.w	sl, fp, r2
 8007892:	f10a 0901 	add.w	r9, sl, #1
 8007896:	464a      	mov	r2, r9
 8007898:	2a01      	cmp	r2, #1
 800789a:	bfb8      	it	lt
 800789c:	2201      	movlt	r2, #1
 800789e:	e7dc      	b.n	800785a <_dtoa_r+0x23a>
 80078a0:	2201      	movs	r2, #1
 80078a2:	e7f2      	b.n	800788a <_dtoa_r+0x26a>
 80078a4:	2401      	movs	r4, #1
 80078a6:	2200      	movs	r2, #0
 80078a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80078ac:	f04f 3aff 	mov.w	sl, #4294967295
 80078b0:	2100      	movs	r1, #0
 80078b2:	46d1      	mov	r9, sl
 80078b4:	2212      	movs	r2, #18
 80078b6:	9108      	str	r1, [sp, #32]
 80078b8:	e7cf      	b.n	800785a <_dtoa_r+0x23a>
 80078ba:	2201      	movs	r2, #1
 80078bc:	9207      	str	r2, [sp, #28]
 80078be:	e7f5      	b.n	80078ac <_dtoa_r+0x28c>
 80078c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078c4:	46d1      	mov	r9, sl
 80078c6:	4652      	mov	r2, sl
 80078c8:	e7c7      	b.n	800785a <_dtoa_r+0x23a>
 80078ca:	3101      	adds	r1, #1
 80078cc:	0040      	lsls	r0, r0, #1
 80078ce:	e7c7      	b.n	8007860 <_dtoa_r+0x240>
 80078d0:	636f4361 	.word	0x636f4361
 80078d4:	3fd287a7 	.word	0x3fd287a7
 80078d8:	8b60c8b3 	.word	0x8b60c8b3
 80078dc:	3fc68a28 	.word	0x3fc68a28
 80078e0:	509f79fb 	.word	0x509f79fb
 80078e4:	3fd34413 	.word	0x3fd34413
 80078e8:	0802f625 	.word	0x0802f625
 80078ec:	0802f63c 	.word	0x0802f63c
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	0802f621 	.word	0x0802f621
 80078f8:	0802f618 	.word	0x0802f618
 80078fc:	0802f5f5 	.word	0x0802f5f5
 8007900:	0802f728 	.word	0x0802f728
 8007904:	0802f694 	.word	0x0802f694
 8007908:	69f2      	ldr	r2, [r6, #28]
 800790a:	9901      	ldr	r1, [sp, #4]
 800790c:	6011      	str	r1, [r2, #0]
 800790e:	f1b9 0f0e 	cmp.w	r9, #14
 8007912:	d86c      	bhi.n	80079ee <_dtoa_r+0x3ce>
 8007914:	2c00      	cmp	r4, #0
 8007916:	d06a      	beq.n	80079ee <_dtoa_r+0x3ce>
 8007918:	f1bb 0f00 	cmp.w	fp, #0
 800791c:	f340 80a0 	ble.w	8007a60 <_dtoa_r+0x440>
 8007920:	4ac1      	ldr	r2, [pc, #772]	; (8007c28 <_dtoa_r+0x608>)
 8007922:	f00b 010f 	and.w	r1, fp, #15
 8007926:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800792a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800792e:	ed92 7b00 	vldr	d7, [r2]
 8007932:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007936:	f000 8087 	beq.w	8007a48 <_dtoa_r+0x428>
 800793a:	49bc      	ldr	r1, [pc, #752]	; (8007c2c <_dtoa_r+0x60c>)
 800793c:	ed91 6b08 	vldr	d6, [r1, #32]
 8007940:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007944:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007948:	f002 020f 	and.w	r2, r2, #15
 800794c:	2103      	movs	r1, #3
 800794e:	48b7      	ldr	r0, [pc, #732]	; (8007c2c <_dtoa_r+0x60c>)
 8007950:	2a00      	cmp	r2, #0
 8007952:	d17b      	bne.n	8007a4c <_dtoa_r+0x42c>
 8007954:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007958:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800795c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007962:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007966:	2a00      	cmp	r2, #0
 8007968:	f000 80a0 	beq.w	8007aac <_dtoa_r+0x48c>
 800796c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007970:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007978:	f140 8098 	bpl.w	8007aac <_dtoa_r+0x48c>
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	f000 8094 	beq.w	8007aac <_dtoa_r+0x48c>
 8007984:	f1ba 0f00 	cmp.w	sl, #0
 8007988:	dd2f      	ble.n	80079ea <_dtoa_r+0x3ca>
 800798a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800798e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007992:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007996:	f10b 32ff 	add.w	r2, fp, #4294967295
 800799a:	3101      	adds	r1, #1
 800799c:	4654      	mov	r4, sl
 800799e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80079a6:	ee07 1a90 	vmov	s15, r1
 80079aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80079ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80079b2:	ee15 7a90 	vmov	r7, s11
 80079b6:	ec51 0b15 	vmov	r0, r1, d5
 80079ba:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80079be:	2c00      	cmp	r4, #0
 80079c0:	d177      	bne.n	8007ab2 <_dtoa_r+0x492>
 80079c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80079c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80079ca:	ec41 0b17 	vmov	d7, r0, r1
 80079ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	f300 826a 	bgt.w	8007eae <_dtoa_r+0x88e>
 80079da:	eeb1 7b47 	vneg.f64	d7, d7
 80079de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e6:	f100 8260 	bmi.w	8007eaa <_dtoa_r+0x88a>
 80079ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80079ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	f2c0 811d 	blt.w	8007c30 <_dtoa_r+0x610>
 80079f6:	f1bb 0f0e 	cmp.w	fp, #14
 80079fa:	f300 8119 	bgt.w	8007c30 <_dtoa_r+0x610>
 80079fe:	4b8a      	ldr	r3, [pc, #552]	; (8007c28 <_dtoa_r+0x608>)
 8007a00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a04:	ed93 6b00 	vldr	d6, [r3]
 8007a08:	9b08      	ldr	r3, [sp, #32]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f280 80b7 	bge.w	8007b7e <_dtoa_r+0x55e>
 8007a10:	f1b9 0f00 	cmp.w	r9, #0
 8007a14:	f300 80b3 	bgt.w	8007b7e <_dtoa_r+0x55e>
 8007a18:	f040 8246 	bne.w	8007ea8 <_dtoa_r+0x888>
 8007a1c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007a20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007a24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a30:	464c      	mov	r4, r9
 8007a32:	464f      	mov	r7, r9
 8007a34:	f280 821c 	bge.w	8007e70 <_dtoa_r+0x850>
 8007a38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a3c:	2331      	movs	r3, #49	; 0x31
 8007a3e:	f808 3b01 	strb.w	r3, [r8], #1
 8007a42:	f10b 0b01 	add.w	fp, fp, #1
 8007a46:	e218      	b.n	8007e7a <_dtoa_r+0x85a>
 8007a48:	2102      	movs	r1, #2
 8007a4a:	e780      	b.n	800794e <_dtoa_r+0x32e>
 8007a4c:	07d4      	lsls	r4, r2, #31
 8007a4e:	d504      	bpl.n	8007a5a <_dtoa_r+0x43a>
 8007a50:	ed90 6b00 	vldr	d6, [r0]
 8007a54:	3101      	adds	r1, #1
 8007a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a5a:	1052      	asrs	r2, r2, #1
 8007a5c:	3008      	adds	r0, #8
 8007a5e:	e777      	b.n	8007950 <_dtoa_r+0x330>
 8007a60:	d022      	beq.n	8007aa8 <_dtoa_r+0x488>
 8007a62:	f1cb 0200 	rsb	r2, fp, #0
 8007a66:	4970      	ldr	r1, [pc, #448]	; (8007c28 <_dtoa_r+0x608>)
 8007a68:	f002 000f 	and.w	r0, r2, #15
 8007a6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007a70:	ed91 7b00 	vldr	d7, [r1]
 8007a74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007a78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a7c:	486b      	ldr	r0, [pc, #428]	; (8007c2c <_dtoa_r+0x60c>)
 8007a7e:	1112      	asrs	r2, r2, #4
 8007a80:	2400      	movs	r4, #0
 8007a82:	2102      	movs	r1, #2
 8007a84:	b92a      	cbnz	r2, 8007a92 <_dtoa_r+0x472>
 8007a86:	2c00      	cmp	r4, #0
 8007a88:	f43f af6a 	beq.w	8007960 <_dtoa_r+0x340>
 8007a8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a90:	e766      	b.n	8007960 <_dtoa_r+0x340>
 8007a92:	07d7      	lsls	r7, r2, #31
 8007a94:	d505      	bpl.n	8007aa2 <_dtoa_r+0x482>
 8007a96:	ed90 6b00 	vldr	d6, [r0]
 8007a9a:	3101      	adds	r1, #1
 8007a9c:	2401      	movs	r4, #1
 8007a9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007aa2:	1052      	asrs	r2, r2, #1
 8007aa4:	3008      	adds	r0, #8
 8007aa6:	e7ed      	b.n	8007a84 <_dtoa_r+0x464>
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	e759      	b.n	8007960 <_dtoa_r+0x340>
 8007aac:	465a      	mov	r2, fp
 8007aae:	464c      	mov	r4, r9
 8007ab0:	e775      	b.n	800799e <_dtoa_r+0x37e>
 8007ab2:	ec41 0b17 	vmov	d7, r0, r1
 8007ab6:	495c      	ldr	r1, [pc, #368]	; (8007c28 <_dtoa_r+0x608>)
 8007ab8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007abc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007ac0:	9901      	ldr	r1, [sp, #4]
 8007ac2:	440c      	add	r4, r1
 8007ac4:	9907      	ldr	r1, [sp, #28]
 8007ac6:	b351      	cbz	r1, 8007b1e <_dtoa_r+0x4fe>
 8007ac8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007acc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007ad0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007ad4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007ad8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007adc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ae0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ae4:	ee14 1a90 	vmov	r1, s9
 8007ae8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007aec:	3130      	adds	r1, #48	; 0x30
 8007aee:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007af2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afa:	f808 1b01 	strb.w	r1, [r8], #1
 8007afe:	d439      	bmi.n	8007b74 <_dtoa_r+0x554>
 8007b00:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007b04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0c:	d472      	bmi.n	8007bf4 <_dtoa_r+0x5d4>
 8007b0e:	45a0      	cmp	r8, r4
 8007b10:	f43f af6b 	beq.w	80079ea <_dtoa_r+0x3ca>
 8007b14:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007b18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b1c:	e7e0      	b.n	8007ae0 <_dtoa_r+0x4c0>
 8007b1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007b26:	4620      	mov	r0, r4
 8007b28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007b2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b30:	ee14 1a90 	vmov	r1, s9
 8007b34:	3130      	adds	r1, #48	; 0x30
 8007b36:	f808 1b01 	strb.w	r1, [r8], #1
 8007b3a:	45a0      	cmp	r8, r4
 8007b3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b44:	d118      	bne.n	8007b78 <_dtoa_r+0x558>
 8007b46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007b4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007b4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b56:	dc4d      	bgt.n	8007bf4 <_dtoa_r+0x5d4>
 8007b58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007b5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	f57f af41 	bpl.w	80079ea <_dtoa_r+0x3ca>
 8007b68:	4680      	mov	r8, r0
 8007b6a:	3801      	subs	r0, #1
 8007b6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007b70:	2b30      	cmp	r3, #48	; 0x30
 8007b72:	d0f9      	beq.n	8007b68 <_dtoa_r+0x548>
 8007b74:	4693      	mov	fp, r2
 8007b76:	e02a      	b.n	8007bce <_dtoa_r+0x5ae>
 8007b78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b7c:	e7d6      	b.n	8007b2c <_dtoa_r+0x50c>
 8007b7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007b86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007b8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007b92:	ee15 3a10 	vmov	r3, s10
 8007b96:	3330      	adds	r3, #48	; 0x30
 8007b98:	f808 3b01 	strb.w	r3, [r8], #1
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	eba8 0303 	sub.w	r3, r8, r3
 8007ba2:	4599      	cmp	r9, r3
 8007ba4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007ba8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007bac:	d133      	bne.n	8007c16 <_dtoa_r+0x5f6>
 8007bae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bba:	dc1a      	bgt.n	8007bf2 <_dtoa_r+0x5d2>
 8007bbc:	eeb4 7b46 	vcmp.f64	d7, d6
 8007bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc4:	d103      	bne.n	8007bce <_dtoa_r+0x5ae>
 8007bc6:	ee15 3a10 	vmov	r3, s10
 8007bca:	07d9      	lsls	r1, r3, #31
 8007bcc:	d411      	bmi.n	8007bf2 <_dtoa_r+0x5d2>
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 fbd1 	bl	8008378 <_Bfree>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bda:	f888 3000 	strb.w	r3, [r8]
 8007bde:	f10b 0301 	add.w	r3, fp, #1
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f43f ad69 	beq.w	80076be <_dtoa_r+0x9e>
 8007bec:	f8c3 8000 	str.w	r8, [r3]
 8007bf0:	e565      	b.n	80076be <_dtoa_r+0x9e>
 8007bf2:	465a      	mov	r2, fp
 8007bf4:	4643      	mov	r3, r8
 8007bf6:	4698      	mov	r8, r3
 8007bf8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007bfc:	2939      	cmp	r1, #57	; 0x39
 8007bfe:	d106      	bne.n	8007c0e <_dtoa_r+0x5ee>
 8007c00:	9901      	ldr	r1, [sp, #4]
 8007c02:	4299      	cmp	r1, r3
 8007c04:	d1f7      	bne.n	8007bf6 <_dtoa_r+0x5d6>
 8007c06:	9801      	ldr	r0, [sp, #4]
 8007c08:	2130      	movs	r1, #48	; 0x30
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	7001      	strb	r1, [r0, #0]
 8007c0e:	7819      	ldrb	r1, [r3, #0]
 8007c10:	3101      	adds	r1, #1
 8007c12:	7019      	strb	r1, [r3, #0]
 8007c14:	e7ae      	b.n	8007b74 <_dtoa_r+0x554>
 8007c16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c22:	d1b2      	bne.n	8007b8a <_dtoa_r+0x56a>
 8007c24:	e7d3      	b.n	8007bce <_dtoa_r+0x5ae>
 8007c26:	bf00      	nop
 8007c28:	0802f728 	.word	0x0802f728
 8007c2c:	0802f700 	.word	0x0802f700
 8007c30:	9907      	ldr	r1, [sp, #28]
 8007c32:	2900      	cmp	r1, #0
 8007c34:	f000 80d0 	beq.w	8007dd8 <_dtoa_r+0x7b8>
 8007c38:	9906      	ldr	r1, [sp, #24]
 8007c3a:	2901      	cmp	r1, #1
 8007c3c:	f300 80b4 	bgt.w	8007da8 <_dtoa_r+0x788>
 8007c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c42:	2900      	cmp	r1, #0
 8007c44:	f000 80ac 	beq.w	8007da0 <_dtoa_r+0x780>
 8007c48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c50:	461c      	mov	r4, r3
 8007c52:	9309      	str	r3, [sp, #36]	; 0x24
 8007c54:	9b04      	ldr	r3, [sp, #16]
 8007c56:	4413      	add	r3, r2
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	9b05      	ldr	r3, [sp, #20]
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	4413      	add	r3, r2
 8007c60:	4630      	mov	r0, r6
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	f000 fc3e 	bl	80084e4 <__i2b>
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	f1b8 0f00 	cmp.w	r8, #0
 8007c70:	d00d      	beq.n	8007c8e <_dtoa_r+0x66e>
 8007c72:	9a05      	ldr	r2, [sp, #20]
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	dd0a      	ble.n	8007c8e <_dtoa_r+0x66e>
 8007c78:	4542      	cmp	r2, r8
 8007c7a:	9904      	ldr	r1, [sp, #16]
 8007c7c:	bfa8      	it	ge
 8007c7e:	4642      	movge	r2, r8
 8007c80:	1a89      	subs	r1, r1, r2
 8007c82:	9104      	str	r1, [sp, #16]
 8007c84:	9905      	ldr	r1, [sp, #20]
 8007c86:	eba8 0802 	sub.w	r8, r8, r2
 8007c8a:	1a8a      	subs	r2, r1, r2
 8007c8c:	9205      	str	r2, [sp, #20]
 8007c8e:	b303      	cbz	r3, 8007cd2 <_dtoa_r+0x6b2>
 8007c90:	9a07      	ldr	r2, [sp, #28]
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	f000 80a5 	beq.w	8007de2 <_dtoa_r+0x7c2>
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	dd13      	ble.n	8007cc4 <_dtoa_r+0x6a4>
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca4:	f000 fcde 	bl	8008664 <__pow5mult>
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4601      	mov	r1, r0
 8007cac:	4607      	mov	r7, r0
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f000 fc2e 	bl	8008510 <__multiply>
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	9009      	str	r0, [sp, #36]	; 0x24
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 fb5d 	bl	8008378 <_Bfree>
 8007cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc2:	4615      	mov	r5, r2
 8007cc4:	1b1a      	subs	r2, r3, r4
 8007cc6:	d004      	beq.n	8007cd2 <_dtoa_r+0x6b2>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f000 fcca 	bl	8008664 <__pow5mult>
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f000 fc05 	bl	80084e4 <__i2b>
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	f340 8081 	ble.w	8007de6 <_dtoa_r+0x7c6>
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 fcbb 	bl	8008664 <__pow5mult>
 8007cee:	9b06      	ldr	r3, [sp, #24]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	dd7a      	ble.n	8007dec <_dtoa_r+0x7cc>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfa:	6922      	ldr	r2, [r4, #16]
 8007cfc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007d00:	6910      	ldr	r0, [r2, #16]
 8007d02:	f000 fba1 	bl	8008448 <__hi0bits>
 8007d06:	f1c0 0020 	rsb	r0, r0, #32
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	4418      	add	r0, r3
 8007d0e:	f010 001f 	ands.w	r0, r0, #31
 8007d12:	f000 8093 	beq.w	8007e3c <_dtoa_r+0x81c>
 8007d16:	f1c0 0220 	rsb	r2, r0, #32
 8007d1a:	2a04      	cmp	r2, #4
 8007d1c:	f340 8085 	ble.w	8007e2a <_dtoa_r+0x80a>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	f1c0 001c 	rsb	r0, r0, #28
 8007d26:	4403      	add	r3, r0
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	9b05      	ldr	r3, [sp, #20]
 8007d2c:	4480      	add	r8, r0
 8007d2e:	4403      	add	r3, r0
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	9b04      	ldr	r3, [sp, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd05      	ble.n	8007d44 <_dtoa_r+0x724>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f000 fceb 	bl	8008718 <__lshift>
 8007d42:	4605      	mov	r5, r0
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dd05      	ble.n	8007d56 <_dtoa_r+0x736>
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 fce2 	bl	8008718 <__lshift>
 8007d54:	4604      	mov	r4, r0
 8007d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d071      	beq.n	8007e40 <_dtoa_r+0x820>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 fd46 	bl	80087f0 <__mcmp>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	da6b      	bge.n	8007e40 <_dtoa_r+0x820>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f000 fb24 	bl	80083bc <__multadd>
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8197 	beq.w	80080b0 <_dtoa_r+0xa90>
 8007d82:	4639      	mov	r1, r7
 8007d84:	2300      	movs	r3, #0
 8007d86:	220a      	movs	r2, #10
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 fb17 	bl	80083bc <__multadd>
 8007d8e:	f1ba 0f00 	cmp.w	sl, #0
 8007d92:	4607      	mov	r7, r0
 8007d94:	f300 8093 	bgt.w	8007ebe <_dtoa_r+0x89e>
 8007d98:	9b06      	ldr	r3, [sp, #24]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	dc57      	bgt.n	8007e4e <_dtoa_r+0x82e>
 8007d9e:	e08e      	b.n	8007ebe <_dtoa_r+0x89e>
 8007da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007da2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007da6:	e751      	b.n	8007c4c <_dtoa_r+0x62c>
 8007da8:	f109 34ff 	add.w	r4, r9, #4294967295
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	bfbf      	itttt	lt
 8007db0:	1ae2      	sublt	r2, r4, r3
 8007db2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007db4:	189b      	addlt	r3, r3, r2
 8007db6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007db8:	bfae      	itee	ge
 8007dba:	1b1c      	subge	r4, r3, r4
 8007dbc:	4623      	movlt	r3, r4
 8007dbe:	2400      	movlt	r4, #0
 8007dc0:	f1b9 0f00 	cmp.w	r9, #0
 8007dc4:	bfb5      	itete	lt
 8007dc6:	9a04      	ldrlt	r2, [sp, #16]
 8007dc8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007dcc:	eba2 0809 	sublt.w	r8, r2, r9
 8007dd0:	464a      	movge	r2, r9
 8007dd2:	bfb8      	it	lt
 8007dd4:	2200      	movlt	r2, #0
 8007dd6:	e73c      	b.n	8007c52 <_dtoa_r+0x632>
 8007dd8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ddc:	9f07      	ldr	r7, [sp, #28]
 8007dde:	461c      	mov	r4, r3
 8007de0:	e744      	b.n	8007c6c <_dtoa_r+0x64c>
 8007de2:	461a      	mov	r2, r3
 8007de4:	e770      	b.n	8007cc8 <_dtoa_r+0x6a8>
 8007de6:	9b06      	ldr	r3, [sp, #24]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	dc18      	bgt.n	8007e1e <_dtoa_r+0x7fe>
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	b9b3      	cbnz	r3, 8007e1e <_dtoa_r+0x7fe>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007df6:	b9a2      	cbnz	r2, 8007e22 <_dtoa_r+0x802>
 8007df8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dfc:	0d12      	lsrs	r2, r2, #20
 8007dfe:	0512      	lsls	r2, r2, #20
 8007e00:	b18a      	cbz	r2, 8007e26 <_dtoa_r+0x806>
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	9309      	str	r3, [sp, #36]	; 0x24
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f47f af70 	bne.w	8007cfa <_dtoa_r+0x6da>
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	e775      	b.n	8007d0a <_dtoa_r+0x6ea>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e7f6      	b.n	8007e10 <_dtoa_r+0x7f0>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	e7f4      	b.n	8007e10 <_dtoa_r+0x7f0>
 8007e26:	9209      	str	r2, [sp, #36]	; 0x24
 8007e28:	e7f3      	b.n	8007e12 <_dtoa_r+0x7f2>
 8007e2a:	d082      	beq.n	8007d32 <_dtoa_r+0x712>
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	321c      	adds	r2, #28
 8007e30:	4413      	add	r3, r2
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	4490      	add	r8, r2
 8007e38:	4413      	add	r3, r2
 8007e3a:	e779      	b.n	8007d30 <_dtoa_r+0x710>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	e7f5      	b.n	8007e2c <_dtoa_r+0x80c>
 8007e40:	f1b9 0f00 	cmp.w	r9, #0
 8007e44:	dc36      	bgt.n	8007eb4 <_dtoa_r+0x894>
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	dd33      	ble.n	8007eb4 <_dtoa_r+0x894>
 8007e4c:	46ca      	mov	sl, r9
 8007e4e:	f1ba 0f00 	cmp.w	sl, #0
 8007e52:	d10d      	bne.n	8007e70 <_dtoa_r+0x850>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4653      	mov	r3, sl
 8007e58:	2205      	movs	r2, #5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 faae 	bl	80083bc <__multadd>
 8007e60:	4601      	mov	r1, r0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 fcc3 	bl	80087f0 <__mcmp>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f73f ade4 	bgt.w	8007a38 <_dtoa_r+0x418>
 8007e70:	9b08      	ldr	r3, [sp, #32]
 8007e72:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e76:	ea6f 0b03 	mvn.w	fp, r3
 8007e7a:	f04f 0900 	mov.w	r9, #0
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 fa79 	bl	8008378 <_Bfree>
 8007e86:	2f00      	cmp	r7, #0
 8007e88:	f43f aea1 	beq.w	8007bce <_dtoa_r+0x5ae>
 8007e8c:	f1b9 0f00 	cmp.w	r9, #0
 8007e90:	d005      	beq.n	8007e9e <_dtoa_r+0x87e>
 8007e92:	45b9      	cmp	r9, r7
 8007e94:	d003      	beq.n	8007e9e <_dtoa_r+0x87e>
 8007e96:	4649      	mov	r1, r9
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 fa6d 	bl	8008378 <_Bfree>
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 fa69 	bl	8008378 <_Bfree>
 8007ea6:	e692      	b.n	8007bce <_dtoa_r+0x5ae>
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	4627      	mov	r7, r4
 8007eac:	e7e0      	b.n	8007e70 <_dtoa_r+0x850>
 8007eae:	4693      	mov	fp, r2
 8007eb0:	4627      	mov	r7, r4
 8007eb2:	e5c1      	b.n	8007a38 <_dtoa_r+0x418>
 8007eb4:	9b07      	ldr	r3, [sp, #28]
 8007eb6:	46ca      	mov	sl, r9
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8100 	beq.w	80080be <_dtoa_r+0xa9e>
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	dd05      	ble.n	8007ed0 <_dtoa_r+0x8b0>
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 fc25 	bl	8008718 <__lshift>
 8007ece:	4607      	mov	r7, r0
 8007ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d05d      	beq.n	8007f92 <_dtoa_r+0x972>
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 fa0d 	bl	80082f8 <_Balloc>
 8007ede:	4680      	mov	r8, r0
 8007ee0:	b928      	cbnz	r0, 8007eee <_dtoa_r+0x8ce>
 8007ee2:	4b82      	ldr	r3, [pc, #520]	; (80080ec <_dtoa_r+0xacc>)
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007eea:	f7ff bbb1 	b.w	8007650 <_dtoa_r+0x30>
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	f107 010c 	add.w	r1, r7, #12
 8007ef8:	300c      	adds	r0, #12
 8007efa:	f000 ffa9 	bl	8008e50 <memcpy>
 8007efe:	2201      	movs	r2, #1
 8007f00:	4641      	mov	r1, r8
 8007f02:	4630      	mov	r0, r6
 8007f04:	f000 fc08 	bl	8008718 <__lshift>
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	4453      	add	r3, sl
 8007f12:	9308      	str	r3, [sp, #32]
 8007f14:	9b02      	ldr	r3, [sp, #8]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	46b9      	mov	r9, r7
 8007f1c:	9307      	str	r3, [sp, #28]
 8007f1e:	4607      	mov	r7, r0
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	4621      	mov	r1, r4
 8007f24:	3b01      	subs	r3, #1
 8007f26:	4628      	mov	r0, r5
 8007f28:	9302      	str	r3, [sp, #8]
 8007f2a:	f7ff faf1 	bl	8007510 <quorem>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	3330      	adds	r3, #48	; 0x30
 8007f32:	9005      	str	r0, [sp, #20]
 8007f34:	4649      	mov	r1, r9
 8007f36:	4628      	mov	r0, r5
 8007f38:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3a:	f000 fc59 	bl	80087f0 <__mcmp>
 8007f3e:	463a      	mov	r2, r7
 8007f40:	4682      	mov	sl, r0
 8007f42:	4621      	mov	r1, r4
 8007f44:	4630      	mov	r0, r6
 8007f46:	f000 fc6f 	bl	8008828 <__mdiff>
 8007f4a:	68c2      	ldr	r2, [r0, #12]
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	4680      	mov	r8, r0
 8007f50:	bb0a      	cbnz	r2, 8007f96 <_dtoa_r+0x976>
 8007f52:	4601      	mov	r1, r0
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fc4b 	bl	80087f0 <__mcmp>
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4641      	mov	r1, r8
 8007f60:	4630      	mov	r0, r6
 8007f62:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007f66:	f000 fa07 	bl	8008378 <_Bfree>
 8007f6a:	9b06      	ldr	r3, [sp, #24]
 8007f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007f72:	ea43 0102 	orr.w	r1, r3, r2
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	4319      	orrs	r1, r3
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	d10d      	bne.n	8007f9a <_dtoa_r+0x97a>
 8007f7e:	2b39      	cmp	r3, #57	; 0x39
 8007f80:	d029      	beq.n	8007fd6 <_dtoa_r+0x9b6>
 8007f82:	f1ba 0f00 	cmp.w	sl, #0
 8007f86:	dd01      	ble.n	8007f8c <_dtoa_r+0x96c>
 8007f88:	9b05      	ldr	r3, [sp, #20]
 8007f8a:	3331      	adds	r3, #49	; 0x31
 8007f8c:	9a02      	ldr	r2, [sp, #8]
 8007f8e:	7013      	strb	r3, [r2, #0]
 8007f90:	e775      	b.n	8007e7e <_dtoa_r+0x85e>
 8007f92:	4638      	mov	r0, r7
 8007f94:	e7b8      	b.n	8007f08 <_dtoa_r+0x8e8>
 8007f96:	2201      	movs	r2, #1
 8007f98:	e7e1      	b.n	8007f5e <_dtoa_r+0x93e>
 8007f9a:	f1ba 0f00 	cmp.w	sl, #0
 8007f9e:	db06      	blt.n	8007fae <_dtoa_r+0x98e>
 8007fa0:	9906      	ldr	r1, [sp, #24]
 8007fa2:	ea41 0a0a 	orr.w	sl, r1, sl
 8007fa6:	9907      	ldr	r1, [sp, #28]
 8007fa8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007fac:	d120      	bne.n	8007ff0 <_dtoa_r+0x9d0>
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	ddec      	ble.n	8007f8c <_dtoa_r+0x96c>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	f000 fbad 	bl	8008718 <__lshift>
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	f000 fc15 	bl	80087f0 <__mcmp>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	dc02      	bgt.n	8007fd2 <_dtoa_r+0x9b2>
 8007fcc:	d1de      	bne.n	8007f8c <_dtoa_r+0x96c>
 8007fce:	07da      	lsls	r2, r3, #31
 8007fd0:	d5dc      	bpl.n	8007f8c <_dtoa_r+0x96c>
 8007fd2:	2b39      	cmp	r3, #57	; 0x39
 8007fd4:	d1d8      	bne.n	8007f88 <_dtoa_r+0x968>
 8007fd6:	9a02      	ldr	r2, [sp, #8]
 8007fd8:	2339      	movs	r3, #57	; 0x39
 8007fda:	7013      	strb	r3, [r2, #0]
 8007fdc:	4643      	mov	r3, r8
 8007fde:	4698      	mov	r8, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007fe6:	2a39      	cmp	r2, #57	; 0x39
 8007fe8:	d051      	beq.n	800808e <_dtoa_r+0xa6e>
 8007fea:	3201      	adds	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e746      	b.n	8007e7e <_dtoa_r+0x85e>
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	dd03      	ble.n	8007ffc <_dtoa_r+0x9dc>
 8007ff4:	2b39      	cmp	r3, #57	; 0x39
 8007ff6:	d0ee      	beq.n	8007fd6 <_dtoa_r+0x9b6>
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	e7c7      	b.n	8007f8c <_dtoa_r+0x96c>
 8007ffc:	9a04      	ldr	r2, [sp, #16]
 8007ffe:	9908      	ldr	r1, [sp, #32]
 8008000:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008004:	428a      	cmp	r2, r1
 8008006:	d02b      	beq.n	8008060 <_dtoa_r+0xa40>
 8008008:	4629      	mov	r1, r5
 800800a:	2300      	movs	r3, #0
 800800c:	220a      	movs	r2, #10
 800800e:	4630      	mov	r0, r6
 8008010:	f000 f9d4 	bl	80083bc <__multadd>
 8008014:	45b9      	cmp	r9, r7
 8008016:	4605      	mov	r5, r0
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	f04f 020a 	mov.w	r2, #10
 8008020:	4649      	mov	r1, r9
 8008022:	4630      	mov	r0, r6
 8008024:	d107      	bne.n	8008036 <_dtoa_r+0xa16>
 8008026:	f000 f9c9 	bl	80083bc <__multadd>
 800802a:	4681      	mov	r9, r0
 800802c:	4607      	mov	r7, r0
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	3301      	adds	r3, #1
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	e774      	b.n	8007f20 <_dtoa_r+0x900>
 8008036:	f000 f9c1 	bl	80083bc <__multadd>
 800803a:	4639      	mov	r1, r7
 800803c:	4681      	mov	r9, r0
 800803e:	2300      	movs	r3, #0
 8008040:	220a      	movs	r2, #10
 8008042:	4630      	mov	r0, r6
 8008044:	f000 f9ba 	bl	80083bc <__multadd>
 8008048:	4607      	mov	r7, r0
 800804a:	e7f0      	b.n	800802e <_dtoa_r+0xa0e>
 800804c:	f1ba 0f00 	cmp.w	sl, #0
 8008050:	9a01      	ldr	r2, [sp, #4]
 8008052:	bfcc      	ite	gt
 8008054:	46d0      	movgt	r8, sl
 8008056:	f04f 0801 	movle.w	r8, #1
 800805a:	4490      	add	r8, r2
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	4629      	mov	r1, r5
 8008062:	2201      	movs	r2, #1
 8008064:	4630      	mov	r0, r6
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	f000 fb56 	bl	8008718 <__lshift>
 800806c:	4621      	mov	r1, r4
 800806e:	4605      	mov	r5, r0
 8008070:	f000 fbbe 	bl	80087f0 <__mcmp>
 8008074:	2800      	cmp	r0, #0
 8008076:	dcb1      	bgt.n	8007fdc <_dtoa_r+0x9bc>
 8008078:	d102      	bne.n	8008080 <_dtoa_r+0xa60>
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	07db      	lsls	r3, r3, #31
 800807e:	d4ad      	bmi.n	8007fdc <_dtoa_r+0x9bc>
 8008080:	4643      	mov	r3, r8
 8008082:	4698      	mov	r8, r3
 8008084:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008088:	2a30      	cmp	r2, #48	; 0x30
 800808a:	d0fa      	beq.n	8008082 <_dtoa_r+0xa62>
 800808c:	e6f7      	b.n	8007e7e <_dtoa_r+0x85e>
 800808e:	9a01      	ldr	r2, [sp, #4]
 8008090:	429a      	cmp	r2, r3
 8008092:	d1a4      	bne.n	8007fde <_dtoa_r+0x9be>
 8008094:	f10b 0b01 	add.w	fp, fp, #1
 8008098:	2331      	movs	r3, #49	; 0x31
 800809a:	e778      	b.n	8007f8e <_dtoa_r+0x96e>
 800809c:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <_dtoa_r+0xad0>)
 800809e:	f7ff bb2a 	b.w	80076f6 <_dtoa_r+0xd6>
 80080a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f47f ab05 	bne.w	80076b4 <_dtoa_r+0x94>
 80080aa:	4b12      	ldr	r3, [pc, #72]	; (80080f4 <_dtoa_r+0xad4>)
 80080ac:	f7ff bb23 	b.w	80076f6 <_dtoa_r+0xd6>
 80080b0:	f1ba 0f00 	cmp.w	sl, #0
 80080b4:	dc03      	bgt.n	80080be <_dtoa_r+0xa9e>
 80080b6:	9b06      	ldr	r3, [sp, #24]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	f73f aec8 	bgt.w	8007e4e <_dtoa_r+0x82e>
 80080be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff fa23 	bl	8007510 <quorem>
 80080ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80080ce:	f808 3b01 	strb.w	r3, [r8], #1
 80080d2:	9a01      	ldr	r2, [sp, #4]
 80080d4:	eba8 0202 	sub.w	r2, r8, r2
 80080d8:	4592      	cmp	sl, r2
 80080da:	ddb7      	ble.n	800804c <_dtoa_r+0xa2c>
 80080dc:	4629      	mov	r1, r5
 80080de:	2300      	movs	r3, #0
 80080e0:	220a      	movs	r2, #10
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 f96a 	bl	80083bc <__multadd>
 80080e8:	4605      	mov	r5, r0
 80080ea:	e7ea      	b.n	80080c2 <_dtoa_r+0xaa2>
 80080ec:	0802f694 	.word	0x0802f694
 80080f0:	0802f5f4 	.word	0x0802f5f4
 80080f4:	0802f618 	.word	0x0802f618

080080f8 <_free_r>:
 80080f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d044      	beq.n	8008188 <_free_r+0x90>
 80080fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008102:	9001      	str	r0, [sp, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f1a1 0404 	sub.w	r4, r1, #4
 800810a:	bfb8      	it	lt
 800810c:	18e4      	addlt	r4, r4, r3
 800810e:	f000 f8e7 	bl	80082e0 <__malloc_lock>
 8008112:	4a1e      	ldr	r2, [pc, #120]	; (800818c <_free_r+0x94>)
 8008114:	9801      	ldr	r0, [sp, #4]
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	b933      	cbnz	r3, 8008128 <_free_r+0x30>
 800811a:	6063      	str	r3, [r4, #4]
 800811c:	6014      	str	r4, [r2, #0]
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008124:	f000 b8e2 	b.w	80082ec <__malloc_unlock>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d908      	bls.n	800813e <_free_r+0x46>
 800812c:	6825      	ldr	r5, [r4, #0]
 800812e:	1961      	adds	r1, r4, r5
 8008130:	428b      	cmp	r3, r1
 8008132:	bf01      	itttt	eq
 8008134:	6819      	ldreq	r1, [r3, #0]
 8008136:	685b      	ldreq	r3, [r3, #4]
 8008138:	1949      	addeq	r1, r1, r5
 800813a:	6021      	streq	r1, [r4, #0]
 800813c:	e7ed      	b.n	800811a <_free_r+0x22>
 800813e:	461a      	mov	r2, r3
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b10b      	cbz	r3, 8008148 <_free_r+0x50>
 8008144:	42a3      	cmp	r3, r4
 8008146:	d9fa      	bls.n	800813e <_free_r+0x46>
 8008148:	6811      	ldr	r1, [r2, #0]
 800814a:	1855      	adds	r5, r2, r1
 800814c:	42a5      	cmp	r5, r4
 800814e:	d10b      	bne.n	8008168 <_free_r+0x70>
 8008150:	6824      	ldr	r4, [r4, #0]
 8008152:	4421      	add	r1, r4
 8008154:	1854      	adds	r4, r2, r1
 8008156:	42a3      	cmp	r3, r4
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	d1e0      	bne.n	800811e <_free_r+0x26>
 800815c:	681c      	ldr	r4, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	6053      	str	r3, [r2, #4]
 8008162:	440c      	add	r4, r1
 8008164:	6014      	str	r4, [r2, #0]
 8008166:	e7da      	b.n	800811e <_free_r+0x26>
 8008168:	d902      	bls.n	8008170 <_free_r+0x78>
 800816a:	230c      	movs	r3, #12
 800816c:	6003      	str	r3, [r0, #0]
 800816e:	e7d6      	b.n	800811e <_free_r+0x26>
 8008170:	6825      	ldr	r5, [r4, #0]
 8008172:	1961      	adds	r1, r4, r5
 8008174:	428b      	cmp	r3, r1
 8008176:	bf04      	itt	eq
 8008178:	6819      	ldreq	r1, [r3, #0]
 800817a:	685b      	ldreq	r3, [r3, #4]
 800817c:	6063      	str	r3, [r4, #4]
 800817e:	bf04      	itt	eq
 8008180:	1949      	addeq	r1, r1, r5
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	6054      	str	r4, [r2, #4]
 8008186:	e7ca      	b.n	800811e <_free_r+0x26>
 8008188:	b003      	add	sp, #12
 800818a:	bd30      	pop	{r4, r5, pc}
 800818c:	2000055c 	.word	0x2000055c

08008190 <malloc>:
 8008190:	4b02      	ldr	r3, [pc, #8]	; (800819c <malloc+0xc>)
 8008192:	4601      	mov	r1, r0
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	f000 b823 	b.w	80081e0 <_malloc_r>
 800819a:	bf00      	nop
 800819c:	2000008c 	.word	0x2000008c

080081a0 <sbrk_aligned>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4e0e      	ldr	r6, [pc, #56]	; (80081dc <sbrk_aligned+0x3c>)
 80081a4:	460c      	mov	r4, r1
 80081a6:	6831      	ldr	r1, [r6, #0]
 80081a8:	4605      	mov	r5, r0
 80081aa:	b911      	cbnz	r1, 80081b2 <sbrk_aligned+0x12>
 80081ac:	f000 fe40 	bl	8008e30 <_sbrk_r>
 80081b0:	6030      	str	r0, [r6, #0]
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 fe3b 	bl	8008e30 <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d00a      	beq.n	80081d4 <sbrk_aligned+0x34>
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d007      	beq.n	80081d8 <sbrk_aligned+0x38>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 fe30 	bl	8008e30 <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d101      	bne.n	80081d8 <sbrk_aligned+0x38>
 80081d4:	f04f 34ff 	mov.w	r4, #4294967295
 80081d8:	4620      	mov	r0, r4
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	20000560 	.word	0x20000560

080081e0 <_malloc_r>:
 80081e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e4:	1ccd      	adds	r5, r1, #3
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	4607      	mov	r7, r0
 80081f6:	db01      	blt.n	80081fc <_malloc_r+0x1c>
 80081f8:	42a9      	cmp	r1, r5
 80081fa:	d905      	bls.n	8008208 <_malloc_r+0x28>
 80081fc:	230c      	movs	r3, #12
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	2600      	movs	r6, #0
 8008202:	4630      	mov	r0, r6
 8008204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008208:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082dc <_malloc_r+0xfc>
 800820c:	f000 f868 	bl	80082e0 <__malloc_lock>
 8008210:	f8d8 3000 	ldr.w	r3, [r8]
 8008214:	461c      	mov	r4, r3
 8008216:	bb5c      	cbnz	r4, 8008270 <_malloc_r+0x90>
 8008218:	4629      	mov	r1, r5
 800821a:	4638      	mov	r0, r7
 800821c:	f7ff ffc0 	bl	80081a0 <sbrk_aligned>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	4604      	mov	r4, r0
 8008224:	d155      	bne.n	80082d2 <_malloc_r+0xf2>
 8008226:	f8d8 4000 	ldr.w	r4, [r8]
 800822a:	4626      	mov	r6, r4
 800822c:	2e00      	cmp	r6, #0
 800822e:	d145      	bne.n	80082bc <_malloc_r+0xdc>
 8008230:	2c00      	cmp	r4, #0
 8008232:	d048      	beq.n	80082c6 <_malloc_r+0xe6>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	4631      	mov	r1, r6
 8008238:	4638      	mov	r0, r7
 800823a:	eb04 0903 	add.w	r9, r4, r3
 800823e:	f000 fdf7 	bl	8008e30 <_sbrk_r>
 8008242:	4581      	cmp	r9, r0
 8008244:	d13f      	bne.n	80082c6 <_malloc_r+0xe6>
 8008246:	6821      	ldr	r1, [r4, #0]
 8008248:	1a6d      	subs	r5, r5, r1
 800824a:	4629      	mov	r1, r5
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ffa7 	bl	80081a0 <sbrk_aligned>
 8008252:	3001      	adds	r0, #1
 8008254:	d037      	beq.n	80082c6 <_malloc_r+0xe6>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	442b      	add	r3, r5
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	f8d8 3000 	ldr.w	r3, [r8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d038      	beq.n	80082d6 <_malloc_r+0xf6>
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	42a2      	cmp	r2, r4
 8008268:	d12b      	bne.n	80082c2 <_malloc_r+0xe2>
 800826a:	2200      	movs	r2, #0
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	e00f      	b.n	8008290 <_malloc_r+0xb0>
 8008270:	6822      	ldr	r2, [r4, #0]
 8008272:	1b52      	subs	r2, r2, r5
 8008274:	d41f      	bmi.n	80082b6 <_malloc_r+0xd6>
 8008276:	2a0b      	cmp	r2, #11
 8008278:	d917      	bls.n	80082aa <_malloc_r+0xca>
 800827a:	1961      	adds	r1, r4, r5
 800827c:	42a3      	cmp	r3, r4
 800827e:	6025      	str	r5, [r4, #0]
 8008280:	bf18      	it	ne
 8008282:	6059      	strne	r1, [r3, #4]
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	bf08      	it	eq
 8008288:	f8c8 1000 	streq.w	r1, [r8]
 800828c:	5162      	str	r2, [r4, r5]
 800828e:	604b      	str	r3, [r1, #4]
 8008290:	4638      	mov	r0, r7
 8008292:	f104 060b 	add.w	r6, r4, #11
 8008296:	f000 f829 	bl	80082ec <__malloc_unlock>
 800829a:	f026 0607 	bic.w	r6, r6, #7
 800829e:	1d23      	adds	r3, r4, #4
 80082a0:	1af2      	subs	r2, r6, r3
 80082a2:	d0ae      	beq.n	8008202 <_malloc_r+0x22>
 80082a4:	1b9b      	subs	r3, r3, r6
 80082a6:	50a3      	str	r3, [r4, r2]
 80082a8:	e7ab      	b.n	8008202 <_malloc_r+0x22>
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	6862      	ldr	r2, [r4, #4]
 80082ae:	d1dd      	bne.n	800826c <_malloc_r+0x8c>
 80082b0:	f8c8 2000 	str.w	r2, [r8]
 80082b4:	e7ec      	b.n	8008290 <_malloc_r+0xb0>
 80082b6:	4623      	mov	r3, r4
 80082b8:	6864      	ldr	r4, [r4, #4]
 80082ba:	e7ac      	b.n	8008216 <_malloc_r+0x36>
 80082bc:	4634      	mov	r4, r6
 80082be:	6876      	ldr	r6, [r6, #4]
 80082c0:	e7b4      	b.n	800822c <_malloc_r+0x4c>
 80082c2:	4613      	mov	r3, r2
 80082c4:	e7cc      	b.n	8008260 <_malloc_r+0x80>
 80082c6:	230c      	movs	r3, #12
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	4638      	mov	r0, r7
 80082cc:	f000 f80e 	bl	80082ec <__malloc_unlock>
 80082d0:	e797      	b.n	8008202 <_malloc_r+0x22>
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	e7dc      	b.n	8008290 <_malloc_r+0xb0>
 80082d6:	605b      	str	r3, [r3, #4]
 80082d8:	deff      	udf	#255	; 0xff
 80082da:	bf00      	nop
 80082dc:	2000055c 	.word	0x2000055c

080082e0 <__malloc_lock>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__malloc_lock+0x8>)
 80082e2:	f7ff b913 	b.w	800750c <__retarget_lock_acquire_recursive>
 80082e6:	bf00      	nop
 80082e8:	20000558 	.word	0x20000558

080082ec <__malloc_unlock>:
 80082ec:	4801      	ldr	r0, [pc, #4]	; (80082f4 <__malloc_unlock+0x8>)
 80082ee:	f7ff b90e 	b.w	800750e <__retarget_lock_release_recursive>
 80082f2:	bf00      	nop
 80082f4:	20000558 	.word	0x20000558

080082f8 <_Balloc>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	69c6      	ldr	r6, [r0, #28]
 80082fc:	4604      	mov	r4, r0
 80082fe:	460d      	mov	r5, r1
 8008300:	b976      	cbnz	r6, 8008320 <_Balloc+0x28>
 8008302:	2010      	movs	r0, #16
 8008304:	f7ff ff44 	bl	8008190 <malloc>
 8008308:	4602      	mov	r2, r0
 800830a:	61e0      	str	r0, [r4, #28]
 800830c:	b920      	cbnz	r0, 8008318 <_Balloc+0x20>
 800830e:	4b18      	ldr	r3, [pc, #96]	; (8008370 <_Balloc+0x78>)
 8008310:	4818      	ldr	r0, [pc, #96]	; (8008374 <_Balloc+0x7c>)
 8008312:	216b      	movs	r1, #107	; 0x6b
 8008314:	f000 fdaa 	bl	8008e6c <__assert_func>
 8008318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800831c:	6006      	str	r6, [r0, #0]
 800831e:	60c6      	str	r6, [r0, #12]
 8008320:	69e6      	ldr	r6, [r4, #28]
 8008322:	68f3      	ldr	r3, [r6, #12]
 8008324:	b183      	cbz	r3, 8008348 <_Balloc+0x50>
 8008326:	69e3      	ldr	r3, [r4, #28]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800832e:	b9b8      	cbnz	r0, 8008360 <_Balloc+0x68>
 8008330:	2101      	movs	r1, #1
 8008332:	fa01 f605 	lsl.w	r6, r1, r5
 8008336:	1d72      	adds	r2, r6, #5
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fdb4 	bl	8008ea8 <_calloc_r>
 8008340:	b160      	cbz	r0, 800835c <_Balloc+0x64>
 8008342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008346:	e00e      	b.n	8008366 <_Balloc+0x6e>
 8008348:	2221      	movs	r2, #33	; 0x21
 800834a:	2104      	movs	r1, #4
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fdab 	bl	8008ea8 <_calloc_r>
 8008352:	69e3      	ldr	r3, [r4, #28]
 8008354:	60f0      	str	r0, [r6, #12]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e4      	bne.n	8008326 <_Balloc+0x2e>
 800835c:	2000      	movs	r0, #0
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	6802      	ldr	r2, [r0, #0]
 8008362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008366:	2300      	movs	r3, #0
 8008368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800836c:	e7f7      	b.n	800835e <_Balloc+0x66>
 800836e:	bf00      	nop
 8008370:	0802f625 	.word	0x0802f625
 8008374:	0802f6a5 	.word	0x0802f6a5

08008378 <_Bfree>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	69c6      	ldr	r6, [r0, #28]
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	b976      	cbnz	r6, 80083a0 <_Bfree+0x28>
 8008382:	2010      	movs	r0, #16
 8008384:	f7ff ff04 	bl	8008190 <malloc>
 8008388:	4602      	mov	r2, r0
 800838a:	61e8      	str	r0, [r5, #28]
 800838c:	b920      	cbnz	r0, 8008398 <_Bfree+0x20>
 800838e:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <_Bfree+0x3c>)
 8008390:	4809      	ldr	r0, [pc, #36]	; (80083b8 <_Bfree+0x40>)
 8008392:	218f      	movs	r1, #143	; 0x8f
 8008394:	f000 fd6a 	bl	8008e6c <__assert_func>
 8008398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800839c:	6006      	str	r6, [r0, #0]
 800839e:	60c6      	str	r6, [r0, #12]
 80083a0:	b13c      	cbz	r4, 80083b2 <_Bfree+0x3a>
 80083a2:	69eb      	ldr	r3, [r5, #28]
 80083a4:	6862      	ldr	r2, [r4, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083ac:	6021      	str	r1, [r4, #0]
 80083ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	0802f625 	.word	0x0802f625
 80083b8:	0802f6a5 	.word	0x0802f6a5

080083bc <__multadd>:
 80083bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c0:	690d      	ldr	r5, [r1, #16]
 80083c2:	4607      	mov	r7, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	461e      	mov	r6, r3
 80083c8:	f101 0c14 	add.w	ip, r1, #20
 80083cc:	2000      	movs	r0, #0
 80083ce:	f8dc 3000 	ldr.w	r3, [ip]
 80083d2:	b299      	uxth	r1, r3
 80083d4:	fb02 6101 	mla	r1, r2, r1, r6
 80083d8:	0c1e      	lsrs	r6, r3, #16
 80083da:	0c0b      	lsrs	r3, r1, #16
 80083dc:	fb02 3306 	mla	r3, r2, r6, r3
 80083e0:	b289      	uxth	r1, r1
 80083e2:	3001      	adds	r0, #1
 80083e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083e8:	4285      	cmp	r5, r0
 80083ea:	f84c 1b04 	str.w	r1, [ip], #4
 80083ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083f2:	dcec      	bgt.n	80083ce <__multadd+0x12>
 80083f4:	b30e      	cbz	r6, 800843a <__multadd+0x7e>
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	dc19      	bgt.n	8008430 <__multadd+0x74>
 80083fc:	6861      	ldr	r1, [r4, #4]
 80083fe:	4638      	mov	r0, r7
 8008400:	3101      	adds	r1, #1
 8008402:	f7ff ff79 	bl	80082f8 <_Balloc>
 8008406:	4680      	mov	r8, r0
 8008408:	b928      	cbnz	r0, 8008416 <__multadd+0x5a>
 800840a:	4602      	mov	r2, r0
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <__multadd+0x84>)
 800840e:	480d      	ldr	r0, [pc, #52]	; (8008444 <__multadd+0x88>)
 8008410:	21ba      	movs	r1, #186	; 0xba
 8008412:	f000 fd2b 	bl	8008e6c <__assert_func>
 8008416:	6922      	ldr	r2, [r4, #16]
 8008418:	3202      	adds	r2, #2
 800841a:	f104 010c 	add.w	r1, r4, #12
 800841e:	0092      	lsls	r2, r2, #2
 8008420:	300c      	adds	r0, #12
 8008422:	f000 fd15 	bl	8008e50 <memcpy>
 8008426:	4621      	mov	r1, r4
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff ffa5 	bl	8008378 <_Bfree>
 800842e:	4644      	mov	r4, r8
 8008430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008434:	3501      	adds	r5, #1
 8008436:	615e      	str	r6, [r3, #20]
 8008438:	6125      	str	r5, [r4, #16]
 800843a:	4620      	mov	r0, r4
 800843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008440:	0802f694 	.word	0x0802f694
 8008444:	0802f6a5 	.word	0x0802f6a5

08008448 <__hi0bits>:
 8008448:	0c03      	lsrs	r3, r0, #16
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	b9d3      	cbnz	r3, 8008484 <__hi0bits+0x3c>
 800844e:	0400      	lsls	r0, r0, #16
 8008450:	2310      	movs	r3, #16
 8008452:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008456:	bf04      	itt	eq
 8008458:	0200      	lsleq	r0, r0, #8
 800845a:	3308      	addeq	r3, #8
 800845c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008460:	bf04      	itt	eq
 8008462:	0100      	lsleq	r0, r0, #4
 8008464:	3304      	addeq	r3, #4
 8008466:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800846a:	bf04      	itt	eq
 800846c:	0080      	lsleq	r0, r0, #2
 800846e:	3302      	addeq	r3, #2
 8008470:	2800      	cmp	r0, #0
 8008472:	db05      	blt.n	8008480 <__hi0bits+0x38>
 8008474:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008478:	f103 0301 	add.w	r3, r3, #1
 800847c:	bf08      	it	eq
 800847e:	2320      	moveq	r3, #32
 8008480:	4618      	mov	r0, r3
 8008482:	4770      	bx	lr
 8008484:	2300      	movs	r3, #0
 8008486:	e7e4      	b.n	8008452 <__hi0bits+0xa>

08008488 <__lo0bits>:
 8008488:	6803      	ldr	r3, [r0, #0]
 800848a:	f013 0207 	ands.w	r2, r3, #7
 800848e:	d00c      	beq.n	80084aa <__lo0bits+0x22>
 8008490:	07d9      	lsls	r1, r3, #31
 8008492:	d422      	bmi.n	80084da <__lo0bits+0x52>
 8008494:	079a      	lsls	r2, r3, #30
 8008496:	bf49      	itett	mi
 8008498:	085b      	lsrmi	r3, r3, #1
 800849a:	089b      	lsrpl	r3, r3, #2
 800849c:	6003      	strmi	r3, [r0, #0]
 800849e:	2201      	movmi	r2, #1
 80084a0:	bf5c      	itt	pl
 80084a2:	6003      	strpl	r3, [r0, #0]
 80084a4:	2202      	movpl	r2, #2
 80084a6:	4610      	mov	r0, r2
 80084a8:	4770      	bx	lr
 80084aa:	b299      	uxth	r1, r3
 80084ac:	b909      	cbnz	r1, 80084b2 <__lo0bits+0x2a>
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	2210      	movs	r2, #16
 80084b2:	b2d9      	uxtb	r1, r3
 80084b4:	b909      	cbnz	r1, 80084ba <__lo0bits+0x32>
 80084b6:	3208      	adds	r2, #8
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	0719      	lsls	r1, r3, #28
 80084bc:	bf04      	itt	eq
 80084be:	091b      	lsreq	r3, r3, #4
 80084c0:	3204      	addeq	r2, #4
 80084c2:	0799      	lsls	r1, r3, #30
 80084c4:	bf04      	itt	eq
 80084c6:	089b      	lsreq	r3, r3, #2
 80084c8:	3202      	addeq	r2, #2
 80084ca:	07d9      	lsls	r1, r3, #31
 80084cc:	d403      	bmi.n	80084d6 <__lo0bits+0x4e>
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	f102 0201 	add.w	r2, r2, #1
 80084d4:	d003      	beq.n	80084de <__lo0bits+0x56>
 80084d6:	6003      	str	r3, [r0, #0]
 80084d8:	e7e5      	b.n	80084a6 <__lo0bits+0x1e>
 80084da:	2200      	movs	r2, #0
 80084dc:	e7e3      	b.n	80084a6 <__lo0bits+0x1e>
 80084de:	2220      	movs	r2, #32
 80084e0:	e7e1      	b.n	80084a6 <__lo0bits+0x1e>
	...

080084e4 <__i2b>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	460c      	mov	r4, r1
 80084e8:	2101      	movs	r1, #1
 80084ea:	f7ff ff05 	bl	80082f8 <_Balloc>
 80084ee:	4602      	mov	r2, r0
 80084f0:	b928      	cbnz	r0, 80084fe <__i2b+0x1a>
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <__i2b+0x24>)
 80084f4:	4805      	ldr	r0, [pc, #20]	; (800850c <__i2b+0x28>)
 80084f6:	f240 1145 	movw	r1, #325	; 0x145
 80084fa:	f000 fcb7 	bl	8008e6c <__assert_func>
 80084fe:	2301      	movs	r3, #1
 8008500:	6144      	str	r4, [r0, #20]
 8008502:	6103      	str	r3, [r0, #16]
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop
 8008508:	0802f694 	.word	0x0802f694
 800850c:	0802f6a5 	.word	0x0802f6a5

08008510 <__multiply>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4691      	mov	r9, r2
 8008516:	690a      	ldr	r2, [r1, #16]
 8008518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800851c:	429a      	cmp	r2, r3
 800851e:	bfb8      	it	lt
 8008520:	460b      	movlt	r3, r1
 8008522:	460c      	mov	r4, r1
 8008524:	bfbc      	itt	lt
 8008526:	464c      	movlt	r4, r9
 8008528:	4699      	movlt	r9, r3
 800852a:	6927      	ldr	r7, [r4, #16]
 800852c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008530:	68a3      	ldr	r3, [r4, #8]
 8008532:	6861      	ldr	r1, [r4, #4]
 8008534:	eb07 060a 	add.w	r6, r7, sl
 8008538:	42b3      	cmp	r3, r6
 800853a:	b085      	sub	sp, #20
 800853c:	bfb8      	it	lt
 800853e:	3101      	addlt	r1, #1
 8008540:	f7ff feda 	bl	80082f8 <_Balloc>
 8008544:	b930      	cbnz	r0, 8008554 <__multiply+0x44>
 8008546:	4602      	mov	r2, r0
 8008548:	4b44      	ldr	r3, [pc, #272]	; (800865c <__multiply+0x14c>)
 800854a:	4845      	ldr	r0, [pc, #276]	; (8008660 <__multiply+0x150>)
 800854c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008550:	f000 fc8c 	bl	8008e6c <__assert_func>
 8008554:	f100 0514 	add.w	r5, r0, #20
 8008558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800855c:	462b      	mov	r3, r5
 800855e:	2200      	movs	r2, #0
 8008560:	4543      	cmp	r3, r8
 8008562:	d321      	bcc.n	80085a8 <__multiply+0x98>
 8008564:	f104 0314 	add.w	r3, r4, #20
 8008568:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800856c:	f109 0314 	add.w	r3, r9, #20
 8008570:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008574:	9202      	str	r2, [sp, #8]
 8008576:	1b3a      	subs	r2, r7, r4
 8008578:	3a15      	subs	r2, #21
 800857a:	f022 0203 	bic.w	r2, r2, #3
 800857e:	3204      	adds	r2, #4
 8008580:	f104 0115 	add.w	r1, r4, #21
 8008584:	428f      	cmp	r7, r1
 8008586:	bf38      	it	cc
 8008588:	2204      	movcc	r2, #4
 800858a:	9201      	str	r2, [sp, #4]
 800858c:	9a02      	ldr	r2, [sp, #8]
 800858e:	9303      	str	r3, [sp, #12]
 8008590:	429a      	cmp	r2, r3
 8008592:	d80c      	bhi.n	80085ae <__multiply+0x9e>
 8008594:	2e00      	cmp	r6, #0
 8008596:	dd03      	ble.n	80085a0 <__multiply+0x90>
 8008598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800859c:	2b00      	cmp	r3, #0
 800859e:	d05b      	beq.n	8008658 <__multiply+0x148>
 80085a0:	6106      	str	r6, [r0, #16]
 80085a2:	b005      	add	sp, #20
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	f843 2b04 	str.w	r2, [r3], #4
 80085ac:	e7d8      	b.n	8008560 <__multiply+0x50>
 80085ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80085b2:	f1ba 0f00 	cmp.w	sl, #0
 80085b6:	d024      	beq.n	8008602 <__multiply+0xf2>
 80085b8:	f104 0e14 	add.w	lr, r4, #20
 80085bc:	46a9      	mov	r9, r5
 80085be:	f04f 0c00 	mov.w	ip, #0
 80085c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085c6:	f8d9 1000 	ldr.w	r1, [r9]
 80085ca:	fa1f fb82 	uxth.w	fp, r2
 80085ce:	b289      	uxth	r1, r1
 80085d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80085d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085d8:	f8d9 2000 	ldr.w	r2, [r9]
 80085dc:	4461      	add	r1, ip
 80085de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80085e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085ea:	b289      	uxth	r1, r1
 80085ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085f0:	4577      	cmp	r7, lr
 80085f2:	f849 1b04 	str.w	r1, [r9], #4
 80085f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085fa:	d8e2      	bhi.n	80085c2 <__multiply+0xb2>
 80085fc:	9a01      	ldr	r2, [sp, #4]
 80085fe:	f845 c002 	str.w	ip, [r5, r2]
 8008602:	9a03      	ldr	r2, [sp, #12]
 8008604:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008608:	3304      	adds	r3, #4
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	d021      	beq.n	8008654 <__multiply+0x144>
 8008610:	6829      	ldr	r1, [r5, #0]
 8008612:	f104 0c14 	add.w	ip, r4, #20
 8008616:	46ae      	mov	lr, r5
 8008618:	f04f 0a00 	mov.w	sl, #0
 800861c:	f8bc b000 	ldrh.w	fp, [ip]
 8008620:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008624:	fb09 220b 	mla	r2, r9, fp, r2
 8008628:	4452      	add	r2, sl
 800862a:	b289      	uxth	r1, r1
 800862c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008630:	f84e 1b04 	str.w	r1, [lr], #4
 8008634:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008638:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800863c:	f8be 1000 	ldrh.w	r1, [lr]
 8008640:	fb09 110a 	mla	r1, r9, sl, r1
 8008644:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008648:	4567      	cmp	r7, ip
 800864a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800864e:	d8e5      	bhi.n	800861c <__multiply+0x10c>
 8008650:	9a01      	ldr	r2, [sp, #4]
 8008652:	50a9      	str	r1, [r5, r2]
 8008654:	3504      	adds	r5, #4
 8008656:	e799      	b.n	800858c <__multiply+0x7c>
 8008658:	3e01      	subs	r6, #1
 800865a:	e79b      	b.n	8008594 <__multiply+0x84>
 800865c:	0802f694 	.word	0x0802f694
 8008660:	0802f6a5 	.word	0x0802f6a5

08008664 <__pow5mult>:
 8008664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008668:	4615      	mov	r5, r2
 800866a:	f012 0203 	ands.w	r2, r2, #3
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	d007      	beq.n	8008684 <__pow5mult+0x20>
 8008674:	4c25      	ldr	r4, [pc, #148]	; (800870c <__pow5mult+0xa8>)
 8008676:	3a01      	subs	r2, #1
 8008678:	2300      	movs	r3, #0
 800867a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800867e:	f7ff fe9d 	bl	80083bc <__multadd>
 8008682:	4607      	mov	r7, r0
 8008684:	10ad      	asrs	r5, r5, #2
 8008686:	d03d      	beq.n	8008704 <__pow5mult+0xa0>
 8008688:	69f4      	ldr	r4, [r6, #28]
 800868a:	b97c      	cbnz	r4, 80086ac <__pow5mult+0x48>
 800868c:	2010      	movs	r0, #16
 800868e:	f7ff fd7f 	bl	8008190 <malloc>
 8008692:	4602      	mov	r2, r0
 8008694:	61f0      	str	r0, [r6, #28]
 8008696:	b928      	cbnz	r0, 80086a4 <__pow5mult+0x40>
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <__pow5mult+0xac>)
 800869a:	481e      	ldr	r0, [pc, #120]	; (8008714 <__pow5mult+0xb0>)
 800869c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80086a0:	f000 fbe4 	bl	8008e6c <__assert_func>
 80086a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086a8:	6004      	str	r4, [r0, #0]
 80086aa:	60c4      	str	r4, [r0, #12]
 80086ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80086b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086b4:	b94c      	cbnz	r4, 80086ca <__pow5mult+0x66>
 80086b6:	f240 2171 	movw	r1, #625	; 0x271
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ff12 	bl	80084e4 <__i2b>
 80086c0:	2300      	movs	r3, #0
 80086c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80086c6:	4604      	mov	r4, r0
 80086c8:	6003      	str	r3, [r0, #0]
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	07eb      	lsls	r3, r5, #31
 80086d0:	d50a      	bpl.n	80086e8 <__pow5mult+0x84>
 80086d2:	4639      	mov	r1, r7
 80086d4:	4622      	mov	r2, r4
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7ff ff1a 	bl	8008510 <__multiply>
 80086dc:	4639      	mov	r1, r7
 80086de:	4680      	mov	r8, r0
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff fe49 	bl	8008378 <_Bfree>
 80086e6:	4647      	mov	r7, r8
 80086e8:	106d      	asrs	r5, r5, #1
 80086ea:	d00b      	beq.n	8008704 <__pow5mult+0xa0>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	b938      	cbnz	r0, 8008700 <__pow5mult+0x9c>
 80086f0:	4622      	mov	r2, r4
 80086f2:	4621      	mov	r1, r4
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff ff0b 	bl	8008510 <__multiply>
 80086fa:	6020      	str	r0, [r4, #0]
 80086fc:	f8c0 9000 	str.w	r9, [r0]
 8008700:	4604      	mov	r4, r0
 8008702:	e7e4      	b.n	80086ce <__pow5mult+0x6a>
 8008704:	4638      	mov	r0, r7
 8008706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870a:	bf00      	nop
 800870c:	0802f7f0 	.word	0x0802f7f0
 8008710:	0802f625 	.word	0x0802f625
 8008714:	0802f6a5 	.word	0x0802f6a5

08008718 <__lshift>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	460c      	mov	r4, r1
 800871e:	6849      	ldr	r1, [r1, #4]
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	4607      	mov	r7, r0
 800872a:	4691      	mov	r9, r2
 800872c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008730:	f108 0601 	add.w	r6, r8, #1
 8008734:	42b3      	cmp	r3, r6
 8008736:	db0b      	blt.n	8008750 <__lshift+0x38>
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff fddd 	bl	80082f8 <_Balloc>
 800873e:	4605      	mov	r5, r0
 8008740:	b948      	cbnz	r0, 8008756 <__lshift+0x3e>
 8008742:	4602      	mov	r2, r0
 8008744:	4b28      	ldr	r3, [pc, #160]	; (80087e8 <__lshift+0xd0>)
 8008746:	4829      	ldr	r0, [pc, #164]	; (80087ec <__lshift+0xd4>)
 8008748:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800874c:	f000 fb8e 	bl	8008e6c <__assert_func>
 8008750:	3101      	adds	r1, #1
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	e7ee      	b.n	8008734 <__lshift+0x1c>
 8008756:	2300      	movs	r3, #0
 8008758:	f100 0114 	add.w	r1, r0, #20
 800875c:	f100 0210 	add.w	r2, r0, #16
 8008760:	4618      	mov	r0, r3
 8008762:	4553      	cmp	r3, sl
 8008764:	db33      	blt.n	80087ce <__lshift+0xb6>
 8008766:	6920      	ldr	r0, [r4, #16]
 8008768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800876c:	f104 0314 	add.w	r3, r4, #20
 8008770:	f019 091f 	ands.w	r9, r9, #31
 8008774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800877c:	d02b      	beq.n	80087d6 <__lshift+0xbe>
 800877e:	f1c9 0e20 	rsb	lr, r9, #32
 8008782:	468a      	mov	sl, r1
 8008784:	2200      	movs	r2, #0
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	fa00 f009 	lsl.w	r0, r0, r9
 800878c:	4310      	orrs	r0, r2
 800878e:	f84a 0b04 	str.w	r0, [sl], #4
 8008792:	f853 2b04 	ldr.w	r2, [r3], #4
 8008796:	459c      	cmp	ip, r3
 8008798:	fa22 f20e 	lsr.w	r2, r2, lr
 800879c:	d8f3      	bhi.n	8008786 <__lshift+0x6e>
 800879e:	ebac 0304 	sub.w	r3, ip, r4
 80087a2:	3b15      	subs	r3, #21
 80087a4:	f023 0303 	bic.w	r3, r3, #3
 80087a8:	3304      	adds	r3, #4
 80087aa:	f104 0015 	add.w	r0, r4, #21
 80087ae:	4584      	cmp	ip, r0
 80087b0:	bf38      	it	cc
 80087b2:	2304      	movcc	r3, #4
 80087b4:	50ca      	str	r2, [r1, r3]
 80087b6:	b10a      	cbz	r2, 80087bc <__lshift+0xa4>
 80087b8:	f108 0602 	add.w	r6, r8, #2
 80087bc:	3e01      	subs	r6, #1
 80087be:	4638      	mov	r0, r7
 80087c0:	612e      	str	r6, [r5, #16]
 80087c2:	4621      	mov	r1, r4
 80087c4:	f7ff fdd8 	bl	8008378 <_Bfree>
 80087c8:	4628      	mov	r0, r5
 80087ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80087d2:	3301      	adds	r3, #1
 80087d4:	e7c5      	b.n	8008762 <__lshift+0x4a>
 80087d6:	3904      	subs	r1, #4
 80087d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80087e0:	459c      	cmp	ip, r3
 80087e2:	d8f9      	bhi.n	80087d8 <__lshift+0xc0>
 80087e4:	e7ea      	b.n	80087bc <__lshift+0xa4>
 80087e6:	bf00      	nop
 80087e8:	0802f694 	.word	0x0802f694
 80087ec:	0802f6a5 	.word	0x0802f6a5

080087f0 <__mcmp>:
 80087f0:	b530      	push	{r4, r5, lr}
 80087f2:	6902      	ldr	r2, [r0, #16]
 80087f4:	690c      	ldr	r4, [r1, #16]
 80087f6:	1b12      	subs	r2, r2, r4
 80087f8:	d10e      	bne.n	8008818 <__mcmp+0x28>
 80087fa:	f100 0314 	add.w	r3, r0, #20
 80087fe:	3114      	adds	r1, #20
 8008800:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008804:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008808:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800880c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008810:	42a5      	cmp	r5, r4
 8008812:	d003      	beq.n	800881c <__mcmp+0x2c>
 8008814:	d305      	bcc.n	8008822 <__mcmp+0x32>
 8008816:	2201      	movs	r2, #1
 8008818:	4610      	mov	r0, r2
 800881a:	bd30      	pop	{r4, r5, pc}
 800881c:	4283      	cmp	r3, r0
 800881e:	d3f3      	bcc.n	8008808 <__mcmp+0x18>
 8008820:	e7fa      	b.n	8008818 <__mcmp+0x28>
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	e7f7      	b.n	8008818 <__mcmp+0x28>

08008828 <__mdiff>:
 8008828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	4606      	mov	r6, r0
 8008830:	4611      	mov	r1, r2
 8008832:	4620      	mov	r0, r4
 8008834:	4690      	mov	r8, r2
 8008836:	f7ff ffdb 	bl	80087f0 <__mcmp>
 800883a:	1e05      	subs	r5, r0, #0
 800883c:	d110      	bne.n	8008860 <__mdiff+0x38>
 800883e:	4629      	mov	r1, r5
 8008840:	4630      	mov	r0, r6
 8008842:	f7ff fd59 	bl	80082f8 <_Balloc>
 8008846:	b930      	cbnz	r0, 8008856 <__mdiff+0x2e>
 8008848:	4b3a      	ldr	r3, [pc, #232]	; (8008934 <__mdiff+0x10c>)
 800884a:	4602      	mov	r2, r0
 800884c:	f240 2137 	movw	r1, #567	; 0x237
 8008850:	4839      	ldr	r0, [pc, #228]	; (8008938 <__mdiff+0x110>)
 8008852:	f000 fb0b 	bl	8008e6c <__assert_func>
 8008856:	2301      	movs	r3, #1
 8008858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800885c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	bfa4      	itt	ge
 8008862:	4643      	movge	r3, r8
 8008864:	46a0      	movge	r8, r4
 8008866:	4630      	mov	r0, r6
 8008868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800886c:	bfa6      	itte	ge
 800886e:	461c      	movge	r4, r3
 8008870:	2500      	movge	r5, #0
 8008872:	2501      	movlt	r5, #1
 8008874:	f7ff fd40 	bl	80082f8 <_Balloc>
 8008878:	b920      	cbnz	r0, 8008884 <__mdiff+0x5c>
 800887a:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <__mdiff+0x10c>)
 800887c:	4602      	mov	r2, r0
 800887e:	f240 2145 	movw	r1, #581	; 0x245
 8008882:	e7e5      	b.n	8008850 <__mdiff+0x28>
 8008884:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008888:	6926      	ldr	r6, [r4, #16]
 800888a:	60c5      	str	r5, [r0, #12]
 800888c:	f104 0914 	add.w	r9, r4, #20
 8008890:	f108 0514 	add.w	r5, r8, #20
 8008894:	f100 0e14 	add.w	lr, r0, #20
 8008898:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800889c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088a0:	f108 0210 	add.w	r2, r8, #16
 80088a4:	46f2      	mov	sl, lr
 80088a6:	2100      	movs	r1, #0
 80088a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80088ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088b0:	fa11 f88b 	uxtah	r8, r1, fp
 80088b4:	b299      	uxth	r1, r3
 80088b6:	0c1b      	lsrs	r3, r3, #16
 80088b8:	eba8 0801 	sub.w	r8, r8, r1
 80088bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088c4:	fa1f f888 	uxth.w	r8, r8
 80088c8:	1419      	asrs	r1, r3, #16
 80088ca:	454e      	cmp	r6, r9
 80088cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088d0:	f84a 3b04 	str.w	r3, [sl], #4
 80088d4:	d8e8      	bhi.n	80088a8 <__mdiff+0x80>
 80088d6:	1b33      	subs	r3, r6, r4
 80088d8:	3b15      	subs	r3, #21
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	3304      	adds	r3, #4
 80088e0:	3415      	adds	r4, #21
 80088e2:	42a6      	cmp	r6, r4
 80088e4:	bf38      	it	cc
 80088e6:	2304      	movcc	r3, #4
 80088e8:	441d      	add	r5, r3
 80088ea:	4473      	add	r3, lr
 80088ec:	469e      	mov	lr, r3
 80088ee:	462e      	mov	r6, r5
 80088f0:	4566      	cmp	r6, ip
 80088f2:	d30e      	bcc.n	8008912 <__mdiff+0xea>
 80088f4:	f10c 0203 	add.w	r2, ip, #3
 80088f8:	1b52      	subs	r2, r2, r5
 80088fa:	f022 0203 	bic.w	r2, r2, #3
 80088fe:	3d03      	subs	r5, #3
 8008900:	45ac      	cmp	ip, r5
 8008902:	bf38      	it	cc
 8008904:	2200      	movcc	r2, #0
 8008906:	4413      	add	r3, r2
 8008908:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800890c:	b17a      	cbz	r2, 800892e <__mdiff+0x106>
 800890e:	6107      	str	r7, [r0, #16]
 8008910:	e7a4      	b.n	800885c <__mdiff+0x34>
 8008912:	f856 8b04 	ldr.w	r8, [r6], #4
 8008916:	fa11 f288 	uxtah	r2, r1, r8
 800891a:	1414      	asrs	r4, r2, #16
 800891c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008920:	b292      	uxth	r2, r2
 8008922:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008926:	f84e 2b04 	str.w	r2, [lr], #4
 800892a:	1421      	asrs	r1, r4, #16
 800892c:	e7e0      	b.n	80088f0 <__mdiff+0xc8>
 800892e:	3f01      	subs	r7, #1
 8008930:	e7ea      	b.n	8008908 <__mdiff+0xe0>
 8008932:	bf00      	nop
 8008934:	0802f694 	.word	0x0802f694
 8008938:	0802f6a5 	.word	0x0802f6a5

0800893c <__d2b>:
 800893c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008940:	460f      	mov	r7, r1
 8008942:	2101      	movs	r1, #1
 8008944:	ec59 8b10 	vmov	r8, r9, d0
 8008948:	4616      	mov	r6, r2
 800894a:	f7ff fcd5 	bl	80082f8 <_Balloc>
 800894e:	4604      	mov	r4, r0
 8008950:	b930      	cbnz	r0, 8008960 <__d2b+0x24>
 8008952:	4602      	mov	r2, r0
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <__d2b+0xac>)
 8008956:	4825      	ldr	r0, [pc, #148]	; (80089ec <__d2b+0xb0>)
 8008958:	f240 310f 	movw	r1, #783	; 0x30f
 800895c:	f000 fa86 	bl	8008e6c <__assert_func>
 8008960:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008968:	bb2d      	cbnz	r5, 80089b6 <__d2b+0x7a>
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	f1b8 0300 	subs.w	r3, r8, #0
 8008970:	d026      	beq.n	80089c0 <__d2b+0x84>
 8008972:	4668      	mov	r0, sp
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	f7ff fd87 	bl	8008488 <__lo0bits>
 800897a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800897e:	b1e8      	cbz	r0, 80089bc <__d2b+0x80>
 8008980:	f1c0 0320 	rsb	r3, r0, #32
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	430b      	orrs	r3, r1
 800898a:	40c2      	lsrs	r2, r0
 800898c:	6163      	str	r3, [r4, #20]
 800898e:	9201      	str	r2, [sp, #4]
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	61a3      	str	r3, [r4, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	bf14      	ite	ne
 8008998:	2202      	movne	r2, #2
 800899a:	2201      	moveq	r2, #1
 800899c:	6122      	str	r2, [r4, #16]
 800899e:	b1bd      	cbz	r5, 80089d0 <__d2b+0x94>
 80089a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80089a4:	4405      	add	r5, r0
 80089a6:	603d      	str	r5, [r7, #0]
 80089a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089ac:	6030      	str	r0, [r6, #0]
 80089ae:	4620      	mov	r0, r4
 80089b0:	b003      	add	sp, #12
 80089b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ba:	e7d6      	b.n	800896a <__d2b+0x2e>
 80089bc:	6161      	str	r1, [r4, #20]
 80089be:	e7e7      	b.n	8008990 <__d2b+0x54>
 80089c0:	a801      	add	r0, sp, #4
 80089c2:	f7ff fd61 	bl	8008488 <__lo0bits>
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	6163      	str	r3, [r4, #20]
 80089ca:	3020      	adds	r0, #32
 80089cc:	2201      	movs	r2, #1
 80089ce:	e7e5      	b.n	800899c <__d2b+0x60>
 80089d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089d8:	6038      	str	r0, [r7, #0]
 80089da:	6918      	ldr	r0, [r3, #16]
 80089dc:	f7ff fd34 	bl	8008448 <__hi0bits>
 80089e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089e4:	e7e2      	b.n	80089ac <__d2b+0x70>
 80089e6:	bf00      	nop
 80089e8:	0802f694 	.word	0x0802f694
 80089ec:	0802f6a5 	.word	0x0802f6a5

080089f0 <__ssputs_r>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	688e      	ldr	r6, [r1, #8]
 80089f6:	461f      	mov	r7, r3
 80089f8:	42be      	cmp	r6, r7
 80089fa:	680b      	ldr	r3, [r1, #0]
 80089fc:	4682      	mov	sl, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	4690      	mov	r8, r2
 8008a02:	d82c      	bhi.n	8008a5e <__ssputs_r+0x6e>
 8008a04:	898a      	ldrh	r2, [r1, #12]
 8008a06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a0a:	d026      	beq.n	8008a5a <__ssputs_r+0x6a>
 8008a0c:	6965      	ldr	r5, [r4, #20]
 8008a0e:	6909      	ldr	r1, [r1, #16]
 8008a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a14:	eba3 0901 	sub.w	r9, r3, r1
 8008a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a1c:	1c7b      	adds	r3, r7, #1
 8008a1e:	444b      	add	r3, r9
 8008a20:	106d      	asrs	r5, r5, #1
 8008a22:	429d      	cmp	r5, r3
 8008a24:	bf38      	it	cc
 8008a26:	461d      	movcc	r5, r3
 8008a28:	0553      	lsls	r3, r2, #21
 8008a2a:	d527      	bpl.n	8008a7c <__ssputs_r+0x8c>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7ff fbd7 	bl	80081e0 <_malloc_r>
 8008a32:	4606      	mov	r6, r0
 8008a34:	b360      	cbz	r0, 8008a90 <__ssputs_r+0xa0>
 8008a36:	6921      	ldr	r1, [r4, #16]
 8008a38:	464a      	mov	r2, r9
 8008a3a:	f000 fa09 	bl	8008e50 <memcpy>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	6126      	str	r6, [r4, #16]
 8008a4c:	6165      	str	r5, [r4, #20]
 8008a4e:	444e      	add	r6, r9
 8008a50:	eba5 0509 	sub.w	r5, r5, r9
 8008a54:	6026      	str	r6, [r4, #0]
 8008a56:	60a5      	str	r5, [r4, #8]
 8008a58:	463e      	mov	r6, r7
 8008a5a:	42be      	cmp	r6, r7
 8008a5c:	d900      	bls.n	8008a60 <__ssputs_r+0x70>
 8008a5e:	463e      	mov	r6, r7
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	4632      	mov	r2, r6
 8008a64:	4641      	mov	r1, r8
 8008a66:	f000 f9c9 	bl	8008dfc <memmove>
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	1b9b      	subs	r3, r3, r6
 8008a6e:	60a3      	str	r3, [r4, #8]
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	4433      	add	r3, r6
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	2000      	movs	r0, #0
 8008a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	f000 fa3b 	bl	8008ef8 <_realloc_r>
 8008a82:	4606      	mov	r6, r0
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d1e0      	bne.n	8008a4a <__ssputs_r+0x5a>
 8008a88:	6921      	ldr	r1, [r4, #16]
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	f7ff fb34 	bl	80080f8 <_free_r>
 8008a90:	230c      	movs	r3, #12
 8008a92:	f8ca 3000 	str.w	r3, [sl]
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	e7e9      	b.n	8008a78 <__ssputs_r+0x88>

08008aa4 <_svfiprintf_r>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	4698      	mov	r8, r3
 8008aaa:	898b      	ldrh	r3, [r1, #12]
 8008aac:	061b      	lsls	r3, r3, #24
 8008aae:	b09d      	sub	sp, #116	; 0x74
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	460d      	mov	r5, r1
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	d50e      	bpl.n	8008ad6 <_svfiprintf_r+0x32>
 8008ab8:	690b      	ldr	r3, [r1, #16]
 8008aba:	b963      	cbnz	r3, 8008ad6 <_svfiprintf_r+0x32>
 8008abc:	2140      	movs	r1, #64	; 0x40
 8008abe:	f7ff fb8f 	bl	80081e0 <_malloc_r>
 8008ac2:	6028      	str	r0, [r5, #0]
 8008ac4:	6128      	str	r0, [r5, #16]
 8008ac6:	b920      	cbnz	r0, 8008ad2 <_svfiprintf_r+0x2e>
 8008ac8:	230c      	movs	r3, #12
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	e0d0      	b.n	8008c74 <_svfiprintf_r+0x1d0>
 8008ad2:	2340      	movs	r3, #64	; 0x40
 8008ad4:	616b      	str	r3, [r5, #20]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8008ada:	2320      	movs	r3, #32
 8008adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae4:	2330      	movs	r3, #48	; 0x30
 8008ae6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c8c <_svfiprintf_r+0x1e8>
 8008aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aee:	f04f 0901 	mov.w	r9, #1
 8008af2:	4623      	mov	r3, r4
 8008af4:	469a      	mov	sl, r3
 8008af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008afa:	b10a      	cbz	r2, 8008b00 <_svfiprintf_r+0x5c>
 8008afc:	2a25      	cmp	r2, #37	; 0x25
 8008afe:	d1f9      	bne.n	8008af4 <_svfiprintf_r+0x50>
 8008b00:	ebba 0b04 	subs.w	fp, sl, r4
 8008b04:	d00b      	beq.n	8008b1e <_svfiprintf_r+0x7a>
 8008b06:	465b      	mov	r3, fp
 8008b08:	4622      	mov	r2, r4
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff ff6f 	bl	80089f0 <__ssputs_r>
 8008b12:	3001      	adds	r0, #1
 8008b14:	f000 80a9 	beq.w	8008c6a <_svfiprintf_r+0x1c6>
 8008b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b1a:	445a      	add	r2, fp
 8008b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80a1 	beq.w	8008c6a <_svfiprintf_r+0x1c6>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b32:	f10a 0a01 	add.w	sl, sl, #1
 8008b36:	9304      	str	r3, [sp, #16]
 8008b38:	9307      	str	r3, [sp, #28]
 8008b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b40:	4654      	mov	r4, sl
 8008b42:	2205      	movs	r2, #5
 8008b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b48:	4850      	ldr	r0, [pc, #320]	; (8008c8c <_svfiprintf_r+0x1e8>)
 8008b4a:	f7f7 fb79 	bl	8000240 <memchr>
 8008b4e:	9a04      	ldr	r2, [sp, #16]
 8008b50:	b9d8      	cbnz	r0, 8008b8a <_svfiprintf_r+0xe6>
 8008b52:	06d0      	lsls	r0, r2, #27
 8008b54:	bf44      	itt	mi
 8008b56:	2320      	movmi	r3, #32
 8008b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b5c:	0711      	lsls	r1, r2, #28
 8008b5e:	bf44      	itt	mi
 8008b60:	232b      	movmi	r3, #43	; 0x2b
 8008b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b66:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6c:	d015      	beq.n	8008b9a <_svfiprintf_r+0xf6>
 8008b6e:	9a07      	ldr	r2, [sp, #28]
 8008b70:	4654      	mov	r4, sl
 8008b72:	2000      	movs	r0, #0
 8008b74:	f04f 0c0a 	mov.w	ip, #10
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b7e:	3b30      	subs	r3, #48	; 0x30
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d94d      	bls.n	8008c20 <_svfiprintf_r+0x17c>
 8008b84:	b1b0      	cbz	r0, 8008bb4 <_svfiprintf_r+0x110>
 8008b86:	9207      	str	r2, [sp, #28]
 8008b88:	e014      	b.n	8008bb4 <_svfiprintf_r+0x110>
 8008b8a:	eba0 0308 	sub.w	r3, r0, r8
 8008b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b92:	4313      	orrs	r3, r2
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	46a2      	mov	sl, r4
 8008b98:	e7d2      	b.n	8008b40 <_svfiprintf_r+0x9c>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	1d19      	adds	r1, r3, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	9103      	str	r1, [sp, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfbb      	ittet	lt
 8008ba6:	425b      	neglt	r3, r3
 8008ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bac:	9307      	strge	r3, [sp, #28]
 8008bae:	9307      	strlt	r3, [sp, #28]
 8008bb0:	bfb8      	it	lt
 8008bb2:	9204      	strlt	r2, [sp, #16]
 8008bb4:	7823      	ldrb	r3, [r4, #0]
 8008bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb8:	d10c      	bne.n	8008bd4 <_svfiprintf_r+0x130>
 8008bba:	7863      	ldrb	r3, [r4, #1]
 8008bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbe:	d134      	bne.n	8008c2a <_svfiprintf_r+0x186>
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	9203      	str	r2, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bfb8      	it	lt
 8008bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bd0:	3402      	adds	r4, #2
 8008bd2:	9305      	str	r3, [sp, #20]
 8008bd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008c9c <_svfiprintf_r+0x1f8>
 8008bd8:	7821      	ldrb	r1, [r4, #0]
 8008bda:	2203      	movs	r2, #3
 8008bdc:	4650      	mov	r0, sl
 8008bde:	f7f7 fb2f 	bl	8000240 <memchr>
 8008be2:	b138      	cbz	r0, 8008bf4 <_svfiprintf_r+0x150>
 8008be4:	9b04      	ldr	r3, [sp, #16]
 8008be6:	eba0 000a 	sub.w	r0, r0, sl
 8008bea:	2240      	movs	r2, #64	; 0x40
 8008bec:	4082      	lsls	r2, r0
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	3401      	adds	r4, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf8:	4825      	ldr	r0, [pc, #148]	; (8008c90 <_svfiprintf_r+0x1ec>)
 8008bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bfe:	2206      	movs	r2, #6
 8008c00:	f7f7 fb1e 	bl	8000240 <memchr>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d038      	beq.n	8008c7a <_svfiprintf_r+0x1d6>
 8008c08:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <_svfiprintf_r+0x1f0>)
 8008c0a:	bb1b      	cbnz	r3, 8008c54 <_svfiprintf_r+0x1b0>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	3307      	adds	r3, #7
 8008c10:	f023 0307 	bic.w	r3, r3, #7
 8008c14:	3308      	adds	r3, #8
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1a:	4433      	add	r3, r6
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	e768      	b.n	8008af2 <_svfiprintf_r+0x4e>
 8008c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c24:	460c      	mov	r4, r1
 8008c26:	2001      	movs	r0, #1
 8008c28:	e7a6      	b.n	8008b78 <_svfiprintf_r+0xd4>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	3401      	adds	r4, #1
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	4619      	mov	r1, r3
 8008c32:	f04f 0c0a 	mov.w	ip, #10
 8008c36:	4620      	mov	r0, r4
 8008c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c3c:	3a30      	subs	r2, #48	; 0x30
 8008c3e:	2a09      	cmp	r2, #9
 8008c40:	d903      	bls.n	8008c4a <_svfiprintf_r+0x1a6>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0c6      	beq.n	8008bd4 <_svfiprintf_r+0x130>
 8008c46:	9105      	str	r1, [sp, #20]
 8008c48:	e7c4      	b.n	8008bd4 <_svfiprintf_r+0x130>
 8008c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c4e:	4604      	mov	r4, r0
 8008c50:	2301      	movs	r3, #1
 8008c52:	e7f0      	b.n	8008c36 <_svfiprintf_r+0x192>
 8008c54:	ab03      	add	r3, sp, #12
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <_svfiprintf_r+0x1f4>)
 8008c5c:	a904      	add	r1, sp, #16
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7fd ff1a 	bl	8006a98 <_printf_float>
 8008c64:	1c42      	adds	r2, r0, #1
 8008c66:	4606      	mov	r6, r0
 8008c68:	d1d6      	bne.n	8008c18 <_svfiprintf_r+0x174>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	065b      	lsls	r3, r3, #25
 8008c6e:	f53f af2d 	bmi.w	8008acc <_svfiprintf_r+0x28>
 8008c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c74:	b01d      	add	sp, #116	; 0x74
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	ab03      	add	r3, sp, #12
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_svfiprintf_r+0x1f4>)
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7fe f98f 	bl	8006fa8 <_printf_i>
 8008c8a:	e7eb      	b.n	8008c64 <_svfiprintf_r+0x1c0>
 8008c8c:	0802f7fc 	.word	0x0802f7fc
 8008c90:	0802f806 	.word	0x0802f806
 8008c94:	08006a99 	.word	0x08006a99
 8008c98:	080089f1 	.word	0x080089f1
 8008c9c:	0802f802 	.word	0x0802f802

08008ca0 <__sflush_r>:
 8008ca0:	898a      	ldrh	r2, [r1, #12]
 8008ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	0710      	lsls	r0, r2, #28
 8008caa:	460c      	mov	r4, r1
 8008cac:	d458      	bmi.n	8008d60 <__sflush_r+0xc0>
 8008cae:	684b      	ldr	r3, [r1, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dc05      	bgt.n	8008cc0 <__sflush_r+0x20>
 8008cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dc02      	bgt.n	8008cc0 <__sflush_r+0x20>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	d0f9      	beq.n	8008cba <__sflush_r+0x1a>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ccc:	682f      	ldr	r7, [r5, #0]
 8008cce:	6a21      	ldr	r1, [r4, #32]
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	d032      	beq.n	8008d3a <__sflush_r+0x9a>
 8008cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	075a      	lsls	r2, r3, #29
 8008cda:	d505      	bpl.n	8008ce8 <__sflush_r+0x48>
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	1ac0      	subs	r0, r0, r3
 8008ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ce2:	b10b      	cbz	r3, 8008ce8 <__sflush_r+0x48>
 8008ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ce6:	1ac0      	subs	r0, r0, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4602      	mov	r2, r0
 8008cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cee:	6a21      	ldr	r1, [r4, #32]
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b0      	blx	r6
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	d106      	bne.n	8008d08 <__sflush_r+0x68>
 8008cfa:	6829      	ldr	r1, [r5, #0]
 8008cfc:	291d      	cmp	r1, #29
 8008cfe:	d82b      	bhi.n	8008d58 <__sflush_r+0xb8>
 8008d00:	4a29      	ldr	r2, [pc, #164]	; (8008da8 <__sflush_r+0x108>)
 8008d02:	410a      	asrs	r2, r1
 8008d04:	07d6      	lsls	r6, r2, #31
 8008d06:	d427      	bmi.n	8008d58 <__sflush_r+0xb8>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	6062      	str	r2, [r4, #4]
 8008d0c:	04d9      	lsls	r1, r3, #19
 8008d0e:	6922      	ldr	r2, [r4, #16]
 8008d10:	6022      	str	r2, [r4, #0]
 8008d12:	d504      	bpl.n	8008d1e <__sflush_r+0x7e>
 8008d14:	1c42      	adds	r2, r0, #1
 8008d16:	d101      	bne.n	8008d1c <__sflush_r+0x7c>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b903      	cbnz	r3, 8008d1e <__sflush_r+0x7e>
 8008d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8008d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d20:	602f      	str	r7, [r5, #0]
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d0c9      	beq.n	8008cba <__sflush_r+0x1a>
 8008d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	d002      	beq.n	8008d34 <__sflush_r+0x94>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f7ff f9e2 	bl	80080f8 <_free_r>
 8008d34:	2000      	movs	r0, #0
 8008d36:	6360      	str	r0, [r4, #52]	; 0x34
 8008d38:	e7c0      	b.n	8008cbc <__sflush_r+0x1c>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b0      	blx	r6
 8008d40:	1c41      	adds	r1, r0, #1
 8008d42:	d1c8      	bne.n	8008cd6 <__sflush_r+0x36>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0c5      	beq.n	8008cd6 <__sflush_r+0x36>
 8008d4a:	2b1d      	cmp	r3, #29
 8008d4c:	d001      	beq.n	8008d52 <__sflush_r+0xb2>
 8008d4e:	2b16      	cmp	r3, #22
 8008d50:	d101      	bne.n	8008d56 <__sflush_r+0xb6>
 8008d52:	602f      	str	r7, [r5, #0]
 8008d54:	e7b1      	b.n	8008cba <__sflush_r+0x1a>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	e7ad      	b.n	8008cbc <__sflush_r+0x1c>
 8008d60:	690f      	ldr	r7, [r1, #16]
 8008d62:	2f00      	cmp	r7, #0
 8008d64:	d0a9      	beq.n	8008cba <__sflush_r+0x1a>
 8008d66:	0793      	lsls	r3, r2, #30
 8008d68:	680e      	ldr	r6, [r1, #0]
 8008d6a:	bf08      	it	eq
 8008d6c:	694b      	ldreq	r3, [r1, #20]
 8008d6e:	600f      	str	r7, [r1, #0]
 8008d70:	bf18      	it	ne
 8008d72:	2300      	movne	r3, #0
 8008d74:	eba6 0807 	sub.w	r8, r6, r7
 8008d78:	608b      	str	r3, [r1, #8]
 8008d7a:	f1b8 0f00 	cmp.w	r8, #0
 8008d7e:	dd9c      	ble.n	8008cba <__sflush_r+0x1a>
 8008d80:	6a21      	ldr	r1, [r4, #32]
 8008d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d84:	4643      	mov	r3, r8
 8008d86:	463a      	mov	r2, r7
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b0      	blx	r6
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	dc06      	bgt.n	8008d9e <__sflush_r+0xfe>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e78e      	b.n	8008cbc <__sflush_r+0x1c>
 8008d9e:	4407      	add	r7, r0
 8008da0:	eba8 0800 	sub.w	r8, r8, r0
 8008da4:	e7e9      	b.n	8008d7a <__sflush_r+0xda>
 8008da6:	bf00      	nop
 8008da8:	dfbffffe 	.word	0xdfbffffe

08008dac <_fflush_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	690b      	ldr	r3, [r1, #16]
 8008db0:	4605      	mov	r5, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b913      	cbnz	r3, 8008dbc <_fflush_r+0x10>
 8008db6:	2500      	movs	r5, #0
 8008db8:	4628      	mov	r0, r5
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	b118      	cbz	r0, 8008dc6 <_fflush_r+0x1a>
 8008dbe:	6a03      	ldr	r3, [r0, #32]
 8008dc0:	b90b      	cbnz	r3, 8008dc6 <_fflush_r+0x1a>
 8008dc2:	f7fe fa8d 	bl	80072e0 <__sinit>
 8008dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f3      	beq.n	8008db6 <_fflush_r+0xa>
 8008dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dd0:	07d0      	lsls	r0, r2, #31
 8008dd2:	d404      	bmi.n	8008dde <_fflush_r+0x32>
 8008dd4:	0599      	lsls	r1, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_fflush_r+0x32>
 8008dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dda:	f7fe fb97 	bl	800750c <__retarget_lock_acquire_recursive>
 8008dde:	4628      	mov	r0, r5
 8008de0:	4621      	mov	r1, r4
 8008de2:	f7ff ff5d 	bl	8008ca0 <__sflush_r>
 8008de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008de8:	07da      	lsls	r2, r3, #31
 8008dea:	4605      	mov	r5, r0
 8008dec:	d4e4      	bmi.n	8008db8 <_fflush_r+0xc>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	059b      	lsls	r3, r3, #22
 8008df2:	d4e1      	bmi.n	8008db8 <_fflush_r+0xc>
 8008df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008df6:	f7fe fb8a 	bl	800750e <__retarget_lock_release_recursive>
 8008dfa:	e7dd      	b.n	8008db8 <_fflush_r+0xc>

08008dfc <memmove>:
 8008dfc:	4288      	cmp	r0, r1
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	eb01 0402 	add.w	r4, r1, r2
 8008e04:	d902      	bls.n	8008e0c <memmove+0x10>
 8008e06:	4284      	cmp	r4, r0
 8008e08:	4623      	mov	r3, r4
 8008e0a:	d807      	bhi.n	8008e1c <memmove+0x20>
 8008e0c:	1e43      	subs	r3, r0, #1
 8008e0e:	42a1      	cmp	r1, r4
 8008e10:	d008      	beq.n	8008e24 <memmove+0x28>
 8008e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e1a:	e7f8      	b.n	8008e0e <memmove+0x12>
 8008e1c:	4402      	add	r2, r0
 8008e1e:	4601      	mov	r1, r0
 8008e20:	428a      	cmp	r2, r1
 8008e22:	d100      	bne.n	8008e26 <memmove+0x2a>
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e2e:	e7f7      	b.n	8008e20 <memmove+0x24>

08008e30 <_sbrk_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d06      	ldr	r5, [pc, #24]	; (8008e4c <_sbrk_r+0x1c>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f8 fcf2 	bl	8001824 <_sbrk>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_sbrk_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_sbrk_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000554 	.word	0x20000554

08008e50 <memcpy>:
 8008e50:	440a      	add	r2, r1
 8008e52:	4291      	cmp	r1, r2
 8008e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e58:	d100      	bne.n	8008e5c <memcpy+0xc>
 8008e5a:	4770      	bx	lr
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e66:	4291      	cmp	r1, r2
 8008e68:	d1f9      	bne.n	8008e5e <memcpy+0xe>
 8008e6a:	bd10      	pop	{r4, pc}

08008e6c <__assert_func>:
 8008e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e6e:	4614      	mov	r4, r2
 8008e70:	461a      	mov	r2, r3
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <__assert_func+0x2c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4605      	mov	r5, r0
 8008e78:	68d8      	ldr	r0, [r3, #12]
 8008e7a:	b14c      	cbz	r4, 8008e90 <__assert_func+0x24>
 8008e7c:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <__assert_func+0x30>)
 8008e7e:	9100      	str	r1, [sp, #0]
 8008e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e84:	4906      	ldr	r1, [pc, #24]	; (8008ea0 <__assert_func+0x34>)
 8008e86:	462b      	mov	r3, r5
 8008e88:	f000 f872 	bl	8008f70 <fiprintf>
 8008e8c:	f000 f882 	bl	8008f94 <abort>
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <__assert_func+0x38>)
 8008e92:	461c      	mov	r4, r3
 8008e94:	e7f3      	b.n	8008e7e <__assert_func+0x12>
 8008e96:	bf00      	nop
 8008e98:	2000008c 	.word	0x2000008c
 8008e9c:	0802f817 	.word	0x0802f817
 8008ea0:	0802f824 	.word	0x0802f824
 8008ea4:	0802f852 	.word	0x0802f852

08008ea8 <_calloc_r>:
 8008ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eaa:	fba1 2402 	umull	r2, r4, r1, r2
 8008eae:	b94c      	cbnz	r4, 8008ec4 <_calloc_r+0x1c>
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	9201      	str	r2, [sp, #4]
 8008eb4:	f7ff f994 	bl	80081e0 <_malloc_r>
 8008eb8:	9a01      	ldr	r2, [sp, #4]
 8008eba:	4605      	mov	r5, r0
 8008ebc:	b930      	cbnz	r0, 8008ecc <_calloc_r+0x24>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	b003      	add	sp, #12
 8008ec2:	bd30      	pop	{r4, r5, pc}
 8008ec4:	220c      	movs	r2, #12
 8008ec6:	6002      	str	r2, [r0, #0]
 8008ec8:	2500      	movs	r5, #0
 8008eca:	e7f8      	b.n	8008ebe <_calloc_r+0x16>
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7fe faa0 	bl	8007412 <memset>
 8008ed2:	e7f4      	b.n	8008ebe <_calloc_r+0x16>

08008ed4 <__ascii_mbtowc>:
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	b901      	cbnz	r1, 8008eda <__ascii_mbtowc+0x6>
 8008ed8:	a901      	add	r1, sp, #4
 8008eda:	b142      	cbz	r2, 8008eee <__ascii_mbtowc+0x1a>
 8008edc:	b14b      	cbz	r3, 8008ef2 <__ascii_mbtowc+0x1e>
 8008ede:	7813      	ldrb	r3, [r2, #0]
 8008ee0:	600b      	str	r3, [r1, #0]
 8008ee2:	7812      	ldrb	r2, [r2, #0]
 8008ee4:	1e10      	subs	r0, r2, #0
 8008ee6:	bf18      	it	ne
 8008ee8:	2001      	movne	r0, #1
 8008eea:	b002      	add	sp, #8
 8008eec:	4770      	bx	lr
 8008eee:	4610      	mov	r0, r2
 8008ef0:	e7fb      	b.n	8008eea <__ascii_mbtowc+0x16>
 8008ef2:	f06f 0001 	mvn.w	r0, #1
 8008ef6:	e7f8      	b.n	8008eea <__ascii_mbtowc+0x16>

08008ef8 <_realloc_r>:
 8008ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efc:	4680      	mov	r8, r0
 8008efe:	4614      	mov	r4, r2
 8008f00:	460e      	mov	r6, r1
 8008f02:	b921      	cbnz	r1, 8008f0e <_realloc_r+0x16>
 8008f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	4611      	mov	r1, r2
 8008f0a:	f7ff b969 	b.w	80081e0 <_malloc_r>
 8008f0e:	b92a      	cbnz	r2, 8008f1c <_realloc_r+0x24>
 8008f10:	f7ff f8f2 	bl	80080f8 <_free_r>
 8008f14:	4625      	mov	r5, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	f000 f841 	bl	8008fa2 <_malloc_usable_size_r>
 8008f20:	4284      	cmp	r4, r0
 8008f22:	4607      	mov	r7, r0
 8008f24:	d802      	bhi.n	8008f2c <_realloc_r+0x34>
 8008f26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f2a:	d812      	bhi.n	8008f52 <_realloc_r+0x5a>
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f7ff f956 	bl	80081e0 <_malloc_r>
 8008f34:	4605      	mov	r5, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d0ed      	beq.n	8008f16 <_realloc_r+0x1e>
 8008f3a:	42bc      	cmp	r4, r7
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4631      	mov	r1, r6
 8008f40:	bf28      	it	cs
 8008f42:	463a      	movcs	r2, r7
 8008f44:	f7ff ff84 	bl	8008e50 <memcpy>
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff f8d4 	bl	80080f8 <_free_r>
 8008f50:	e7e1      	b.n	8008f16 <_realloc_r+0x1e>
 8008f52:	4635      	mov	r5, r6
 8008f54:	e7df      	b.n	8008f16 <_realloc_r+0x1e>

08008f56 <__ascii_wctomb>:
 8008f56:	b149      	cbz	r1, 8008f6c <__ascii_wctomb+0x16>
 8008f58:	2aff      	cmp	r2, #255	; 0xff
 8008f5a:	bf85      	ittet	hi
 8008f5c:	238a      	movhi	r3, #138	; 0x8a
 8008f5e:	6003      	strhi	r3, [r0, #0]
 8008f60:	700a      	strbls	r2, [r1, #0]
 8008f62:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f66:	bf98      	it	ls
 8008f68:	2001      	movls	r0, #1
 8008f6a:	4770      	bx	lr
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	4770      	bx	lr

08008f70 <fiprintf>:
 8008f70:	b40e      	push	{r1, r2, r3}
 8008f72:	b503      	push	{r0, r1, lr}
 8008f74:	4601      	mov	r1, r0
 8008f76:	ab03      	add	r3, sp, #12
 8008f78:	4805      	ldr	r0, [pc, #20]	; (8008f90 <fiprintf+0x20>)
 8008f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7e:	6800      	ldr	r0, [r0, #0]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f000 f83f 	bl	8009004 <_vfiprintf_r>
 8008f86:	b002      	add	sp, #8
 8008f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f8c:	b003      	add	sp, #12
 8008f8e:	4770      	bx	lr
 8008f90:	2000008c 	.word	0x2000008c

08008f94 <abort>:
 8008f94:	b508      	push	{r3, lr}
 8008f96:	2006      	movs	r0, #6
 8008f98:	f000 fa0c 	bl	80093b4 <raise>
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	f7f8 fbc9 	bl	8001734 <_exit>

08008fa2 <_malloc_usable_size_r>:
 8008fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa6:	1f18      	subs	r0, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfbc      	itt	lt
 8008fac:	580b      	ldrlt	r3, [r1, r0]
 8008fae:	18c0      	addlt	r0, r0, r3
 8008fb0:	4770      	bx	lr

08008fb2 <__sfputc_r>:
 8008fb2:	6893      	ldr	r3, [r2, #8]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	b410      	push	{r4}
 8008fba:	6093      	str	r3, [r2, #8]
 8008fbc:	da08      	bge.n	8008fd0 <__sfputc_r+0x1e>
 8008fbe:	6994      	ldr	r4, [r2, #24]
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	db01      	blt.n	8008fc8 <__sfputc_r+0x16>
 8008fc4:	290a      	cmp	r1, #10
 8008fc6:	d103      	bne.n	8008fd0 <__sfputc_r+0x1e>
 8008fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fcc:	f000 b934 	b.w	8009238 <__swbuf_r>
 8008fd0:	6813      	ldr	r3, [r2, #0]
 8008fd2:	1c58      	adds	r0, r3, #1
 8008fd4:	6010      	str	r0, [r2, #0]
 8008fd6:	7019      	strb	r1, [r3, #0]
 8008fd8:	4608      	mov	r0, r1
 8008fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <__sfputs_r>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	4614      	mov	r4, r2
 8008fe8:	18d5      	adds	r5, r2, r3
 8008fea:	42ac      	cmp	r4, r5
 8008fec:	d101      	bne.n	8008ff2 <__sfputs_r+0x12>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e007      	b.n	8009002 <__sfputs_r+0x22>
 8008ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff6:	463a      	mov	r2, r7
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff ffda 	bl	8008fb2 <__sfputc_r>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d1f3      	bne.n	8008fea <__sfputs_r+0xa>
 8009002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009004 <_vfiprintf_r>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	460d      	mov	r5, r1
 800900a:	b09d      	sub	sp, #116	; 0x74
 800900c:	4614      	mov	r4, r2
 800900e:	4698      	mov	r8, r3
 8009010:	4606      	mov	r6, r0
 8009012:	b118      	cbz	r0, 800901c <_vfiprintf_r+0x18>
 8009014:	6a03      	ldr	r3, [r0, #32]
 8009016:	b90b      	cbnz	r3, 800901c <_vfiprintf_r+0x18>
 8009018:	f7fe f962 	bl	80072e0 <__sinit>
 800901c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	d405      	bmi.n	800902e <_vfiprintf_r+0x2a>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	059a      	lsls	r2, r3, #22
 8009026:	d402      	bmi.n	800902e <_vfiprintf_r+0x2a>
 8009028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800902a:	f7fe fa6f 	bl	800750c <__retarget_lock_acquire_recursive>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	071b      	lsls	r3, r3, #28
 8009032:	d501      	bpl.n	8009038 <_vfiprintf_r+0x34>
 8009034:	692b      	ldr	r3, [r5, #16]
 8009036:	b99b      	cbnz	r3, 8009060 <_vfiprintf_r+0x5c>
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f000 f93a 	bl	80092b4 <__swsetup_r>
 8009040:	b170      	cbz	r0, 8009060 <_vfiprintf_r+0x5c>
 8009042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009044:	07dc      	lsls	r4, r3, #31
 8009046:	d504      	bpl.n	8009052 <_vfiprintf_r+0x4e>
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	b01d      	add	sp, #116	; 0x74
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	0598      	lsls	r0, r3, #22
 8009056:	d4f7      	bmi.n	8009048 <_vfiprintf_r+0x44>
 8009058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800905a:	f7fe fa58 	bl	800750e <__retarget_lock_release_recursive>
 800905e:	e7f3      	b.n	8009048 <_vfiprintf_r+0x44>
 8009060:	2300      	movs	r3, #0
 8009062:	9309      	str	r3, [sp, #36]	; 0x24
 8009064:	2320      	movs	r3, #32
 8009066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800906a:	f8cd 800c 	str.w	r8, [sp, #12]
 800906e:	2330      	movs	r3, #48	; 0x30
 8009070:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009224 <_vfiprintf_r+0x220>
 8009074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009078:	f04f 0901 	mov.w	r9, #1
 800907c:	4623      	mov	r3, r4
 800907e:	469a      	mov	sl, r3
 8009080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009084:	b10a      	cbz	r2, 800908a <_vfiprintf_r+0x86>
 8009086:	2a25      	cmp	r2, #37	; 0x25
 8009088:	d1f9      	bne.n	800907e <_vfiprintf_r+0x7a>
 800908a:	ebba 0b04 	subs.w	fp, sl, r4
 800908e:	d00b      	beq.n	80090a8 <_vfiprintf_r+0xa4>
 8009090:	465b      	mov	r3, fp
 8009092:	4622      	mov	r2, r4
 8009094:	4629      	mov	r1, r5
 8009096:	4630      	mov	r0, r6
 8009098:	f7ff ffa2 	bl	8008fe0 <__sfputs_r>
 800909c:	3001      	adds	r0, #1
 800909e:	f000 80a9 	beq.w	80091f4 <_vfiprintf_r+0x1f0>
 80090a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a4:	445a      	add	r2, fp
 80090a6:	9209      	str	r2, [sp, #36]	; 0x24
 80090a8:	f89a 3000 	ldrb.w	r3, [sl]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 80a1 	beq.w	80091f4 <_vfiprintf_r+0x1f0>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090bc:	f10a 0a01 	add.w	sl, sl, #1
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	9307      	str	r3, [sp, #28]
 80090c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c8:	931a      	str	r3, [sp, #104]	; 0x68
 80090ca:	4654      	mov	r4, sl
 80090cc:	2205      	movs	r2, #5
 80090ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d2:	4854      	ldr	r0, [pc, #336]	; (8009224 <_vfiprintf_r+0x220>)
 80090d4:	f7f7 f8b4 	bl	8000240 <memchr>
 80090d8:	9a04      	ldr	r2, [sp, #16]
 80090da:	b9d8      	cbnz	r0, 8009114 <_vfiprintf_r+0x110>
 80090dc:	06d1      	lsls	r1, r2, #27
 80090de:	bf44      	itt	mi
 80090e0:	2320      	movmi	r3, #32
 80090e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e6:	0713      	lsls	r3, r2, #28
 80090e8:	bf44      	itt	mi
 80090ea:	232b      	movmi	r3, #43	; 0x2b
 80090ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f0:	f89a 3000 	ldrb.w	r3, [sl]
 80090f4:	2b2a      	cmp	r3, #42	; 0x2a
 80090f6:	d015      	beq.n	8009124 <_vfiprintf_r+0x120>
 80090f8:	9a07      	ldr	r2, [sp, #28]
 80090fa:	4654      	mov	r4, sl
 80090fc:	2000      	movs	r0, #0
 80090fe:	f04f 0c0a 	mov.w	ip, #10
 8009102:	4621      	mov	r1, r4
 8009104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009108:	3b30      	subs	r3, #48	; 0x30
 800910a:	2b09      	cmp	r3, #9
 800910c:	d94d      	bls.n	80091aa <_vfiprintf_r+0x1a6>
 800910e:	b1b0      	cbz	r0, 800913e <_vfiprintf_r+0x13a>
 8009110:	9207      	str	r2, [sp, #28]
 8009112:	e014      	b.n	800913e <_vfiprintf_r+0x13a>
 8009114:	eba0 0308 	sub.w	r3, r0, r8
 8009118:	fa09 f303 	lsl.w	r3, r9, r3
 800911c:	4313      	orrs	r3, r2
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	46a2      	mov	sl, r4
 8009122:	e7d2      	b.n	80090ca <_vfiprintf_r+0xc6>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	1d19      	adds	r1, r3, #4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	9103      	str	r1, [sp, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfbb      	ittet	lt
 8009130:	425b      	neglt	r3, r3
 8009132:	f042 0202 	orrlt.w	r2, r2, #2
 8009136:	9307      	strge	r3, [sp, #28]
 8009138:	9307      	strlt	r3, [sp, #28]
 800913a:	bfb8      	it	lt
 800913c:	9204      	strlt	r2, [sp, #16]
 800913e:	7823      	ldrb	r3, [r4, #0]
 8009140:	2b2e      	cmp	r3, #46	; 0x2e
 8009142:	d10c      	bne.n	800915e <_vfiprintf_r+0x15a>
 8009144:	7863      	ldrb	r3, [r4, #1]
 8009146:	2b2a      	cmp	r3, #42	; 0x2a
 8009148:	d134      	bne.n	80091b4 <_vfiprintf_r+0x1b0>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	1d1a      	adds	r2, r3, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	9203      	str	r2, [sp, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	f04f 33ff 	movlt.w	r3, #4294967295
 800915a:	3402      	adds	r4, #2
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009234 <_vfiprintf_r+0x230>
 8009162:	7821      	ldrb	r1, [r4, #0]
 8009164:	2203      	movs	r2, #3
 8009166:	4650      	mov	r0, sl
 8009168:	f7f7 f86a 	bl	8000240 <memchr>
 800916c:	b138      	cbz	r0, 800917e <_vfiprintf_r+0x17a>
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	eba0 000a 	sub.w	r0, r0, sl
 8009174:	2240      	movs	r2, #64	; 0x40
 8009176:	4082      	lsls	r2, r0
 8009178:	4313      	orrs	r3, r2
 800917a:	3401      	adds	r4, #1
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009182:	4829      	ldr	r0, [pc, #164]	; (8009228 <_vfiprintf_r+0x224>)
 8009184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009188:	2206      	movs	r2, #6
 800918a:	f7f7 f859 	bl	8000240 <memchr>
 800918e:	2800      	cmp	r0, #0
 8009190:	d03f      	beq.n	8009212 <_vfiprintf_r+0x20e>
 8009192:	4b26      	ldr	r3, [pc, #152]	; (800922c <_vfiprintf_r+0x228>)
 8009194:	bb1b      	cbnz	r3, 80091de <_vfiprintf_r+0x1da>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	3307      	adds	r3, #7
 800919a:	f023 0307 	bic.w	r3, r3, #7
 800919e:	3308      	adds	r3, #8
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a4:	443b      	add	r3, r7
 80091a6:	9309      	str	r3, [sp, #36]	; 0x24
 80091a8:	e768      	b.n	800907c <_vfiprintf_r+0x78>
 80091aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ae:	460c      	mov	r4, r1
 80091b0:	2001      	movs	r0, #1
 80091b2:	e7a6      	b.n	8009102 <_vfiprintf_r+0xfe>
 80091b4:	2300      	movs	r3, #0
 80091b6:	3401      	adds	r4, #1
 80091b8:	9305      	str	r3, [sp, #20]
 80091ba:	4619      	mov	r1, r3
 80091bc:	f04f 0c0a 	mov.w	ip, #10
 80091c0:	4620      	mov	r0, r4
 80091c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c6:	3a30      	subs	r2, #48	; 0x30
 80091c8:	2a09      	cmp	r2, #9
 80091ca:	d903      	bls.n	80091d4 <_vfiprintf_r+0x1d0>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0c6      	beq.n	800915e <_vfiprintf_r+0x15a>
 80091d0:	9105      	str	r1, [sp, #20]
 80091d2:	e7c4      	b.n	800915e <_vfiprintf_r+0x15a>
 80091d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d8:	4604      	mov	r4, r0
 80091da:	2301      	movs	r3, #1
 80091dc:	e7f0      	b.n	80091c0 <_vfiprintf_r+0x1bc>
 80091de:	ab03      	add	r3, sp, #12
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	462a      	mov	r2, r5
 80091e4:	4b12      	ldr	r3, [pc, #72]	; (8009230 <_vfiprintf_r+0x22c>)
 80091e6:	a904      	add	r1, sp, #16
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7fd fc55 	bl	8006a98 <_printf_float>
 80091ee:	4607      	mov	r7, r0
 80091f0:	1c78      	adds	r0, r7, #1
 80091f2:	d1d6      	bne.n	80091a2 <_vfiprintf_r+0x19e>
 80091f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f6:	07d9      	lsls	r1, r3, #31
 80091f8:	d405      	bmi.n	8009206 <_vfiprintf_r+0x202>
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	059a      	lsls	r2, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_vfiprintf_r+0x202>
 8009200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009202:	f7fe f984 	bl	800750e <__retarget_lock_release_recursive>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	065b      	lsls	r3, r3, #25
 800920a:	f53f af1d 	bmi.w	8009048 <_vfiprintf_r+0x44>
 800920e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009210:	e71c      	b.n	800904c <_vfiprintf_r+0x48>
 8009212:	ab03      	add	r3, sp, #12
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	462a      	mov	r2, r5
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <_vfiprintf_r+0x22c>)
 800921a:	a904      	add	r1, sp, #16
 800921c:	4630      	mov	r0, r6
 800921e:	f7fd fec3 	bl	8006fa8 <_printf_i>
 8009222:	e7e4      	b.n	80091ee <_vfiprintf_r+0x1ea>
 8009224:	0802f7fc 	.word	0x0802f7fc
 8009228:	0802f806 	.word	0x0802f806
 800922c:	08006a99 	.word	0x08006a99
 8009230:	08008fe1 	.word	0x08008fe1
 8009234:	0802f802 	.word	0x0802f802

08009238 <__swbuf_r>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	460e      	mov	r6, r1
 800923c:	4614      	mov	r4, r2
 800923e:	4605      	mov	r5, r0
 8009240:	b118      	cbz	r0, 800924a <__swbuf_r+0x12>
 8009242:	6a03      	ldr	r3, [r0, #32]
 8009244:	b90b      	cbnz	r3, 800924a <__swbuf_r+0x12>
 8009246:	f7fe f84b 	bl	80072e0 <__sinit>
 800924a:	69a3      	ldr	r3, [r4, #24]
 800924c:	60a3      	str	r3, [r4, #8]
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	071a      	lsls	r2, r3, #28
 8009252:	d525      	bpl.n	80092a0 <__swbuf_r+0x68>
 8009254:	6923      	ldr	r3, [r4, #16]
 8009256:	b31b      	cbz	r3, 80092a0 <__swbuf_r+0x68>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	6922      	ldr	r2, [r4, #16]
 800925c:	1a98      	subs	r0, r3, r2
 800925e:	6963      	ldr	r3, [r4, #20]
 8009260:	b2f6      	uxtb	r6, r6
 8009262:	4283      	cmp	r3, r0
 8009264:	4637      	mov	r7, r6
 8009266:	dc04      	bgt.n	8009272 <__swbuf_r+0x3a>
 8009268:	4621      	mov	r1, r4
 800926a:	4628      	mov	r0, r5
 800926c:	f7ff fd9e 	bl	8008dac <_fflush_r>
 8009270:	b9e0      	cbnz	r0, 80092ac <__swbuf_r+0x74>
 8009272:	68a3      	ldr	r3, [r4, #8]
 8009274:	3b01      	subs	r3, #1
 8009276:	60a3      	str	r3, [r4, #8]
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	701e      	strb	r6, [r3, #0]
 8009280:	6962      	ldr	r2, [r4, #20]
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	429a      	cmp	r2, r3
 8009286:	d004      	beq.n	8009292 <__swbuf_r+0x5a>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	07db      	lsls	r3, r3, #31
 800928c:	d506      	bpl.n	800929c <__swbuf_r+0x64>
 800928e:	2e0a      	cmp	r6, #10
 8009290:	d104      	bne.n	800929c <__swbuf_r+0x64>
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f7ff fd89 	bl	8008dac <_fflush_r>
 800929a:	b938      	cbnz	r0, 80092ac <__swbuf_r+0x74>
 800929c:	4638      	mov	r0, r7
 800929e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a0:	4621      	mov	r1, r4
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 f806 	bl	80092b4 <__swsetup_r>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0d5      	beq.n	8009258 <__swbuf_r+0x20>
 80092ac:	f04f 37ff 	mov.w	r7, #4294967295
 80092b0:	e7f4      	b.n	800929c <__swbuf_r+0x64>
	...

080092b4 <__swsetup_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4b2a      	ldr	r3, [pc, #168]	; (8009360 <__swsetup_r+0xac>)
 80092b8:	4605      	mov	r5, r0
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	460c      	mov	r4, r1
 80092be:	b118      	cbz	r0, 80092c8 <__swsetup_r+0x14>
 80092c0:	6a03      	ldr	r3, [r0, #32]
 80092c2:	b90b      	cbnz	r3, 80092c8 <__swsetup_r+0x14>
 80092c4:	f7fe f80c 	bl	80072e0 <__sinit>
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092ce:	0718      	lsls	r0, r3, #28
 80092d0:	d422      	bmi.n	8009318 <__swsetup_r+0x64>
 80092d2:	06d9      	lsls	r1, r3, #27
 80092d4:	d407      	bmi.n	80092e6 <__swsetup_r+0x32>
 80092d6:	2309      	movs	r3, #9
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092de:	81a3      	strh	r3, [r4, #12]
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295
 80092e4:	e034      	b.n	8009350 <__swsetup_r+0x9c>
 80092e6:	0758      	lsls	r0, r3, #29
 80092e8:	d512      	bpl.n	8009310 <__swsetup_r+0x5c>
 80092ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ec:	b141      	cbz	r1, 8009300 <__swsetup_r+0x4c>
 80092ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d002      	beq.n	80092fc <__swsetup_r+0x48>
 80092f6:	4628      	mov	r0, r5
 80092f8:	f7fe fefe 	bl	80080f8 <_free_r>
 80092fc:	2300      	movs	r3, #0
 80092fe:	6363      	str	r3, [r4, #52]	; 0x34
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	2300      	movs	r3, #0
 800930a:	6063      	str	r3, [r4, #4]
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	6023      	str	r3, [r4, #0]
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f043 0308 	orr.w	r3, r3, #8
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	b94b      	cbnz	r3, 8009330 <__swsetup_r+0x7c>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009326:	d003      	beq.n	8009330 <__swsetup_r+0x7c>
 8009328:	4621      	mov	r1, r4
 800932a:	4628      	mov	r0, r5
 800932c:	f000 f884 	bl	8009438 <__smakebuf_r>
 8009330:	89a0      	ldrh	r0, [r4, #12]
 8009332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009336:	f010 0301 	ands.w	r3, r0, #1
 800933a:	d00a      	beq.n	8009352 <__swsetup_r+0x9e>
 800933c:	2300      	movs	r3, #0
 800933e:	60a3      	str	r3, [r4, #8]
 8009340:	6963      	ldr	r3, [r4, #20]
 8009342:	425b      	negs	r3, r3
 8009344:	61a3      	str	r3, [r4, #24]
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	b943      	cbnz	r3, 800935c <__swsetup_r+0xa8>
 800934a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800934e:	d1c4      	bne.n	80092da <__swsetup_r+0x26>
 8009350:	bd38      	pop	{r3, r4, r5, pc}
 8009352:	0781      	lsls	r1, r0, #30
 8009354:	bf58      	it	pl
 8009356:	6963      	ldrpl	r3, [r4, #20]
 8009358:	60a3      	str	r3, [r4, #8]
 800935a:	e7f4      	b.n	8009346 <__swsetup_r+0x92>
 800935c:	2000      	movs	r0, #0
 800935e:	e7f7      	b.n	8009350 <__swsetup_r+0x9c>
 8009360:	2000008c 	.word	0x2000008c

08009364 <_raise_r>:
 8009364:	291f      	cmp	r1, #31
 8009366:	b538      	push	{r3, r4, r5, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	460d      	mov	r5, r1
 800936c:	d904      	bls.n	8009378 <_raise_r+0x14>
 800936e:	2316      	movs	r3, #22
 8009370:	6003      	str	r3, [r0, #0]
 8009372:	f04f 30ff 	mov.w	r0, #4294967295
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800937a:	b112      	cbz	r2, 8009382 <_raise_r+0x1e>
 800937c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009380:	b94b      	cbnz	r3, 8009396 <_raise_r+0x32>
 8009382:	4620      	mov	r0, r4
 8009384:	f000 f830 	bl	80093e8 <_getpid_r>
 8009388:	462a      	mov	r2, r5
 800938a:	4601      	mov	r1, r0
 800938c:	4620      	mov	r0, r4
 800938e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009392:	f000 b817 	b.w	80093c4 <_kill_r>
 8009396:	2b01      	cmp	r3, #1
 8009398:	d00a      	beq.n	80093b0 <_raise_r+0x4c>
 800939a:	1c59      	adds	r1, r3, #1
 800939c:	d103      	bne.n	80093a6 <_raise_r+0x42>
 800939e:	2316      	movs	r3, #22
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	2001      	movs	r0, #1
 80093a4:	e7e7      	b.n	8009376 <_raise_r+0x12>
 80093a6:	2400      	movs	r4, #0
 80093a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093ac:	4628      	mov	r0, r5
 80093ae:	4798      	blx	r3
 80093b0:	2000      	movs	r0, #0
 80093b2:	e7e0      	b.n	8009376 <_raise_r+0x12>

080093b4 <raise>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <raise+0xc>)
 80093b6:	4601      	mov	r1, r0
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f7ff bfd3 	b.w	8009364 <_raise_r>
 80093be:	bf00      	nop
 80093c0:	2000008c 	.word	0x2000008c

080093c4 <_kill_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	; (80093e4 <_kill_r+0x20>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f7f8 f99f 	bl	8001714 <_kill>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d102      	bne.n	80093e0 <_kill_r+0x1c>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	b103      	cbz	r3, 80093e0 <_kill_r+0x1c>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	20000554 	.word	0x20000554

080093e8 <_getpid_r>:
 80093e8:	f7f8 b98c 	b.w	8001704 <_getpid>

080093ec <__swhatbuf_r>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	460c      	mov	r4, r1
 80093f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f4:	2900      	cmp	r1, #0
 80093f6:	b096      	sub	sp, #88	; 0x58
 80093f8:	4615      	mov	r5, r2
 80093fa:	461e      	mov	r6, r3
 80093fc:	da0d      	bge.n	800941a <__swhatbuf_r+0x2e>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009404:	f04f 0100 	mov.w	r1, #0
 8009408:	bf0c      	ite	eq
 800940a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800940e:	2340      	movne	r3, #64	; 0x40
 8009410:	2000      	movs	r0, #0
 8009412:	6031      	str	r1, [r6, #0]
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	b016      	add	sp, #88	; 0x58
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	466a      	mov	r2, sp
 800941c:	f000 f848 	bl	80094b0 <_fstat_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	dbec      	blt.n	80093fe <__swhatbuf_r+0x12>
 8009424:	9901      	ldr	r1, [sp, #4]
 8009426:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800942a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800942e:	4259      	negs	r1, r3
 8009430:	4159      	adcs	r1, r3
 8009432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009436:	e7eb      	b.n	8009410 <__swhatbuf_r+0x24>

08009438 <__smakebuf_r>:
 8009438:	898b      	ldrh	r3, [r1, #12]
 800943a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800943c:	079d      	lsls	r5, r3, #30
 800943e:	4606      	mov	r6, r0
 8009440:	460c      	mov	r4, r1
 8009442:	d507      	bpl.n	8009454 <__smakebuf_r+0x1c>
 8009444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	2301      	movs	r3, #1
 800944e:	6163      	str	r3, [r4, #20]
 8009450:	b002      	add	sp, #8
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	ab01      	add	r3, sp, #4
 8009456:	466a      	mov	r2, sp
 8009458:	f7ff ffc8 	bl	80093ec <__swhatbuf_r>
 800945c:	9900      	ldr	r1, [sp, #0]
 800945e:	4605      	mov	r5, r0
 8009460:	4630      	mov	r0, r6
 8009462:	f7fe febd 	bl	80081e0 <_malloc_r>
 8009466:	b948      	cbnz	r0, 800947c <__smakebuf_r+0x44>
 8009468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946c:	059a      	lsls	r2, r3, #22
 800946e:	d4ef      	bmi.n	8009450 <__smakebuf_r+0x18>
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	f043 0302 	orr.w	r3, r3, #2
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	e7e3      	b.n	8009444 <__smakebuf_r+0xc>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	6020      	str	r0, [r4, #0]
 8009480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	6163      	str	r3, [r4, #20]
 800948a:	9b01      	ldr	r3, [sp, #4]
 800948c:	6120      	str	r0, [r4, #16]
 800948e:	b15b      	cbz	r3, 80094a8 <__smakebuf_r+0x70>
 8009490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009494:	4630      	mov	r0, r6
 8009496:	f000 f81d 	bl	80094d4 <_isatty_r>
 800949a:	b128      	cbz	r0, 80094a8 <__smakebuf_r+0x70>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	f023 0303 	bic.w	r3, r3, #3
 80094a2:	f043 0301 	orr.w	r3, r3, #1
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	431d      	orrs	r5, r3
 80094ac:	81a5      	strh	r5, [r4, #12]
 80094ae:	e7cf      	b.n	8009450 <__smakebuf_r+0x18>

080094b0 <_fstat_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d07      	ldr	r5, [pc, #28]	; (80094d0 <_fstat_r+0x20>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	4611      	mov	r1, r2
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	f7f8 f988 	bl	80017d2 <_fstat>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	d102      	bne.n	80094cc <_fstat_r+0x1c>
 80094c6:	682b      	ldr	r3, [r5, #0]
 80094c8:	b103      	cbz	r3, 80094cc <_fstat_r+0x1c>
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
 80094ce:	bf00      	nop
 80094d0:	20000554 	.word	0x20000554

080094d4 <_isatty_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_isatty_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f8 f987 	bl	80017f2 <_isatty>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_isatty_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_isatty_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000554 	.word	0x20000554
 80094f4:	00000000 	.word	0x00000000

080094f8 <sqrt>:
 80094f8:	b508      	push	{r3, lr}
 80094fa:	ed2d 8b04 	vpush	{d8-d9}
 80094fe:	eeb0 8b40 	vmov.f64	d8, d0
 8009502:	f000 fa9d 	bl	8009a40 <__ieee754_sqrt>
 8009506:	eeb4 8b48 	vcmp.f64	d8, d8
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	d60c      	bvs.n	800952a <sqrt+0x32>
 8009510:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8009530 <sqrt+0x38>
 8009514:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951c:	d505      	bpl.n	800952a <sqrt+0x32>
 800951e:	f7fd ffcb 	bl	80074b8 <__errno>
 8009522:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009526:	2321      	movs	r3, #33	; 0x21
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	ecbd 8b04 	vpop	{d8-d9}
 800952e:	bd08      	pop	{r3, pc}
	...

08009538 <checkint>:
 8009538:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800953c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8009540:	429a      	cmp	r2, r3
 8009542:	b570      	push	{r4, r5, r6, lr}
 8009544:	dd2a      	ble.n	800959c <checkint+0x64>
 8009546:	f240 4333 	movw	r3, #1075	; 0x433
 800954a:	429a      	cmp	r2, r3
 800954c:	dc24      	bgt.n	8009598 <checkint+0x60>
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	f1a3 0620 	sub.w	r6, r3, #32
 8009554:	f04f 32ff 	mov.w	r2, #4294967295
 8009558:	fa02 f403 	lsl.w	r4, r2, r3
 800955c:	fa02 f606 	lsl.w	r6, r2, r6
 8009560:	f1c3 0520 	rsb	r5, r3, #32
 8009564:	fa22 f505 	lsr.w	r5, r2, r5
 8009568:	4334      	orrs	r4, r6
 800956a:	432c      	orrs	r4, r5
 800956c:	409a      	lsls	r2, r3
 800956e:	ea20 0202 	bic.w	r2, r0, r2
 8009572:	ea21 0404 	bic.w	r4, r1, r4
 8009576:	4322      	orrs	r2, r4
 8009578:	f1a3 0420 	sub.w	r4, r3, #32
 800957c:	f1c3 0220 	rsb	r2, r3, #32
 8009580:	d10c      	bne.n	800959c <checkint+0x64>
 8009582:	40d8      	lsrs	r0, r3
 8009584:	fa01 f302 	lsl.w	r3, r1, r2
 8009588:	4318      	orrs	r0, r3
 800958a:	40e1      	lsrs	r1, r4
 800958c:	4308      	orrs	r0, r1
 800958e:	f000 0001 	and.w	r0, r0, #1
 8009592:	f1d0 0002 	rsbs	r0, r0, #2
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	2002      	movs	r0, #2
 800959a:	e7fc      	b.n	8009596 <checkint+0x5e>
 800959c:	2000      	movs	r0, #0
 800959e:	e7fa      	b.n	8009596 <checkint+0x5e>

080095a0 <pow>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	ee10 4a90 	vmov	r4, s1
 80095a8:	ed2d 8b0a 	vpush	{d8-d12}
 80095ac:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80095b0:	ee11 aa90 	vmov	sl, s3
 80095b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80095b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80095bc:	429a      	cmp	r2, r3
 80095be:	ee10 5a10 	vmov	r5, s0
 80095c2:	ee11 0a10 	vmov	r0, s2
 80095c6:	b087      	sub	sp, #28
 80095c8:	46c4      	mov	ip, r8
 80095ca:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80095ce:	d806      	bhi.n	80095de <pow+0x3e>
 80095d0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80095d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80095d8:	2b7f      	cmp	r3, #127	; 0x7f
 80095da:	f240 8156 	bls.w	800988a <pow+0x2ea>
 80095de:	1802      	adds	r2, r0, r0
 80095e0:	eb4a 010a 	adc.w	r1, sl, sl
 80095e4:	f06f 0b01 	mvn.w	fp, #1
 80095e8:	1e57      	subs	r7, r2, #1
 80095ea:	f141 33ff 	adc.w	r3, r1, #4294967295
 80095ee:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 80095f2:	45bb      	cmp	fp, r7
 80095f4:	eb7e 0303 	sbcs.w	r3, lr, r3
 80095f8:	d242      	bcs.n	8009680 <pow+0xe0>
 80095fa:	ea52 0301 	orrs.w	r3, r2, r1
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	d10c      	bne.n	800961e <pow+0x7e>
 8009604:	196d      	adds	r5, r5, r5
 8009606:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800960a:	4164      	adcs	r4, r4
 800960c:	42ab      	cmp	r3, r5
 800960e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009612:	41a3      	sbcs	r3, r4
 8009614:	f0c0 808f 	bcc.w	8009736 <pow+0x196>
 8009618:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800961c:	e02b      	b.n	8009676 <pow+0xd6>
 800961e:	4ed4      	ldr	r6, [pc, #848]	; (8009970 <pow+0x3d0>)
 8009620:	42b4      	cmp	r4, r6
 8009622:	bf08      	it	eq
 8009624:	429d      	cmpeq	r5, r3
 8009626:	d109      	bne.n	800963c <pow+0x9c>
 8009628:	1800      	adds	r0, r0, r0
 800962a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800962e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8009632:	4283      	cmp	r3, r0
 8009634:	4bcf      	ldr	r3, [pc, #828]	; (8009974 <pow+0x3d4>)
 8009636:	eb73 030a 	sbcs.w	r3, r3, sl
 800963a:	e7eb      	b.n	8009614 <pow+0x74>
 800963c:	196d      	adds	r5, r5, r5
 800963e:	48ce      	ldr	r0, [pc, #824]	; (8009978 <pow+0x3d8>)
 8009640:	4164      	adcs	r4, r4
 8009642:	42ab      	cmp	r3, r5
 8009644:	eb70 0604 	sbcs.w	r6, r0, r4
 8009648:	d375      	bcc.n	8009736 <pow+0x196>
 800964a:	4281      	cmp	r1, r0
 800964c:	bf08      	it	eq
 800964e:	429a      	cmpeq	r2, r3
 8009650:	d171      	bne.n	8009736 <pow+0x196>
 8009652:	4aca      	ldr	r2, [pc, #808]	; (800997c <pow+0x3dc>)
 8009654:	4294      	cmp	r4, r2
 8009656:	bf08      	it	eq
 8009658:	429d      	cmpeq	r5, r3
 800965a:	d0dd      	beq.n	8009618 <pow+0x78>
 800965c:	4294      	cmp	r4, r2
 800965e:	ea6f 0a0a 	mvn.w	sl, sl
 8009662:	bf34      	ite	cc
 8009664:	2400      	movcc	r4, #0
 8009666:	2401      	movcs	r4, #1
 8009668:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800966c:	4554      	cmp	r4, sl
 800966e:	f040 81dc 	bne.w	8009a2a <pow+0x48a>
 8009672:	ee21 0b01 	vmul.f64	d0, d1, d1
 8009676:	b007      	add	sp, #28
 8009678:	ecbd 8b0a 	vpop	{d8-d12}
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	196f      	adds	r7, r5, r5
 8009682:	eb44 0904 	adc.w	r9, r4, r4
 8009686:	1e7a      	subs	r2, r7, #1
 8009688:	f169 0300 	sbc.w	r3, r9, #0
 800968c:	4593      	cmp	fp, r2
 800968e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8009692:	d225      	bcs.n	80096e0 <pow+0x140>
 8009694:	ee20 0b00 	vmul.f64	d0, d0, d0
 8009698:	2c00      	cmp	r4, #0
 800969a:	da13      	bge.n	80096c4 <pow+0x124>
 800969c:	4651      	mov	r1, sl
 800969e:	f7ff ff4b 	bl	8009538 <checkint>
 80096a2:	2801      	cmp	r0, #1
 80096a4:	d10e      	bne.n	80096c4 <pow+0x124>
 80096a6:	eeb1 0b40 	vneg.f64	d0, d0
 80096aa:	ea57 0909 	orrs.w	r9, r7, r9
 80096ae:	d10b      	bne.n	80096c8 <pow+0x128>
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	dadf      	bge.n	8009676 <pow+0xd6>
 80096b6:	b007      	add	sp, #28
 80096b8:	ecbd 8b0a 	vpop	{d8-d12}
 80096bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	f000 b9ee 	b.w	8009aa0 <__math_divzero>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7f0      	b.n	80096aa <pow+0x10a>
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	dad3      	bge.n	8009676 <pow+0xd6>
 80096ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80096d2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80096d6:	ed8d 7b00 	vstr	d7, [sp]
 80096da:	ed9d 0b00 	vldr	d0, [sp]
 80096de:	e7ca      	b.n	8009676 <pow+0xd6>
 80096e0:	2c00      	cmp	r4, #0
 80096e2:	da2b      	bge.n	800973c <pow+0x19c>
 80096e4:	4651      	mov	r1, sl
 80096e6:	f7ff ff27 	bl	8009538 <checkint>
 80096ea:	b930      	cbnz	r0, 80096fa <pow+0x15a>
 80096ec:	b007      	add	sp, #28
 80096ee:	ecbd 8b0a 	vpop	{d8-d12}
 80096f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f6:	f000 b9eb 	b.w	8009ad0 <__math_invalid>
 80096fa:	1e41      	subs	r1, r0, #1
 80096fc:	4248      	negs	r0, r1
 80096fe:	4148      	adcs	r0, r1
 8009700:	0480      	lsls	r0, r0, #18
 8009702:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009706:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800970a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800970e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8009712:	2b7f      	cmp	r3, #127	; 0x7f
 8009714:	d92d      	bls.n	8009772 <pow+0x1d2>
 8009716:	4b96      	ldr	r3, [pc, #600]	; (8009970 <pow+0x3d0>)
 8009718:	2000      	movs	r0, #0
 800971a:	429c      	cmp	r4, r3
 800971c:	bf08      	it	eq
 800971e:	4285      	cmpeq	r5, r0
 8009720:	f43f af7a 	beq.w	8009618 <pow+0x78>
 8009724:	f240 31bd 	movw	r1, #957	; 0x3bd
 8009728:	428a      	cmp	r2, r1
 800972a:	d80c      	bhi.n	8009746 <pow+0x1a6>
 800972c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009730:	42a8      	cmp	r0, r5
 8009732:	41a3      	sbcs	r3, r4
 8009734:	d204      	bcs.n	8009740 <pow+0x1a0>
 8009736:	ee31 0b00 	vadd.f64	d0, d1, d0
 800973a:	e79c      	b.n	8009676 <pow+0xd6>
 800973c:	2000      	movs	r0, #0
 800973e:	e7e4      	b.n	800970a <pow+0x16a>
 8009740:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009744:	e797      	b.n	8009676 <pow+0xd6>
 8009746:	2d01      	cmp	r5, #1
 8009748:	eb74 0303 	sbcs.w	r3, r4, r3
 800974c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009750:	bf34      	ite	cc
 8009752:	2301      	movcc	r3, #1
 8009754:	2300      	movcs	r3, #0
 8009756:	4296      	cmp	r6, r2
 8009758:	bf8c      	ite	hi
 800975a:	2600      	movhi	r6, #0
 800975c:	2601      	movls	r6, #1
 800975e:	42b3      	cmp	r3, r6
 8009760:	f000 809b 	beq.w	800989a <pow+0x2fa>
 8009764:	b007      	add	sp, #28
 8009766:	ecbd 8b0a 	vpop	{d8-d12}
 800976a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976e:	f000 b98f 	b.w	8009a90 <__math_oflow>
 8009772:	f1bc 0f00 	cmp.w	ip, #0
 8009776:	d10b      	bne.n	8009790 <pow+0x1f0>
 8009778:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8009960 <pow+0x3c0>
 800977c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009780:	ec53 2b17 	vmov	r2, r3, d7
 8009784:	ee17 5a10 	vmov	r5, s14
 8009788:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800978c:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8009790:	4b7b      	ldr	r3, [pc, #492]	; (8009980 <pow+0x3e0>)
 8009792:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009796:	4423      	add	r3, r4
 8009798:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800979c:	1519      	asrs	r1, r3, #20
 800979e:	0d1b      	lsrs	r3, r3, #20
 80097a0:	051b      	lsls	r3, r3, #20
 80097a2:	1ae7      	subs	r7, r4, r3
 80097a4:	4b77      	ldr	r3, [pc, #476]	; (8009984 <pow+0x3e4>)
 80097a6:	ee03 1a10 	vmov	s6, r1
 80097aa:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80097ae:	1e2e      	subs	r6, r5, #0
 80097b0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80097b4:	ec47 6b15 	vmov	d5, r6, r7
 80097b8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80097bc:	eea5 6b07 	vfma.f64	d6, d5, d7
 80097c0:	ed93 7b00 	vldr	d7, [r3]
 80097c4:	ed93 5b02 	vldr	d5, [r3, #8]
 80097c8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80097cc:	eea3 2b07 	vfma.f64	d2, d3, d7
 80097d0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80097d4:	ee36 4b02 	vadd.f64	d4, d6, d2
 80097d8:	ee32 2b44 	vsub.f64	d2, d2, d4
 80097dc:	eea3 7b05 	vfma.f64	d7, d3, d5
 80097e0:	ed93 5b04 	vldr	d5, [r3, #16]
 80097e4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80097e8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80097ec:	ee26 5b05 	vmul.f64	d5, d6, d5
 80097f0:	ee26 0b05 	vmul.f64	d0, d6, d5
 80097f4:	ee34 8b00 	vadd.f64	d8, d4, d0
 80097f8:	eeb0 9b40 	vmov.f64	d9, d0
 80097fc:	ee34 4b48 	vsub.f64	d4, d4, d8
 8009800:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8009804:	ee34 ab00 	vadd.f64	d10, d4, d0
 8009808:	ed93 5b06 	vldr	d5, [r3, #24]
 800980c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8009810:	ee37 7b09 	vadd.f64	d7, d7, d9
 8009814:	ed93 4b08 	vldr	d4, [r3, #32]
 8009818:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800981c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8009820:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009824:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8009828:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800982c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009830:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8009834:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8009838:	eea0 4b03 	vfma.f64	d4, d0, d3
 800983c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009840:	eeab 7b05 	vfma.f64	d7, d11, d5
 8009844:	ee38 4b07 	vadd.f64	d4, d8, d7
 8009848:	ee21 6b04 	vmul.f64	d6, d1, d4
 800984c:	ee16 3a90 	vmov	r3, s13
 8009850:	eeb0 5b46 	vmov.f64	d5, d6
 8009854:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8009858:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800985c:	18b2      	adds	r2, r6, r2
 800985e:	2a3e      	cmp	r2, #62	; 0x3e
 8009860:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8009864:	ee38 8b44 	vsub.f64	d8, d8, d4
 8009868:	ee38 8b07 	vadd.f64	d8, d8, d7
 800986c:	eea1 5b08 	vfma.f64	d5, d1, d8
 8009870:	d91b      	bls.n	80098aa <pow+0x30a>
 8009872:	2a00      	cmp	r2, #0
 8009874:	da0b      	bge.n	800988e <pow+0x2ee>
 8009876:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800987a:	ee36 0b00 	vadd.f64	d0, d6, d0
 800987e:	2800      	cmp	r0, #0
 8009880:	f43f aef9 	beq.w	8009676 <pow+0xd6>
 8009884:	eeb1 0b40 	vneg.f64	d0, d0
 8009888:	e6f5      	b.n	8009676 <pow+0xd6>
 800988a:	2000      	movs	r0, #0
 800988c:	e780      	b.n	8009790 <pow+0x1f0>
 800988e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8009892:	d909      	bls.n	80098a8 <pow+0x308>
 8009894:	2b00      	cmp	r3, #0
 8009896:	f6bf af65 	bge.w	8009764 <pow+0x1c4>
 800989a:	b007      	add	sp, #28
 800989c:	ecbd 8b0a 	vpop	{d8-d12}
 80098a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	f000 b8ec 	b.w	8009a80 <__math_uflow>
 80098a8:	2600      	movs	r6, #0
 80098aa:	4937      	ldr	r1, [pc, #220]	; (8009988 <pow+0x3e8>)
 80098ac:	ed91 4b02 	vldr	d4, [r1, #8]
 80098b0:	ed91 3b00 	vldr	d3, [r1]
 80098b4:	eeb0 7b44 	vmov.f64	d7, d4
 80098b8:	eea6 7b03 	vfma.f64	d7, d6, d3
 80098bc:	ee17 5a10 	vmov	r5, s14
 80098c0:	ee37 7b44 	vsub.f64	d7, d7, d4
 80098c4:	ed91 4b04 	vldr	d4, [r1, #16]
 80098c8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80098cc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80098d0:	ed91 4b06 	vldr	d4, [r1, #24]
 80098d4:	18dc      	adds	r4, r3, r3
 80098d6:	f104 030f 	add.w	r3, r4, #15
 80098da:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80098de:	eea7 6b04 	vfma.f64	d6, d7, d4
 80098e2:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 80098e6:	ee35 5b06 	vadd.f64	d5, d5, d6
 80098ea:	ee25 6b05 	vmul.f64	d6, d5, d5
 80098ee:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80098f2:	ed91 4b08 	vldr	d4, [r1, #32]
 80098f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80098fa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80098fe:	eea5 4b03 	vfma.f64	d4, d5, d3
 8009902:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8009906:	eea6 7b04 	vfma.f64	d7, d6, d4
 800990a:	ee26 6b06 	vmul.f64	d6, d6, d6
 800990e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8009912:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8009916:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800991a:	eea5 4b03 	vfma.f64	d4, d5, d3
 800991e:	1940      	adds	r0, r0, r5
 8009920:	2700      	movs	r7, #0
 8009922:	eb17 020c 	adds.w	r2, r7, ip
 8009926:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800992a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800992e:	2e00      	cmp	r6, #0
 8009930:	d176      	bne.n	8009a20 <pow+0x480>
 8009932:	42bd      	cmp	r5, r7
 8009934:	db2a      	blt.n	800998c <pow+0x3ec>
 8009936:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800993a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800993e:	4610      	mov	r0, r2
 8009940:	ec41 0b10 	vmov	d0, r0, r1
 8009944:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009948:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009968 <pow+0x3c8>
 800994c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009950:	b007      	add	sp, #28
 8009952:	ecbd 8b0a 	vpop	{d8-d12}
 8009956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	f000 b8d1 	b.w	8009b00 <__math_check_oflow>
 800995e:	bf00      	nop
 8009960:	00000000 	.word	0x00000000
 8009964:	43300000 	.word	0x43300000
 8009968:	00000000 	.word	0x00000000
 800996c:	7f000000 	.word	0x7f000000
 8009970:	3ff00000 	.word	0x3ff00000
 8009974:	fff00000 	.word	0xfff00000
 8009978:	ffe00000 	.word	0xffe00000
 800997c:	7fe00000 	.word	0x7fe00000
 8009980:	c0196aab 	.word	0xc0196aab
 8009984:	0802f958 	.word	0x0802f958
 8009988:	080309a0 	.word	0x080309a0
 800998c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009990:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8009994:	4610      	mov	r0, r2
 8009996:	ec41 0b15 	vmov	d5, r0, r1
 800999a:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800999e:	ee27 6b05 	vmul.f64	d6, d7, d5
 80099a2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80099a6:	eeb0 4bc7 	vabs.f64	d4, d7
 80099aa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80099ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009a30 <pow+0x490>
 80099b6:	d52a      	bpl.n	8009a0e <pow+0x46e>
 80099b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80099bc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80099c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c4:	ee35 5b06 	vadd.f64	d5, d5, d6
 80099c8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80099cc:	bf58      	it	pl
 80099ce:	eeb0 4b43 	vmovpl.f64	d4, d3
 80099d2:	ee37 3b04 	vadd.f64	d3, d7, d4
 80099d6:	ee34 6b43 	vsub.f64	d6, d4, d3
 80099da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80099de:	ee36 6b05 	vadd.f64	d6, d6, d5
 80099e2:	ee36 6b03 	vadd.f64	d6, d6, d3
 80099e6:	ee36 7b44 	vsub.f64	d7, d6, d4
 80099ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f2:	d104      	bne.n	80099fe <pow+0x45e>
 80099f4:	4632      	mov	r2, r6
 80099f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80099fa:	ec43 2b17 	vmov	d7, r2, r3
 80099fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a02:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a06:	ee26 6b00 	vmul.f64	d6, d6, d0
 8009a0a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009a0e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8009a12:	b007      	add	sp, #28
 8009a14:	ecbd 8b0a 	vpop	{d8-d12}
 8009a18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	f000 b867 	b.w	8009aee <__math_check_uflow>
 8009a20:	ec43 2b10 	vmov	d0, r2, r3
 8009a24:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009a28:	e625      	b.n	8009676 <pow+0xd6>
 8009a2a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8009a38 <pow+0x498>
 8009a2e:	e622      	b.n	8009676 <pow+0xd6>
 8009a30:	00000000 	.word	0x00000000
 8009a34:	00100000 	.word	0x00100000
	...

08009a40 <__ieee754_sqrt>:
 8009a40:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009a44:	4770      	bx	lr

08009a46 <with_errno>:
 8009a46:	b513      	push	{r0, r1, r4, lr}
 8009a48:	4604      	mov	r4, r0
 8009a4a:	ed8d 0b00 	vstr	d0, [sp]
 8009a4e:	f7fd fd33 	bl	80074b8 <__errno>
 8009a52:	ed9d 0b00 	vldr	d0, [sp]
 8009a56:	6004      	str	r4, [r0, #0]
 8009a58:	b002      	add	sp, #8
 8009a5a:	bd10      	pop	{r4, pc}

08009a5c <xflow>:
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	b158      	cbz	r0, 8009a78 <xflow+0x1c>
 8009a60:	eeb1 7b40 	vneg.f64	d7, d0
 8009a64:	ed8d 7b00 	vstr	d7, [sp]
 8009a68:	ed9d 7b00 	vldr	d7, [sp]
 8009a6c:	2022      	movs	r0, #34	; 0x22
 8009a6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009a72:	b002      	add	sp, #8
 8009a74:	f7ff bfe7 	b.w	8009a46 <with_errno>
 8009a78:	eeb0 7b40 	vmov.f64	d7, d0
 8009a7c:	e7f2      	b.n	8009a64 <xflow+0x8>
	...

08009a80 <__math_uflow>:
 8009a80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a88 <__math_uflow+0x8>
 8009a84:	f7ff bfea 	b.w	8009a5c <xflow>
 8009a88:	00000000 	.word	0x00000000
 8009a8c:	10000000 	.word	0x10000000

08009a90 <__math_oflow>:
 8009a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a98 <__math_oflow+0x8>
 8009a94:	f7ff bfe2 	b.w	8009a5c <xflow>
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	70000000 	.word	0x70000000

08009aa0 <__math_divzero>:
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009aa8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8009aac:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009ab0:	ed8d 7b00 	vstr	d7, [sp]
 8009ab4:	ed9d 0b00 	vldr	d0, [sp]
 8009ab8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8009ac8 <__math_divzero+0x28>
 8009abc:	2022      	movs	r0, #34	; 0x22
 8009abe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8009ac2:	b002      	add	sp, #8
 8009ac4:	f7ff bfbf 	b.w	8009a46 <with_errno>
	...

08009ad0 <__math_invalid>:
 8009ad0:	eeb0 7b40 	vmov.f64	d7, d0
 8009ad4:	eeb4 7b47 	vcmp.f64	d7, d7
 8009ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009adc:	ee30 6b40 	vsub.f64	d6, d0, d0
 8009ae0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8009ae4:	d602      	bvs.n	8009aec <__math_invalid+0x1c>
 8009ae6:	2021      	movs	r0, #33	; 0x21
 8009ae8:	f7ff bfad 	b.w	8009a46 <with_errno>
 8009aec:	4770      	bx	lr

08009aee <__math_check_uflow>:
 8009aee:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af6:	d102      	bne.n	8009afe <__math_check_uflow+0x10>
 8009af8:	2022      	movs	r0, #34	; 0x22
 8009afa:	f7ff bfa4 	b.w	8009a46 <with_errno>
 8009afe:	4770      	bx	lr

08009b00 <__math_check_oflow>:
 8009b00:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8009b20 <__math_check_oflow+0x20>
 8009b04:	eeb0 7bc0 	vabs.f64	d7, d0
 8009b08:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b10:	dd02      	ble.n	8009b18 <__math_check_oflow+0x18>
 8009b12:	2022      	movs	r0, #34	; 0x22
 8009b14:	f7ff bf97 	b.w	8009a46 <with_errno>
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	f3af 8000 	nop.w
 8009b20:	ffffffff 	.word	0xffffffff
 8009b24:	7fefffff 	.word	0x7fefffff

08009b28 <_init>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr

08009b34 <_fini>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	bf00      	nop
 8009b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3a:	bc08      	pop	{r3}
 8009b3c:	469e      	mov	lr, r3
 8009b3e:	4770      	bx	lr
