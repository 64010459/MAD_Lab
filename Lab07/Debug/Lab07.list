
Lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006ff0  08006ff0  00016ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a4  080073a4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ac  080073ac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080073b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001d4  08007588  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08007588  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f556  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220f  00000000  00000000  0002f79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa6  00000000  00000000  00032768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cb1  00000000  00000000  0003320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ce8  00000000  00000000  0005bebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fce92  00000000  00000000  0006dba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047d0  00000000  00000000  0016aa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006fd4 	.word	0x08006fd4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08006fd4 	.word	0x08006fd4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_GPIO_Init+0x5c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <MX_GPIO_Init+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_GPIO_Init+0x5c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	00000000 	.word	0x00000000

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fcd2 	bl	8000ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f97d 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f7ff ffc5 	bl	80005ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000662:	f000 fb13 	bl	8000c8c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000666:	f000 fc11 	bl	8000e8c <MX_USART3_UART_Init>
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//	  HAL_Delay(100);
//	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
//	  pwm = (GPIOB->IDR & GPIO_PIN_10) >>10;
	  /*03*/
	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 800066a:	e021      	b.n	80006b0 <main+0x60>
	              pwm_B = ((GPIOB->IDR & GPIO_PIN_10) >> 10) + 0;
 800066c:	4bac      	ldr	r3, [pc, #688]	; (8000920 <main+0x2d0>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	0a9b      	lsrs	r3, r3, #10
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4baa      	ldr	r3, [pc, #680]	; (8000924 <main+0x2d4>)
 800067c:	701a      	strb	r2, [r3, #0]
	              pwm_G = ((GPIOA->IDR & GPIO_PIN_3) >> 3) + 2;
 800067e:	4baa      	ldr	r3, [pc, #680]	; (8000928 <main+0x2d8>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	3302      	adds	r3, #2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4ba6      	ldr	r3, [pc, #664]	; (800092c <main+0x2dc>)
 8000692:	701a      	strb	r2, [r3, #0]
	              pwm_R = ((GPIOA->IDR & GPIO_PIN_5) >> 5) + 4;
 8000694:	4ba4      	ldr	r3, [pc, #656]	; (8000928 <main+0x2d8>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	3304      	adds	r3, #4
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4ba2      	ldr	r3, [pc, #648]	; (8000930 <main+0x2e0>)
 80006a8:	701a      	strb	r2, [r3, #0]
	              HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fd04 	bl	80010b8 <HAL_Delay>
	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80006b0:	4ba0      	ldr	r3, [pc, #640]	; (8000934 <main+0x2e4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	2b20      	cmp	r3, #32
 80006bc:	d1d6      	bne.n	800066c <main+0x1c>
	          }
	          HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	2201      	movs	r2, #1
 80006c4:	499c      	ldr	r1, [pc, #624]	; (8000938 <main+0x2e8>)
 80006c6:	489b      	ldr	r0, [pc, #620]	; (8000934 <main+0x2e4>)
 80006c8:	f003 f9e5 	bl	8003a96 <HAL_UART_Receive>
	          if (ch1 == 'r') {
 80006cc:	4b9a      	ldr	r3, [pc, #616]	; (8000938 <main+0x2e8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b72      	cmp	r3, #114	; 0x72
 80006d2:	d15c      	bne.n	800078e <main+0x13e>
	              dutyCycle_R += 0.2;
 80006d4:	4b99      	ldr	r3, [pc, #612]	; (800093c <main+0x2ec>)
 80006d6:	edd3 7a00 	vldr	s15, [r3]
 80006da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006de:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8000918 <main+0x2c8>
 80006e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ea:	4b94      	ldr	r3, [pc, #592]	; (800093c <main+0x2ec>)
 80006ec:	edc3 7a00 	vstr	s15, [r3]
	              if (dutyCycle_R > 1) {
 80006f0:	4b92      	ldr	r3, [pc, #584]	; (800093c <main+0x2ec>)
 80006f2:	edd3 7a00 	vldr	s15, [r3]
 80006f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000702:	dd03      	ble.n	800070c <main+0xbc>
	                  dutyCycle_R = 0;
 8000704:	4b8d      	ldr	r3, [pc, #564]	; (800093c <main+0x2ec>)
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
	              }
	              HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	488c      	ldr	r0, [pc, #560]	; (8000940 <main+0x2f0>)
 8000710:	f002 fa46 	bl	8002ba0 <HAL_TIM_PWM_Stop>
	              htim2.Instance->CCR1 = (1000 - 1) * dutyCycle_R;
 8000714:	4b89      	ldr	r3, [pc, #548]	; (800093c <main+0x2ec>)
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8000944 <main+0x2f4>
 800071e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000722:	4b87      	ldr	r3, [pc, #540]	; (8000940 <main+0x2f0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800072a:	ee17 2a90 	vmov	r2, s15
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
	              HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000730:	2100      	movs	r1, #0
 8000732:	4883      	ldr	r0, [pc, #524]	; (8000940 <main+0x2f0>)
 8000734:	f002 f93a 	bl	80029ac <HAL_TIM_PWM_Start>
	              sprintf(txt," - Duty cycle RGB | %.2f : %.2f : %.2f\r\n",dutyCycle_R,dutyCycle_G,dutyCycle_B);
 8000738:	4b80      	ldr	r3, [pc, #512]	; (800093c <main+0x2ec>)
 800073a:	edd3 7a00 	vldr	s15, [r3]
 800073e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000742:	4b81      	ldr	r3, [pc, #516]	; (8000948 <main+0x2f8>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800074c:	4b7f      	ldr	r3, [pc, #508]	; (800094c <main+0x2fc>)
 800074e:	edd3 6a00 	vldr	s13, [r3]
 8000752:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000756:	ed8d 6b02 	vstr	d6, [sp, #8]
 800075a:	ed8d 7b00 	vstr	d7, [sp]
 800075e:	ec53 2b15 	vmov	r2, r3, d5
 8000762:	497b      	ldr	r1, [pc, #492]	; (8000950 <main+0x300>)
 8000764:	487b      	ldr	r0, [pc, #492]	; (8000954 <main+0x304>)
 8000766:	f004 fb61 	bl	8004e2c <siprintf>
	              HAL_UART_Transmit(&huart3, &ch1, 1, 1000);
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	2201      	movs	r2, #1
 8000770:	4971      	ldr	r1, [pc, #452]	; (8000938 <main+0x2e8>)
 8000772:	4870      	ldr	r0, [pc, #448]	; (8000934 <main+0x2e4>)
 8000774:	f003 f90c 	bl	8003990 <HAL_UART_Transmit>
	              HAL_UART_Transmit(&huart3, txt, strlen(txt), 1000);
 8000778:	4876      	ldr	r0, [pc, #472]	; (8000954 <main+0x304>)
 800077a:	f7ff fdb1 	bl	80002e0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	4973      	ldr	r1, [pc, #460]	; (8000954 <main+0x304>)
 8000788:	486a      	ldr	r0, [pc, #424]	; (8000934 <main+0x2e4>)
 800078a:	f003 f901 	bl	8003990 <HAL_UART_Transmit>
	          }
	          if (ch1 == 'g') {
 800078e:	4b6a      	ldr	r3, [pc, #424]	; (8000938 <main+0x2e8>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b67      	cmp	r3, #103	; 0x67
 8000794:	d15c      	bne.n	8000850 <main+0x200>
	              dutyCycle_G += 0.2;
 8000796:	4b6c      	ldr	r3, [pc, #432]	; (8000948 <main+0x2f8>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000918 <main+0x2c8>
 80007a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ac:	4b66      	ldr	r3, [pc, #408]	; (8000948 <main+0x2f8>)
 80007ae:	edc3 7a00 	vstr	s15, [r3]
	              if (dutyCycle_G > 1) {
 80007b2:	4b65      	ldr	r3, [pc, #404]	; (8000948 <main+0x2f8>)
 80007b4:	edd3 7a00 	vldr	s15, [r3]
 80007b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	dd03      	ble.n	80007ce <main+0x17e>
	                  dutyCycle_G = 0;
 80007c6:	4b60      	ldr	r3, [pc, #384]	; (8000948 <main+0x2f8>)
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
	              }
	              HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80007ce:	210c      	movs	r1, #12
 80007d0:	485b      	ldr	r0, [pc, #364]	; (8000940 <main+0x2f0>)
 80007d2:	f002 f9e5 	bl	8002ba0 <HAL_TIM_PWM_Stop>
	              htim2.Instance->CCR4 = (1000 - 1) * dutyCycle_G;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <main+0x2f8>)
 80007d8:	edd3 7a00 	vldr	s15, [r3]
 80007dc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000944 <main+0x2f4>
 80007e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007e4:	4b56      	ldr	r3, [pc, #344]	; (8000940 <main+0x2f0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ec:	ee17 2a90 	vmov	r2, s15
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40
	              HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80007f2:	210c      	movs	r1, #12
 80007f4:	4852      	ldr	r0, [pc, #328]	; (8000940 <main+0x2f0>)
 80007f6:	f002 f8d9 	bl	80029ac <HAL_TIM_PWM_Start>
	              sprintf(txt," - Duty cycle RGB | %.2f : %.2f : %.2f\r\n",dutyCycle_R,dutyCycle_G,dutyCycle_B);
 80007fa:	4b50      	ldr	r3, [pc, #320]	; (800093c <main+0x2ec>)
 80007fc:	edd3 7a00 	vldr	s15, [r3]
 8000800:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000804:	4b50      	ldr	r3, [pc, #320]	; (8000948 <main+0x2f8>)
 8000806:	edd3 7a00 	vldr	s15, [r3]
 800080a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800080e:	4b4f      	ldr	r3, [pc, #316]	; (800094c <main+0x2fc>)
 8000810:	edd3 6a00 	vldr	s13, [r3]
 8000814:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000818:	ed8d 6b02 	vstr	d6, [sp, #8]
 800081c:	ed8d 7b00 	vstr	d7, [sp]
 8000820:	ec53 2b15 	vmov	r2, r3, d5
 8000824:	494a      	ldr	r1, [pc, #296]	; (8000950 <main+0x300>)
 8000826:	484b      	ldr	r0, [pc, #300]	; (8000954 <main+0x304>)
 8000828:	f004 fb00 	bl	8004e2c <siprintf>
	              HAL_UART_Transmit(&huart3, &ch1, 1, 1000);
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	2201      	movs	r2, #1
 8000832:	4941      	ldr	r1, [pc, #260]	; (8000938 <main+0x2e8>)
 8000834:	483f      	ldr	r0, [pc, #252]	; (8000934 <main+0x2e4>)
 8000836:	f003 f8ab 	bl	8003990 <HAL_UART_Transmit>
	              HAL_UART_Transmit(&huart3, txt, strlen(txt), 1000);
 800083a:	4846      	ldr	r0, [pc, #280]	; (8000954 <main+0x304>)
 800083c:	f7ff fd50 	bl	80002e0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	4942      	ldr	r1, [pc, #264]	; (8000954 <main+0x304>)
 800084a:	483a      	ldr	r0, [pc, #232]	; (8000934 <main+0x2e4>)
 800084c:	f003 f8a0 	bl	8003990 <HAL_UART_Transmit>
	          }
	          if (ch1 == 'b') {
 8000850:	4b39      	ldr	r3, [pc, #228]	; (8000938 <main+0x2e8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b62      	cmp	r3, #98	; 0x62
 8000856:	f47f af2b 	bne.w	80006b0 <main+0x60>
	              dutyCycle_B += 0.2;
 800085a:	4b3c      	ldr	r3, [pc, #240]	; (800094c <main+0x2fc>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000864:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000918 <main+0x2c8>
 8000868:	ee37 7b06 	vadd.f64	d7, d7, d6
 800086c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <main+0x2fc>)
 8000872:	edc3 7a00 	vstr	s15, [r3]
	              if (dutyCycle_B > 1) {
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <main+0x2fc>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000888:	dd03      	ble.n	8000892 <main+0x242>
	                  dutyCycle_B = 0;
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <main+0x2fc>)
 800088c:	f04f 0200 	mov.w	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
	              }
	              HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000892:	2108      	movs	r1, #8
 8000894:	482a      	ldr	r0, [pc, #168]	; (8000940 <main+0x2f0>)
 8000896:	f002 f983 	bl	8002ba0 <HAL_TIM_PWM_Stop>
	              htim2.Instance->CCR3 = (1000 - 1) * dutyCycle_B;
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <main+0x2fc>)
 800089c:	edd3 7a00 	vldr	s15, [r3]
 80008a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000944 <main+0x2f4>
 80008a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <main+0x2f0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b0:	ee17 2a90 	vmov	r2, s15
 80008b4:	63da      	str	r2, [r3, #60]	; 0x3c
	              HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008b6:	2108      	movs	r1, #8
 80008b8:	4821      	ldr	r0, [pc, #132]	; (8000940 <main+0x2f0>)
 80008ba:	f002 f877 	bl	80029ac <HAL_TIM_PWM_Start>
	              sprintf(txt," - Duty cycle RGB | %.2f : %.2f : %.2f\r\n",dutyCycle_R,dutyCycle_G,dutyCycle_B);
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <main+0x2ec>)
 80008c0:	edd3 7a00 	vldr	s15, [r3]
 80008c4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <main+0x2f8>)
 80008ca:	edd3 7a00 	vldr	s15, [r3]
 80008ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <main+0x2fc>)
 80008d4:	edd3 6a00 	vldr	s13, [r3]
 80008d8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80008dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80008e0:	ed8d 7b00 	vstr	d7, [sp]
 80008e4:	ec53 2b15 	vmov	r2, r3, d5
 80008e8:	4919      	ldr	r1, [pc, #100]	; (8000950 <main+0x300>)
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <main+0x304>)
 80008ec:	f004 fa9e 	bl	8004e2c <siprintf>
	              HAL_UART_Transmit(&huart3, &ch1, 1, 1000);
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	2201      	movs	r2, #1
 80008f6:	4910      	ldr	r1, [pc, #64]	; (8000938 <main+0x2e8>)
 80008f8:	480e      	ldr	r0, [pc, #56]	; (8000934 <main+0x2e4>)
 80008fa:	f003 f849 	bl	8003990 <HAL_UART_Transmit>
	              HAL_UART_Transmit(&huart3, txt, strlen(txt), 1000);
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <main+0x304>)
 8000900:	f7ff fcee 	bl	80002e0 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	4911      	ldr	r1, [pc, #68]	; (8000954 <main+0x304>)
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <main+0x2e4>)
 8000910:	f003 f83e 	bl	8003990 <HAL_UART_Transmit>
	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 8000914:	e6cc      	b.n	80006b0 <main+0x60>
 8000916:	bf00      	nop
 8000918:	9999999a 	.word	0x9999999a
 800091c:	3fc99999 	.word	0x3fc99999
 8000920:	40020400 	.word	0x40020400
 8000924:	200001f2 	.word	0x200001f2
 8000928:	40020000 	.word	0x40020000
 800092c:	200001f1 	.word	0x200001f1
 8000930:	200001f0 	.word	0x200001f0
 8000934:	2000031c 	.word	0x2000031c
 8000938:	20000200 	.word	0x20000200
 800093c:	200001f4 	.word	0x200001f4
 8000940:	200002d0 	.word	0x200002d0
 8000944:	4479c000 	.word	0x4479c000
 8000948:	200001f8 	.word	0x200001f8
 800094c:	200001fc 	.word	0x200001fc
 8000950:	08006ff0 	.word	0x08006ff0
 8000954:	20000204 	.word	0x20000204

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fac3 	bl	8004ef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <SystemClock_Config+0xd4>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xd4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <SystemClock_Config+0xd8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <SystemClock_Config+0xd8>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <SystemClock_Config+0xd8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c0:	2308      	movs	r3, #8
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009c4:	23d8      	movs	r3, #216	; 0xd8
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fe73 	bl	80016c4 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009e4:	f000 f826 	bl	8000a34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e8:	f000 fe1c 	bl	8001624 <HAL_PWREx_EnableOverDrive>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009f2:	f000 f81f 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2107      	movs	r1, #7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 f903 	bl	8001c20 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a20:	f000 f808 	bl	8000a34 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	; 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 fad0 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return 1;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_kill>:

int _kill(int pid, int sig)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000af6:	f004 fa4f 	bl	8004f98 <__errno>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2216      	movs	r2, #22
 8000afe:	601a      	str	r2, [r3, #0]
  return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_exit>:

void _exit (int status)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffe7 	bl	8000aec <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b1e:	e7fe      	b.n	8000b1e <_exit+0x12>

08000b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
  }
  return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f004 f9b4 	bl	8004f98 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20080000 	.word	0x20080000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200002cc 	.word	0x200002cc
 8000c64:	200004f8 	.word	0x200004f8

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000cc8:	f240 4237 	movw	r2, #1079	; 0x437
 8000ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce8:	482e      	ldr	r0, [pc, #184]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000cea:	f001 fda7 	bl	800283c <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000cf4:	f7ff fe9e 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4827      	ldr	r0, [pc, #156]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d06:	f002 f8df 	bl	8002ec8 <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d10:	f7ff fe90 	bl	8000a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d14:	4823      	ldr	r0, [pc, #140]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d16:	f001 fde8 	bl	80028ea <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d20:	f7ff fe88 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	481c      	ldr	r0, [pc, #112]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d34:	f002 fd50 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d3e:	f7ff fe79 	bl	8000a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	; 0x60
 8000d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000d46:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4812      	ldr	r0, [pc, #72]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d5c:	f001 ffa0 	bl	8002ca0 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000d66:	f7ff fe65 	bl	8000a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d72:	f001 ff95 	bl	8002ca0 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000d7c:	f7ff fe5a 	bl	8000a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	220c      	movs	r2, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d88:	f001 ff8a 	bl	8002ca0 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000d92:	f7ff fe4f 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM2_Init+0x118>)
 8000d98:	f000 f824 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200002d0 	.word	0x200002d0

08000da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_TIM_Base_MspInit+0x38>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_TIM_Base_MspInit+0x38>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_TIM_Base_MspInit+0x38>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d138      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e36:	2328      	movs	r3, #40	; 0x28
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e46:	2301      	movs	r3, #1
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e52:	f000 fa3b 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e74:	f000 fa2a 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400

08000e8c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <MX_USART3_UART_Init+0x5c>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART3_UART_Init+0x58>)
 8000ed0:	f002 fd10 	bl	80038f4 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000eda:	f7ff fdab 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000031c 	.word	0x2000031c
 8000ee8:	40004800 	.word	0x40004800

08000eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0ae      	sub	sp, #184	; 0xb8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2290      	movs	r2, #144	; 0x90
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 fff0 	bl	8004ef2 <memset>
  if(uartHandle->Instance==USART3)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_UART_MspInit+0xb4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d13c      	bne.n	8000f96 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 f85e 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f36:	f7ff fd7d 	bl	8000a34 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_UART_MspInit+0xb8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f84:	2307      	movs	r3, #7
 8000f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_UART_MspInit+0xbc>)
 8000f92:	f000 f99b 	bl	80012cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	37b8      	adds	r7, #184	; 0xb8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40004800 	.word	0x40004800
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff fe47 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 ffe3 	bl	8004fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fb37 	bl	8000650 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000ff0:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8000ff4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000ff8:	200004f4 	.word	0x200004f4

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>

08000ffe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f92e 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001008:	200f      	movs	r0, #15
 800100a:	f000 f805 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fd17 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f93b 	bl	80012b2 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f911 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	200003a4 	.word	0x200003a4

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200003a4 	.word	0x200003a4

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	05fa0000 	.word	0x05fa0000

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5c 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e175      	b.n	80015d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8164 	bne.w	80015d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x56>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80be 	beq.w	80015d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_GPIO_Init+0x324>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800146e:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <HAL_GPIO_Init+0x328>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d037      	beq.n	800150a <HAL_GPIO_Init+0x23e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_GPIO_Init+0x330>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d031      	beq.n	8001506 <HAL_GPIO_Init+0x23a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a56      	ldr	r2, [pc, #344]	; (8001600 <HAL_GPIO_Init+0x334>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d02b      	beq.n	8001502 <HAL_GPIO_Init+0x236>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_GPIO_Init+0x338>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x232>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a54      	ldr	r2, [pc, #336]	; (8001608 <HAL_GPIO_Init+0x33c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x22e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a53      	ldr	r2, [pc, #332]	; (800160c <HAL_GPIO_Init+0x340>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x22a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_GPIO_Init+0x344>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a51      	ldr	r2, [pc, #324]	; (8001614 <HAL_GPIO_Init+0x348>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a50      	ldr	r2, [pc, #320]	; (8001618 <HAL_GPIO_Init+0x34c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4f      	ldr	r2, [pc, #316]	; (800161c <HAL_GPIO_Init+0x350>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014e2:	2309      	movs	r3, #9
 80014e4:	e012      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014e6:	230a      	movs	r3, #10
 80014e8:	e010      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014ea:	2308      	movs	r3, #8
 80014ec:	e00e      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014f2:	2306      	movs	r3, #6
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x240>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x240>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x240>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x328>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_GPIO_Init+0x354>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154e:	4a34      	ldr	r2, [pc, #208]	; (8001620 <HAL_GPIO_Init+0x354>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_GPIO_Init+0x354>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001578:	4a29      	ldr	r2, [pc, #164]	; (8001620 <HAL_GPIO_Init+0x354>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x354>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_GPIO_Init+0x354>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_GPIO_Init+0x354>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_GPIO_Init+0x354>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f ae86 	bls.w	80012ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40021c00 	.word	0x40021c00
 8001618:	40022000 	.word	0x40022000
 800161c:	40022400 	.word	0x40022400
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_PWREx_EnableOverDrive+0x98>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001652:	f7ff fd25 	bl	80010a0 <HAL_GetTick>
 8001656:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001658:	e009      	b.n	800166e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800165a:	f7ff fd21 	bl	80010a0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001668:	d901      	bls.n	800166e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e022      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d1ee      	bne.n	800165a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff fd0a 	bl	80010a0 <HAL_GetTick>
 800168c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800168e:	e009      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001690:	f7ff fd06 	bl	80010a0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d901      	bls.n	80016a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e007      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016b0:	d1ee      	bne.n	8001690 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000

080016c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e29b      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8087 	beq.w	80017f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d00c      	beq.n	800170e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f4:	4b93      	ldr	r3, [pc, #588]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d112      	bne.n	8001726 <HAL_RCC_OscConfig+0x62>
 8001700:	4b90      	ldr	r3, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170c:	d10b      	bne.n	8001726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b8d      	ldr	r3, [pc, #564]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x130>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d168      	bne.n	80017f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e275      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x7a>
 8001730:	4b84      	ldr	r3, [pc, #528]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0xd8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x9c>
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b7c      	ldr	r3, [pc, #496]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a7b      	ldr	r2, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01d      	b.n	800179c <HAL_RCC_OscConfig+0xd8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0xc0>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a72      	ldr	r2, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0xd8>
 8001784:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a6b      	ldr	r2, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc7c 	bl	80010a0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fc78 	bl	80010a0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e229      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0xe8>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc68 	bl	80010a0 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fc64 	bl	80010a0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e215      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x110>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d069      	beq.n	80018d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d11c      	bne.n	8001854 <HAL_RCC_OscConfig+0x190>
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d116      	bne.n	8001854 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x17a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1e9      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	493d      	ldr	r1, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e040      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fc1a 	bl	80010a0 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fc16 	bl	80010a0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1c7      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4929      	ldr	r1, [pc, #164]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
 80018a2:	e018      	b.n	80018d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fbf6 	bl	80010a0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff fbf2 	bl	80010a0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1a3      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d038      	beq.n	8001954 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff fbd3 	bl	80010a0 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fbcf 	bl	80010a0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e180      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x23a>
 800191c:	e01a      	b.n	8001954 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_OscConfig+0x280>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fbb9 	bl	80010a0 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fbb5 	bl	80010a0 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d903      	bls.n	8001948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e166      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
 8001944:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ee      	bne.n	8001932 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80a4 	beq.w	8001aaa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10d      	bne.n	800198a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a88      	ldr	r2, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b86      	ldr	r3, [pc, #536]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198a:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001996:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7f      	ldr	r2, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb7d 	bl	80010a0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fb79 	bl	80010a0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e12a      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019bc:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x4d4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x31a>
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a6f      	ldr	r2, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	e02d      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x33c>
 80019e6:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	e01c      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x35e>
 8001a08:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a61      	ldr	r2, [pc, #388]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a5e      	ldr	r2, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	e00b      	b.n	8001a3a <HAL_RCC_OscConfig+0x376>
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb2d 	bl	80010a0 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fb29 	bl	80010a0 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0d8      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ee      	beq.n	8001a4a <HAL_RCC_OscConfig+0x386>
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb17 	bl	80010a0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fb13 	bl	80010a0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0c2      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ee      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80ae 	beq.w	8001c10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d06d      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d14b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fae4 	bl	80010a0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fae0 	bl	80010a0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e091      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	071b      	lsls	r3, r3, #28
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fab2 	bl	80010a0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff faae 	bl	80010a0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e05f      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x47c>
 8001b5e:	e057      	b.n	8001c10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fa98 	bl	80010a0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fa94 	bl	80010a0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e045      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_RCC_OscConfig+0x4d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4b0>
 8001b92:	e03d      	b.n	8001c10 <HAL_RCC_OscConfig+0x54c>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_RCC_OscConfig+0x558>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d030      	beq.n	8001c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d129      	bne.n	8001c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d122      	bne.n	8001c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d119      	bne.n	8001c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10f      	bne.n	8001c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0d0      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 020f 	bic.w	r2, r3, #15
 8001c4e:	4965      	ldr	r1, [pc, #404]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a58      	ldr	r2, [pc, #352]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d040      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e073      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4936      	ldr	r1, [pc, #216]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d14:	f7ff f9c4 	bl	80010a0 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f9c0 	bl	80010a0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e053      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d210      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	4922      	ldr	r1, [pc, #136]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f821 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x1cc>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1d4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f920 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00
 8001de8:	40023800 	.word	0x40023800
 8001dec:	0800701c 	.word	0x0800701c
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b090      	sub	sp, #64	; 0x40
 8001dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e08:	2300      	movs	r3, #0
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d00d      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x40>
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	f200 80a1 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x34>
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2a:	e09b      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e30:	e09b      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e32:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e36:	e098      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e42:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d028      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	2200      	movs	r2, #0
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	627a      	str	r2, [r7, #36]	; 0x24
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e60:	2100      	movs	r1, #0
 8001e62:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e64:	fb03 f201 	mul.w	r2, r3, r1
 8001e68:	2300      	movs	r3, #0
 8001e6a:	fb00 f303 	mul.w	r3, r0, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a43      	ldr	r2, [pc, #268]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e72:	fba0 1202 	umull	r1, r2, r0, r2
 8001e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e78:	460a      	mov	r2, r1
 8001e7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7e:	4413      	add	r3, r2
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	2200      	movs	r2, #0
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	61fa      	str	r2, [r7, #28]
 8001e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e92:	f7fe fa2d 	bl	80002f0 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	e053      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	617a      	str	r2, [r7, #20]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eb2:	f04f 0b00 	mov.w	fp, #0
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	465b      	mov	r3, fp
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	0159      	lsls	r1, r3, #5
 8001ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec8:	0150      	lsls	r0, r2, #5
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	ebb2 080a 	subs.w	r8, r2, sl
 8001ed2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ee2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ee6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eea:	ebb2 0408 	subs.w	r4, r2, r8
 8001eee:	eb63 0509 	sbc.w	r5, r3, r9
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	00eb      	lsls	r3, r5, #3
 8001efc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f00:	00e2      	lsls	r2, r4, #3
 8001f02:	4614      	mov	r4, r2
 8001f04:	461d      	mov	r5, r3
 8001f06:	eb14 030a 	adds.w	r3, r4, sl
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	eb45 030b 	adc.w	r3, r5, fp
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	028b      	lsls	r3, r1, #10
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f28:	4621      	mov	r1, r4
 8001f2a:	028a      	lsls	r2, r1, #10
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	2200      	movs	r2, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	60fa      	str	r2, [r7, #12]
 8001f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3c:	f7fe f9d8 	bl	80002f0 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3740      	adds	r7, #64	; 0x40
 8001f70:	46bd      	mov	sp, r7
 8001f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	017d7840 	.word	0x017d7840

08001f84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	0800702c 	.word	0x0800702c

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	f7ff ffdc 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4903      	ldr	r1, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	0800702c 	.word	0x0800702c

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002014:	4b69      	ldr	r3, [pc, #420]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a68      	ldr	r2, [pc, #416]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800201e:	6093      	str	r3, [r2, #8]
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	4964      	ldr	r1, [pc, #400]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d017      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	4959      	ldr	r1, [pc, #356]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002064:	d101      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d017      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002082:	4b4e      	ldr	r3, [pc, #312]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	494a      	ldr	r1, [pc, #296]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 808b 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a39      	ldr	r2, [pc, #228]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a34      	ldr	r2, [pc, #208]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7fe ffd4 	bl	80010a0 <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7fe ffd0 	bl	80010a0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e38f      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d035      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d02e      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d114      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe ff98 	bl	80010a0 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe ff94 	bl	80010a0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e351      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ee      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021a2:	d111      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021b2:	400b      	ands	r3, r1
 80021b4:	4901      	ldr	r1, [pc, #4]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	0ffffcff 	.word	0x0ffffcff
 80021c8:	4bac      	ldr	r3, [pc, #688]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4aab      	ldr	r2, [pc, #684]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021d2:	6093      	str	r3, [r2, #8]
 80021d4:	4ba9      	ldr	r3, [pc, #676]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	49a6      	ldr	r1, [pc, #664]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021f2:	4ba2      	ldr	r3, [pc, #648]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f8:	4aa0      	ldr	r2, [pc, #640]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002202:	4b9e      	ldr	r3, [pc, #632]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	499b      	ldr	r1, [pc, #620]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002220:	4b96      	ldr	r3, [pc, #600]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800222e:	4993      	ldr	r1, [pc, #588]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002242:	4b8e      	ldr	r3, [pc, #568]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002250:	498a      	ldr	r1, [pc, #552]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002264:	4b85      	ldr	r3, [pc, #532]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002272:	4982      	ldr	r1, [pc, #520]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4979      	ldr	r1, [pc, #484]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a8:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4971      	ldr	r1, [pc, #452]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ca:	4b6c      	ldr	r3, [pc, #432]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	f023 020c 	bic.w	r2, r3, #12
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	4968      	ldr	r1, [pc, #416]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ec:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4960      	ldr	r1, [pc, #384]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800230e:	4b5b      	ldr	r3, [pc, #364]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	4957      	ldr	r1, [pc, #348]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002330:	4b52      	ldr	r3, [pc, #328]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	494f      	ldr	r1, [pc, #316]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4946      	ldr	r1, [pc, #280]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002374:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	493e      	ldr	r1, [pc, #248]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	4935      	ldr	r1, [pc, #212]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c6:	492d      	ldr	r1, [pc, #180]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e8:	4924      	ldr	r1, [pc, #144]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800240a:	2301      	movs	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	4914      	ldr	r1, [pc, #80]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244c:	490b      	ldr	r1, [pc, #44]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00f      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002470:	4902      	ldr	r1, [pc, #8]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002478:	e002      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800248c:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002492:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	4986      	ldr	r1, [pc, #536]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024b0:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	497d      	ldr	r1, [pc, #500]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d006      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80d6 	beq.w	8002688 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024dc:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fdda 	bl	80010a0 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024f0:	f7fe fdd6 	bl	80010a0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e195      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d021      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11d      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002530:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002536:	0e1b      	lsrs	r3, r3, #24
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	019a      	lsls	r2, r3, #6
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	071b      	lsls	r3, r3, #28
 8002556:	4958      	ldr	r1, [pc, #352]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02e      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002588:	d129      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800258a:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259e:	0f1b      	lsrs	r3, r3, #28
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	019a      	lsls	r2, r3, #6
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	493e      	ldr	r1, [pc, #248]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025c6:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025cc:	f023 021f 	bic.w	r2, r3, #31
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	3b01      	subs	r3, #1
 80025d6:	4938      	ldr	r1, [pc, #224]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01d      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f0:	0e1b      	lsrs	r3, r3, #24
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fe:	0f1b      	lsrs	r3, r3, #28
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	019a      	lsls	r2, r3, #6
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	431a      	orrs	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	071b      	lsls	r3, r3, #28
 800261e:	4926      	ldr	r1, [pc, #152]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	019a      	lsls	r2, r3, #6
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	071b      	lsls	r3, r3, #28
 800264e:	491a      	ldr	r1, [pc, #104]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002662:	f7fe fd1d 	bl	80010a0 <HAL_GetTick>
 8002666:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800266a:	f7fe fd19 	bl	80010a0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0d8      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b01      	cmp	r3, #1
 800268c:	f040 80ce 	bne.w	800282c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fd00 	bl	80010a0 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026a2:	e00b      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026a4:	f7fe fcfc 	bl	80010a0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d904      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0bb      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d0ec      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d02e      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d12a      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	0f1b      	lsrs	r3, r3, #28
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	019a      	lsls	r2, r3, #6
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	061b      	lsls	r3, r3, #24
 8002720:	431a      	orrs	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	071b      	lsls	r3, r3, #28
 8002726:	4944      	ldr	r1, [pc, #272]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	493d      	ldr	r1, [pc, #244]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d022      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275c:	d11d      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	0e1b      	lsrs	r3, r3, #24
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	0f1b      	lsrs	r3, r3, #28
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	019a      	lsls	r2, r3, #6
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	431a      	orrs	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	071b      	lsls	r3, r3, #28
 8002792:	4929      	ldr	r1, [pc, #164]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	0e1b      	lsrs	r3, r3, #24
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	019a      	lsls	r2, r3, #6
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	4917      	ldr	r1, [pc, #92]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	4911      	ldr	r1, [pc, #68]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe fc4c 	bl	80010a0 <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800280c:	f7fe fc48 	bl	80010a0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e007      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282a:	d1ef      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e049      	b.n	80028e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe faa0 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 fbee 	bl	800305c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e049      	b.n	8002990 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f841 	bl	8002998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 fb97 	bl	800305c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x24>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e03c      	b.n	8002a4a <HAL_TIM_PWM_Start+0x9e>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d109      	bne.n	80029ea <HAL_TIM_PWM_Start+0x3e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e02f      	b.n	8002a4a <HAL_TIM_PWM_Start+0x9e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x58>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e022      	b.n	8002a4a <HAL_TIM_PWM_Start+0x9e>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	d109      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x72>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e015      	b.n	8002a4a <HAL_TIM_PWM_Start+0x9e>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d109      	bne.n	8002a38 <HAL_TIM_PWM_Start+0x8c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e008      	b.n	8002a4a <HAL_TIM_PWM_Start+0x9e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e092      	b.n	8002b78 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_PWM_Start+0xb6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	e023      	b.n	8002aaa <HAL_TIM_PWM_Start+0xfe>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_PWM_Start+0xc6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a70:	e01b      	b.n	8002aaa <HAL_TIM_PWM_Start+0xfe>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_PWM_Start+0xd6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	e013      	b.n	8002aaa <HAL_TIM_PWM_Start+0xfe>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d104      	bne.n	8002a92 <HAL_TIM_PWM_Start+0xe6>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a90:	e00b      	b.n	8002aaa <HAL_TIM_PWM_Start+0xfe>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0xf6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	e003      	b.n	8002aaa <HAL_TIM_PWM_Start+0xfe>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fe6a 	bl	800378c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <HAL_TIM_PWM_Start+0x1d4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_TIM_PWM_Start+0x120>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <HAL_TIM_PWM_Start+0x1d8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIM_PWM_Start+0x124>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_PWM_Start+0x126>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <HAL_TIM_PWM_Start+0x1d4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d01d      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_TIM_PWM_Start+0x1dc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d018      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <HAL_TIM_PWM_Start+0x1e0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <HAL_TIM_PWM_Start+0x1e4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_TIM_PWM_Start+0x1d8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_TIM_PWM_Start+0x1e8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_PWM_Start+0x18a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <HAL_TIM_PWM_Start+0x1ec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d115      	bne.n	8002b62 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_TIM_PWM_Start+0x1f0>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d015      	beq.n	8002b74 <HAL_TIM_PWM_Start+0x1c8>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d011      	beq.n	8002b74 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b60:	e008      	b.n	8002b74 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e000      	b.n	8002b76 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40010400 	.word	0x40010400
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40001800 	.word	0x40001800
 8002b9c:	00010007 	.word	0x00010007

08002ba0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fdea 	bl	800378c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a36      	ldr	r2, [pc, #216]	; (8002c98 <HAL_TIM_PWM_Stop+0xf8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_TIM_PWM_Stop+0x2c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <HAL_TIM_PWM_Stop+0xfc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_PWM_Stop+0x30>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_TIM_PWM_Stop+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d017      	beq.n	8002c06 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_TIM_PWM_Stop+0x66>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1a      	ldr	r2, [r3, #32]
 8002bec:	f240 4344 	movw	r3, #1092	; 0x444
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_PWM_Stop+0x66>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <HAL_TIM_PWM_Stop+0x96>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	f240 4344 	movw	r3, #1092	; 0x444
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_PWM_Stop+0x96>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_PWM_Stop+0xa6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c44:	e023      	b.n	8002c8e <HAL_TIM_PWM_Stop+0xee>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_PWM_Stop+0xb6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c54:	e01b      	b.n	8002c8e <HAL_TIM_PWM_Stop+0xee>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Stop+0xc6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c64:	e013      	b.n	8002c8e <HAL_TIM_PWM_Stop+0xee>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Stop+0xd6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c74:	e00b      	b.n	8002c8e <HAL_TIM_PWM_Stop+0xee>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0xe6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c84:	e003      	b.n	8002c8e <HAL_TIM_PWM_Stop+0xee>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0ff      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b14      	cmp	r3, #20
 8002cca:	f200 80f0 	bhi.w	8002eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002d29 	.word	0x08002d29
 8002cd8:	08002eaf 	.word	0x08002eaf
 8002cdc:	08002eaf 	.word	0x08002eaf
 8002ce0:	08002eaf 	.word	0x08002eaf
 8002ce4:	08002d69 	.word	0x08002d69
 8002ce8:	08002eaf 	.word	0x08002eaf
 8002cec:	08002eaf 	.word	0x08002eaf
 8002cf0:	08002eaf 	.word	0x08002eaf
 8002cf4:	08002dab 	.word	0x08002dab
 8002cf8:	08002eaf 	.word	0x08002eaf
 8002cfc:	08002eaf 	.word	0x08002eaf
 8002d00:	08002eaf 	.word	0x08002eaf
 8002d04:	08002deb 	.word	0x08002deb
 8002d08:	08002eaf 	.word	0x08002eaf
 8002d0c:	08002eaf 	.word	0x08002eaf
 8002d10:	08002eaf 	.word	0x08002eaf
 8002d14:	08002e2d 	.word	0x08002e2d
 8002d18:	08002eaf 	.word	0x08002eaf
 8002d1c:	08002eaf 	.word	0x08002eaf
 8002d20:	08002eaf 	.word	0x08002eaf
 8002d24:	08002e6d 	.word	0x08002e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa34 	bl	800319c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]
      break;
 8002d66:	e0a5      	b.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fa86 	bl	8003280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6999      	ldr	r1, [r3, #24]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	021a      	lsls	r2, r3, #8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	619a      	str	r2, [r3, #24]
      break;
 8002da8:	e084      	b.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fadd 	bl	8003370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0208 	orr.w	r2, r2, #8
 8002dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0204 	bic.w	r2, r2, #4
 8002dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	61da      	str	r2, [r3, #28]
      break;
 8002de8:	e064      	b.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fb33 	bl	800345c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	61da      	str	r2, [r3, #28]
      break;
 8002e2a:	e043      	b.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fb6a 	bl	800350c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e6a:	e023      	b.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fb9c 	bl	80035b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002eac:	e002      	b.n	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop

08002ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e0b4      	b.n	800304e <HAL_TIM_ConfigClockSource+0x186>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4b56      	ldr	r3, [pc, #344]	; (8003058 <HAL_TIM_ConfigClockSource+0x190>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1c:	d03e      	beq.n	8002f9c <HAL_TIM_ConfigClockSource+0xd4>
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	f200 8087 	bhi.w	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2a:	f000 8086 	beq.w	800303a <HAL_TIM_ConfigClockSource+0x172>
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f32:	d87f      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b70      	cmp	r3, #112	; 0x70
 8002f36:	d01a      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xa6>
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d87b      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d050      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x11a>
 8002f40:	2b60      	cmp	r3, #96	; 0x60
 8002f42:	d877      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f44:	2b50      	cmp	r3, #80	; 0x50
 8002f46:	d03c      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0xfa>
 8002f48:	2b50      	cmp	r3, #80	; 0x50
 8002f4a:	d873      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d058      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x13a>
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d86f      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f54:	2b30      	cmp	r3, #48	; 0x30
 8002f56:	d064      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x15a>
 8002f58:	2b30      	cmp	r3, #48	; 0x30
 8002f5a:	d86b      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d060      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x15a>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d867      	bhi.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d05c      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x15a>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d05a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x15a>
 8002f6c:	e062      	b.n	8003034 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f7e:	f000 fbe5 	bl	800374c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	609a      	str	r2, [r3, #8]
      break;
 8002f9a:	e04f      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fac:	f000 fbce 	bl	800374c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fbe:	609a      	str	r2, [r3, #8]
      break;
 8002fc0:	e03c      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f000 fb42 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2150      	movs	r1, #80	; 0x50
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fb9b 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8002fe0:	e02c      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f000 fb61 	bl	80036b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2160      	movs	r1, #96	; 0x60
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fb8b 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003000:	e01c      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	461a      	mov	r2, r3
 8003010:	f000 fb22 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fb7b 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003020:	e00c      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4619      	mov	r1, r3
 800302c:	4610      	mov	r0, r2
 800302e:	f000 fb72 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003032:	e003      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e000      	b.n	800303c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800303a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	fffeff88 	.word	0xfffeff88

0800305c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a40      	ldr	r2, [pc, #256]	; (8003170 <TIM_Base_SetConfig+0x114>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307a:	d00f      	beq.n	800309c <TIM_Base_SetConfig+0x40>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3d      	ldr	r2, [pc, #244]	; (8003174 <TIM_Base_SetConfig+0x118>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00b      	beq.n	800309c <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <TIM_Base_SetConfig+0x11c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <TIM_Base_SetConfig+0x40>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3b      	ldr	r2, [pc, #236]	; (800317c <TIM_Base_SetConfig+0x120>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3a      	ldr	r2, [pc, #232]	; (8003180 <TIM_Base_SetConfig+0x124>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d108      	bne.n	80030ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <TIM_Base_SetConfig+0x114>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02b      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d027      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <TIM_Base_SetConfig+0x118>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d023      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <TIM_Base_SetConfig+0x11c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2a      	ldr	r2, [pc, #168]	; (800317c <TIM_Base_SetConfig+0x120>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01b      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <TIM_Base_SetConfig+0x124>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d017      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a28      	ldr	r2, [pc, #160]	; (8003184 <TIM_Base_SetConfig+0x128>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a27      	ldr	r2, [pc, #156]	; (8003188 <TIM_Base_SetConfig+0x12c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00f      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <TIM_Base_SetConfig+0x130>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00b      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a25      	ldr	r2, [pc, #148]	; (8003190 <TIM_Base_SetConfig+0x134>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a24      	ldr	r2, [pc, #144]	; (8003194 <TIM_Base_SetConfig+0x138>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d003      	beq.n	800310e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a23      	ldr	r2, [pc, #140]	; (8003198 <TIM_Base_SetConfig+0x13c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d108      	bne.n	8003120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <TIM_Base_SetConfig+0x114>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0xf8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <TIM_Base_SetConfig+0x124>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d103      	bne.n	800315c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	615a      	str	r2, [r3, #20]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800
 800317c:	40000c00 	.word	0x40000c00
 8003180:	40010400 	.word	0x40010400
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	40001800 	.word	0x40001800
 8003194:	40001c00 	.word	0x40001c00
 8003198:	40002000 	.word	0x40002000

0800319c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0201 	bic.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <TIM_OC1_SetConfig+0xd8>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f023 0302 	bic.w	r3, r3, #2
 80031e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <TIM_OC1_SetConfig+0xdc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_OC1_SetConfig+0x64>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a20      	ldr	r2, [pc, #128]	; (800327c <TIM_OC1_SetConfig+0xe0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10c      	bne.n	800321a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0308 	bic.w	r3, r3, #8
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <TIM_OC1_SetConfig+0xdc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC1_SetConfig+0x8e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <TIM_OC1_SetConfig+0xe0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	fffeff8f 	.word	0xfffeff8f
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400

08003280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0210 	bic.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4b2e      	ldr	r3, [pc, #184]	; (8003364 <TIM_OC2_SetConfig+0xe4>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0320 	bic.w	r3, r3, #32
 80032ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a23      	ldr	r2, [pc, #140]	; (8003368 <TIM_OC2_SetConfig+0xe8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC2_SetConfig+0x68>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <TIM_OC2_SetConfig+0xec>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10d      	bne.n	8003304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <TIM_OC2_SetConfig+0xe8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC2_SetConfig+0x94>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <TIM_OC2_SetConfig+0xec>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d113      	bne.n	800333c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	feff8fff 	.word	0xfeff8fff
 8003368:	40010000 	.word	0x40010000
 800336c:	40010400 	.word	0x40010400

08003370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <TIM_OC3_SetConfig+0xe0>)
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a22      	ldr	r2, [pc, #136]	; (8003454 <TIM_OC3_SetConfig+0xe4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_OC3_SetConfig+0x66>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <TIM_OC3_SetConfig+0xe8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a17      	ldr	r2, [pc, #92]	; (8003454 <TIM_OC3_SetConfig+0xe4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_OC3_SetConfig+0x92>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <TIM_OC3_SetConfig+0xe8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d113      	bne.n	800342a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	fffeff8f 	.word	0xfffeff8f
 8003454:	40010000 	.word	0x40010000
 8003458:	40010400 	.word	0x40010400

0800345c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <TIM_OC4_SetConfig+0xa4>)
 8003488:	4013      	ands	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <TIM_OC4_SetConfig+0xa8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_OC4_SetConfig+0x68>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <TIM_OC4_SetConfig+0xac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	feff8fff 	.word	0xfeff8fff
 8003504:	40010000 	.word	0x40010000
 8003508:	40010400 	.word	0x40010400

0800350c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <TIM_OC5_SetConfig+0x98>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800354c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <TIM_OC5_SetConfig+0x9c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_OC5_SetConfig+0x5e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a11      	ldr	r2, [pc, #68]	; (80035ac <TIM_OC5_SetConfig+0xa0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d109      	bne.n	800357e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	fffeff8f 	.word	0xfffeff8f
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010400 	.word	0x40010400

080035b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4b1c      	ldr	r3, [pc, #112]	; (800364c <TIM_OC6_SetConfig+0x9c>)
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <TIM_OC6_SetConfig+0xa0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_OC6_SetConfig+0x60>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <TIM_OC6_SetConfig+0xa4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d109      	bne.n	8003624 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	029b      	lsls	r3, r3, #10
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	feff8fff 	.word	0xfeff8fff
 8003650:	40010000 	.word	0x40010000
 8003654:	40010400 	.word	0x40010400

08003658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 030a 	bic.w	r3, r3, #10
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0210 	bic.w	r2, r3, #16
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	031b      	lsls	r3, r3, #12
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	f043 0307 	orr.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	431a      	orrs	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e06d      	b.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a30      	ldr	r2, [pc, #192]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800382a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a20      	ldr	r2, [pc, #128]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d01d      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10c      	bne.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40010400 	.word	0x40010400
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40001800 	.word	0x40001800

080038f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e040      	b.n	8003988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fae8 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f974 	bl	8003c20 <UART_SetConfig>
 8003938:	4603      	mov	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e022      	b.n	8003988 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fbcc 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800395e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fc53 	bl	800422c <UART_CheckIdleState>
 8003986:	4603      	mov	r3, r0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d171      	bne.n	8003a8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_UART_Transmit+0x24>
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e06a      	b.n	8003a8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	; 0x21
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c6:	f7fd fb6b 	bl	80010a0 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x68>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a00:	e02c      	b.n	8003a5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fc5a 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e038      	b.n	8003a8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	3302      	adds	r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e007      	b.n	8003a4a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1cc      	bne.n	8003a02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2140      	movs	r1, #64	; 0x40
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fc27 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e005      	b.n	8003a8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b08a      	sub	sp, #40	; 0x28
 8003a9a:	af02      	add	r7, sp, #8
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	f040 80b1 	bne.w	8003c14 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_UART_Receive+0x28>
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0a9      	b.n	8003c16 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2222      	movs	r2, #34	; 0x22
 8003ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fae2 	bl	80010a0 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d10e      	bne.n	8003b16 <HAL_UART_Receive+0x80>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <HAL_UART_Receive+0x76>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0a:	e02d      	b.n	8003b68 <HAL_UART_Receive+0xd2>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	22ff      	movs	r2, #255	; 0xff
 8003b10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b14:	e028      	b.n	8003b68 <HAL_UART_Receive+0xd2>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_UART_Receive+0xa4>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_UART_Receive+0x9a>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	22ff      	movs	r2, #255	; 0xff
 8003b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b2e:	e01b      	b.n	8003b68 <HAL_UART_Receive+0xd2>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	227f      	movs	r2, #127	; 0x7f
 8003b34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b38:	e016      	b.n	8003b68 <HAL_UART_Receive+0xd2>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b42:	d10d      	bne.n	8003b60 <HAL_UART_Receive+0xca>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_UART_Receive+0xc0>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	227f      	movs	r2, #127	; 0x7f
 8003b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b54:	e008      	b.n	8003b68 <HAL_UART_Receive+0xd2>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	223f      	movs	r2, #63	; 0x3f
 8003b5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Receive+0xd2>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d108      	bne.n	8003b8c <HAL_UART_Receive+0xf6>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e003      	b.n	8003b94 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b94:	e032      	b.n	8003bfc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fb90 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e032      	b.n	8003c16 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	8a7b      	ldrh	r3, [r7, #18]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3302      	adds	r3, #2
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	e00c      	b.n	8003bea <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	8a7b      	ldrh	r3, [r7, #18]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4013      	ands	r3, r2
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1c6      	bne.n	8003b96 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4ba6      	ldr	r3, [pc, #664]	; (8003ee4 <UART_SetConfig+0x2c4>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a94      	ldr	r2, [pc, #592]	; (8003ee8 <UART_SetConfig+0x2c8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d120      	bne.n	8003cde <UART_SetConfig+0xbe>
 8003c9c:	4b93      	ldr	r3, [pc, #588]	; (8003eec <UART_SetConfig+0x2cc>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d816      	bhi.n	8003cd8 <UART_SetConfig+0xb8>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <UART_SetConfig+0x90>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003ccd 	.word	0x08003ccd
 8003cb8:	08003cc7 	.word	0x08003cc7
 8003cbc:	08003cd3 	.word	0x08003cd3
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e150      	b.n	8003f68 <UART_SetConfig+0x348>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e14d      	b.n	8003f68 <UART_SetConfig+0x348>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e14a      	b.n	8003f68 <UART_SetConfig+0x348>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e147      	b.n	8003f68 <UART_SetConfig+0x348>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e144      	b.n	8003f68 <UART_SetConfig+0x348>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a83      	ldr	r2, [pc, #524]	; (8003ef0 <UART_SetConfig+0x2d0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d132      	bne.n	8003d4e <UART_SetConfig+0x12e>
 8003ce8:	4b80      	ldr	r3, [pc, #512]	; (8003eec <UART_SetConfig+0x2cc>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d828      	bhi.n	8003d48 <UART_SetConfig+0x128>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0xdc>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d49 	.word	0x08003d49
 8003d04:	08003d49 	.word	0x08003d49
 8003d08:	08003d49 	.word	0x08003d49
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d49 	.word	0x08003d49
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08003d49 	.word	0x08003d49
 8003d1c:	08003d37 	.word	0x08003d37
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d49 	.word	0x08003d49
 8003d2c:	08003d43 	.word	0x08003d43
 8003d30:	2300      	movs	r3, #0
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e118      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e115      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e112      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d42:	2308      	movs	r3, #8
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e10f      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e10c      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a68      	ldr	r2, [pc, #416]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d120      	bne.n	8003d9a <UART_SetConfig+0x17a>
 8003d58:	4b64      	ldr	r3, [pc, #400]	; (8003eec <UART_SetConfig+0x2cc>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d62:	2b30      	cmp	r3, #48	; 0x30
 8003d64:	d013      	beq.n	8003d8e <UART_SetConfig+0x16e>
 8003d66:	2b30      	cmp	r3, #48	; 0x30
 8003d68:	d814      	bhi.n	8003d94 <UART_SetConfig+0x174>
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d009      	beq.n	8003d82 <UART_SetConfig+0x162>
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d810      	bhi.n	8003d94 <UART_SetConfig+0x174>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <UART_SetConfig+0x15c>
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d006      	beq.n	8003d88 <UART_SetConfig+0x168>
 8003d7a:	e00b      	b.n	8003d94 <UART_SetConfig+0x174>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e0f2      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d82:	2302      	movs	r3, #2
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e0ef      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e0ec      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d8e:	2308      	movs	r3, #8
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e0e9      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d94:	2310      	movs	r3, #16
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e0e6      	b.n	8003f68 <UART_SetConfig+0x348>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a56      	ldr	r2, [pc, #344]	; (8003ef8 <UART_SetConfig+0x2d8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d120      	bne.n	8003de6 <UART_SetConfig+0x1c6>
 8003da4:	4b51      	ldr	r3, [pc, #324]	; (8003eec <UART_SetConfig+0x2cc>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dae:	2bc0      	cmp	r3, #192	; 0xc0
 8003db0:	d013      	beq.n	8003dda <UART_SetConfig+0x1ba>
 8003db2:	2bc0      	cmp	r3, #192	; 0xc0
 8003db4:	d814      	bhi.n	8003de0 <UART_SetConfig+0x1c0>
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d009      	beq.n	8003dce <UART_SetConfig+0x1ae>
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d810      	bhi.n	8003de0 <UART_SetConfig+0x1c0>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <UART_SetConfig+0x1a8>
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d006      	beq.n	8003dd4 <UART_SetConfig+0x1b4>
 8003dc6:	e00b      	b.n	8003de0 <UART_SetConfig+0x1c0>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e0cc      	b.n	8003f68 <UART_SetConfig+0x348>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e0c9      	b.n	8003f68 <UART_SetConfig+0x348>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e0c6      	b.n	8003f68 <UART_SetConfig+0x348>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e0c3      	b.n	8003f68 <UART_SetConfig+0x348>
 8003de0:	2310      	movs	r3, #16
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e0c0      	b.n	8003f68 <UART_SetConfig+0x348>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a44      	ldr	r2, [pc, #272]	; (8003efc <UART_SetConfig+0x2dc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d125      	bne.n	8003e3c <UART_SetConfig+0x21c>
 8003df0:	4b3e      	ldr	r3, [pc, #248]	; (8003eec <UART_SetConfig+0x2cc>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfe:	d017      	beq.n	8003e30 <UART_SetConfig+0x210>
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d817      	bhi.n	8003e36 <UART_SetConfig+0x216>
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	d00b      	beq.n	8003e24 <UART_SetConfig+0x204>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e10:	d811      	bhi.n	8003e36 <UART_SetConfig+0x216>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <UART_SetConfig+0x1fe>
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1a:	d006      	beq.n	8003e2a <UART_SetConfig+0x20a>
 8003e1c:	e00b      	b.n	8003e36 <UART_SetConfig+0x216>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e0a1      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e24:	2302      	movs	r3, #2
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e09e      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e09b      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e30:	2308      	movs	r3, #8
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e098      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e36:	2310      	movs	r3, #16
 8003e38:	77fb      	strb	r3, [r7, #31]
 8003e3a:	e095      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2f      	ldr	r2, [pc, #188]	; (8003f00 <UART_SetConfig+0x2e0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d125      	bne.n	8003e92 <UART_SetConfig+0x272>
 8003e46:	4b29      	ldr	r3, [pc, #164]	; (8003eec <UART_SetConfig+0x2cc>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e54:	d017      	beq.n	8003e86 <UART_SetConfig+0x266>
 8003e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e5a:	d817      	bhi.n	8003e8c <UART_SetConfig+0x26c>
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d00b      	beq.n	8003e7a <UART_SetConfig+0x25a>
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e66:	d811      	bhi.n	8003e8c <UART_SetConfig+0x26c>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <UART_SetConfig+0x254>
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d006      	beq.n	8003e80 <UART_SetConfig+0x260>
 8003e72:	e00b      	b.n	8003e8c <UART_SetConfig+0x26c>
 8003e74:	2301      	movs	r3, #1
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e076      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e073      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e80:	2304      	movs	r3, #4
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e070      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e86:	2308      	movs	r3, #8
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	e06d      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e06a      	b.n	8003f68 <UART_SetConfig+0x348>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <UART_SetConfig+0x2e4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d138      	bne.n	8003f0e <UART_SetConfig+0x2ee>
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <UART_SetConfig+0x2cc>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eaa:	d017      	beq.n	8003edc <UART_SetConfig+0x2bc>
 8003eac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eb0:	d82a      	bhi.n	8003f08 <UART_SetConfig+0x2e8>
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d00b      	beq.n	8003ed0 <UART_SetConfig+0x2b0>
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d824      	bhi.n	8003f08 <UART_SetConfig+0x2e8>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <UART_SetConfig+0x2aa>
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	d006      	beq.n	8003ed6 <UART_SetConfig+0x2b6>
 8003ec8:	e01e      	b.n	8003f08 <UART_SetConfig+0x2e8>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e04b      	b.n	8003f68 <UART_SetConfig+0x348>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e048      	b.n	8003f68 <UART_SetConfig+0x348>
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e045      	b.n	8003f68 <UART_SetConfig+0x348>
 8003edc:	2308      	movs	r3, #8
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e042      	b.n	8003f68 <UART_SetConfig+0x348>
 8003ee2:	bf00      	nop
 8003ee4:	efff69f3 	.word	0xefff69f3
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40004400 	.word	0x40004400
 8003ef4:	40004800 	.word	0x40004800
 8003ef8:	40004c00 	.word	0x40004c00
 8003efc:	40005000 	.word	0x40005000
 8003f00:	40011400 	.word	0x40011400
 8003f04:	40007800 	.word	0x40007800
 8003f08:	2310      	movs	r3, #16
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e02c      	b.n	8003f68 <UART_SetConfig+0x348>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a72      	ldr	r2, [pc, #456]	; (80040dc <UART_SetConfig+0x4bc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d125      	bne.n	8003f64 <UART_SetConfig+0x344>
 8003f18:	4b71      	ldr	r3, [pc, #452]	; (80040e0 <UART_SetConfig+0x4c0>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f26:	d017      	beq.n	8003f58 <UART_SetConfig+0x338>
 8003f28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f2c:	d817      	bhi.n	8003f5e <UART_SetConfig+0x33e>
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	d00b      	beq.n	8003f4c <UART_SetConfig+0x32c>
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f38:	d811      	bhi.n	8003f5e <UART_SetConfig+0x33e>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <UART_SetConfig+0x326>
 8003f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f42:	d006      	beq.n	8003f52 <UART_SetConfig+0x332>
 8003f44:	e00b      	b.n	8003f5e <UART_SetConfig+0x33e>
 8003f46:	2300      	movs	r3, #0
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e00d      	b.n	8003f68 <UART_SetConfig+0x348>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e00a      	b.n	8003f68 <UART_SetConfig+0x348>
 8003f52:	2304      	movs	r3, #4
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e007      	b.n	8003f68 <UART_SetConfig+0x348>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e004      	b.n	8003f68 <UART_SetConfig+0x348>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e001      	b.n	8003f68 <UART_SetConfig+0x348>
 8003f64:	2310      	movs	r3, #16
 8003f66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	d15b      	bne.n	800402a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f72:	7ffb      	ldrb	r3, [r7, #31]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d828      	bhi.n	8003fca <UART_SetConfig+0x3aa>
 8003f78:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0x360>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fb5 	.word	0x08003fb5
 8003f8c:	08003fcb 	.word	0x08003fcb
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fcb 	.word	0x08003fcb
 8003f98:	08003fcb 	.word	0x08003fcb
 8003f9c:	08003fcb 	.word	0x08003fcb
 8003fa0:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fd fffa 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8003fa8:	61b8      	str	r0, [r7, #24]
        break;
 8003faa:	e013      	b.n	8003fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7fe f80a 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8003fb0:	61b8      	str	r0, [r7, #24]
        break;
 8003fb2:	e00f      	b.n	8003fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <UART_SetConfig+0x4c4>)
 8003fb6:	61bb      	str	r3, [r7, #24]
        break;
 8003fb8:	e00c      	b.n	8003fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7fd ff1d 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8003fbe:	61b8      	str	r0, [r7, #24]
        break;
 8003fc0:	e008      	b.n	8003fd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e004      	b.n	8003fd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d074      	beq.n	80040c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	005a      	lsls	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	d916      	bls.n	8004024 <UART_SetConfig+0x404>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d212      	bcs.n	8004024 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f023 030f 	bic.w	r3, r3, #15
 8004006:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	b29b      	uxth	r3, r3
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	b29a      	uxth	r2, r3
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	4313      	orrs	r3, r2
 8004018:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	89fa      	ldrh	r2, [r7, #14]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e04f      	b.n	80040c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	77bb      	strb	r3, [r7, #30]
 8004028:	e04c      	b.n	80040c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800402a:	7ffb      	ldrb	r3, [r7, #31]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d828      	bhi.n	8004082 <UART_SetConfig+0x462>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x418>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fd ff9e 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8004060:	61b8      	str	r0, [r7, #24]
        break;
 8004062:	e013      	b.n	800408c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fd ffae 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8004068:	61b8      	str	r0, [r7, #24]
        break;
 800406a:	e00f      	b.n	800408c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <UART_SetConfig+0x4c4>)
 800406e:	61bb      	str	r3, [r7, #24]
        break;
 8004070:	e00c      	b.n	800408c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fd fec1 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8004076:	61b8      	str	r0, [r7, #24]
        break;
 8004078:	e008      	b.n	800408c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	61bb      	str	r3, [r7, #24]
        break;
 8004080:	e004      	b.n	800408c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	77bb      	strb	r3, [r7, #30]
        break;
 800408a:	bf00      	nop
    }

    if (pclk != 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	085a      	lsrs	r2, r3, #1
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d909      	bls.n	80040c0 <UART_SetConfig+0x4a0>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d205      	bcs.n	80040c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e001      	b.n	80040c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40007c00 	.word	0x40007c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fc ff30 	bl	80010a0 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10e      	bne.n	800426e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f831 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e027      	b.n	80042be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d10e      	bne.n	800429a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f81b 	bl	80042c6 <UART_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e011      	b.n	80042be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b09c      	sub	sp, #112	; 0x70
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	e0a7      	b.n	8004428 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	f000 80a3 	beq.w	8004428 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fc fedd 	bl	80010a0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80042f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d13f      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430c:	667b      	str	r3, [r7, #100]	; 0x64
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004316:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004318:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800431c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e6      	bne.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	663b      	str	r3, [r7, #96]	; 0x60
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3308      	adds	r3, #8
 8004348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800434a:	64ba      	str	r2, [r7, #72]	; 0x48
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e068      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d050      	beq.n	8004428 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	d148      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800439e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
 80043c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e6      	bne.n	80043a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	613b      	str	r3, [r7, #16]
   return(result);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3308      	adds	r3, #8
 80043f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043f2:	623a      	str	r2, [r7, #32]
 80043f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	69f9      	ldr	r1, [r7, #28]
 80043f8:	6a3a      	ldr	r2, [r7, #32]
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e010      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4013      	ands	r3, r2
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	429a      	cmp	r2, r3
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	429a      	cmp	r2, r3
 8004444:	f43f af48 	beq.w	80042d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3770      	adds	r7, #112	; 0x70
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <__cvt>:
 8004452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004454:	ed2d 8b02 	vpush	{d8}
 8004458:	eeb0 8b40 	vmov.f64	d8, d0
 800445c:	b085      	sub	sp, #20
 800445e:	4617      	mov	r7, r2
 8004460:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004462:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004464:	ee18 2a90 	vmov	r2, s17
 8004468:	f025 0520 	bic.w	r5, r5, #32
 800446c:	2a00      	cmp	r2, #0
 800446e:	bfb6      	itet	lt
 8004470:	222d      	movlt	r2, #45	; 0x2d
 8004472:	2200      	movge	r2, #0
 8004474:	eeb1 8b40 	vneglt.f64	d8, d0
 8004478:	2d46      	cmp	r5, #70	; 0x46
 800447a:	460c      	mov	r4, r1
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	d004      	beq.n	800448a <__cvt+0x38>
 8004480:	2d45      	cmp	r5, #69	; 0x45
 8004482:	d100      	bne.n	8004486 <__cvt+0x34>
 8004484:	3401      	adds	r4, #1
 8004486:	2102      	movs	r1, #2
 8004488:	e000      	b.n	800448c <__cvt+0x3a>
 800448a:	2103      	movs	r1, #3
 800448c:	ab03      	add	r3, sp, #12
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	ab02      	add	r3, sp, #8
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	4622      	mov	r2, r4
 8004496:	4633      	mov	r3, r6
 8004498:	eeb0 0b48 	vmov.f64	d0, d8
 800449c:	f000 fe30 	bl	8005100 <_dtoa_r>
 80044a0:	2d47      	cmp	r5, #71	; 0x47
 80044a2:	d101      	bne.n	80044a8 <__cvt+0x56>
 80044a4:	07fb      	lsls	r3, r7, #31
 80044a6:	d51a      	bpl.n	80044de <__cvt+0x8c>
 80044a8:	2d46      	cmp	r5, #70	; 0x46
 80044aa:	eb00 0204 	add.w	r2, r0, r4
 80044ae:	d10c      	bne.n	80044ca <__cvt+0x78>
 80044b0:	7803      	ldrb	r3, [r0, #0]
 80044b2:	2b30      	cmp	r3, #48	; 0x30
 80044b4:	d107      	bne.n	80044c6 <__cvt+0x74>
 80044b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044be:	bf1c      	itt	ne
 80044c0:	f1c4 0401 	rsbne	r4, r4, #1
 80044c4:	6034      	strne	r4, [r6, #0]
 80044c6:	6833      	ldr	r3, [r6, #0]
 80044c8:	441a      	add	r2, r3
 80044ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf08      	it	eq
 80044d4:	9203      	streq	r2, [sp, #12]
 80044d6:	2130      	movs	r1, #48	; 0x30
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	4293      	cmp	r3, r2
 80044dc:	d307      	bcc.n	80044ee <__cvt+0x9c>
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044e2:	1a1b      	subs	r3, r3, r0
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	b005      	add	sp, #20
 80044e8:	ecbd 8b02 	vpop	{d8}
 80044ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ee:	1c5c      	adds	r4, r3, #1
 80044f0:	9403      	str	r4, [sp, #12]
 80044f2:	7019      	strb	r1, [r3, #0]
 80044f4:	e7f0      	b.n	80044d8 <__cvt+0x86>

080044f6 <__exponent>:
 80044f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f8:	4603      	mov	r3, r0
 80044fa:	2900      	cmp	r1, #0
 80044fc:	bfb8      	it	lt
 80044fe:	4249      	neglt	r1, r1
 8004500:	f803 2b02 	strb.w	r2, [r3], #2
 8004504:	bfb4      	ite	lt
 8004506:	222d      	movlt	r2, #45	; 0x2d
 8004508:	222b      	movge	r2, #43	; 0x2b
 800450a:	2909      	cmp	r1, #9
 800450c:	7042      	strb	r2, [r0, #1]
 800450e:	dd2a      	ble.n	8004566 <__exponent+0x70>
 8004510:	f10d 0207 	add.w	r2, sp, #7
 8004514:	4617      	mov	r7, r2
 8004516:	260a      	movs	r6, #10
 8004518:	4694      	mov	ip, r2
 800451a:	fb91 f5f6 	sdiv	r5, r1, r6
 800451e:	fb06 1415 	mls	r4, r6, r5, r1
 8004522:	3430      	adds	r4, #48	; 0x30
 8004524:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004528:	460c      	mov	r4, r1
 800452a:	2c63      	cmp	r4, #99	; 0x63
 800452c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004530:	4629      	mov	r1, r5
 8004532:	dcf1      	bgt.n	8004518 <__exponent+0x22>
 8004534:	3130      	adds	r1, #48	; 0x30
 8004536:	f1ac 0402 	sub.w	r4, ip, #2
 800453a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800453e:	1c41      	adds	r1, r0, #1
 8004540:	4622      	mov	r2, r4
 8004542:	42ba      	cmp	r2, r7
 8004544:	d30a      	bcc.n	800455c <__exponent+0x66>
 8004546:	f10d 0209 	add.w	r2, sp, #9
 800454a:	eba2 020c 	sub.w	r2, r2, ip
 800454e:	42bc      	cmp	r4, r7
 8004550:	bf88      	it	hi
 8004552:	2200      	movhi	r2, #0
 8004554:	4413      	add	r3, r2
 8004556:	1a18      	subs	r0, r3, r0
 8004558:	b003      	add	sp, #12
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004560:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004564:	e7ed      	b.n	8004542 <__exponent+0x4c>
 8004566:	2330      	movs	r3, #48	; 0x30
 8004568:	3130      	adds	r1, #48	; 0x30
 800456a:	7083      	strb	r3, [r0, #2]
 800456c:	70c1      	strb	r1, [r0, #3]
 800456e:	1d03      	adds	r3, r0, #4
 8004570:	e7f1      	b.n	8004556 <__exponent+0x60>
 8004572:	0000      	movs	r0, r0
 8004574:	0000      	movs	r0, r0
	...

08004578 <_printf_float>:
 8004578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457c:	b08b      	sub	sp, #44	; 0x2c
 800457e:	460c      	mov	r4, r1
 8004580:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004584:	4616      	mov	r6, r2
 8004586:	461f      	mov	r7, r3
 8004588:	4605      	mov	r5, r0
 800458a:	f000 fcbb 	bl	8004f04 <_localeconv_r>
 800458e:	f8d0 b000 	ldr.w	fp, [r0]
 8004592:	4658      	mov	r0, fp
 8004594:	f7fb fea4 	bl	80002e0 <strlen>
 8004598:	2300      	movs	r3, #0
 800459a:	9308      	str	r3, [sp, #32]
 800459c:	f8d8 3000 	ldr.w	r3, [r8]
 80045a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	3307      	adds	r3, #7
 80045a8:	f023 0307 	bic.w	r3, r3, #7
 80045ac:	f103 0108 	add.w	r1, r3, #8
 80045b0:	f8c8 1000 	str.w	r1, [r8]
 80045b4:	ed93 0b00 	vldr	d0, [r3]
 80045b8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004818 <_printf_float+0x2a0>
 80045bc:	eeb0 7bc0 	vabs.f64	d7, d0
 80045c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80045cc:	4682      	mov	sl, r0
 80045ce:	dd24      	ble.n	800461a <_printf_float+0xa2>
 80045d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80045d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d8:	d502      	bpl.n	80045e0 <_printf_float+0x68>
 80045da:	232d      	movs	r3, #45	; 0x2d
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e0:	498f      	ldr	r1, [pc, #572]	; (8004820 <_printf_float+0x2a8>)
 80045e2:	4b90      	ldr	r3, [pc, #576]	; (8004824 <_printf_float+0x2ac>)
 80045e4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045e8:	bf94      	ite	ls
 80045ea:	4688      	movls	r8, r1
 80045ec:	4698      	movhi	r8, r3
 80045ee:	2303      	movs	r3, #3
 80045f0:	6123      	str	r3, [r4, #16]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	2300      	movs	r3, #0
 80045f8:	6022      	str	r2, [r4, #0]
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	9700      	str	r7, [sp, #0]
 80045fe:	4633      	mov	r3, r6
 8004600:	aa09      	add	r2, sp, #36	; 0x24
 8004602:	4621      	mov	r1, r4
 8004604:	4628      	mov	r0, r5
 8004606:	f000 f9d1 	bl	80049ac <_printf_common>
 800460a:	3001      	adds	r0, #1
 800460c:	f040 808a 	bne.w	8004724 <_printf_float+0x1ac>
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	b00b      	add	sp, #44	; 0x2c
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461a:	eeb4 0b40 	vcmp.f64	d0, d0
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d709      	bvc.n	8004638 <_printf_float+0xc0>
 8004624:	ee10 3a90 	vmov	r3, s1
 8004628:	2b00      	cmp	r3, #0
 800462a:	bfbc      	itt	lt
 800462c:	232d      	movlt	r3, #45	; 0x2d
 800462e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004632:	497d      	ldr	r1, [pc, #500]	; (8004828 <_printf_float+0x2b0>)
 8004634:	4b7d      	ldr	r3, [pc, #500]	; (800482c <_printf_float+0x2b4>)
 8004636:	e7d5      	b.n	80045e4 <_printf_float+0x6c>
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800463e:	9104      	str	r1, [sp, #16]
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	d13c      	bne.n	80046be <_printf_float+0x146>
 8004644:	2306      	movs	r3, #6
 8004646:	6063      	str	r3, [r4, #4]
 8004648:	2300      	movs	r3, #0
 800464a:	9303      	str	r3, [sp, #12]
 800464c:	ab08      	add	r3, sp, #32
 800464e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004652:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004656:	ab07      	add	r3, sp, #28
 8004658:	6861      	ldr	r1, [r4, #4]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	6022      	str	r2, [r4, #0]
 800465e:	f10d 031b 	add.w	r3, sp, #27
 8004662:	4628      	mov	r0, r5
 8004664:	f7ff fef5 	bl	8004452 <__cvt>
 8004668:	9b04      	ldr	r3, [sp, #16]
 800466a:	9907      	ldr	r1, [sp, #28]
 800466c:	2b47      	cmp	r3, #71	; 0x47
 800466e:	4680      	mov	r8, r0
 8004670:	d108      	bne.n	8004684 <_printf_float+0x10c>
 8004672:	1cc8      	adds	r0, r1, #3
 8004674:	db02      	blt.n	800467c <_printf_float+0x104>
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	4299      	cmp	r1, r3
 800467a:	dd41      	ble.n	8004700 <_printf_float+0x188>
 800467c:	f1a9 0902 	sub.w	r9, r9, #2
 8004680:	fa5f f989 	uxtb.w	r9, r9
 8004684:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004688:	d820      	bhi.n	80046cc <_printf_float+0x154>
 800468a:	3901      	subs	r1, #1
 800468c:	464a      	mov	r2, r9
 800468e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004692:	9107      	str	r1, [sp, #28]
 8004694:	f7ff ff2f 	bl	80044f6 <__exponent>
 8004698:	9a08      	ldr	r2, [sp, #32]
 800469a:	9004      	str	r0, [sp, #16]
 800469c:	1813      	adds	r3, r2, r0
 800469e:	2a01      	cmp	r2, #1
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	dc02      	bgt.n	80046aa <_printf_float+0x132>
 80046a4:	6822      	ldr	r2, [r4, #0]
 80046a6:	07d2      	lsls	r2, r2, #31
 80046a8:	d501      	bpl.n	80046ae <_printf_float+0x136>
 80046aa:	3301      	adds	r3, #1
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0a2      	beq.n	80045fc <_printf_float+0x84>
 80046b6:	232d      	movs	r3, #45	; 0x2d
 80046b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046bc:	e79e      	b.n	80045fc <_printf_float+0x84>
 80046be:	9904      	ldr	r1, [sp, #16]
 80046c0:	2947      	cmp	r1, #71	; 0x47
 80046c2:	d1c1      	bne.n	8004648 <_printf_float+0xd0>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1bf      	bne.n	8004648 <_printf_float+0xd0>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e7bc      	b.n	8004646 <_printf_float+0xce>
 80046cc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80046d0:	d118      	bne.n	8004704 <_printf_float+0x18c>
 80046d2:	2900      	cmp	r1, #0
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	dd0b      	ble.n	80046f0 <_printf_float+0x178>
 80046d8:	6121      	str	r1, [r4, #16]
 80046da:	b913      	cbnz	r3, 80046e2 <_printf_float+0x16a>
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	07d0      	lsls	r0, r2, #31
 80046e0:	d502      	bpl.n	80046e8 <_printf_float+0x170>
 80046e2:	3301      	adds	r3, #1
 80046e4:	440b      	add	r3, r1
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	2300      	movs	r3, #0
 80046ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80046ec:	9304      	str	r3, [sp, #16]
 80046ee:	e7de      	b.n	80046ae <_printf_float+0x136>
 80046f0:	b913      	cbnz	r3, 80046f8 <_printf_float+0x180>
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	07d2      	lsls	r2, r2, #31
 80046f6:	d501      	bpl.n	80046fc <_printf_float+0x184>
 80046f8:	3302      	adds	r3, #2
 80046fa:	e7f4      	b.n	80046e6 <_printf_float+0x16e>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e7f2      	b.n	80046e6 <_printf_float+0x16e>
 8004700:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004704:	9b08      	ldr	r3, [sp, #32]
 8004706:	4299      	cmp	r1, r3
 8004708:	db05      	blt.n	8004716 <_printf_float+0x19e>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	6121      	str	r1, [r4, #16]
 800470e:	07d8      	lsls	r0, r3, #31
 8004710:	d5ea      	bpl.n	80046e8 <_printf_float+0x170>
 8004712:	1c4b      	adds	r3, r1, #1
 8004714:	e7e7      	b.n	80046e6 <_printf_float+0x16e>
 8004716:	2900      	cmp	r1, #0
 8004718:	bfd4      	ite	le
 800471a:	f1c1 0202 	rsble	r2, r1, #2
 800471e:	2201      	movgt	r2, #1
 8004720:	4413      	add	r3, r2
 8004722:	e7e0      	b.n	80046e6 <_printf_float+0x16e>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	055a      	lsls	r2, r3, #21
 8004728:	d407      	bmi.n	800473a <_printf_float+0x1c2>
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	4642      	mov	r2, r8
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	d12a      	bne.n	800478e <_printf_float+0x216>
 8004738:	e76a      	b.n	8004610 <_printf_float+0x98>
 800473a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800473e:	f240 80e0 	bls.w	8004902 <_printf_float+0x38a>
 8004742:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004746:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474e:	d133      	bne.n	80047b8 <_printf_float+0x240>
 8004750:	4a37      	ldr	r2, [pc, #220]	; (8004830 <_printf_float+0x2b8>)
 8004752:	2301      	movs	r3, #1
 8004754:	4631      	mov	r1, r6
 8004756:	4628      	mov	r0, r5
 8004758:	47b8      	blx	r7
 800475a:	3001      	adds	r0, #1
 800475c:	f43f af58 	beq.w	8004610 <_printf_float+0x98>
 8004760:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004764:	429a      	cmp	r2, r3
 8004766:	db02      	blt.n	800476e <_printf_float+0x1f6>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	07d8      	lsls	r0, r3, #31
 800476c:	d50f      	bpl.n	800478e <_printf_float+0x216>
 800476e:	4653      	mov	r3, sl
 8004770:	465a      	mov	r2, fp
 8004772:	4631      	mov	r1, r6
 8004774:	4628      	mov	r0, r5
 8004776:	47b8      	blx	r7
 8004778:	3001      	adds	r0, #1
 800477a:	f43f af49 	beq.w	8004610 <_printf_float+0x98>
 800477e:	f04f 0800 	mov.w	r8, #0
 8004782:	f104 091a 	add.w	r9, r4, #26
 8004786:	9b08      	ldr	r3, [sp, #32]
 8004788:	3b01      	subs	r3, #1
 800478a:	4543      	cmp	r3, r8
 800478c:	dc09      	bgt.n	80047a2 <_printf_float+0x22a>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	079b      	lsls	r3, r3, #30
 8004792:	f100 8106 	bmi.w	80049a2 <_printf_float+0x42a>
 8004796:	68e0      	ldr	r0, [r4, #12]
 8004798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479a:	4298      	cmp	r0, r3
 800479c:	bfb8      	it	lt
 800479e:	4618      	movlt	r0, r3
 80047a0:	e738      	b.n	8004614 <_printf_float+0x9c>
 80047a2:	2301      	movs	r3, #1
 80047a4:	464a      	mov	r2, r9
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f af2f 	beq.w	8004610 <_printf_float+0x98>
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	e7e6      	b.n	8004786 <_printf_float+0x20e>
 80047b8:	9b07      	ldr	r3, [sp, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	dc3a      	bgt.n	8004834 <_printf_float+0x2bc>
 80047be:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <_printf_float+0x2b8>)
 80047c0:	2301      	movs	r3, #1
 80047c2:	4631      	mov	r1, r6
 80047c4:	4628      	mov	r0, r5
 80047c6:	47b8      	blx	r7
 80047c8:	3001      	adds	r0, #1
 80047ca:	f43f af21 	beq.w	8004610 <_printf_float+0x98>
 80047ce:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d102      	bne.n	80047dc <_printf_float+0x264>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	07d9      	lsls	r1, r3, #31
 80047da:	d5d8      	bpl.n	800478e <_printf_float+0x216>
 80047dc:	4653      	mov	r3, sl
 80047de:	465a      	mov	r2, fp
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	f43f af12 	beq.w	8004610 <_printf_float+0x98>
 80047ec:	f04f 0900 	mov.w	r9, #0
 80047f0:	f104 0a1a 	add.w	sl, r4, #26
 80047f4:	9b07      	ldr	r3, [sp, #28]
 80047f6:	425b      	negs	r3, r3
 80047f8:	454b      	cmp	r3, r9
 80047fa:	dc01      	bgt.n	8004800 <_printf_float+0x288>
 80047fc:	9b08      	ldr	r3, [sp, #32]
 80047fe:	e795      	b.n	800472c <_printf_float+0x1b4>
 8004800:	2301      	movs	r3, #1
 8004802:	4652      	mov	r2, sl
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	f43f af00 	beq.w	8004610 <_printf_float+0x98>
 8004810:	f109 0901 	add.w	r9, r9, #1
 8004814:	e7ee      	b.n	80047f4 <_printf_float+0x27c>
 8004816:	bf00      	nop
 8004818:	ffffffff 	.word	0xffffffff
 800481c:	7fefffff 	.word	0x7fefffff
 8004820:	08007034 	.word	0x08007034
 8004824:	08007038 	.word	0x08007038
 8004828:	0800703c 	.word	0x0800703c
 800482c:	08007040 	.word	0x08007040
 8004830:	08007044 	.word	0x08007044
 8004834:	9a08      	ldr	r2, [sp, #32]
 8004836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004838:	429a      	cmp	r2, r3
 800483a:	bfa8      	it	ge
 800483c:	461a      	movge	r2, r3
 800483e:	2a00      	cmp	r2, #0
 8004840:	4691      	mov	r9, r2
 8004842:	dc38      	bgt.n	80048b6 <_printf_float+0x33e>
 8004844:	2300      	movs	r3, #0
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800484c:	f104 021a 	add.w	r2, r4, #26
 8004850:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004852:	9905      	ldr	r1, [sp, #20]
 8004854:	9304      	str	r3, [sp, #16]
 8004856:	eba3 0309 	sub.w	r3, r3, r9
 800485a:	428b      	cmp	r3, r1
 800485c:	dc33      	bgt.n	80048c6 <_printf_float+0x34e>
 800485e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004862:	429a      	cmp	r2, r3
 8004864:	db3c      	blt.n	80048e0 <_printf_float+0x368>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	07da      	lsls	r2, r3, #31
 800486a:	d439      	bmi.n	80048e0 <_printf_float+0x368>
 800486c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004870:	eba2 0903 	sub.w	r9, r2, r3
 8004874:	9b04      	ldr	r3, [sp, #16]
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	4591      	cmp	r9, r2
 800487a:	bfa8      	it	ge
 800487c:	4691      	movge	r9, r2
 800487e:	f1b9 0f00 	cmp.w	r9, #0
 8004882:	dc35      	bgt.n	80048f0 <_printf_float+0x378>
 8004884:	f04f 0800 	mov.w	r8, #0
 8004888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800488c:	f104 0a1a 	add.w	sl, r4, #26
 8004890:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	eba3 0309 	sub.w	r3, r3, r9
 800489a:	4543      	cmp	r3, r8
 800489c:	f77f af77 	ble.w	800478e <_printf_float+0x216>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4652      	mov	r2, sl
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f aeb0 	beq.w	8004610 <_printf_float+0x98>
 80048b0:	f108 0801 	add.w	r8, r8, #1
 80048b4:	e7ec      	b.n	8004890 <_printf_float+0x318>
 80048b6:	4613      	mov	r3, r2
 80048b8:	4631      	mov	r1, r6
 80048ba:	4642      	mov	r2, r8
 80048bc:	4628      	mov	r0, r5
 80048be:	47b8      	blx	r7
 80048c0:	3001      	adds	r0, #1
 80048c2:	d1bf      	bne.n	8004844 <_printf_float+0x2cc>
 80048c4:	e6a4      	b.n	8004610 <_printf_float+0x98>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4631      	mov	r1, r6
 80048ca:	4628      	mov	r0, r5
 80048cc:	9204      	str	r2, [sp, #16]
 80048ce:	47b8      	blx	r7
 80048d0:	3001      	adds	r0, #1
 80048d2:	f43f ae9d 	beq.w	8004610 <_printf_float+0x98>
 80048d6:	9b05      	ldr	r3, [sp, #20]
 80048d8:	9a04      	ldr	r2, [sp, #16]
 80048da:	3301      	adds	r3, #1
 80048dc:	9305      	str	r3, [sp, #20]
 80048de:	e7b7      	b.n	8004850 <_printf_float+0x2d8>
 80048e0:	4653      	mov	r3, sl
 80048e2:	465a      	mov	r2, fp
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	d1be      	bne.n	800486c <_printf_float+0x2f4>
 80048ee:	e68f      	b.n	8004610 <_printf_float+0x98>
 80048f0:	9a04      	ldr	r2, [sp, #16]
 80048f2:	464b      	mov	r3, r9
 80048f4:	4442      	add	r2, r8
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	d1c1      	bne.n	8004884 <_printf_float+0x30c>
 8004900:	e686      	b.n	8004610 <_printf_float+0x98>
 8004902:	9a08      	ldr	r2, [sp, #32]
 8004904:	2a01      	cmp	r2, #1
 8004906:	dc01      	bgt.n	800490c <_printf_float+0x394>
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d537      	bpl.n	800497c <_printf_float+0x404>
 800490c:	2301      	movs	r3, #1
 800490e:	4642      	mov	r2, r8
 8004910:	4631      	mov	r1, r6
 8004912:	4628      	mov	r0, r5
 8004914:	47b8      	blx	r7
 8004916:	3001      	adds	r0, #1
 8004918:	f43f ae7a 	beq.w	8004610 <_printf_float+0x98>
 800491c:	4653      	mov	r3, sl
 800491e:	465a      	mov	r2, fp
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f ae72 	beq.w	8004610 <_printf_float+0x98>
 800492c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004930:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	9b08      	ldr	r3, [sp, #32]
 800493a:	d01a      	beq.n	8004972 <_printf_float+0x3fa>
 800493c:	3b01      	subs	r3, #1
 800493e:	f108 0201 	add.w	r2, r8, #1
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	d10e      	bne.n	800496a <_printf_float+0x3f2>
 800494c:	e660      	b.n	8004610 <_printf_float+0x98>
 800494e:	2301      	movs	r3, #1
 8004950:	464a      	mov	r2, r9
 8004952:	4631      	mov	r1, r6
 8004954:	4628      	mov	r0, r5
 8004956:	47b8      	blx	r7
 8004958:	3001      	adds	r0, #1
 800495a:	f43f ae59 	beq.w	8004610 <_printf_float+0x98>
 800495e:	f108 0801 	add.w	r8, r8, #1
 8004962:	9b08      	ldr	r3, [sp, #32]
 8004964:	3b01      	subs	r3, #1
 8004966:	4543      	cmp	r3, r8
 8004968:	dcf1      	bgt.n	800494e <_printf_float+0x3d6>
 800496a:	9b04      	ldr	r3, [sp, #16]
 800496c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004970:	e6dd      	b.n	800472e <_printf_float+0x1b6>
 8004972:	f04f 0800 	mov.w	r8, #0
 8004976:	f104 091a 	add.w	r9, r4, #26
 800497a:	e7f2      	b.n	8004962 <_printf_float+0x3ea>
 800497c:	2301      	movs	r3, #1
 800497e:	4642      	mov	r2, r8
 8004980:	e7df      	b.n	8004942 <_printf_float+0x3ca>
 8004982:	2301      	movs	r3, #1
 8004984:	464a      	mov	r2, r9
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f ae3f 	beq.w	8004610 <_printf_float+0x98>
 8004992:	f108 0801 	add.w	r8, r8, #1
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800499a:	1a5b      	subs	r3, r3, r1
 800499c:	4543      	cmp	r3, r8
 800499e:	dcf0      	bgt.n	8004982 <_printf_float+0x40a>
 80049a0:	e6f9      	b.n	8004796 <_printf_float+0x21e>
 80049a2:	f04f 0800 	mov.w	r8, #0
 80049a6:	f104 0919 	add.w	r9, r4, #25
 80049aa:	e7f4      	b.n	8004996 <_printf_float+0x41e>

080049ac <_printf_common>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	4616      	mov	r6, r2
 80049b2:	4699      	mov	r9, r3
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	690b      	ldr	r3, [r1, #16]
 80049b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049bc:	4293      	cmp	r3, r2
 80049be:	bfb8      	it	lt
 80049c0:	4613      	movlt	r3, r2
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c8:	4607      	mov	r7, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b10a      	cbz	r2, 80049d2 <_printf_common+0x26>
 80049ce:	3301      	adds	r3, #1
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	6833      	ldrmi	r3, [r6, #0]
 80049da:	3302      	addmi	r3, #2
 80049dc:	6033      	strmi	r3, [r6, #0]
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	f015 0506 	ands.w	r5, r5, #6
 80049e4:	d106      	bne.n	80049f4 <_printf_common+0x48>
 80049e6:	f104 0a19 	add.w	sl, r4, #25
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	6832      	ldr	r2, [r6, #0]
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dc26      	bgt.n	8004a42 <_printf_common+0x96>
 80049f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049f8:	1e13      	subs	r3, r2, #0
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	0692      	lsls	r2, r2, #26
 8004a02:	d42b      	bmi.n	8004a5c <_printf_common+0xb0>
 8004a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d01e      	beq.n	8004a50 <_printf_common+0xa4>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	6922      	ldr	r2, [r4, #16]
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	bf02      	ittt	eq
 8004a1e:	68e5      	ldreq	r5, [r4, #12]
 8004a20:	6833      	ldreq	r3, [r6, #0]
 8004a22:	1aed      	subeq	r5, r5, r3
 8004a24:	68a3      	ldr	r3, [r4, #8]
 8004a26:	bf0c      	ite	eq
 8004a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a2c:	2500      	movne	r5, #0
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	bfc4      	itt	gt
 8004a32:	1a9b      	subgt	r3, r3, r2
 8004a34:	18ed      	addgt	r5, r5, r3
 8004a36:	2600      	movs	r6, #0
 8004a38:	341a      	adds	r4, #26
 8004a3a:	42b5      	cmp	r5, r6
 8004a3c:	d11a      	bne.n	8004a74 <_printf_common+0xc8>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e008      	b.n	8004a54 <_printf_common+0xa8>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4652      	mov	r2, sl
 8004a46:	4649      	mov	r1, r9
 8004a48:	4638      	mov	r0, r7
 8004a4a:	47c0      	blx	r8
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d103      	bne.n	8004a58 <_printf_common+0xac>
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	3501      	adds	r5, #1
 8004a5a:	e7c6      	b.n	80049ea <_printf_common+0x3e>
 8004a5c:	18e1      	adds	r1, r4, r3
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	2030      	movs	r0, #48	; 0x30
 8004a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a66:	4422      	add	r2, r4
 8004a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a70:	3302      	adds	r3, #2
 8004a72:	e7c7      	b.n	8004a04 <_printf_common+0x58>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4622      	mov	r2, r4
 8004a78:	4649      	mov	r1, r9
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	47c0      	blx	r8
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d0e6      	beq.n	8004a50 <_printf_common+0xa4>
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7d9      	b.n	8004a3a <_printf_common+0x8e>
	...

08004a88 <_printf_i>:
 8004a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	7e0f      	ldrb	r7, [r1, #24]
 8004a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a90:	2f78      	cmp	r7, #120	; 0x78
 8004a92:	4691      	mov	r9, r2
 8004a94:	4680      	mov	r8, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	469a      	mov	sl, r3
 8004a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a9e:	d807      	bhi.n	8004ab0 <_printf_i+0x28>
 8004aa0:	2f62      	cmp	r7, #98	; 0x62
 8004aa2:	d80a      	bhi.n	8004aba <_printf_i+0x32>
 8004aa4:	2f00      	cmp	r7, #0
 8004aa6:	f000 80d4 	beq.w	8004c52 <_printf_i+0x1ca>
 8004aaa:	2f58      	cmp	r7, #88	; 0x58
 8004aac:	f000 80c0 	beq.w	8004c30 <_printf_i+0x1a8>
 8004ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ab8:	e03a      	b.n	8004b30 <_printf_i+0xa8>
 8004aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004abe:	2b15      	cmp	r3, #21
 8004ac0:	d8f6      	bhi.n	8004ab0 <_printf_i+0x28>
 8004ac2:	a101      	add	r1, pc, #4	; (adr r1, 8004ac8 <_printf_i+0x40>)
 8004ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	08004b35 	.word	0x08004b35
 8004ad0:	08004ab1 	.word	0x08004ab1
 8004ad4:	08004ab1 	.word	0x08004ab1
 8004ad8:	08004ab1 	.word	0x08004ab1
 8004adc:	08004ab1 	.word	0x08004ab1
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004ab1 	.word	0x08004ab1
 8004ae8:	08004ab1 	.word	0x08004ab1
 8004aec:	08004ab1 	.word	0x08004ab1
 8004af0:	08004ab1 	.word	0x08004ab1
 8004af4:	08004c39 	.word	0x08004c39
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004bf3 	.word	0x08004bf3
 8004b00:	08004ab1 	.word	0x08004ab1
 8004b04:	08004ab1 	.word	0x08004ab1
 8004b08:	08004c5b 	.word	0x08004c5b
 8004b0c:	08004ab1 	.word	0x08004ab1
 8004b10:	08004b61 	.word	0x08004b61
 8004b14:	08004ab1 	.word	0x08004ab1
 8004b18:	08004ab1 	.word	0x08004ab1
 8004b1c:	08004bfb 	.word	0x08004bfb
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	602a      	str	r2, [r5, #0]
 8004b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b30:	2301      	movs	r3, #1
 8004b32:	e09f      	b.n	8004c74 <_printf_i+0x1ec>
 8004b34:	6820      	ldr	r0, [r4, #0]
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	0607      	lsls	r7, r0, #24
 8004b3a:	f103 0104 	add.w	r1, r3, #4
 8004b3e:	6029      	str	r1, [r5, #0]
 8004b40:	d501      	bpl.n	8004b46 <_printf_i+0xbe>
 8004b42:	681e      	ldr	r6, [r3, #0]
 8004b44:	e003      	b.n	8004b4e <_printf_i+0xc6>
 8004b46:	0646      	lsls	r6, r0, #25
 8004b48:	d5fb      	bpl.n	8004b42 <_printf_i+0xba>
 8004b4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	da03      	bge.n	8004b5a <_printf_i+0xd2>
 8004b52:	232d      	movs	r3, #45	; 0x2d
 8004b54:	4276      	negs	r6, r6
 8004b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5a:	485a      	ldr	r0, [pc, #360]	; (8004cc4 <_printf_i+0x23c>)
 8004b5c:	230a      	movs	r3, #10
 8004b5e:	e012      	b.n	8004b86 <_printf_i+0xfe>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	1d19      	adds	r1, r3, #4
 8004b66:	6029      	str	r1, [r5, #0]
 8004b68:	0605      	lsls	r5, r0, #24
 8004b6a:	d501      	bpl.n	8004b70 <_printf_i+0xe8>
 8004b6c:	681e      	ldr	r6, [r3, #0]
 8004b6e:	e002      	b.n	8004b76 <_printf_i+0xee>
 8004b70:	0641      	lsls	r1, r0, #25
 8004b72:	d5fb      	bpl.n	8004b6c <_printf_i+0xe4>
 8004b74:	881e      	ldrh	r6, [r3, #0]
 8004b76:	4853      	ldr	r0, [pc, #332]	; (8004cc4 <_printf_i+0x23c>)
 8004b78:	2f6f      	cmp	r7, #111	; 0x6f
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2308      	moveq	r3, #8
 8004b7e:	230a      	movne	r3, #10
 8004b80:	2100      	movs	r1, #0
 8004b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b86:	6865      	ldr	r5, [r4, #4]
 8004b88:	60a5      	str	r5, [r4, #8]
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	bfa2      	ittt	ge
 8004b8e:	6821      	ldrge	r1, [r4, #0]
 8004b90:	f021 0104 	bicge.w	r1, r1, #4
 8004b94:	6021      	strge	r1, [r4, #0]
 8004b96:	b90e      	cbnz	r6, 8004b9c <_printf_i+0x114>
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	d04b      	beq.n	8004c34 <_printf_i+0x1ac>
 8004b9c:	4615      	mov	r5, r2
 8004b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ba6:	5dc7      	ldrb	r7, [r0, r7]
 8004ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bac:	4637      	mov	r7, r6
 8004bae:	42bb      	cmp	r3, r7
 8004bb0:	460e      	mov	r6, r1
 8004bb2:	d9f4      	bls.n	8004b9e <_printf_i+0x116>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d10b      	bne.n	8004bd0 <_printf_i+0x148>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	07de      	lsls	r6, r3, #31
 8004bbc:	d508      	bpl.n	8004bd0 <_printf_i+0x148>
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6861      	ldr	r1, [r4, #4]
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	bfde      	ittt	le
 8004bc6:	2330      	movle	r3, #48	; 0x30
 8004bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bd0:	1b52      	subs	r2, r2, r5
 8004bd2:	6122      	str	r2, [r4, #16]
 8004bd4:	f8cd a000 	str.w	sl, [sp]
 8004bd8:	464b      	mov	r3, r9
 8004bda:	aa03      	add	r2, sp, #12
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4640      	mov	r0, r8
 8004be0:	f7ff fee4 	bl	80049ac <_printf_common>
 8004be4:	3001      	adds	r0, #1
 8004be6:	d14a      	bne.n	8004c7e <_printf_i+0x1f6>
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	b004      	add	sp, #16
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f043 0320 	orr.w	r3, r3, #32
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	4833      	ldr	r0, [pc, #204]	; (8004cc8 <_printf_i+0x240>)
 8004bfc:	2778      	movs	r7, #120	; 0x78
 8004bfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	6829      	ldr	r1, [r5, #0]
 8004c06:	061f      	lsls	r7, r3, #24
 8004c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c0c:	d402      	bmi.n	8004c14 <_printf_i+0x18c>
 8004c0e:	065f      	lsls	r7, r3, #25
 8004c10:	bf48      	it	mi
 8004c12:	b2b6      	uxthmi	r6, r6
 8004c14:	07df      	lsls	r7, r3, #31
 8004c16:	bf48      	it	mi
 8004c18:	f043 0320 	orrmi.w	r3, r3, #32
 8004c1c:	6029      	str	r1, [r5, #0]
 8004c1e:	bf48      	it	mi
 8004c20:	6023      	strmi	r3, [r4, #0]
 8004c22:	b91e      	cbnz	r6, 8004c2c <_printf_i+0x1a4>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	f023 0320 	bic.w	r3, r3, #32
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	e7a7      	b.n	8004b80 <_printf_i+0xf8>
 8004c30:	4824      	ldr	r0, [pc, #144]	; (8004cc4 <_printf_i+0x23c>)
 8004c32:	e7e4      	b.n	8004bfe <_printf_i+0x176>
 8004c34:	4615      	mov	r5, r2
 8004c36:	e7bd      	b.n	8004bb4 <_printf_i+0x12c>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6826      	ldr	r6, [r4, #0]
 8004c3c:	6961      	ldr	r1, [r4, #20]
 8004c3e:	1d18      	adds	r0, r3, #4
 8004c40:	6028      	str	r0, [r5, #0]
 8004c42:	0635      	lsls	r5, r6, #24
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	d501      	bpl.n	8004c4c <_printf_i+0x1c4>
 8004c48:	6019      	str	r1, [r3, #0]
 8004c4a:	e002      	b.n	8004c52 <_printf_i+0x1ca>
 8004c4c:	0670      	lsls	r0, r6, #25
 8004c4e:	d5fb      	bpl.n	8004c48 <_printf_i+0x1c0>
 8004c50:	8019      	strh	r1, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	4615      	mov	r5, r2
 8004c58:	e7bc      	b.n	8004bd4 <_printf_i+0x14c>
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	602a      	str	r2, [r5, #0]
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7fb faea 	bl	8000240 <memchr>
 8004c6c:	b108      	cbz	r0, 8004c72 <_printf_i+0x1ea>
 8004c6e:	1b40      	subs	r0, r0, r5
 8004c70:	6060      	str	r0, [r4, #4]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	2300      	movs	r3, #0
 8004c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7c:	e7aa      	b.n	8004bd4 <_printf_i+0x14c>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	462a      	mov	r2, r5
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	47d0      	blx	sl
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d0ad      	beq.n	8004be8 <_printf_i+0x160>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	079b      	lsls	r3, r3, #30
 8004c90:	d413      	bmi.n	8004cba <_printf_i+0x232>
 8004c92:	68e0      	ldr	r0, [r4, #12]
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	4298      	cmp	r0, r3
 8004c98:	bfb8      	it	lt
 8004c9a:	4618      	movlt	r0, r3
 8004c9c:	e7a6      	b.n	8004bec <_printf_i+0x164>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	47d0      	blx	sl
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d09d      	beq.n	8004be8 <_printf_i+0x160>
 8004cac:	3501      	adds	r5, #1
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	9903      	ldr	r1, [sp, #12]
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dcf2      	bgt.n	8004c9e <_printf_i+0x216>
 8004cb8:	e7eb      	b.n	8004c92 <_printf_i+0x20a>
 8004cba:	2500      	movs	r5, #0
 8004cbc:	f104 0619 	add.w	r6, r4, #25
 8004cc0:	e7f5      	b.n	8004cae <_printf_i+0x226>
 8004cc2:	bf00      	nop
 8004cc4:	08007046 	.word	0x08007046
 8004cc8:	08007057 	.word	0x08007057

08004ccc <std>:
 8004ccc:	2300      	movs	r3, #0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cda:	6083      	str	r3, [r0, #8]
 8004cdc:	8181      	strh	r1, [r0, #12]
 8004cde:	6643      	str	r3, [r0, #100]	; 0x64
 8004ce0:	81c2      	strh	r2, [r0, #14]
 8004ce2:	6183      	str	r3, [r0, #24]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	305c      	adds	r0, #92	; 0x5c
 8004cea:	f000 f902 	bl	8004ef2 <memset>
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <std+0x38>)
 8004cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <std+0x3c>)
 8004cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <std+0x40>)
 8004cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <std+0x44>)
 8004cfc:	6224      	str	r4, [r4, #32]
 8004cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	08004e6d 	.word	0x08004e6d
 8004d08:	08004e8f 	.word	0x08004e8f
 8004d0c:	08004ec7 	.word	0x08004ec7
 8004d10:	08004eeb 	.word	0x08004eeb

08004d14 <stdio_exit_handler>:
 8004d14:	4a02      	ldr	r2, [pc, #8]	; (8004d20 <stdio_exit_handler+0xc>)
 8004d16:	4903      	ldr	r1, [pc, #12]	; (8004d24 <stdio_exit_handler+0x10>)
 8004d18:	4803      	ldr	r0, [pc, #12]	; (8004d28 <stdio_exit_handler+0x14>)
 8004d1a:	f000 b869 	b.w	8004df0 <_fwalk_sglue>
 8004d1e:	bf00      	nop
 8004d20:	2000000c 	.word	0x2000000c
 8004d24:	0800688d 	.word	0x0800688d
 8004d28:	20000018 	.word	0x20000018

08004d2c <cleanup_stdio>:
 8004d2c:	6841      	ldr	r1, [r0, #4]
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <cleanup_stdio+0x34>)
 8004d30:	4299      	cmp	r1, r3
 8004d32:	b510      	push	{r4, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	d001      	beq.n	8004d3c <cleanup_stdio+0x10>
 8004d38:	f001 fda8 	bl	800688c <_fflush_r>
 8004d3c:	68a1      	ldr	r1, [r4, #8]
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <cleanup_stdio+0x38>)
 8004d40:	4299      	cmp	r1, r3
 8004d42:	d002      	beq.n	8004d4a <cleanup_stdio+0x1e>
 8004d44:	4620      	mov	r0, r4
 8004d46:	f001 fda1 	bl	800688c <_fflush_r>
 8004d4a:	68e1      	ldr	r1, [r4, #12]
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <cleanup_stdio+0x3c>)
 8004d4e:	4299      	cmp	r1, r3
 8004d50:	d004      	beq.n	8004d5c <cleanup_stdio+0x30>
 8004d52:	4620      	mov	r0, r4
 8004d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d58:	f001 bd98 	b.w	800688c <_fflush_r>
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	bf00      	nop
 8004d60:	200003a8 	.word	0x200003a8
 8004d64:	20000410 	.word	0x20000410
 8004d68:	20000478 	.word	0x20000478

08004d6c <global_stdio_init.part.0>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <global_stdio_init.part.0+0x30>)
 8004d70:	4c0b      	ldr	r4, [pc, #44]	; (8004da0 <global_stdio_init.part.0+0x34>)
 8004d72:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <global_stdio_init.part.0+0x38>)
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	4620      	mov	r0, r4
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2104      	movs	r1, #4
 8004d7c:	f7ff ffa6 	bl	8004ccc <std>
 8004d80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d84:	2201      	movs	r2, #1
 8004d86:	2109      	movs	r1, #9
 8004d88:	f7ff ffa0 	bl	8004ccc <std>
 8004d8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d90:	2202      	movs	r2, #2
 8004d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d96:	2112      	movs	r1, #18
 8004d98:	f7ff bf98 	b.w	8004ccc <std>
 8004d9c:	200004e0 	.word	0x200004e0
 8004da0:	200003a8 	.word	0x200003a8
 8004da4:	08004d15 	.word	0x08004d15

08004da8 <__sfp_lock_acquire>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__sfp_lock_acquire+0x8>)
 8004daa:	f000 b91f 	b.w	8004fec <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	200004e9 	.word	0x200004e9

08004db4 <__sfp_lock_release>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__sfp_lock_release+0x8>)
 8004db6:	f000 b91a 	b.w	8004fee <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	200004e9 	.word	0x200004e9

08004dc0 <__sinit>:
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	f7ff fff0 	bl	8004da8 <__sfp_lock_acquire>
 8004dc8:	6a23      	ldr	r3, [r4, #32]
 8004dca:	b11b      	cbz	r3, 8004dd4 <__sinit+0x14>
 8004dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd0:	f7ff bff0 	b.w	8004db4 <__sfp_lock_release>
 8004dd4:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <__sinit+0x28>)
 8004dd6:	6223      	str	r3, [r4, #32]
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <__sinit+0x2c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f5      	bne.n	8004dcc <__sinit+0xc>
 8004de0:	f7ff ffc4 	bl	8004d6c <global_stdio_init.part.0>
 8004de4:	e7f2      	b.n	8004dcc <__sinit+0xc>
 8004de6:	bf00      	nop
 8004de8:	08004d2d 	.word	0x08004d2d
 8004dec:	200004e0 	.word	0x200004e0

08004df0 <_fwalk_sglue>:
 8004df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df4:	4607      	mov	r7, r0
 8004df6:	4688      	mov	r8, r1
 8004df8:	4614      	mov	r4, r2
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e00:	f1b9 0901 	subs.w	r9, r9, #1
 8004e04:	d505      	bpl.n	8004e12 <_fwalk_sglue+0x22>
 8004e06:	6824      	ldr	r4, [r4, #0]
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	d1f7      	bne.n	8004dfc <_fwalk_sglue+0xc>
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e12:	89ab      	ldrh	r3, [r5, #12]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d907      	bls.n	8004e28 <_fwalk_sglue+0x38>
 8004e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	d003      	beq.n	8004e28 <_fwalk_sglue+0x38>
 8004e20:	4629      	mov	r1, r5
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c0      	blx	r8
 8004e26:	4306      	orrs	r6, r0
 8004e28:	3568      	adds	r5, #104	; 0x68
 8004e2a:	e7e9      	b.n	8004e00 <_fwalk_sglue+0x10>

08004e2c <siprintf>:
 8004e2c:	b40e      	push	{r1, r2, r3}
 8004e2e:	b500      	push	{lr}
 8004e30:	b09c      	sub	sp, #112	; 0x70
 8004e32:	ab1d      	add	r3, sp, #116	; 0x74
 8004e34:	9002      	str	r0, [sp, #8]
 8004e36:	9006      	str	r0, [sp, #24]
 8004e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e3c:	4809      	ldr	r0, [pc, #36]	; (8004e64 <siprintf+0x38>)
 8004e3e:	9107      	str	r1, [sp, #28]
 8004e40:	9104      	str	r1, [sp, #16]
 8004e42:	4909      	ldr	r1, [pc, #36]	; (8004e68 <siprintf+0x3c>)
 8004e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e48:	9105      	str	r1, [sp, #20]
 8004e4a:	6800      	ldr	r0, [r0, #0]
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	a902      	add	r1, sp, #8
 8004e50:	f001 fb98 	bl	8006584 <_svfiprintf_r>
 8004e54:	9b02      	ldr	r3, [sp, #8]
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	b01c      	add	sp, #112	; 0x70
 8004e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e60:	b003      	add	sp, #12
 8004e62:	4770      	bx	lr
 8004e64:	20000064 	.word	0x20000064
 8004e68:	ffff0208 	.word	0xffff0208

08004e6c <__sread>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	f000 f86c 	bl	8004f50 <_read_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	bfab      	itete	ge
 8004e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e80:	181b      	addge	r3, r3, r0
 8004e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e86:	bfac      	ite	ge
 8004e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e8a:	81a3      	strhlt	r3, [r4, #12]
 8004e8c:	bd10      	pop	{r4, pc}

08004e8e <__swrite>:
 8004e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e92:	461f      	mov	r7, r3
 8004e94:	898b      	ldrh	r3, [r1, #12]
 8004e96:	05db      	lsls	r3, r3, #23
 8004e98:	4605      	mov	r5, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	d505      	bpl.n	8004eac <__swrite+0x1e>
 8004ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f000 f840 	bl	8004f2c <_lseek_r>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	4632      	mov	r2, r6
 8004eba:	463b      	mov	r3, r7
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec2:	f000 b857 	b.w	8004f74 <_write_r>

08004ec6 <__sseek>:
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	460c      	mov	r4, r1
 8004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ece:	f000 f82d 	bl	8004f2c <_lseek_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	bf15      	itete	ne
 8004ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ee2:	81a3      	strheq	r3, [r4, #12]
 8004ee4:	bf18      	it	ne
 8004ee6:	81a3      	strhne	r3, [r4, #12]
 8004ee8:	bd10      	pop	{r4, pc}

08004eea <__sclose>:
 8004eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eee:	f000 b80d 	b.w	8004f0c <_close_r>

08004ef2 <memset>:
 8004ef2:	4402      	add	r2, r0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d100      	bne.n	8004efc <memset+0xa>
 8004efa:	4770      	bx	lr
 8004efc:	f803 1b01 	strb.w	r1, [r3], #1
 8004f00:	e7f9      	b.n	8004ef6 <memset+0x4>
	...

08004f04 <_localeconv_r>:
 8004f04:	4800      	ldr	r0, [pc, #0]	; (8004f08 <_localeconv_r+0x4>)
 8004f06:	4770      	bx	lr
 8004f08:	20000158 	.word	0x20000158

08004f0c <_close_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d06      	ldr	r5, [pc, #24]	; (8004f28 <_close_r+0x1c>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fb fe3b 	bl	8000b92 <_close>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_close_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_close_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	200004e4 	.word	0x200004e4

08004f2c <_lseek_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	; (8004f4c <_lseek_r+0x20>)
 8004f30:	4604      	mov	r4, r0
 8004f32:	4608      	mov	r0, r1
 8004f34:	4611      	mov	r1, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7fb fe50 	bl	8000be0 <_lseek>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_lseek_r+0x1e>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_lseek_r+0x1e>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	200004e4 	.word	0x200004e4

08004f50 <_read_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d07      	ldr	r5, [pc, #28]	; (8004f70 <_read_r+0x20>)
 8004f54:	4604      	mov	r4, r0
 8004f56:	4608      	mov	r0, r1
 8004f58:	4611      	mov	r1, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fb fdde 	bl	8000b20 <_read>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_read_r+0x1e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_read_r+0x1e>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	200004e4 	.word	0x200004e4

08004f74 <_write_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d07      	ldr	r5, [pc, #28]	; (8004f94 <_write_r+0x20>)
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fb fde9 	bl	8000b5a <_write>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_write_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_write_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	200004e4 	.word	0x200004e4

08004f98 <__errno>:
 8004f98:	4b01      	ldr	r3, [pc, #4]	; (8004fa0 <__errno+0x8>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000064 	.word	0x20000064

08004fa4 <__libc_init_array>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	4d0d      	ldr	r5, [pc, #52]	; (8004fdc <__libc_init_array+0x38>)
 8004fa8:	4c0d      	ldr	r4, [pc, #52]	; (8004fe0 <__libc_init_array+0x3c>)
 8004faa:	1b64      	subs	r4, r4, r5
 8004fac:	10a4      	asrs	r4, r4, #2
 8004fae:	2600      	movs	r6, #0
 8004fb0:	42a6      	cmp	r6, r4
 8004fb2:	d109      	bne.n	8004fc8 <__libc_init_array+0x24>
 8004fb4:	4d0b      	ldr	r5, [pc, #44]	; (8004fe4 <__libc_init_array+0x40>)
 8004fb6:	4c0c      	ldr	r4, [pc, #48]	; (8004fe8 <__libc_init_array+0x44>)
 8004fb8:	f002 f80c 	bl	8006fd4 <_init>
 8004fbc:	1b64      	subs	r4, r4, r5
 8004fbe:	10a4      	asrs	r4, r4, #2
 8004fc0:	2600      	movs	r6, #0
 8004fc2:	42a6      	cmp	r6, r4
 8004fc4:	d105      	bne.n	8004fd2 <__libc_init_array+0x2e>
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fcc:	4798      	blx	r3
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7ee      	b.n	8004fb0 <__libc_init_array+0xc>
 8004fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd6:	4798      	blx	r3
 8004fd8:	3601      	adds	r6, #1
 8004fda:	e7f2      	b.n	8004fc2 <__libc_init_array+0x1e>
 8004fdc:	080073ac 	.word	0x080073ac
 8004fe0:	080073ac 	.word	0x080073ac
 8004fe4:	080073ac 	.word	0x080073ac
 8004fe8:	080073b0 	.word	0x080073b0

08004fec <__retarget_lock_acquire_recursive>:
 8004fec:	4770      	bx	lr

08004fee <__retarget_lock_release_recursive>:
 8004fee:	4770      	bx	lr

08004ff0 <quorem>:
 8004ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	6903      	ldr	r3, [r0, #16]
 8004ff6:	690c      	ldr	r4, [r1, #16]
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	db7e      	blt.n	80050fc <quorem+0x10c>
 8004ffe:	3c01      	subs	r4, #1
 8005000:	f101 0814 	add.w	r8, r1, #20
 8005004:	f100 0514 	add.w	r5, r0, #20
 8005008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005016:	3301      	adds	r3, #1
 8005018:	429a      	cmp	r2, r3
 800501a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800501e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005022:	fbb2 f6f3 	udiv	r6, r2, r3
 8005026:	d331      	bcc.n	800508c <quorem+0x9c>
 8005028:	f04f 0e00 	mov.w	lr, #0
 800502c:	4640      	mov	r0, r8
 800502e:	46ac      	mov	ip, r5
 8005030:	46f2      	mov	sl, lr
 8005032:	f850 2b04 	ldr.w	r2, [r0], #4
 8005036:	b293      	uxth	r3, r2
 8005038:	fb06 e303 	mla	r3, r6, r3, lr
 800503c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005040:	0c1a      	lsrs	r2, r3, #16
 8005042:	b29b      	uxth	r3, r3
 8005044:	ebaa 0303 	sub.w	r3, sl, r3
 8005048:	f8dc a000 	ldr.w	sl, [ip]
 800504c:	fa13 f38a 	uxtah	r3, r3, sl
 8005050:	fb06 220e 	mla	r2, r6, lr, r2
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	9b00      	ldr	r3, [sp, #0]
 8005058:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800505c:	b292      	uxth	r2, r2
 800505e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005066:	f8bd 3000 	ldrh.w	r3, [sp]
 800506a:	4581      	cmp	r9, r0
 800506c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005070:	f84c 3b04 	str.w	r3, [ip], #4
 8005074:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005078:	d2db      	bcs.n	8005032 <quorem+0x42>
 800507a:	f855 300b 	ldr.w	r3, [r5, fp]
 800507e:	b92b      	cbnz	r3, 800508c <quorem+0x9c>
 8005080:	9b01      	ldr	r3, [sp, #4]
 8005082:	3b04      	subs	r3, #4
 8005084:	429d      	cmp	r5, r3
 8005086:	461a      	mov	r2, r3
 8005088:	d32c      	bcc.n	80050e4 <quorem+0xf4>
 800508a:	613c      	str	r4, [r7, #16]
 800508c:	4638      	mov	r0, r7
 800508e:	f001 f91f 	bl	80062d0 <__mcmp>
 8005092:	2800      	cmp	r0, #0
 8005094:	db22      	blt.n	80050dc <quorem+0xec>
 8005096:	3601      	adds	r6, #1
 8005098:	4629      	mov	r1, r5
 800509a:	2000      	movs	r0, #0
 800509c:	f858 2b04 	ldr.w	r2, [r8], #4
 80050a0:	f8d1 c000 	ldr.w	ip, [r1]
 80050a4:	b293      	uxth	r3, r2
 80050a6:	1ac3      	subs	r3, r0, r3
 80050a8:	0c12      	lsrs	r2, r2, #16
 80050aa:	fa13 f38c 	uxtah	r3, r3, ip
 80050ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050bc:	45c1      	cmp	r9, r8
 80050be:	f841 3b04 	str.w	r3, [r1], #4
 80050c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050c6:	d2e9      	bcs.n	800509c <quorem+0xac>
 80050c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050d0:	b922      	cbnz	r2, 80050dc <quorem+0xec>
 80050d2:	3b04      	subs	r3, #4
 80050d4:	429d      	cmp	r5, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	d30a      	bcc.n	80050f0 <quorem+0x100>
 80050da:	613c      	str	r4, [r7, #16]
 80050dc:	4630      	mov	r0, r6
 80050de:	b003      	add	sp, #12
 80050e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	3b04      	subs	r3, #4
 80050e8:	2a00      	cmp	r2, #0
 80050ea:	d1ce      	bne.n	800508a <quorem+0x9a>
 80050ec:	3c01      	subs	r4, #1
 80050ee:	e7c9      	b.n	8005084 <quorem+0x94>
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	3b04      	subs	r3, #4
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d1f0      	bne.n	80050da <quorem+0xea>
 80050f8:	3c01      	subs	r4, #1
 80050fa:	e7eb      	b.n	80050d4 <quorem+0xe4>
 80050fc:	2000      	movs	r0, #0
 80050fe:	e7ee      	b.n	80050de <quorem+0xee>

08005100 <_dtoa_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	ed2d 8b02 	vpush	{d8}
 8005108:	69c5      	ldr	r5, [r0, #28]
 800510a:	b091      	sub	sp, #68	; 0x44
 800510c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005110:	ec59 8b10 	vmov	r8, r9, d0
 8005114:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005116:	9106      	str	r1, [sp, #24]
 8005118:	4606      	mov	r6, r0
 800511a:	9208      	str	r2, [sp, #32]
 800511c:	930c      	str	r3, [sp, #48]	; 0x30
 800511e:	b975      	cbnz	r5, 800513e <_dtoa_r+0x3e>
 8005120:	2010      	movs	r0, #16
 8005122:	f000 fda5 	bl	8005c70 <malloc>
 8005126:	4602      	mov	r2, r0
 8005128:	61f0      	str	r0, [r6, #28]
 800512a:	b920      	cbnz	r0, 8005136 <_dtoa_r+0x36>
 800512c:	4ba6      	ldr	r3, [pc, #664]	; (80053c8 <_dtoa_r+0x2c8>)
 800512e:	21ef      	movs	r1, #239	; 0xef
 8005130:	48a6      	ldr	r0, [pc, #664]	; (80053cc <_dtoa_r+0x2cc>)
 8005132:	f001 fc0b 	bl	800694c <__assert_func>
 8005136:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800513a:	6005      	str	r5, [r0, #0]
 800513c:	60c5      	str	r5, [r0, #12]
 800513e:	69f3      	ldr	r3, [r6, #28]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	b151      	cbz	r1, 800515a <_dtoa_r+0x5a>
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	604a      	str	r2, [r1, #4]
 8005148:	2301      	movs	r3, #1
 800514a:	4093      	lsls	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
 800514e:	4630      	mov	r0, r6
 8005150:	f000 fe82 	bl	8005e58 <_Bfree>
 8005154:	69f3      	ldr	r3, [r6, #28]
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f1b9 0300 	subs.w	r3, r9, #0
 800515e:	bfbb      	ittet	lt
 8005160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005164:	9303      	strlt	r3, [sp, #12]
 8005166:	2300      	movge	r3, #0
 8005168:	2201      	movlt	r2, #1
 800516a:	bfac      	ite	ge
 800516c:	6023      	strge	r3, [r4, #0]
 800516e:	6022      	strlt	r2, [r4, #0]
 8005170:	4b97      	ldr	r3, [pc, #604]	; (80053d0 <_dtoa_r+0x2d0>)
 8005172:	9c03      	ldr	r4, [sp, #12]
 8005174:	43a3      	bics	r3, r4
 8005176:	d11c      	bne.n	80051b2 <_dtoa_r+0xb2>
 8005178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800517a:	f242 730f 	movw	r3, #9999	; 0x270f
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005184:	ea53 0308 	orrs.w	r3, r3, r8
 8005188:	f000 84fb 	beq.w	8005b82 <_dtoa_r+0xa82>
 800518c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800518e:	b963      	cbnz	r3, 80051aa <_dtoa_r+0xaa>
 8005190:	4b90      	ldr	r3, [pc, #576]	; (80053d4 <_dtoa_r+0x2d4>)
 8005192:	e020      	b.n	80051d6 <_dtoa_r+0xd6>
 8005194:	4b90      	ldr	r3, [pc, #576]	; (80053d8 <_dtoa_r+0x2d8>)
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	3308      	adds	r3, #8
 800519a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	9801      	ldr	r0, [sp, #4]
 80051a0:	b011      	add	sp, #68	; 0x44
 80051a2:	ecbd 8b02 	vpop	{d8}
 80051a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051aa:	4b8a      	ldr	r3, [pc, #552]	; (80053d4 <_dtoa_r+0x2d4>)
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	3303      	adds	r3, #3
 80051b0:	e7f3      	b.n	800519a <_dtoa_r+0x9a>
 80051b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80051b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80051ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051be:	d10c      	bne.n	80051da <_dtoa_r+0xda>
 80051c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051c2:	2301      	movs	r3, #1
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 84d7 	beq.w	8005b7c <_dtoa_r+0xa7c>
 80051ce:	4b83      	ldr	r3, [pc, #524]	; (80053dc <_dtoa_r+0x2dc>)
 80051d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	e7e1      	b.n	800519e <_dtoa_r+0x9e>
 80051da:	aa0e      	add	r2, sp, #56	; 0x38
 80051dc:	a90f      	add	r1, sp, #60	; 0x3c
 80051de:	4630      	mov	r0, r6
 80051e0:	eeb0 0b48 	vmov.f64	d0, d8
 80051e4:	f001 f91a 	bl	800641c <__d2b>
 80051e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80051ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ee:	4605      	mov	r5, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d046      	beq.n	8005282 <_dtoa_r+0x182>
 80051f4:	eeb0 7b48 	vmov.f64	d7, d8
 80051f8:	ee18 1a90 	vmov	r1, s17
 80051fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005200:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8005204:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005208:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800520c:	2000      	movs	r0, #0
 800520e:	ee07 1a90 	vmov	s15, r1
 8005212:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8005216:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80053b0 <_dtoa_r+0x2b0>
 800521a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800521e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80053b8 <_dtoa_r+0x2b8>
 8005222:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005226:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80053c0 <_dtoa_r+0x2c0>
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005232:	eeb0 7b46 	vmov.f64	d7, d6
 8005236:	eea4 7b05 	vfma.f64	d7, d4, d5
 800523a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800523e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005246:	ee16 ba90 	vmov	fp, s13
 800524a:	9009      	str	r0, [sp, #36]	; 0x24
 800524c:	d508      	bpl.n	8005260 <_dtoa_r+0x160>
 800524e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005252:	eeb4 6b47 	vcmp.f64	d6, d7
 8005256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525a:	bf18      	it	ne
 800525c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005260:	f1bb 0f16 	cmp.w	fp, #22
 8005264:	d82b      	bhi.n	80052be <_dtoa_r+0x1be>
 8005266:	495e      	ldr	r1, [pc, #376]	; (80053e0 <_dtoa_r+0x2e0>)
 8005268:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800526c:	ed91 7b00 	vldr	d7, [r1]
 8005270:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d501      	bpl.n	800527e <_dtoa_r+0x17e>
 800527a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800527e:	2100      	movs	r1, #0
 8005280:	e01e      	b.n	80052c0 <_dtoa_r+0x1c0>
 8005282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005284:	4413      	add	r3, r2
 8005286:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800528a:	2920      	cmp	r1, #32
 800528c:	bfc1      	itttt	gt
 800528e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8005292:	408c      	lslgt	r4, r1
 8005294:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8005298:	fa28 f101 	lsrgt.w	r1, r8, r1
 800529c:	bfd6      	itet	le
 800529e:	f1c1 0120 	rsble	r1, r1, #32
 80052a2:	4321      	orrgt	r1, r4
 80052a4:	fa08 f101 	lslle.w	r1, r8, r1
 80052a8:	ee07 1a90 	vmov	s15, r1
 80052ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80052b0:	3b01      	subs	r3, #1
 80052b2:	ee17 1a90 	vmov	r1, s15
 80052b6:	2001      	movs	r0, #1
 80052b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80052bc:	e7a7      	b.n	800520e <_dtoa_r+0x10e>
 80052be:	2101      	movs	r1, #1
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	1e53      	subs	r3, r2, #1
 80052c4:	9305      	str	r3, [sp, #20]
 80052c6:	bf45      	ittet	mi
 80052c8:	f1c2 0301 	rsbmi	r3, r2, #1
 80052cc:	9304      	strmi	r3, [sp, #16]
 80052ce:	2300      	movpl	r3, #0
 80052d0:	2300      	movmi	r3, #0
 80052d2:	bf4c      	ite	mi
 80052d4:	9305      	strmi	r3, [sp, #20]
 80052d6:	9304      	strpl	r3, [sp, #16]
 80052d8:	f1bb 0f00 	cmp.w	fp, #0
 80052dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80052de:	db18      	blt.n	8005312 <_dtoa_r+0x212>
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80052e6:	445b      	add	r3, fp
 80052e8:	9305      	str	r3, [sp, #20]
 80052ea:	2300      	movs	r3, #0
 80052ec:	9a06      	ldr	r2, [sp, #24]
 80052ee:	2a09      	cmp	r2, #9
 80052f0:	d848      	bhi.n	8005384 <_dtoa_r+0x284>
 80052f2:	2a05      	cmp	r2, #5
 80052f4:	bfc4      	itt	gt
 80052f6:	3a04      	subgt	r2, #4
 80052f8:	9206      	strgt	r2, [sp, #24]
 80052fa:	9a06      	ldr	r2, [sp, #24]
 80052fc:	f1a2 0202 	sub.w	r2, r2, #2
 8005300:	bfcc      	ite	gt
 8005302:	2400      	movgt	r4, #0
 8005304:	2401      	movle	r4, #1
 8005306:	2a03      	cmp	r2, #3
 8005308:	d847      	bhi.n	800539a <_dtoa_r+0x29a>
 800530a:	e8df f002 	tbb	[pc, r2]
 800530e:	2d0b      	.short	0x2d0b
 8005310:	392b      	.short	0x392b
 8005312:	9b04      	ldr	r3, [sp, #16]
 8005314:	2200      	movs	r2, #0
 8005316:	eba3 030b 	sub.w	r3, r3, fp
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	920a      	str	r2, [sp, #40]	; 0x28
 800531e:	f1cb 0300 	rsb	r3, fp, #0
 8005322:	e7e3      	b.n	80052ec <_dtoa_r+0x1ec>
 8005324:	2200      	movs	r2, #0
 8005326:	9207      	str	r2, [sp, #28]
 8005328:	9a08      	ldr	r2, [sp, #32]
 800532a:	2a00      	cmp	r2, #0
 800532c:	dc38      	bgt.n	80053a0 <_dtoa_r+0x2a0>
 800532e:	f04f 0a01 	mov.w	sl, #1
 8005332:	46d1      	mov	r9, sl
 8005334:	4652      	mov	r2, sl
 8005336:	f8cd a020 	str.w	sl, [sp, #32]
 800533a:	69f7      	ldr	r7, [r6, #28]
 800533c:	2100      	movs	r1, #0
 800533e:	2004      	movs	r0, #4
 8005340:	f100 0c14 	add.w	ip, r0, #20
 8005344:	4594      	cmp	ip, r2
 8005346:	d930      	bls.n	80053aa <_dtoa_r+0x2aa>
 8005348:	6079      	str	r1, [r7, #4]
 800534a:	4630      	mov	r0, r6
 800534c:	930d      	str	r3, [sp, #52]	; 0x34
 800534e:	f000 fd43 	bl	8005dd8 <_Balloc>
 8005352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005354:	9001      	str	r0, [sp, #4]
 8005356:	4602      	mov	r2, r0
 8005358:	2800      	cmp	r0, #0
 800535a:	d145      	bne.n	80053e8 <_dtoa_r+0x2e8>
 800535c:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <_dtoa_r+0x2e4>)
 800535e:	f240 11af 	movw	r1, #431	; 0x1af
 8005362:	e6e5      	b.n	8005130 <_dtoa_r+0x30>
 8005364:	2201      	movs	r2, #1
 8005366:	e7de      	b.n	8005326 <_dtoa_r+0x226>
 8005368:	2200      	movs	r2, #0
 800536a:	9207      	str	r2, [sp, #28]
 800536c:	9a08      	ldr	r2, [sp, #32]
 800536e:	eb0b 0a02 	add.w	sl, fp, r2
 8005372:	f10a 0901 	add.w	r9, sl, #1
 8005376:	464a      	mov	r2, r9
 8005378:	2a01      	cmp	r2, #1
 800537a:	bfb8      	it	lt
 800537c:	2201      	movlt	r2, #1
 800537e:	e7dc      	b.n	800533a <_dtoa_r+0x23a>
 8005380:	2201      	movs	r2, #1
 8005382:	e7f2      	b.n	800536a <_dtoa_r+0x26a>
 8005384:	2401      	movs	r4, #1
 8005386:	2200      	movs	r2, #0
 8005388:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800538c:	f04f 3aff 	mov.w	sl, #4294967295
 8005390:	2100      	movs	r1, #0
 8005392:	46d1      	mov	r9, sl
 8005394:	2212      	movs	r2, #18
 8005396:	9108      	str	r1, [sp, #32]
 8005398:	e7cf      	b.n	800533a <_dtoa_r+0x23a>
 800539a:	2201      	movs	r2, #1
 800539c:	9207      	str	r2, [sp, #28]
 800539e:	e7f5      	b.n	800538c <_dtoa_r+0x28c>
 80053a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80053a4:	46d1      	mov	r9, sl
 80053a6:	4652      	mov	r2, sl
 80053a8:	e7c7      	b.n	800533a <_dtoa_r+0x23a>
 80053aa:	3101      	adds	r1, #1
 80053ac:	0040      	lsls	r0, r0, #1
 80053ae:	e7c7      	b.n	8005340 <_dtoa_r+0x240>
 80053b0:	636f4361 	.word	0x636f4361
 80053b4:	3fd287a7 	.word	0x3fd287a7
 80053b8:	8b60c8b3 	.word	0x8b60c8b3
 80053bc:	3fc68a28 	.word	0x3fc68a28
 80053c0:	509f79fb 	.word	0x509f79fb
 80053c4:	3fd34413 	.word	0x3fd34413
 80053c8:	08007075 	.word	0x08007075
 80053cc:	0800708c 	.word	0x0800708c
 80053d0:	7ff00000 	.word	0x7ff00000
 80053d4:	08007071 	.word	0x08007071
 80053d8:	08007068 	.word	0x08007068
 80053dc:	08007045 	.word	0x08007045
 80053e0:	08007178 	.word	0x08007178
 80053e4:	080070e4 	.word	0x080070e4
 80053e8:	69f2      	ldr	r2, [r6, #28]
 80053ea:	9901      	ldr	r1, [sp, #4]
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	f1b9 0f0e 	cmp.w	r9, #14
 80053f2:	d86c      	bhi.n	80054ce <_dtoa_r+0x3ce>
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d06a      	beq.n	80054ce <_dtoa_r+0x3ce>
 80053f8:	f1bb 0f00 	cmp.w	fp, #0
 80053fc:	f340 80a0 	ble.w	8005540 <_dtoa_r+0x440>
 8005400:	4ac1      	ldr	r2, [pc, #772]	; (8005708 <_dtoa_r+0x608>)
 8005402:	f00b 010f 	and.w	r1, fp, #15
 8005406:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800540a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800540e:	ed92 7b00 	vldr	d7, [r2]
 8005412:	ea4f 122b 	mov.w	r2, fp, asr #4
 8005416:	f000 8087 	beq.w	8005528 <_dtoa_r+0x428>
 800541a:	49bc      	ldr	r1, [pc, #752]	; (800570c <_dtoa_r+0x60c>)
 800541c:	ed91 6b08 	vldr	d6, [r1, #32]
 8005420:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005424:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005428:	f002 020f 	and.w	r2, r2, #15
 800542c:	2103      	movs	r1, #3
 800542e:	48b7      	ldr	r0, [pc, #732]	; (800570c <_dtoa_r+0x60c>)
 8005430:	2a00      	cmp	r2, #0
 8005432:	d17b      	bne.n	800552c <_dtoa_r+0x42c>
 8005434:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005438:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800543c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005442:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005446:	2a00      	cmp	r2, #0
 8005448:	f000 80a0 	beq.w	800558c <_dtoa_r+0x48c>
 800544c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005450:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	f140 8098 	bpl.w	800558c <_dtoa_r+0x48c>
 800545c:	f1b9 0f00 	cmp.w	r9, #0
 8005460:	f000 8094 	beq.w	800558c <_dtoa_r+0x48c>
 8005464:	f1ba 0f00 	cmp.w	sl, #0
 8005468:	dd2f      	ble.n	80054ca <_dtoa_r+0x3ca>
 800546a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800546e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005472:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005476:	f10b 32ff 	add.w	r2, fp, #4294967295
 800547a:	3101      	adds	r1, #1
 800547c:	4654      	mov	r4, sl
 800547e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005482:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005486:	ee07 1a90 	vmov	s15, r1
 800548a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800548e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005492:	ee15 7a90 	vmov	r7, s11
 8005496:	ec51 0b15 	vmov	r0, r1, d5
 800549a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800549e:	2c00      	cmp	r4, #0
 80054a0:	d177      	bne.n	8005592 <_dtoa_r+0x492>
 80054a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80054a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80054aa:	ec41 0b17 	vmov	d7, r0, r1
 80054ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	f300 826a 	bgt.w	800598e <_dtoa_r+0x88e>
 80054ba:	eeb1 7b47 	vneg.f64	d7, d7
 80054be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	f100 8260 	bmi.w	800598a <_dtoa_r+0x88a>
 80054ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80054ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	f2c0 811d 	blt.w	8005710 <_dtoa_r+0x610>
 80054d6:	f1bb 0f0e 	cmp.w	fp, #14
 80054da:	f300 8119 	bgt.w	8005710 <_dtoa_r+0x610>
 80054de:	4b8a      	ldr	r3, [pc, #552]	; (8005708 <_dtoa_r+0x608>)
 80054e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80054e4:	ed93 6b00 	vldr	d6, [r3]
 80054e8:	9b08      	ldr	r3, [sp, #32]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f280 80b7 	bge.w	800565e <_dtoa_r+0x55e>
 80054f0:	f1b9 0f00 	cmp.w	r9, #0
 80054f4:	f300 80b3 	bgt.w	800565e <_dtoa_r+0x55e>
 80054f8:	f040 8246 	bne.w	8005988 <_dtoa_r+0x888>
 80054fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005500:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005504:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005508:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005510:	464c      	mov	r4, r9
 8005512:	464f      	mov	r7, r9
 8005514:	f280 821c 	bge.w	8005950 <_dtoa_r+0x850>
 8005518:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800551c:	2331      	movs	r3, #49	; 0x31
 800551e:	f808 3b01 	strb.w	r3, [r8], #1
 8005522:	f10b 0b01 	add.w	fp, fp, #1
 8005526:	e218      	b.n	800595a <_dtoa_r+0x85a>
 8005528:	2102      	movs	r1, #2
 800552a:	e780      	b.n	800542e <_dtoa_r+0x32e>
 800552c:	07d4      	lsls	r4, r2, #31
 800552e:	d504      	bpl.n	800553a <_dtoa_r+0x43a>
 8005530:	ed90 6b00 	vldr	d6, [r0]
 8005534:	3101      	adds	r1, #1
 8005536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800553a:	1052      	asrs	r2, r2, #1
 800553c:	3008      	adds	r0, #8
 800553e:	e777      	b.n	8005430 <_dtoa_r+0x330>
 8005540:	d022      	beq.n	8005588 <_dtoa_r+0x488>
 8005542:	f1cb 0200 	rsb	r2, fp, #0
 8005546:	4970      	ldr	r1, [pc, #448]	; (8005708 <_dtoa_r+0x608>)
 8005548:	f002 000f 	and.w	r0, r2, #15
 800554c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005550:	ed91 7b00 	vldr	d7, [r1]
 8005554:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800555c:	486b      	ldr	r0, [pc, #428]	; (800570c <_dtoa_r+0x60c>)
 800555e:	1112      	asrs	r2, r2, #4
 8005560:	2400      	movs	r4, #0
 8005562:	2102      	movs	r1, #2
 8005564:	b92a      	cbnz	r2, 8005572 <_dtoa_r+0x472>
 8005566:	2c00      	cmp	r4, #0
 8005568:	f43f af6a 	beq.w	8005440 <_dtoa_r+0x340>
 800556c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005570:	e766      	b.n	8005440 <_dtoa_r+0x340>
 8005572:	07d7      	lsls	r7, r2, #31
 8005574:	d505      	bpl.n	8005582 <_dtoa_r+0x482>
 8005576:	ed90 6b00 	vldr	d6, [r0]
 800557a:	3101      	adds	r1, #1
 800557c:	2401      	movs	r4, #1
 800557e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005582:	1052      	asrs	r2, r2, #1
 8005584:	3008      	adds	r0, #8
 8005586:	e7ed      	b.n	8005564 <_dtoa_r+0x464>
 8005588:	2102      	movs	r1, #2
 800558a:	e759      	b.n	8005440 <_dtoa_r+0x340>
 800558c:	465a      	mov	r2, fp
 800558e:	464c      	mov	r4, r9
 8005590:	e775      	b.n	800547e <_dtoa_r+0x37e>
 8005592:	ec41 0b17 	vmov	d7, r0, r1
 8005596:	495c      	ldr	r1, [pc, #368]	; (8005708 <_dtoa_r+0x608>)
 8005598:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800559c:	ed11 4b02 	vldr	d4, [r1, #-8]
 80055a0:	9901      	ldr	r1, [sp, #4]
 80055a2:	440c      	add	r4, r1
 80055a4:	9907      	ldr	r1, [sp, #28]
 80055a6:	b351      	cbz	r1, 80055fe <_dtoa_r+0x4fe>
 80055a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80055ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80055b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80055b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80055bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80055c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80055c4:	ee14 1a90 	vmov	r1, s9
 80055c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80055cc:	3130      	adds	r1, #48	; 0x30
 80055ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80055d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055da:	f808 1b01 	strb.w	r1, [r8], #1
 80055de:	d439      	bmi.n	8005654 <_dtoa_r+0x554>
 80055e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80055e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80055e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ec:	d472      	bmi.n	80056d4 <_dtoa_r+0x5d4>
 80055ee:	45a0      	cmp	r8, r4
 80055f0:	f43f af6b 	beq.w	80054ca <_dtoa_r+0x3ca>
 80055f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80055f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80055fc:	e7e0      	b.n	80055c0 <_dtoa_r+0x4c0>
 80055fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005602:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005606:	4620      	mov	r0, r4
 8005608:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800560c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005610:	ee14 1a90 	vmov	r1, s9
 8005614:	3130      	adds	r1, #48	; 0x30
 8005616:	f808 1b01 	strb.w	r1, [r8], #1
 800561a:	45a0      	cmp	r8, r4
 800561c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005620:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005624:	d118      	bne.n	8005658 <_dtoa_r+0x558>
 8005626:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800562a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800562e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	dc4d      	bgt.n	80056d4 <_dtoa_r+0x5d4>
 8005638:	ee35 5b47 	vsub.f64	d5, d5, d7
 800563c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	f57f af41 	bpl.w	80054ca <_dtoa_r+0x3ca>
 8005648:	4680      	mov	r8, r0
 800564a:	3801      	subs	r0, #1
 800564c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005650:	2b30      	cmp	r3, #48	; 0x30
 8005652:	d0f9      	beq.n	8005648 <_dtoa_r+0x548>
 8005654:	4693      	mov	fp, r2
 8005656:	e02a      	b.n	80056ae <_dtoa_r+0x5ae>
 8005658:	ee26 6b03 	vmul.f64	d6, d6, d3
 800565c:	e7d6      	b.n	800560c <_dtoa_r+0x50c>
 800565e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005662:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005666:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800566a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800566e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005672:	ee15 3a10 	vmov	r3, s10
 8005676:	3330      	adds	r3, #48	; 0x30
 8005678:	f808 3b01 	strb.w	r3, [r8], #1
 800567c:	9b01      	ldr	r3, [sp, #4]
 800567e:	eba8 0303 	sub.w	r3, r8, r3
 8005682:	4599      	cmp	r9, r3
 8005684:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005688:	eea3 7b46 	vfms.f64	d7, d3, d6
 800568c:	d133      	bne.n	80056f6 <_dtoa_r+0x5f6>
 800568e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005692:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	dc1a      	bgt.n	80056d2 <_dtoa_r+0x5d2>
 800569c:	eeb4 7b46 	vcmp.f64	d7, d6
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	d103      	bne.n	80056ae <_dtoa_r+0x5ae>
 80056a6:	ee15 3a10 	vmov	r3, s10
 80056aa:	07d9      	lsls	r1, r3, #31
 80056ac:	d411      	bmi.n	80056d2 <_dtoa_r+0x5d2>
 80056ae:	4629      	mov	r1, r5
 80056b0:	4630      	mov	r0, r6
 80056b2:	f000 fbd1 	bl	8005e58 <_Bfree>
 80056b6:	2300      	movs	r3, #0
 80056b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ba:	f888 3000 	strb.w	r3, [r8]
 80056be:	f10b 0301 	add.w	r3, fp, #1
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f43f ad69 	beq.w	800519e <_dtoa_r+0x9e>
 80056cc:	f8c3 8000 	str.w	r8, [r3]
 80056d0:	e565      	b.n	800519e <_dtoa_r+0x9e>
 80056d2:	465a      	mov	r2, fp
 80056d4:	4643      	mov	r3, r8
 80056d6:	4698      	mov	r8, r3
 80056d8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80056dc:	2939      	cmp	r1, #57	; 0x39
 80056de:	d106      	bne.n	80056ee <_dtoa_r+0x5ee>
 80056e0:	9901      	ldr	r1, [sp, #4]
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d1f7      	bne.n	80056d6 <_dtoa_r+0x5d6>
 80056e6:	9801      	ldr	r0, [sp, #4]
 80056e8:	2130      	movs	r1, #48	; 0x30
 80056ea:	3201      	adds	r2, #1
 80056ec:	7001      	strb	r1, [r0, #0]
 80056ee:	7819      	ldrb	r1, [r3, #0]
 80056f0:	3101      	adds	r1, #1
 80056f2:	7019      	strb	r1, [r3, #0]
 80056f4:	e7ae      	b.n	8005654 <_dtoa_r+0x554>
 80056f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80056fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005702:	d1b2      	bne.n	800566a <_dtoa_r+0x56a>
 8005704:	e7d3      	b.n	80056ae <_dtoa_r+0x5ae>
 8005706:	bf00      	nop
 8005708:	08007178 	.word	0x08007178
 800570c:	08007150 	.word	0x08007150
 8005710:	9907      	ldr	r1, [sp, #28]
 8005712:	2900      	cmp	r1, #0
 8005714:	f000 80d0 	beq.w	80058b8 <_dtoa_r+0x7b8>
 8005718:	9906      	ldr	r1, [sp, #24]
 800571a:	2901      	cmp	r1, #1
 800571c:	f300 80b4 	bgt.w	8005888 <_dtoa_r+0x788>
 8005720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005722:	2900      	cmp	r1, #0
 8005724:	f000 80ac 	beq.w	8005880 <_dtoa_r+0x780>
 8005728:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800572c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005730:	461c      	mov	r4, r3
 8005732:	9309      	str	r3, [sp, #36]	; 0x24
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	4413      	add	r3, r2
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	9b05      	ldr	r3, [sp, #20]
 800573c:	2101      	movs	r1, #1
 800573e:	4413      	add	r3, r2
 8005740:	4630      	mov	r0, r6
 8005742:	9305      	str	r3, [sp, #20]
 8005744:	f000 fc3e 	bl	8005fc4 <__i2b>
 8005748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574a:	4607      	mov	r7, r0
 800574c:	f1b8 0f00 	cmp.w	r8, #0
 8005750:	d00d      	beq.n	800576e <_dtoa_r+0x66e>
 8005752:	9a05      	ldr	r2, [sp, #20]
 8005754:	2a00      	cmp	r2, #0
 8005756:	dd0a      	ble.n	800576e <_dtoa_r+0x66e>
 8005758:	4542      	cmp	r2, r8
 800575a:	9904      	ldr	r1, [sp, #16]
 800575c:	bfa8      	it	ge
 800575e:	4642      	movge	r2, r8
 8005760:	1a89      	subs	r1, r1, r2
 8005762:	9104      	str	r1, [sp, #16]
 8005764:	9905      	ldr	r1, [sp, #20]
 8005766:	eba8 0802 	sub.w	r8, r8, r2
 800576a:	1a8a      	subs	r2, r1, r2
 800576c:	9205      	str	r2, [sp, #20]
 800576e:	b303      	cbz	r3, 80057b2 <_dtoa_r+0x6b2>
 8005770:	9a07      	ldr	r2, [sp, #28]
 8005772:	2a00      	cmp	r2, #0
 8005774:	f000 80a5 	beq.w	80058c2 <_dtoa_r+0x7c2>
 8005778:	2c00      	cmp	r4, #0
 800577a:	dd13      	ble.n	80057a4 <_dtoa_r+0x6a4>
 800577c:	4639      	mov	r1, r7
 800577e:	4622      	mov	r2, r4
 8005780:	4630      	mov	r0, r6
 8005782:	930d      	str	r3, [sp, #52]	; 0x34
 8005784:	f000 fcde 	bl	8006144 <__pow5mult>
 8005788:	462a      	mov	r2, r5
 800578a:	4601      	mov	r1, r0
 800578c:	4607      	mov	r7, r0
 800578e:	4630      	mov	r0, r6
 8005790:	f000 fc2e 	bl	8005ff0 <__multiply>
 8005794:	4629      	mov	r1, r5
 8005796:	9009      	str	r0, [sp, #36]	; 0x24
 8005798:	4630      	mov	r0, r6
 800579a:	f000 fb5d 	bl	8005e58 <_Bfree>
 800579e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a2:	4615      	mov	r5, r2
 80057a4:	1b1a      	subs	r2, r3, r4
 80057a6:	d004      	beq.n	80057b2 <_dtoa_r+0x6b2>
 80057a8:	4629      	mov	r1, r5
 80057aa:	4630      	mov	r0, r6
 80057ac:	f000 fcca 	bl	8006144 <__pow5mult>
 80057b0:	4605      	mov	r5, r0
 80057b2:	2101      	movs	r1, #1
 80057b4:	4630      	mov	r0, r6
 80057b6:	f000 fc05 	bl	8005fc4 <__i2b>
 80057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	f340 8081 	ble.w	80058c6 <_dtoa_r+0x7c6>
 80057c4:	461a      	mov	r2, r3
 80057c6:	4601      	mov	r1, r0
 80057c8:	4630      	mov	r0, r6
 80057ca:	f000 fcbb 	bl	8006144 <__pow5mult>
 80057ce:	9b06      	ldr	r3, [sp, #24]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	4604      	mov	r4, r0
 80057d4:	dd7a      	ble.n	80058cc <_dtoa_r+0x7cc>
 80057d6:	2300      	movs	r3, #0
 80057d8:	9309      	str	r3, [sp, #36]	; 0x24
 80057da:	6922      	ldr	r2, [r4, #16]
 80057dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80057e0:	6910      	ldr	r0, [r2, #16]
 80057e2:	f000 fba1 	bl	8005f28 <__hi0bits>
 80057e6:	f1c0 0020 	rsb	r0, r0, #32
 80057ea:	9b05      	ldr	r3, [sp, #20]
 80057ec:	4418      	add	r0, r3
 80057ee:	f010 001f 	ands.w	r0, r0, #31
 80057f2:	f000 8093 	beq.w	800591c <_dtoa_r+0x81c>
 80057f6:	f1c0 0220 	rsb	r2, r0, #32
 80057fa:	2a04      	cmp	r2, #4
 80057fc:	f340 8085 	ble.w	800590a <_dtoa_r+0x80a>
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	f1c0 001c 	rsb	r0, r0, #28
 8005806:	4403      	add	r3, r0
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	4480      	add	r8, r0
 800580e:	4403      	add	r3, r0
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	dd05      	ble.n	8005824 <_dtoa_r+0x724>
 8005818:	4629      	mov	r1, r5
 800581a:	461a      	mov	r2, r3
 800581c:	4630      	mov	r0, r6
 800581e:	f000 fceb 	bl	80061f8 <__lshift>
 8005822:	4605      	mov	r5, r0
 8005824:	9b05      	ldr	r3, [sp, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	dd05      	ble.n	8005836 <_dtoa_r+0x736>
 800582a:	4621      	mov	r1, r4
 800582c:	461a      	mov	r2, r3
 800582e:	4630      	mov	r0, r6
 8005830:	f000 fce2 	bl	80061f8 <__lshift>
 8005834:	4604      	mov	r4, r0
 8005836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d071      	beq.n	8005920 <_dtoa_r+0x820>
 800583c:	4621      	mov	r1, r4
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fd46 	bl	80062d0 <__mcmp>
 8005844:	2800      	cmp	r0, #0
 8005846:	da6b      	bge.n	8005920 <_dtoa_r+0x820>
 8005848:	2300      	movs	r3, #0
 800584a:	4629      	mov	r1, r5
 800584c:	220a      	movs	r2, #10
 800584e:	4630      	mov	r0, r6
 8005850:	f000 fb24 	bl	8005e9c <__multadd>
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	f10b 3bff 	add.w	fp, fp, #4294967295
 800585a:	4605      	mov	r5, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8197 	beq.w	8005b90 <_dtoa_r+0xa90>
 8005862:	4639      	mov	r1, r7
 8005864:	2300      	movs	r3, #0
 8005866:	220a      	movs	r2, #10
 8005868:	4630      	mov	r0, r6
 800586a:	f000 fb17 	bl	8005e9c <__multadd>
 800586e:	f1ba 0f00 	cmp.w	sl, #0
 8005872:	4607      	mov	r7, r0
 8005874:	f300 8093 	bgt.w	800599e <_dtoa_r+0x89e>
 8005878:	9b06      	ldr	r3, [sp, #24]
 800587a:	2b02      	cmp	r3, #2
 800587c:	dc57      	bgt.n	800592e <_dtoa_r+0x82e>
 800587e:	e08e      	b.n	800599e <_dtoa_r+0x89e>
 8005880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005882:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005886:	e751      	b.n	800572c <_dtoa_r+0x62c>
 8005888:	f109 34ff 	add.w	r4, r9, #4294967295
 800588c:	42a3      	cmp	r3, r4
 800588e:	bfbf      	itttt	lt
 8005890:	1ae2      	sublt	r2, r4, r3
 8005892:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005894:	189b      	addlt	r3, r3, r2
 8005896:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005898:	bfae      	itee	ge
 800589a:	1b1c      	subge	r4, r3, r4
 800589c:	4623      	movlt	r3, r4
 800589e:	2400      	movlt	r4, #0
 80058a0:	f1b9 0f00 	cmp.w	r9, #0
 80058a4:	bfb5      	itete	lt
 80058a6:	9a04      	ldrlt	r2, [sp, #16]
 80058a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80058ac:	eba2 0809 	sublt.w	r8, r2, r9
 80058b0:	464a      	movge	r2, r9
 80058b2:	bfb8      	it	lt
 80058b4:	2200      	movlt	r2, #0
 80058b6:	e73c      	b.n	8005732 <_dtoa_r+0x632>
 80058b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80058bc:	9f07      	ldr	r7, [sp, #28]
 80058be:	461c      	mov	r4, r3
 80058c0:	e744      	b.n	800574c <_dtoa_r+0x64c>
 80058c2:	461a      	mov	r2, r3
 80058c4:	e770      	b.n	80057a8 <_dtoa_r+0x6a8>
 80058c6:	9b06      	ldr	r3, [sp, #24]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	dc18      	bgt.n	80058fe <_dtoa_r+0x7fe>
 80058cc:	9b02      	ldr	r3, [sp, #8]
 80058ce:	b9b3      	cbnz	r3, 80058fe <_dtoa_r+0x7fe>
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80058d6:	b9a2      	cbnz	r2, 8005902 <_dtoa_r+0x802>
 80058d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058dc:	0d12      	lsrs	r2, r2, #20
 80058de:	0512      	lsls	r2, r2, #20
 80058e0:	b18a      	cbz	r2, 8005906 <_dtoa_r+0x806>
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	3301      	adds	r3, #1
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	3301      	adds	r3, #1
 80058ec:	9305      	str	r3, [sp, #20]
 80058ee:	2301      	movs	r3, #1
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af70 	bne.w	80057da <_dtoa_r+0x6da>
 80058fa:	2001      	movs	r0, #1
 80058fc:	e775      	b.n	80057ea <_dtoa_r+0x6ea>
 80058fe:	2300      	movs	r3, #0
 8005900:	e7f6      	b.n	80058f0 <_dtoa_r+0x7f0>
 8005902:	9b02      	ldr	r3, [sp, #8]
 8005904:	e7f4      	b.n	80058f0 <_dtoa_r+0x7f0>
 8005906:	9209      	str	r2, [sp, #36]	; 0x24
 8005908:	e7f3      	b.n	80058f2 <_dtoa_r+0x7f2>
 800590a:	d082      	beq.n	8005812 <_dtoa_r+0x712>
 800590c:	9b04      	ldr	r3, [sp, #16]
 800590e:	321c      	adds	r2, #28
 8005910:	4413      	add	r3, r2
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	9b05      	ldr	r3, [sp, #20]
 8005916:	4490      	add	r8, r2
 8005918:	4413      	add	r3, r2
 800591a:	e779      	b.n	8005810 <_dtoa_r+0x710>
 800591c:	4602      	mov	r2, r0
 800591e:	e7f5      	b.n	800590c <_dtoa_r+0x80c>
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	dc36      	bgt.n	8005994 <_dtoa_r+0x894>
 8005926:	9b06      	ldr	r3, [sp, #24]
 8005928:	2b02      	cmp	r3, #2
 800592a:	dd33      	ble.n	8005994 <_dtoa_r+0x894>
 800592c:	46ca      	mov	sl, r9
 800592e:	f1ba 0f00 	cmp.w	sl, #0
 8005932:	d10d      	bne.n	8005950 <_dtoa_r+0x850>
 8005934:	4621      	mov	r1, r4
 8005936:	4653      	mov	r3, sl
 8005938:	2205      	movs	r2, #5
 800593a:	4630      	mov	r0, r6
 800593c:	f000 faae 	bl	8005e9c <__multadd>
 8005940:	4601      	mov	r1, r0
 8005942:	4604      	mov	r4, r0
 8005944:	4628      	mov	r0, r5
 8005946:	f000 fcc3 	bl	80062d0 <__mcmp>
 800594a:	2800      	cmp	r0, #0
 800594c:	f73f ade4 	bgt.w	8005518 <_dtoa_r+0x418>
 8005950:	9b08      	ldr	r3, [sp, #32]
 8005952:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005956:	ea6f 0b03 	mvn.w	fp, r3
 800595a:	f04f 0900 	mov.w	r9, #0
 800595e:	4621      	mov	r1, r4
 8005960:	4630      	mov	r0, r6
 8005962:	f000 fa79 	bl	8005e58 <_Bfree>
 8005966:	2f00      	cmp	r7, #0
 8005968:	f43f aea1 	beq.w	80056ae <_dtoa_r+0x5ae>
 800596c:	f1b9 0f00 	cmp.w	r9, #0
 8005970:	d005      	beq.n	800597e <_dtoa_r+0x87e>
 8005972:	45b9      	cmp	r9, r7
 8005974:	d003      	beq.n	800597e <_dtoa_r+0x87e>
 8005976:	4649      	mov	r1, r9
 8005978:	4630      	mov	r0, r6
 800597a:	f000 fa6d 	bl	8005e58 <_Bfree>
 800597e:	4639      	mov	r1, r7
 8005980:	4630      	mov	r0, r6
 8005982:	f000 fa69 	bl	8005e58 <_Bfree>
 8005986:	e692      	b.n	80056ae <_dtoa_r+0x5ae>
 8005988:	2400      	movs	r4, #0
 800598a:	4627      	mov	r7, r4
 800598c:	e7e0      	b.n	8005950 <_dtoa_r+0x850>
 800598e:	4693      	mov	fp, r2
 8005990:	4627      	mov	r7, r4
 8005992:	e5c1      	b.n	8005518 <_dtoa_r+0x418>
 8005994:	9b07      	ldr	r3, [sp, #28]
 8005996:	46ca      	mov	sl, r9
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8100 	beq.w	8005b9e <_dtoa_r+0xa9e>
 800599e:	f1b8 0f00 	cmp.w	r8, #0
 80059a2:	dd05      	ble.n	80059b0 <_dtoa_r+0x8b0>
 80059a4:	4639      	mov	r1, r7
 80059a6:	4642      	mov	r2, r8
 80059a8:	4630      	mov	r0, r6
 80059aa:	f000 fc25 	bl	80061f8 <__lshift>
 80059ae:	4607      	mov	r7, r0
 80059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d05d      	beq.n	8005a72 <_dtoa_r+0x972>
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4630      	mov	r0, r6
 80059ba:	f000 fa0d 	bl	8005dd8 <_Balloc>
 80059be:	4680      	mov	r8, r0
 80059c0:	b928      	cbnz	r0, 80059ce <_dtoa_r+0x8ce>
 80059c2:	4b82      	ldr	r3, [pc, #520]	; (8005bcc <_dtoa_r+0xacc>)
 80059c4:	4602      	mov	r2, r0
 80059c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80059ca:	f7ff bbb1 	b.w	8005130 <_dtoa_r+0x30>
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	3202      	adds	r2, #2
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	f107 010c 	add.w	r1, r7, #12
 80059d8:	300c      	adds	r0, #12
 80059da:	f000 ffa9 	bl	8006930 <memcpy>
 80059de:	2201      	movs	r2, #1
 80059e0:	4641      	mov	r1, r8
 80059e2:	4630      	mov	r0, r6
 80059e4:	f000 fc08 	bl	80061f8 <__lshift>
 80059e8:	9b01      	ldr	r3, [sp, #4]
 80059ea:	3301      	adds	r3, #1
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	4453      	add	r3, sl
 80059f2:	9308      	str	r3, [sp, #32]
 80059f4:	9b02      	ldr	r3, [sp, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	46b9      	mov	r9, r7
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	4607      	mov	r7, r0
 8005a00:	9b04      	ldr	r3, [sp, #16]
 8005a02:	4621      	mov	r1, r4
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4628      	mov	r0, r5
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	f7ff faf1 	bl	8004ff0 <quorem>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	3330      	adds	r3, #48	; 0x30
 8005a12:	9005      	str	r0, [sp, #20]
 8005a14:	4649      	mov	r1, r9
 8005a16:	4628      	mov	r0, r5
 8005a18:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1a:	f000 fc59 	bl	80062d0 <__mcmp>
 8005a1e:	463a      	mov	r2, r7
 8005a20:	4682      	mov	sl, r0
 8005a22:	4621      	mov	r1, r4
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 fc6f 	bl	8006308 <__mdiff>
 8005a2a:	68c2      	ldr	r2, [r0, #12]
 8005a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2e:	4680      	mov	r8, r0
 8005a30:	bb0a      	cbnz	r2, 8005a76 <_dtoa_r+0x976>
 8005a32:	4601      	mov	r1, r0
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 fc4b 	bl	80062d0 <__mcmp>
 8005a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4641      	mov	r1, r8
 8005a40:	4630      	mov	r0, r6
 8005a42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005a46:	f000 fa07 	bl	8005e58 <_Bfree>
 8005a4a:	9b06      	ldr	r3, [sp, #24]
 8005a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005a52:	ea43 0102 	orr.w	r1, r3, r2
 8005a56:	9b07      	ldr	r3, [sp, #28]
 8005a58:	4319      	orrs	r1, r3
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	d10d      	bne.n	8005a7a <_dtoa_r+0x97a>
 8005a5e:	2b39      	cmp	r3, #57	; 0x39
 8005a60:	d029      	beq.n	8005ab6 <_dtoa_r+0x9b6>
 8005a62:	f1ba 0f00 	cmp.w	sl, #0
 8005a66:	dd01      	ble.n	8005a6c <_dtoa_r+0x96c>
 8005a68:	9b05      	ldr	r3, [sp, #20]
 8005a6a:	3331      	adds	r3, #49	; 0x31
 8005a6c:	9a02      	ldr	r2, [sp, #8]
 8005a6e:	7013      	strb	r3, [r2, #0]
 8005a70:	e775      	b.n	800595e <_dtoa_r+0x85e>
 8005a72:	4638      	mov	r0, r7
 8005a74:	e7b8      	b.n	80059e8 <_dtoa_r+0x8e8>
 8005a76:	2201      	movs	r2, #1
 8005a78:	e7e1      	b.n	8005a3e <_dtoa_r+0x93e>
 8005a7a:	f1ba 0f00 	cmp.w	sl, #0
 8005a7e:	db06      	blt.n	8005a8e <_dtoa_r+0x98e>
 8005a80:	9906      	ldr	r1, [sp, #24]
 8005a82:	ea41 0a0a 	orr.w	sl, r1, sl
 8005a86:	9907      	ldr	r1, [sp, #28]
 8005a88:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005a8c:	d120      	bne.n	8005ad0 <_dtoa_r+0x9d0>
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	ddec      	ble.n	8005a6c <_dtoa_r+0x96c>
 8005a92:	4629      	mov	r1, r5
 8005a94:	2201      	movs	r2, #1
 8005a96:	4630      	mov	r0, r6
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	f000 fbad 	bl	80061f8 <__lshift>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f000 fc15 	bl	80062d0 <__mcmp>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	9b04      	ldr	r3, [sp, #16]
 8005aaa:	dc02      	bgt.n	8005ab2 <_dtoa_r+0x9b2>
 8005aac:	d1de      	bne.n	8005a6c <_dtoa_r+0x96c>
 8005aae:	07da      	lsls	r2, r3, #31
 8005ab0:	d5dc      	bpl.n	8005a6c <_dtoa_r+0x96c>
 8005ab2:	2b39      	cmp	r3, #57	; 0x39
 8005ab4:	d1d8      	bne.n	8005a68 <_dtoa_r+0x968>
 8005ab6:	9a02      	ldr	r2, [sp, #8]
 8005ab8:	2339      	movs	r3, #57	; 0x39
 8005aba:	7013      	strb	r3, [r2, #0]
 8005abc:	4643      	mov	r3, r8
 8005abe:	4698      	mov	r8, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005ac6:	2a39      	cmp	r2, #57	; 0x39
 8005ac8:	d051      	beq.n	8005b6e <_dtoa_r+0xa6e>
 8005aca:	3201      	adds	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e746      	b.n	800595e <_dtoa_r+0x85e>
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	dd03      	ble.n	8005adc <_dtoa_r+0x9dc>
 8005ad4:	2b39      	cmp	r3, #57	; 0x39
 8005ad6:	d0ee      	beq.n	8005ab6 <_dtoa_r+0x9b6>
 8005ad8:	3301      	adds	r3, #1
 8005ada:	e7c7      	b.n	8005a6c <_dtoa_r+0x96c>
 8005adc:	9a04      	ldr	r2, [sp, #16]
 8005ade:	9908      	ldr	r1, [sp, #32]
 8005ae0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ae4:	428a      	cmp	r2, r1
 8005ae6:	d02b      	beq.n	8005b40 <_dtoa_r+0xa40>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	2300      	movs	r3, #0
 8005aec:	220a      	movs	r2, #10
 8005aee:	4630      	mov	r0, r6
 8005af0:	f000 f9d4 	bl	8005e9c <__multadd>
 8005af4:	45b9      	cmp	r9, r7
 8005af6:	4605      	mov	r5, r0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	f04f 020a 	mov.w	r2, #10
 8005b00:	4649      	mov	r1, r9
 8005b02:	4630      	mov	r0, r6
 8005b04:	d107      	bne.n	8005b16 <_dtoa_r+0xa16>
 8005b06:	f000 f9c9 	bl	8005e9c <__multadd>
 8005b0a:	4681      	mov	r9, r0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	9b04      	ldr	r3, [sp, #16]
 8005b10:	3301      	adds	r3, #1
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	e774      	b.n	8005a00 <_dtoa_r+0x900>
 8005b16:	f000 f9c1 	bl	8005e9c <__multadd>
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4681      	mov	r9, r0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	220a      	movs	r2, #10
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 f9ba 	bl	8005e9c <__multadd>
 8005b28:	4607      	mov	r7, r0
 8005b2a:	e7f0      	b.n	8005b0e <_dtoa_r+0xa0e>
 8005b2c:	f1ba 0f00 	cmp.w	sl, #0
 8005b30:	9a01      	ldr	r2, [sp, #4]
 8005b32:	bfcc      	ite	gt
 8005b34:	46d0      	movgt	r8, sl
 8005b36:	f04f 0801 	movle.w	r8, #1
 8005b3a:	4490      	add	r8, r2
 8005b3c:	f04f 0900 	mov.w	r9, #0
 8005b40:	4629      	mov	r1, r5
 8005b42:	2201      	movs	r2, #1
 8005b44:	4630      	mov	r0, r6
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	f000 fb56 	bl	80061f8 <__lshift>
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4605      	mov	r5, r0
 8005b50:	f000 fbbe 	bl	80062d0 <__mcmp>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	dcb1      	bgt.n	8005abc <_dtoa_r+0x9bc>
 8005b58:	d102      	bne.n	8005b60 <_dtoa_r+0xa60>
 8005b5a:	9b02      	ldr	r3, [sp, #8]
 8005b5c:	07db      	lsls	r3, r3, #31
 8005b5e:	d4ad      	bmi.n	8005abc <_dtoa_r+0x9bc>
 8005b60:	4643      	mov	r3, r8
 8005b62:	4698      	mov	r8, r3
 8005b64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b68:	2a30      	cmp	r2, #48	; 0x30
 8005b6a:	d0fa      	beq.n	8005b62 <_dtoa_r+0xa62>
 8005b6c:	e6f7      	b.n	800595e <_dtoa_r+0x85e>
 8005b6e:	9a01      	ldr	r2, [sp, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1a4      	bne.n	8005abe <_dtoa_r+0x9be>
 8005b74:	f10b 0b01 	add.w	fp, fp, #1
 8005b78:	2331      	movs	r3, #49	; 0x31
 8005b7a:	e778      	b.n	8005a6e <_dtoa_r+0x96e>
 8005b7c:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <_dtoa_r+0xad0>)
 8005b7e:	f7ff bb2a 	b.w	80051d6 <_dtoa_r+0xd6>
 8005b82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f47f ab05 	bne.w	8005194 <_dtoa_r+0x94>
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <_dtoa_r+0xad4>)
 8005b8c:	f7ff bb23 	b.w	80051d6 <_dtoa_r+0xd6>
 8005b90:	f1ba 0f00 	cmp.w	sl, #0
 8005b94:	dc03      	bgt.n	8005b9e <_dtoa_r+0xa9e>
 8005b96:	9b06      	ldr	r3, [sp, #24]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	f73f aec8 	bgt.w	800592e <_dtoa_r+0x82e>
 8005b9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f7ff fa23 	bl	8004ff0 <quorem>
 8005baa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005bae:	f808 3b01 	strb.w	r3, [r8], #1
 8005bb2:	9a01      	ldr	r2, [sp, #4]
 8005bb4:	eba8 0202 	sub.w	r2, r8, r2
 8005bb8:	4592      	cmp	sl, r2
 8005bba:	ddb7      	ble.n	8005b2c <_dtoa_r+0xa2c>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f000 f96a 	bl	8005e9c <__multadd>
 8005bc8:	4605      	mov	r5, r0
 8005bca:	e7ea      	b.n	8005ba2 <_dtoa_r+0xaa2>
 8005bcc:	080070e4 	.word	0x080070e4
 8005bd0:	08007044 	.word	0x08007044
 8005bd4:	08007068 	.word	0x08007068

08005bd8 <_free_r>:
 8005bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bda:	2900      	cmp	r1, #0
 8005bdc:	d044      	beq.n	8005c68 <_free_r+0x90>
 8005bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be2:	9001      	str	r0, [sp, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bea:	bfb8      	it	lt
 8005bec:	18e4      	addlt	r4, r4, r3
 8005bee:	f000 f8e7 	bl	8005dc0 <__malloc_lock>
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <_free_r+0x94>)
 8005bf4:	9801      	ldr	r0, [sp, #4]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	b933      	cbnz	r3, 8005c08 <_free_r+0x30>
 8005bfa:	6063      	str	r3, [r4, #4]
 8005bfc:	6014      	str	r4, [r2, #0]
 8005bfe:	b003      	add	sp, #12
 8005c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c04:	f000 b8e2 	b.w	8005dcc <__malloc_unlock>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d908      	bls.n	8005c1e <_free_r+0x46>
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf01      	itttt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	e7ed      	b.n	8005bfa <_free_r+0x22>
 8005c1e:	461a      	mov	r2, r3
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b10b      	cbz	r3, 8005c28 <_free_r+0x50>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d9fa      	bls.n	8005c1e <_free_r+0x46>
 8005c28:	6811      	ldr	r1, [r2, #0]
 8005c2a:	1855      	adds	r5, r2, r1
 8005c2c:	42a5      	cmp	r5, r4
 8005c2e:	d10b      	bne.n	8005c48 <_free_r+0x70>
 8005c30:	6824      	ldr	r4, [r4, #0]
 8005c32:	4421      	add	r1, r4
 8005c34:	1854      	adds	r4, r2, r1
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	6011      	str	r1, [r2, #0]
 8005c3a:	d1e0      	bne.n	8005bfe <_free_r+0x26>
 8005c3c:	681c      	ldr	r4, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	6053      	str	r3, [r2, #4]
 8005c42:	440c      	add	r4, r1
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	e7da      	b.n	8005bfe <_free_r+0x26>
 8005c48:	d902      	bls.n	8005c50 <_free_r+0x78>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	e7d6      	b.n	8005bfe <_free_r+0x26>
 8005c50:	6825      	ldr	r5, [r4, #0]
 8005c52:	1961      	adds	r1, r4, r5
 8005c54:	428b      	cmp	r3, r1
 8005c56:	bf04      	itt	eq
 8005c58:	6819      	ldreq	r1, [r3, #0]
 8005c5a:	685b      	ldreq	r3, [r3, #4]
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	bf04      	itt	eq
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	6054      	str	r4, [r2, #4]
 8005c66:	e7ca      	b.n	8005bfe <_free_r+0x26>
 8005c68:	b003      	add	sp, #12
 8005c6a:	bd30      	pop	{r4, r5, pc}
 8005c6c:	200004ec 	.word	0x200004ec

08005c70 <malloc>:
 8005c70:	4b02      	ldr	r3, [pc, #8]	; (8005c7c <malloc+0xc>)
 8005c72:	4601      	mov	r1, r0
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f000 b823 	b.w	8005cc0 <_malloc_r>
 8005c7a:	bf00      	nop
 8005c7c:	20000064 	.word	0x20000064

08005c80 <sbrk_aligned>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4e0e      	ldr	r6, [pc, #56]	; (8005cbc <sbrk_aligned+0x3c>)
 8005c84:	460c      	mov	r4, r1
 8005c86:	6831      	ldr	r1, [r6, #0]
 8005c88:	4605      	mov	r5, r0
 8005c8a:	b911      	cbnz	r1, 8005c92 <sbrk_aligned+0x12>
 8005c8c:	f000 fe40 	bl	8006910 <_sbrk_r>
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 fe3b 	bl	8006910 <_sbrk_r>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	d00a      	beq.n	8005cb4 <sbrk_aligned+0x34>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d007      	beq.n	8005cb8 <sbrk_aligned+0x38>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fe30 	bl	8006910 <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d101      	bne.n	8005cb8 <sbrk_aligned+0x38>
 8005cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb8:	4620      	mov	r0, r4
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	200004f0 	.word	0x200004f0

08005cc0 <_malloc_r>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	1ccd      	adds	r5, r1, #3
 8005cc6:	f025 0503 	bic.w	r5, r5, #3
 8005cca:	3508      	adds	r5, #8
 8005ccc:	2d0c      	cmp	r5, #12
 8005cce:	bf38      	it	cc
 8005cd0:	250c      	movcc	r5, #12
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	db01      	blt.n	8005cdc <_malloc_r+0x1c>
 8005cd8:	42a9      	cmp	r1, r5
 8005cda:	d905      	bls.n	8005ce8 <_malloc_r+0x28>
 8005cdc:	230c      	movs	r3, #12
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005dbc <_malloc_r+0xfc>
 8005cec:	f000 f868 	bl	8005dc0 <__malloc_lock>
 8005cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	bb5c      	cbnz	r4, 8005d50 <_malloc_r+0x90>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f7ff ffc0 	bl	8005c80 <sbrk_aligned>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	4604      	mov	r4, r0
 8005d04:	d155      	bne.n	8005db2 <_malloc_r+0xf2>
 8005d06:	f8d8 4000 	ldr.w	r4, [r8]
 8005d0a:	4626      	mov	r6, r4
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	d145      	bne.n	8005d9c <_malloc_r+0xdc>
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	d048      	beq.n	8005da6 <_malloc_r+0xe6>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	4631      	mov	r1, r6
 8005d18:	4638      	mov	r0, r7
 8005d1a:	eb04 0903 	add.w	r9, r4, r3
 8005d1e:	f000 fdf7 	bl	8006910 <_sbrk_r>
 8005d22:	4581      	cmp	r9, r0
 8005d24:	d13f      	bne.n	8005da6 <_malloc_r+0xe6>
 8005d26:	6821      	ldr	r1, [r4, #0]
 8005d28:	1a6d      	subs	r5, r5, r1
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff ffa7 	bl	8005c80 <sbrk_aligned>
 8005d32:	3001      	adds	r0, #1
 8005d34:	d037      	beq.n	8005da6 <_malloc_r+0xe6>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	442b      	add	r3, r5
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d038      	beq.n	8005db6 <_malloc_r+0xf6>
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	42a2      	cmp	r2, r4
 8005d48:	d12b      	bne.n	8005da2 <_malloc_r+0xe2>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e00f      	b.n	8005d70 <_malloc_r+0xb0>
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	1b52      	subs	r2, r2, r5
 8005d54:	d41f      	bmi.n	8005d96 <_malloc_r+0xd6>
 8005d56:	2a0b      	cmp	r2, #11
 8005d58:	d917      	bls.n	8005d8a <_malloc_r+0xca>
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	6025      	str	r5, [r4, #0]
 8005d60:	bf18      	it	ne
 8005d62:	6059      	strne	r1, [r3, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	bf08      	it	eq
 8005d68:	f8c8 1000 	streq.w	r1, [r8]
 8005d6c:	5162      	str	r2, [r4, r5]
 8005d6e:	604b      	str	r3, [r1, #4]
 8005d70:	4638      	mov	r0, r7
 8005d72:	f104 060b 	add.w	r6, r4, #11
 8005d76:	f000 f829 	bl	8005dcc <__malloc_unlock>
 8005d7a:	f026 0607 	bic.w	r6, r6, #7
 8005d7e:	1d23      	adds	r3, r4, #4
 8005d80:	1af2      	subs	r2, r6, r3
 8005d82:	d0ae      	beq.n	8005ce2 <_malloc_r+0x22>
 8005d84:	1b9b      	subs	r3, r3, r6
 8005d86:	50a3      	str	r3, [r4, r2]
 8005d88:	e7ab      	b.n	8005ce2 <_malloc_r+0x22>
 8005d8a:	42a3      	cmp	r3, r4
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	d1dd      	bne.n	8005d4c <_malloc_r+0x8c>
 8005d90:	f8c8 2000 	str.w	r2, [r8]
 8005d94:	e7ec      	b.n	8005d70 <_malloc_r+0xb0>
 8005d96:	4623      	mov	r3, r4
 8005d98:	6864      	ldr	r4, [r4, #4]
 8005d9a:	e7ac      	b.n	8005cf6 <_malloc_r+0x36>
 8005d9c:	4634      	mov	r4, r6
 8005d9e:	6876      	ldr	r6, [r6, #4]
 8005da0:	e7b4      	b.n	8005d0c <_malloc_r+0x4c>
 8005da2:	4613      	mov	r3, r2
 8005da4:	e7cc      	b.n	8005d40 <_malloc_r+0x80>
 8005da6:	230c      	movs	r3, #12
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4638      	mov	r0, r7
 8005dac:	f000 f80e 	bl	8005dcc <__malloc_unlock>
 8005db0:	e797      	b.n	8005ce2 <_malloc_r+0x22>
 8005db2:	6025      	str	r5, [r4, #0]
 8005db4:	e7dc      	b.n	8005d70 <_malloc_r+0xb0>
 8005db6:	605b      	str	r3, [r3, #4]
 8005db8:	deff      	udf	#255	; 0xff
 8005dba:	bf00      	nop
 8005dbc:	200004ec 	.word	0x200004ec

08005dc0 <__malloc_lock>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__malloc_lock+0x8>)
 8005dc2:	f7ff b913 	b.w	8004fec <__retarget_lock_acquire_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	200004e8 	.word	0x200004e8

08005dcc <__malloc_unlock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__malloc_unlock+0x8>)
 8005dce:	f7ff b90e 	b.w	8004fee <__retarget_lock_release_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	200004e8 	.word	0x200004e8

08005dd8 <_Balloc>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	69c6      	ldr	r6, [r0, #28]
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	b976      	cbnz	r6, 8005e00 <_Balloc+0x28>
 8005de2:	2010      	movs	r0, #16
 8005de4:	f7ff ff44 	bl	8005c70 <malloc>
 8005de8:	4602      	mov	r2, r0
 8005dea:	61e0      	str	r0, [r4, #28]
 8005dec:	b920      	cbnz	r0, 8005df8 <_Balloc+0x20>
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <_Balloc+0x78>)
 8005df0:	4818      	ldr	r0, [pc, #96]	; (8005e54 <_Balloc+0x7c>)
 8005df2:	216b      	movs	r1, #107	; 0x6b
 8005df4:	f000 fdaa 	bl	800694c <__assert_func>
 8005df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dfc:	6006      	str	r6, [r0, #0]
 8005dfe:	60c6      	str	r6, [r0, #12]
 8005e00:	69e6      	ldr	r6, [r4, #28]
 8005e02:	68f3      	ldr	r3, [r6, #12]
 8005e04:	b183      	cbz	r3, 8005e28 <_Balloc+0x50>
 8005e06:	69e3      	ldr	r3, [r4, #28]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e0e:	b9b8      	cbnz	r0, 8005e40 <_Balloc+0x68>
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f605 	lsl.w	r6, r1, r5
 8005e16:	1d72      	adds	r2, r6, #5
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fdb4 	bl	8006988 <_calloc_r>
 8005e20:	b160      	cbz	r0, 8005e3c <_Balloc+0x64>
 8005e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e26:	e00e      	b.n	8005e46 <_Balloc+0x6e>
 8005e28:	2221      	movs	r2, #33	; 0x21
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 fdab 	bl	8006988 <_calloc_r>
 8005e32:	69e3      	ldr	r3, [r4, #28]
 8005e34:	60f0      	str	r0, [r6, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e4      	bne.n	8005e06 <_Balloc+0x2e>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	6802      	ldr	r2, [r0, #0]
 8005e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e46:	2300      	movs	r3, #0
 8005e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e4c:	e7f7      	b.n	8005e3e <_Balloc+0x66>
 8005e4e:	bf00      	nop
 8005e50:	08007075 	.word	0x08007075
 8005e54:	080070f5 	.word	0x080070f5

08005e58 <_Bfree>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	69c6      	ldr	r6, [r0, #28]
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	b976      	cbnz	r6, 8005e80 <_Bfree+0x28>
 8005e62:	2010      	movs	r0, #16
 8005e64:	f7ff ff04 	bl	8005c70 <malloc>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	61e8      	str	r0, [r5, #28]
 8005e6c:	b920      	cbnz	r0, 8005e78 <_Bfree+0x20>
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <_Bfree+0x3c>)
 8005e70:	4809      	ldr	r0, [pc, #36]	; (8005e98 <_Bfree+0x40>)
 8005e72:	218f      	movs	r1, #143	; 0x8f
 8005e74:	f000 fd6a 	bl	800694c <__assert_func>
 8005e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e7c:	6006      	str	r6, [r0, #0]
 8005e7e:	60c6      	str	r6, [r0, #12]
 8005e80:	b13c      	cbz	r4, 8005e92 <_Bfree+0x3a>
 8005e82:	69eb      	ldr	r3, [r5, #28]
 8005e84:	6862      	ldr	r2, [r4, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e8c:	6021      	str	r1, [r4, #0]
 8005e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	08007075 	.word	0x08007075
 8005e98:	080070f5 	.word	0x080070f5

08005e9c <__multadd>:
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	690d      	ldr	r5, [r1, #16]
 8005ea2:	4607      	mov	r7, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	461e      	mov	r6, r3
 8005ea8:	f101 0c14 	add.w	ip, r1, #20
 8005eac:	2000      	movs	r0, #0
 8005eae:	f8dc 3000 	ldr.w	r3, [ip]
 8005eb2:	b299      	uxth	r1, r3
 8005eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8005eb8:	0c1e      	lsrs	r6, r3, #16
 8005eba:	0c0b      	lsrs	r3, r1, #16
 8005ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8005ec0:	b289      	uxth	r1, r1
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ec8:	4285      	cmp	r5, r0
 8005eca:	f84c 1b04 	str.w	r1, [ip], #4
 8005ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ed2:	dcec      	bgt.n	8005eae <__multadd+0x12>
 8005ed4:	b30e      	cbz	r6, 8005f1a <__multadd+0x7e>
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dc19      	bgt.n	8005f10 <__multadd+0x74>
 8005edc:	6861      	ldr	r1, [r4, #4]
 8005ede:	4638      	mov	r0, r7
 8005ee0:	3101      	adds	r1, #1
 8005ee2:	f7ff ff79 	bl	8005dd8 <_Balloc>
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	b928      	cbnz	r0, 8005ef6 <__multadd+0x5a>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <__multadd+0x84>)
 8005eee:	480d      	ldr	r0, [pc, #52]	; (8005f24 <__multadd+0x88>)
 8005ef0:	21ba      	movs	r1, #186	; 0xba
 8005ef2:	f000 fd2b 	bl	800694c <__assert_func>
 8005ef6:	6922      	ldr	r2, [r4, #16]
 8005ef8:	3202      	adds	r2, #2
 8005efa:	f104 010c 	add.w	r1, r4, #12
 8005efe:	0092      	lsls	r2, r2, #2
 8005f00:	300c      	adds	r0, #12
 8005f02:	f000 fd15 	bl	8006930 <memcpy>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ffa5 	bl	8005e58 <_Bfree>
 8005f0e:	4644      	mov	r4, r8
 8005f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f14:	3501      	adds	r5, #1
 8005f16:	615e      	str	r6, [r3, #20]
 8005f18:	6125      	str	r5, [r4, #16]
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	080070e4 	.word	0x080070e4
 8005f24:	080070f5 	.word	0x080070f5

08005f28 <__hi0bits>:
 8005f28:	0c03      	lsrs	r3, r0, #16
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	b9d3      	cbnz	r3, 8005f64 <__hi0bits+0x3c>
 8005f2e:	0400      	lsls	r0, r0, #16
 8005f30:	2310      	movs	r3, #16
 8005f32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005f36:	bf04      	itt	eq
 8005f38:	0200      	lsleq	r0, r0, #8
 8005f3a:	3308      	addeq	r3, #8
 8005f3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005f40:	bf04      	itt	eq
 8005f42:	0100      	lsleq	r0, r0, #4
 8005f44:	3304      	addeq	r3, #4
 8005f46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f4a:	bf04      	itt	eq
 8005f4c:	0080      	lsleq	r0, r0, #2
 8005f4e:	3302      	addeq	r3, #2
 8005f50:	2800      	cmp	r0, #0
 8005f52:	db05      	blt.n	8005f60 <__hi0bits+0x38>
 8005f54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f58:	f103 0301 	add.w	r3, r3, #1
 8005f5c:	bf08      	it	eq
 8005f5e:	2320      	moveq	r3, #32
 8005f60:	4618      	mov	r0, r3
 8005f62:	4770      	bx	lr
 8005f64:	2300      	movs	r3, #0
 8005f66:	e7e4      	b.n	8005f32 <__hi0bits+0xa>

08005f68 <__lo0bits>:
 8005f68:	6803      	ldr	r3, [r0, #0]
 8005f6a:	f013 0207 	ands.w	r2, r3, #7
 8005f6e:	d00c      	beq.n	8005f8a <__lo0bits+0x22>
 8005f70:	07d9      	lsls	r1, r3, #31
 8005f72:	d422      	bmi.n	8005fba <__lo0bits+0x52>
 8005f74:	079a      	lsls	r2, r3, #30
 8005f76:	bf49      	itett	mi
 8005f78:	085b      	lsrmi	r3, r3, #1
 8005f7a:	089b      	lsrpl	r3, r3, #2
 8005f7c:	6003      	strmi	r3, [r0, #0]
 8005f7e:	2201      	movmi	r2, #1
 8005f80:	bf5c      	itt	pl
 8005f82:	6003      	strpl	r3, [r0, #0]
 8005f84:	2202      	movpl	r2, #2
 8005f86:	4610      	mov	r0, r2
 8005f88:	4770      	bx	lr
 8005f8a:	b299      	uxth	r1, r3
 8005f8c:	b909      	cbnz	r1, 8005f92 <__lo0bits+0x2a>
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	2210      	movs	r2, #16
 8005f92:	b2d9      	uxtb	r1, r3
 8005f94:	b909      	cbnz	r1, 8005f9a <__lo0bits+0x32>
 8005f96:	3208      	adds	r2, #8
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	0719      	lsls	r1, r3, #28
 8005f9c:	bf04      	itt	eq
 8005f9e:	091b      	lsreq	r3, r3, #4
 8005fa0:	3204      	addeq	r2, #4
 8005fa2:	0799      	lsls	r1, r3, #30
 8005fa4:	bf04      	itt	eq
 8005fa6:	089b      	lsreq	r3, r3, #2
 8005fa8:	3202      	addeq	r2, #2
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d403      	bmi.n	8005fb6 <__lo0bits+0x4e>
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	f102 0201 	add.w	r2, r2, #1
 8005fb4:	d003      	beq.n	8005fbe <__lo0bits+0x56>
 8005fb6:	6003      	str	r3, [r0, #0]
 8005fb8:	e7e5      	b.n	8005f86 <__lo0bits+0x1e>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	e7e3      	b.n	8005f86 <__lo0bits+0x1e>
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	e7e1      	b.n	8005f86 <__lo0bits+0x1e>
	...

08005fc4 <__i2b>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2101      	movs	r1, #1
 8005fca:	f7ff ff05 	bl	8005dd8 <_Balloc>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	b928      	cbnz	r0, 8005fde <__i2b+0x1a>
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <__i2b+0x24>)
 8005fd4:	4805      	ldr	r0, [pc, #20]	; (8005fec <__i2b+0x28>)
 8005fd6:	f240 1145 	movw	r1, #325	; 0x145
 8005fda:	f000 fcb7 	bl	800694c <__assert_func>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	6144      	str	r4, [r0, #20]
 8005fe2:	6103      	str	r3, [r0, #16]
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop
 8005fe8:	080070e4 	.word	0x080070e4
 8005fec:	080070f5 	.word	0x080070f5

08005ff0 <__multiply>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	690a      	ldr	r2, [r1, #16]
 8005ff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	bfb8      	it	lt
 8006000:	460b      	movlt	r3, r1
 8006002:	460c      	mov	r4, r1
 8006004:	bfbc      	itt	lt
 8006006:	464c      	movlt	r4, r9
 8006008:	4699      	movlt	r9, r3
 800600a:	6927      	ldr	r7, [r4, #16]
 800600c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006010:	68a3      	ldr	r3, [r4, #8]
 8006012:	6861      	ldr	r1, [r4, #4]
 8006014:	eb07 060a 	add.w	r6, r7, sl
 8006018:	42b3      	cmp	r3, r6
 800601a:	b085      	sub	sp, #20
 800601c:	bfb8      	it	lt
 800601e:	3101      	addlt	r1, #1
 8006020:	f7ff feda 	bl	8005dd8 <_Balloc>
 8006024:	b930      	cbnz	r0, 8006034 <__multiply+0x44>
 8006026:	4602      	mov	r2, r0
 8006028:	4b44      	ldr	r3, [pc, #272]	; (800613c <__multiply+0x14c>)
 800602a:	4845      	ldr	r0, [pc, #276]	; (8006140 <__multiply+0x150>)
 800602c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006030:	f000 fc8c 	bl	800694c <__assert_func>
 8006034:	f100 0514 	add.w	r5, r0, #20
 8006038:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800603c:	462b      	mov	r3, r5
 800603e:	2200      	movs	r2, #0
 8006040:	4543      	cmp	r3, r8
 8006042:	d321      	bcc.n	8006088 <__multiply+0x98>
 8006044:	f104 0314 	add.w	r3, r4, #20
 8006048:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800604c:	f109 0314 	add.w	r3, r9, #20
 8006050:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006054:	9202      	str	r2, [sp, #8]
 8006056:	1b3a      	subs	r2, r7, r4
 8006058:	3a15      	subs	r2, #21
 800605a:	f022 0203 	bic.w	r2, r2, #3
 800605e:	3204      	adds	r2, #4
 8006060:	f104 0115 	add.w	r1, r4, #21
 8006064:	428f      	cmp	r7, r1
 8006066:	bf38      	it	cc
 8006068:	2204      	movcc	r2, #4
 800606a:	9201      	str	r2, [sp, #4]
 800606c:	9a02      	ldr	r2, [sp, #8]
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	429a      	cmp	r2, r3
 8006072:	d80c      	bhi.n	800608e <__multiply+0x9e>
 8006074:	2e00      	cmp	r6, #0
 8006076:	dd03      	ble.n	8006080 <__multiply+0x90>
 8006078:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800607c:	2b00      	cmp	r3, #0
 800607e:	d05b      	beq.n	8006138 <__multiply+0x148>
 8006080:	6106      	str	r6, [r0, #16]
 8006082:	b005      	add	sp, #20
 8006084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006088:	f843 2b04 	str.w	r2, [r3], #4
 800608c:	e7d8      	b.n	8006040 <__multiply+0x50>
 800608e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006092:	f1ba 0f00 	cmp.w	sl, #0
 8006096:	d024      	beq.n	80060e2 <__multiply+0xf2>
 8006098:	f104 0e14 	add.w	lr, r4, #20
 800609c:	46a9      	mov	r9, r5
 800609e:	f04f 0c00 	mov.w	ip, #0
 80060a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80060a6:	f8d9 1000 	ldr.w	r1, [r9]
 80060aa:	fa1f fb82 	uxth.w	fp, r2
 80060ae:	b289      	uxth	r1, r1
 80060b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80060b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80060b8:	f8d9 2000 	ldr.w	r2, [r9]
 80060bc:	4461      	add	r1, ip
 80060be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80060c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060ca:	b289      	uxth	r1, r1
 80060cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060d0:	4577      	cmp	r7, lr
 80060d2:	f849 1b04 	str.w	r1, [r9], #4
 80060d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060da:	d8e2      	bhi.n	80060a2 <__multiply+0xb2>
 80060dc:	9a01      	ldr	r2, [sp, #4]
 80060de:	f845 c002 	str.w	ip, [r5, r2]
 80060e2:	9a03      	ldr	r2, [sp, #12]
 80060e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060e8:	3304      	adds	r3, #4
 80060ea:	f1b9 0f00 	cmp.w	r9, #0
 80060ee:	d021      	beq.n	8006134 <__multiply+0x144>
 80060f0:	6829      	ldr	r1, [r5, #0]
 80060f2:	f104 0c14 	add.w	ip, r4, #20
 80060f6:	46ae      	mov	lr, r5
 80060f8:	f04f 0a00 	mov.w	sl, #0
 80060fc:	f8bc b000 	ldrh.w	fp, [ip]
 8006100:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006104:	fb09 220b 	mla	r2, r9, fp, r2
 8006108:	4452      	add	r2, sl
 800610a:	b289      	uxth	r1, r1
 800610c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006110:	f84e 1b04 	str.w	r1, [lr], #4
 8006114:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006118:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800611c:	f8be 1000 	ldrh.w	r1, [lr]
 8006120:	fb09 110a 	mla	r1, r9, sl, r1
 8006124:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006128:	4567      	cmp	r7, ip
 800612a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800612e:	d8e5      	bhi.n	80060fc <__multiply+0x10c>
 8006130:	9a01      	ldr	r2, [sp, #4]
 8006132:	50a9      	str	r1, [r5, r2]
 8006134:	3504      	adds	r5, #4
 8006136:	e799      	b.n	800606c <__multiply+0x7c>
 8006138:	3e01      	subs	r6, #1
 800613a:	e79b      	b.n	8006074 <__multiply+0x84>
 800613c:	080070e4 	.word	0x080070e4
 8006140:	080070f5 	.word	0x080070f5

08006144 <__pow5mult>:
 8006144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006148:	4615      	mov	r5, r2
 800614a:	f012 0203 	ands.w	r2, r2, #3
 800614e:	4606      	mov	r6, r0
 8006150:	460f      	mov	r7, r1
 8006152:	d007      	beq.n	8006164 <__pow5mult+0x20>
 8006154:	4c25      	ldr	r4, [pc, #148]	; (80061ec <__pow5mult+0xa8>)
 8006156:	3a01      	subs	r2, #1
 8006158:	2300      	movs	r3, #0
 800615a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800615e:	f7ff fe9d 	bl	8005e9c <__multadd>
 8006162:	4607      	mov	r7, r0
 8006164:	10ad      	asrs	r5, r5, #2
 8006166:	d03d      	beq.n	80061e4 <__pow5mult+0xa0>
 8006168:	69f4      	ldr	r4, [r6, #28]
 800616a:	b97c      	cbnz	r4, 800618c <__pow5mult+0x48>
 800616c:	2010      	movs	r0, #16
 800616e:	f7ff fd7f 	bl	8005c70 <malloc>
 8006172:	4602      	mov	r2, r0
 8006174:	61f0      	str	r0, [r6, #28]
 8006176:	b928      	cbnz	r0, 8006184 <__pow5mult+0x40>
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <__pow5mult+0xac>)
 800617a:	481e      	ldr	r0, [pc, #120]	; (80061f4 <__pow5mult+0xb0>)
 800617c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006180:	f000 fbe4 	bl	800694c <__assert_func>
 8006184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006188:	6004      	str	r4, [r0, #0]
 800618a:	60c4      	str	r4, [r0, #12]
 800618c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006194:	b94c      	cbnz	r4, 80061aa <__pow5mult+0x66>
 8006196:	f240 2171 	movw	r1, #625	; 0x271
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ff12 	bl	8005fc4 <__i2b>
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80061a6:	4604      	mov	r4, r0
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	f04f 0900 	mov.w	r9, #0
 80061ae:	07eb      	lsls	r3, r5, #31
 80061b0:	d50a      	bpl.n	80061c8 <__pow5mult+0x84>
 80061b2:	4639      	mov	r1, r7
 80061b4:	4622      	mov	r2, r4
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7ff ff1a 	bl	8005ff0 <__multiply>
 80061bc:	4639      	mov	r1, r7
 80061be:	4680      	mov	r8, r0
 80061c0:	4630      	mov	r0, r6
 80061c2:	f7ff fe49 	bl	8005e58 <_Bfree>
 80061c6:	4647      	mov	r7, r8
 80061c8:	106d      	asrs	r5, r5, #1
 80061ca:	d00b      	beq.n	80061e4 <__pow5mult+0xa0>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	b938      	cbnz	r0, 80061e0 <__pow5mult+0x9c>
 80061d0:	4622      	mov	r2, r4
 80061d2:	4621      	mov	r1, r4
 80061d4:	4630      	mov	r0, r6
 80061d6:	f7ff ff0b 	bl	8005ff0 <__multiply>
 80061da:	6020      	str	r0, [r4, #0]
 80061dc:	f8c0 9000 	str.w	r9, [r0]
 80061e0:	4604      	mov	r4, r0
 80061e2:	e7e4      	b.n	80061ae <__pow5mult+0x6a>
 80061e4:	4638      	mov	r0, r7
 80061e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ea:	bf00      	nop
 80061ec:	08007240 	.word	0x08007240
 80061f0:	08007075 	.word	0x08007075
 80061f4:	080070f5 	.word	0x080070f5

080061f8 <__lshift>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	460c      	mov	r4, r1
 80061fe:	6849      	ldr	r1, [r1, #4]
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	4607      	mov	r7, r0
 800620a:	4691      	mov	r9, r2
 800620c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006210:	f108 0601 	add.w	r6, r8, #1
 8006214:	42b3      	cmp	r3, r6
 8006216:	db0b      	blt.n	8006230 <__lshift+0x38>
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff fddd 	bl	8005dd8 <_Balloc>
 800621e:	4605      	mov	r5, r0
 8006220:	b948      	cbnz	r0, 8006236 <__lshift+0x3e>
 8006222:	4602      	mov	r2, r0
 8006224:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <__lshift+0xd0>)
 8006226:	4829      	ldr	r0, [pc, #164]	; (80062cc <__lshift+0xd4>)
 8006228:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800622c:	f000 fb8e 	bl	800694c <__assert_func>
 8006230:	3101      	adds	r1, #1
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	e7ee      	b.n	8006214 <__lshift+0x1c>
 8006236:	2300      	movs	r3, #0
 8006238:	f100 0114 	add.w	r1, r0, #20
 800623c:	f100 0210 	add.w	r2, r0, #16
 8006240:	4618      	mov	r0, r3
 8006242:	4553      	cmp	r3, sl
 8006244:	db33      	blt.n	80062ae <__lshift+0xb6>
 8006246:	6920      	ldr	r0, [r4, #16]
 8006248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800624c:	f104 0314 	add.w	r3, r4, #20
 8006250:	f019 091f 	ands.w	r9, r9, #31
 8006254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800625c:	d02b      	beq.n	80062b6 <__lshift+0xbe>
 800625e:	f1c9 0e20 	rsb	lr, r9, #32
 8006262:	468a      	mov	sl, r1
 8006264:	2200      	movs	r2, #0
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	fa00 f009 	lsl.w	r0, r0, r9
 800626c:	4310      	orrs	r0, r2
 800626e:	f84a 0b04 	str.w	r0, [sl], #4
 8006272:	f853 2b04 	ldr.w	r2, [r3], #4
 8006276:	459c      	cmp	ip, r3
 8006278:	fa22 f20e 	lsr.w	r2, r2, lr
 800627c:	d8f3      	bhi.n	8006266 <__lshift+0x6e>
 800627e:	ebac 0304 	sub.w	r3, ip, r4
 8006282:	3b15      	subs	r3, #21
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	3304      	adds	r3, #4
 800628a:	f104 0015 	add.w	r0, r4, #21
 800628e:	4584      	cmp	ip, r0
 8006290:	bf38      	it	cc
 8006292:	2304      	movcc	r3, #4
 8006294:	50ca      	str	r2, [r1, r3]
 8006296:	b10a      	cbz	r2, 800629c <__lshift+0xa4>
 8006298:	f108 0602 	add.w	r6, r8, #2
 800629c:	3e01      	subs	r6, #1
 800629e:	4638      	mov	r0, r7
 80062a0:	612e      	str	r6, [r5, #16]
 80062a2:	4621      	mov	r1, r4
 80062a4:	f7ff fdd8 	bl	8005e58 <_Bfree>
 80062a8:	4628      	mov	r0, r5
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80062b2:	3301      	adds	r3, #1
 80062b4:	e7c5      	b.n	8006242 <__lshift+0x4a>
 80062b6:	3904      	subs	r1, #4
 80062b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80062c0:	459c      	cmp	ip, r3
 80062c2:	d8f9      	bhi.n	80062b8 <__lshift+0xc0>
 80062c4:	e7ea      	b.n	800629c <__lshift+0xa4>
 80062c6:	bf00      	nop
 80062c8:	080070e4 	.word	0x080070e4
 80062cc:	080070f5 	.word	0x080070f5

080062d0 <__mcmp>:
 80062d0:	b530      	push	{r4, r5, lr}
 80062d2:	6902      	ldr	r2, [r0, #16]
 80062d4:	690c      	ldr	r4, [r1, #16]
 80062d6:	1b12      	subs	r2, r2, r4
 80062d8:	d10e      	bne.n	80062f8 <__mcmp+0x28>
 80062da:	f100 0314 	add.w	r3, r0, #20
 80062de:	3114      	adds	r1, #20
 80062e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80062e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80062e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80062ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80062f0:	42a5      	cmp	r5, r4
 80062f2:	d003      	beq.n	80062fc <__mcmp+0x2c>
 80062f4:	d305      	bcc.n	8006302 <__mcmp+0x32>
 80062f6:	2201      	movs	r2, #1
 80062f8:	4610      	mov	r0, r2
 80062fa:	bd30      	pop	{r4, r5, pc}
 80062fc:	4283      	cmp	r3, r0
 80062fe:	d3f3      	bcc.n	80062e8 <__mcmp+0x18>
 8006300:	e7fa      	b.n	80062f8 <__mcmp+0x28>
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	e7f7      	b.n	80062f8 <__mcmp+0x28>

08006308 <__mdiff>:
 8006308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	460c      	mov	r4, r1
 800630e:	4606      	mov	r6, r0
 8006310:	4611      	mov	r1, r2
 8006312:	4620      	mov	r0, r4
 8006314:	4690      	mov	r8, r2
 8006316:	f7ff ffdb 	bl	80062d0 <__mcmp>
 800631a:	1e05      	subs	r5, r0, #0
 800631c:	d110      	bne.n	8006340 <__mdiff+0x38>
 800631e:	4629      	mov	r1, r5
 8006320:	4630      	mov	r0, r6
 8006322:	f7ff fd59 	bl	8005dd8 <_Balloc>
 8006326:	b930      	cbnz	r0, 8006336 <__mdiff+0x2e>
 8006328:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <__mdiff+0x10c>)
 800632a:	4602      	mov	r2, r0
 800632c:	f240 2137 	movw	r1, #567	; 0x237
 8006330:	4839      	ldr	r0, [pc, #228]	; (8006418 <__mdiff+0x110>)
 8006332:	f000 fb0b 	bl	800694c <__assert_func>
 8006336:	2301      	movs	r3, #1
 8006338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800633c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	bfa4      	itt	ge
 8006342:	4643      	movge	r3, r8
 8006344:	46a0      	movge	r8, r4
 8006346:	4630      	mov	r0, r6
 8006348:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800634c:	bfa6      	itte	ge
 800634e:	461c      	movge	r4, r3
 8006350:	2500      	movge	r5, #0
 8006352:	2501      	movlt	r5, #1
 8006354:	f7ff fd40 	bl	8005dd8 <_Balloc>
 8006358:	b920      	cbnz	r0, 8006364 <__mdiff+0x5c>
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <__mdiff+0x10c>)
 800635c:	4602      	mov	r2, r0
 800635e:	f240 2145 	movw	r1, #581	; 0x245
 8006362:	e7e5      	b.n	8006330 <__mdiff+0x28>
 8006364:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006368:	6926      	ldr	r6, [r4, #16]
 800636a:	60c5      	str	r5, [r0, #12]
 800636c:	f104 0914 	add.w	r9, r4, #20
 8006370:	f108 0514 	add.w	r5, r8, #20
 8006374:	f100 0e14 	add.w	lr, r0, #20
 8006378:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800637c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006380:	f108 0210 	add.w	r2, r8, #16
 8006384:	46f2      	mov	sl, lr
 8006386:	2100      	movs	r1, #0
 8006388:	f859 3b04 	ldr.w	r3, [r9], #4
 800638c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006390:	fa11 f88b 	uxtah	r8, r1, fp
 8006394:	b299      	uxth	r1, r3
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	eba8 0801 	sub.w	r8, r8, r1
 800639c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80063a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80063a4:	fa1f f888 	uxth.w	r8, r8
 80063a8:	1419      	asrs	r1, r3, #16
 80063aa:	454e      	cmp	r6, r9
 80063ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80063b0:	f84a 3b04 	str.w	r3, [sl], #4
 80063b4:	d8e8      	bhi.n	8006388 <__mdiff+0x80>
 80063b6:	1b33      	subs	r3, r6, r4
 80063b8:	3b15      	subs	r3, #21
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	3304      	adds	r3, #4
 80063c0:	3415      	adds	r4, #21
 80063c2:	42a6      	cmp	r6, r4
 80063c4:	bf38      	it	cc
 80063c6:	2304      	movcc	r3, #4
 80063c8:	441d      	add	r5, r3
 80063ca:	4473      	add	r3, lr
 80063cc:	469e      	mov	lr, r3
 80063ce:	462e      	mov	r6, r5
 80063d0:	4566      	cmp	r6, ip
 80063d2:	d30e      	bcc.n	80063f2 <__mdiff+0xea>
 80063d4:	f10c 0203 	add.w	r2, ip, #3
 80063d8:	1b52      	subs	r2, r2, r5
 80063da:	f022 0203 	bic.w	r2, r2, #3
 80063de:	3d03      	subs	r5, #3
 80063e0:	45ac      	cmp	ip, r5
 80063e2:	bf38      	it	cc
 80063e4:	2200      	movcc	r2, #0
 80063e6:	4413      	add	r3, r2
 80063e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80063ec:	b17a      	cbz	r2, 800640e <__mdiff+0x106>
 80063ee:	6107      	str	r7, [r0, #16]
 80063f0:	e7a4      	b.n	800633c <__mdiff+0x34>
 80063f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80063f6:	fa11 f288 	uxtah	r2, r1, r8
 80063fa:	1414      	asrs	r4, r2, #16
 80063fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006400:	b292      	uxth	r2, r2
 8006402:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006406:	f84e 2b04 	str.w	r2, [lr], #4
 800640a:	1421      	asrs	r1, r4, #16
 800640c:	e7e0      	b.n	80063d0 <__mdiff+0xc8>
 800640e:	3f01      	subs	r7, #1
 8006410:	e7ea      	b.n	80063e8 <__mdiff+0xe0>
 8006412:	bf00      	nop
 8006414:	080070e4 	.word	0x080070e4
 8006418:	080070f5 	.word	0x080070f5

0800641c <__d2b>:
 800641c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006420:	460f      	mov	r7, r1
 8006422:	2101      	movs	r1, #1
 8006424:	ec59 8b10 	vmov	r8, r9, d0
 8006428:	4616      	mov	r6, r2
 800642a:	f7ff fcd5 	bl	8005dd8 <_Balloc>
 800642e:	4604      	mov	r4, r0
 8006430:	b930      	cbnz	r0, 8006440 <__d2b+0x24>
 8006432:	4602      	mov	r2, r0
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <__d2b+0xac>)
 8006436:	4825      	ldr	r0, [pc, #148]	; (80064cc <__d2b+0xb0>)
 8006438:	f240 310f 	movw	r1, #783	; 0x30f
 800643c:	f000 fa86 	bl	800694c <__assert_func>
 8006440:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006448:	bb2d      	cbnz	r5, 8006496 <__d2b+0x7a>
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	f1b8 0300 	subs.w	r3, r8, #0
 8006450:	d026      	beq.n	80064a0 <__d2b+0x84>
 8006452:	4668      	mov	r0, sp
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	f7ff fd87 	bl	8005f68 <__lo0bits>
 800645a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800645e:	b1e8      	cbz	r0, 800649c <__d2b+0x80>
 8006460:	f1c0 0320 	rsb	r3, r0, #32
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	430b      	orrs	r3, r1
 800646a:	40c2      	lsrs	r2, r0
 800646c:	6163      	str	r3, [r4, #20]
 800646e:	9201      	str	r2, [sp, #4]
 8006470:	9b01      	ldr	r3, [sp, #4]
 8006472:	61a3      	str	r3, [r4, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf14      	ite	ne
 8006478:	2202      	movne	r2, #2
 800647a:	2201      	moveq	r2, #1
 800647c:	6122      	str	r2, [r4, #16]
 800647e:	b1bd      	cbz	r5, 80064b0 <__d2b+0x94>
 8006480:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006484:	4405      	add	r5, r0
 8006486:	603d      	str	r5, [r7, #0]
 8006488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800648c:	6030      	str	r0, [r6, #0]
 800648e:	4620      	mov	r0, r4
 8006490:	b003      	add	sp, #12
 8006492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800649a:	e7d6      	b.n	800644a <__d2b+0x2e>
 800649c:	6161      	str	r1, [r4, #20]
 800649e:	e7e7      	b.n	8006470 <__d2b+0x54>
 80064a0:	a801      	add	r0, sp, #4
 80064a2:	f7ff fd61 	bl	8005f68 <__lo0bits>
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	6163      	str	r3, [r4, #20]
 80064aa:	3020      	adds	r0, #32
 80064ac:	2201      	movs	r2, #1
 80064ae:	e7e5      	b.n	800647c <__d2b+0x60>
 80064b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064b8:	6038      	str	r0, [r7, #0]
 80064ba:	6918      	ldr	r0, [r3, #16]
 80064bc:	f7ff fd34 	bl	8005f28 <__hi0bits>
 80064c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064c4:	e7e2      	b.n	800648c <__d2b+0x70>
 80064c6:	bf00      	nop
 80064c8:	080070e4 	.word	0x080070e4
 80064cc:	080070f5 	.word	0x080070f5

080064d0 <__ssputs_r>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	688e      	ldr	r6, [r1, #8]
 80064d6:	461f      	mov	r7, r3
 80064d8:	42be      	cmp	r6, r7
 80064da:	680b      	ldr	r3, [r1, #0]
 80064dc:	4682      	mov	sl, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	4690      	mov	r8, r2
 80064e2:	d82c      	bhi.n	800653e <__ssputs_r+0x6e>
 80064e4:	898a      	ldrh	r2, [r1, #12]
 80064e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064ea:	d026      	beq.n	800653a <__ssputs_r+0x6a>
 80064ec:	6965      	ldr	r5, [r4, #20]
 80064ee:	6909      	ldr	r1, [r1, #16]
 80064f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064f4:	eba3 0901 	sub.w	r9, r3, r1
 80064f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064fc:	1c7b      	adds	r3, r7, #1
 80064fe:	444b      	add	r3, r9
 8006500:	106d      	asrs	r5, r5, #1
 8006502:	429d      	cmp	r5, r3
 8006504:	bf38      	it	cc
 8006506:	461d      	movcc	r5, r3
 8006508:	0553      	lsls	r3, r2, #21
 800650a:	d527      	bpl.n	800655c <__ssputs_r+0x8c>
 800650c:	4629      	mov	r1, r5
 800650e:	f7ff fbd7 	bl	8005cc0 <_malloc_r>
 8006512:	4606      	mov	r6, r0
 8006514:	b360      	cbz	r0, 8006570 <__ssputs_r+0xa0>
 8006516:	6921      	ldr	r1, [r4, #16]
 8006518:	464a      	mov	r2, r9
 800651a:	f000 fa09 	bl	8006930 <memcpy>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	6126      	str	r6, [r4, #16]
 800652c:	6165      	str	r5, [r4, #20]
 800652e:	444e      	add	r6, r9
 8006530:	eba5 0509 	sub.w	r5, r5, r9
 8006534:	6026      	str	r6, [r4, #0]
 8006536:	60a5      	str	r5, [r4, #8]
 8006538:	463e      	mov	r6, r7
 800653a:	42be      	cmp	r6, r7
 800653c:	d900      	bls.n	8006540 <__ssputs_r+0x70>
 800653e:	463e      	mov	r6, r7
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	4632      	mov	r2, r6
 8006544:	4641      	mov	r1, r8
 8006546:	f000 f9c9 	bl	80068dc <memmove>
 800654a:	68a3      	ldr	r3, [r4, #8]
 800654c:	1b9b      	subs	r3, r3, r6
 800654e:	60a3      	str	r3, [r4, #8]
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	4433      	add	r3, r6
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2000      	movs	r0, #0
 8006558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655c:	462a      	mov	r2, r5
 800655e:	f000 fa3b 	bl	80069d8 <_realloc_r>
 8006562:	4606      	mov	r6, r0
 8006564:	2800      	cmp	r0, #0
 8006566:	d1e0      	bne.n	800652a <__ssputs_r+0x5a>
 8006568:	6921      	ldr	r1, [r4, #16]
 800656a:	4650      	mov	r0, sl
 800656c:	f7ff fb34 	bl	8005bd8 <_free_r>
 8006570:	230c      	movs	r3, #12
 8006572:	f8ca 3000 	str.w	r3, [sl]
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	e7e9      	b.n	8006558 <__ssputs_r+0x88>

08006584 <_svfiprintf_r>:
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	4698      	mov	r8, r3
 800658a:	898b      	ldrh	r3, [r1, #12]
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	b09d      	sub	sp, #116	; 0x74
 8006590:	4607      	mov	r7, r0
 8006592:	460d      	mov	r5, r1
 8006594:	4614      	mov	r4, r2
 8006596:	d50e      	bpl.n	80065b6 <_svfiprintf_r+0x32>
 8006598:	690b      	ldr	r3, [r1, #16]
 800659a:	b963      	cbnz	r3, 80065b6 <_svfiprintf_r+0x32>
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	f7ff fb8f 	bl	8005cc0 <_malloc_r>
 80065a2:	6028      	str	r0, [r5, #0]
 80065a4:	6128      	str	r0, [r5, #16]
 80065a6:	b920      	cbnz	r0, 80065b2 <_svfiprintf_r+0x2e>
 80065a8:	230c      	movs	r3, #12
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	e0d0      	b.n	8006754 <_svfiprintf_r+0x1d0>
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	616b      	str	r3, [r5, #20]
 80065b6:	2300      	movs	r3, #0
 80065b8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ba:	2320      	movs	r3, #32
 80065bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065c4:	2330      	movs	r3, #48	; 0x30
 80065c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800676c <_svfiprintf_r+0x1e8>
 80065ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ce:	f04f 0901 	mov.w	r9, #1
 80065d2:	4623      	mov	r3, r4
 80065d4:	469a      	mov	sl, r3
 80065d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065da:	b10a      	cbz	r2, 80065e0 <_svfiprintf_r+0x5c>
 80065dc:	2a25      	cmp	r2, #37	; 0x25
 80065de:	d1f9      	bne.n	80065d4 <_svfiprintf_r+0x50>
 80065e0:	ebba 0b04 	subs.w	fp, sl, r4
 80065e4:	d00b      	beq.n	80065fe <_svfiprintf_r+0x7a>
 80065e6:	465b      	mov	r3, fp
 80065e8:	4622      	mov	r2, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	4638      	mov	r0, r7
 80065ee:	f7ff ff6f 	bl	80064d0 <__ssputs_r>
 80065f2:	3001      	adds	r0, #1
 80065f4:	f000 80a9 	beq.w	800674a <_svfiprintf_r+0x1c6>
 80065f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065fa:	445a      	add	r2, fp
 80065fc:	9209      	str	r2, [sp, #36]	; 0x24
 80065fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80a1 	beq.w	800674a <_svfiprintf_r+0x1c6>
 8006608:	2300      	movs	r3, #0
 800660a:	f04f 32ff 	mov.w	r2, #4294967295
 800660e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006612:	f10a 0a01 	add.w	sl, sl, #1
 8006616:	9304      	str	r3, [sp, #16]
 8006618:	9307      	str	r3, [sp, #28]
 800661a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800661e:	931a      	str	r3, [sp, #104]	; 0x68
 8006620:	4654      	mov	r4, sl
 8006622:	2205      	movs	r2, #5
 8006624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006628:	4850      	ldr	r0, [pc, #320]	; (800676c <_svfiprintf_r+0x1e8>)
 800662a:	f7f9 fe09 	bl	8000240 <memchr>
 800662e:	9a04      	ldr	r2, [sp, #16]
 8006630:	b9d8      	cbnz	r0, 800666a <_svfiprintf_r+0xe6>
 8006632:	06d0      	lsls	r0, r2, #27
 8006634:	bf44      	itt	mi
 8006636:	2320      	movmi	r3, #32
 8006638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663c:	0711      	lsls	r1, r2, #28
 800663e:	bf44      	itt	mi
 8006640:	232b      	movmi	r3, #43	; 0x2b
 8006642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b2a      	cmp	r3, #42	; 0x2a
 800664c:	d015      	beq.n	800667a <_svfiprintf_r+0xf6>
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	4654      	mov	r4, sl
 8006652:	2000      	movs	r0, #0
 8006654:	f04f 0c0a 	mov.w	ip, #10
 8006658:	4621      	mov	r1, r4
 800665a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800665e:	3b30      	subs	r3, #48	; 0x30
 8006660:	2b09      	cmp	r3, #9
 8006662:	d94d      	bls.n	8006700 <_svfiprintf_r+0x17c>
 8006664:	b1b0      	cbz	r0, 8006694 <_svfiprintf_r+0x110>
 8006666:	9207      	str	r2, [sp, #28]
 8006668:	e014      	b.n	8006694 <_svfiprintf_r+0x110>
 800666a:	eba0 0308 	sub.w	r3, r0, r8
 800666e:	fa09 f303 	lsl.w	r3, r9, r3
 8006672:	4313      	orrs	r3, r2
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	46a2      	mov	sl, r4
 8006678:	e7d2      	b.n	8006620 <_svfiprintf_r+0x9c>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	1d19      	adds	r1, r3, #4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	9103      	str	r1, [sp, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfbb      	ittet	lt
 8006686:	425b      	neglt	r3, r3
 8006688:	f042 0202 	orrlt.w	r2, r2, #2
 800668c:	9307      	strge	r3, [sp, #28]
 800668e:	9307      	strlt	r3, [sp, #28]
 8006690:	bfb8      	it	lt
 8006692:	9204      	strlt	r2, [sp, #16]
 8006694:	7823      	ldrb	r3, [r4, #0]
 8006696:	2b2e      	cmp	r3, #46	; 0x2e
 8006698:	d10c      	bne.n	80066b4 <_svfiprintf_r+0x130>
 800669a:	7863      	ldrb	r3, [r4, #1]
 800669c:	2b2a      	cmp	r3, #42	; 0x2a
 800669e:	d134      	bne.n	800670a <_svfiprintf_r+0x186>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	9203      	str	r2, [sp, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bfb8      	it	lt
 80066ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80066b0:	3402      	adds	r4, #2
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800677c <_svfiprintf_r+0x1f8>
 80066b8:	7821      	ldrb	r1, [r4, #0]
 80066ba:	2203      	movs	r2, #3
 80066bc:	4650      	mov	r0, sl
 80066be:	f7f9 fdbf 	bl	8000240 <memchr>
 80066c2:	b138      	cbz	r0, 80066d4 <_svfiprintf_r+0x150>
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	eba0 000a 	sub.w	r0, r0, sl
 80066ca:	2240      	movs	r2, #64	; 0x40
 80066cc:	4082      	lsls	r2, r0
 80066ce:	4313      	orrs	r3, r2
 80066d0:	3401      	adds	r4, #1
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d8:	4825      	ldr	r0, [pc, #148]	; (8006770 <_svfiprintf_r+0x1ec>)
 80066da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066de:	2206      	movs	r2, #6
 80066e0:	f7f9 fdae 	bl	8000240 <memchr>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d038      	beq.n	800675a <_svfiprintf_r+0x1d6>
 80066e8:	4b22      	ldr	r3, [pc, #136]	; (8006774 <_svfiprintf_r+0x1f0>)
 80066ea:	bb1b      	cbnz	r3, 8006734 <_svfiprintf_r+0x1b0>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	3307      	adds	r3, #7
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	3308      	adds	r3, #8
 80066f6:	9303      	str	r3, [sp, #12]
 80066f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fa:	4433      	add	r3, r6
 80066fc:	9309      	str	r3, [sp, #36]	; 0x24
 80066fe:	e768      	b.n	80065d2 <_svfiprintf_r+0x4e>
 8006700:	fb0c 3202 	mla	r2, ip, r2, r3
 8006704:	460c      	mov	r4, r1
 8006706:	2001      	movs	r0, #1
 8006708:	e7a6      	b.n	8006658 <_svfiprintf_r+0xd4>
 800670a:	2300      	movs	r3, #0
 800670c:	3401      	adds	r4, #1
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	4619      	mov	r1, r3
 8006712:	f04f 0c0a 	mov.w	ip, #10
 8006716:	4620      	mov	r0, r4
 8006718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800671c:	3a30      	subs	r2, #48	; 0x30
 800671e:	2a09      	cmp	r2, #9
 8006720:	d903      	bls.n	800672a <_svfiprintf_r+0x1a6>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0c6      	beq.n	80066b4 <_svfiprintf_r+0x130>
 8006726:	9105      	str	r1, [sp, #20]
 8006728:	e7c4      	b.n	80066b4 <_svfiprintf_r+0x130>
 800672a:	fb0c 2101 	mla	r1, ip, r1, r2
 800672e:	4604      	mov	r4, r0
 8006730:	2301      	movs	r3, #1
 8006732:	e7f0      	b.n	8006716 <_svfiprintf_r+0x192>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <_svfiprintf_r+0x1f4>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4638      	mov	r0, r7
 8006740:	f7fd ff1a 	bl	8004578 <_printf_float>
 8006744:	1c42      	adds	r2, r0, #1
 8006746:	4606      	mov	r6, r0
 8006748:	d1d6      	bne.n	80066f8 <_svfiprintf_r+0x174>
 800674a:	89ab      	ldrh	r3, [r5, #12]
 800674c:	065b      	lsls	r3, r3, #25
 800674e:	f53f af2d 	bmi.w	80065ac <_svfiprintf_r+0x28>
 8006752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006754:	b01d      	add	sp, #116	; 0x74
 8006756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675a:	ab03      	add	r3, sp, #12
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	462a      	mov	r2, r5
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <_svfiprintf_r+0x1f4>)
 8006762:	a904      	add	r1, sp, #16
 8006764:	4638      	mov	r0, r7
 8006766:	f7fe f98f 	bl	8004a88 <_printf_i>
 800676a:	e7eb      	b.n	8006744 <_svfiprintf_r+0x1c0>
 800676c:	0800724c 	.word	0x0800724c
 8006770:	08007256 	.word	0x08007256
 8006774:	08004579 	.word	0x08004579
 8006778:	080064d1 	.word	0x080064d1
 800677c:	08007252 	.word	0x08007252

08006780 <__sflush_r>:
 8006780:	898a      	ldrh	r2, [r1, #12]
 8006782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006786:	4605      	mov	r5, r0
 8006788:	0710      	lsls	r0, r2, #28
 800678a:	460c      	mov	r4, r1
 800678c:	d458      	bmi.n	8006840 <__sflush_r+0xc0>
 800678e:	684b      	ldr	r3, [r1, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dc05      	bgt.n	80067a0 <__sflush_r+0x20>
 8006794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	dc02      	bgt.n	80067a0 <__sflush_r+0x20>
 800679a:	2000      	movs	r0, #0
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	d0f9      	beq.n	800679a <__sflush_r+0x1a>
 80067a6:	2300      	movs	r3, #0
 80067a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067ac:	682f      	ldr	r7, [r5, #0]
 80067ae:	6a21      	ldr	r1, [r4, #32]
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	d032      	beq.n	800681a <__sflush_r+0x9a>
 80067b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	075a      	lsls	r2, r3, #29
 80067ba:	d505      	bpl.n	80067c8 <__sflush_r+0x48>
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	1ac0      	subs	r0, r0, r3
 80067c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067c2:	b10b      	cbz	r3, 80067c8 <__sflush_r+0x48>
 80067c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067c6:	1ac0      	subs	r0, r0, r3
 80067c8:	2300      	movs	r3, #0
 80067ca:	4602      	mov	r2, r0
 80067cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ce:	6a21      	ldr	r1, [r4, #32]
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b0      	blx	r6
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	d106      	bne.n	80067e8 <__sflush_r+0x68>
 80067da:	6829      	ldr	r1, [r5, #0]
 80067dc:	291d      	cmp	r1, #29
 80067de:	d82b      	bhi.n	8006838 <__sflush_r+0xb8>
 80067e0:	4a29      	ldr	r2, [pc, #164]	; (8006888 <__sflush_r+0x108>)
 80067e2:	410a      	asrs	r2, r1
 80067e4:	07d6      	lsls	r6, r2, #31
 80067e6:	d427      	bmi.n	8006838 <__sflush_r+0xb8>
 80067e8:	2200      	movs	r2, #0
 80067ea:	6062      	str	r2, [r4, #4]
 80067ec:	04d9      	lsls	r1, r3, #19
 80067ee:	6922      	ldr	r2, [r4, #16]
 80067f0:	6022      	str	r2, [r4, #0]
 80067f2:	d504      	bpl.n	80067fe <__sflush_r+0x7e>
 80067f4:	1c42      	adds	r2, r0, #1
 80067f6:	d101      	bne.n	80067fc <__sflush_r+0x7c>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b903      	cbnz	r3, 80067fe <__sflush_r+0x7e>
 80067fc:	6560      	str	r0, [r4, #84]	; 0x54
 80067fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006800:	602f      	str	r7, [r5, #0]
 8006802:	2900      	cmp	r1, #0
 8006804:	d0c9      	beq.n	800679a <__sflush_r+0x1a>
 8006806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800680a:	4299      	cmp	r1, r3
 800680c:	d002      	beq.n	8006814 <__sflush_r+0x94>
 800680e:	4628      	mov	r0, r5
 8006810:	f7ff f9e2 	bl	8005bd8 <_free_r>
 8006814:	2000      	movs	r0, #0
 8006816:	6360      	str	r0, [r4, #52]	; 0x34
 8006818:	e7c0      	b.n	800679c <__sflush_r+0x1c>
 800681a:	2301      	movs	r3, #1
 800681c:	4628      	mov	r0, r5
 800681e:	47b0      	blx	r6
 8006820:	1c41      	adds	r1, r0, #1
 8006822:	d1c8      	bne.n	80067b6 <__sflush_r+0x36>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0c5      	beq.n	80067b6 <__sflush_r+0x36>
 800682a:	2b1d      	cmp	r3, #29
 800682c:	d001      	beq.n	8006832 <__sflush_r+0xb2>
 800682e:	2b16      	cmp	r3, #22
 8006830:	d101      	bne.n	8006836 <__sflush_r+0xb6>
 8006832:	602f      	str	r7, [r5, #0]
 8006834:	e7b1      	b.n	800679a <__sflush_r+0x1a>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	e7ad      	b.n	800679c <__sflush_r+0x1c>
 8006840:	690f      	ldr	r7, [r1, #16]
 8006842:	2f00      	cmp	r7, #0
 8006844:	d0a9      	beq.n	800679a <__sflush_r+0x1a>
 8006846:	0793      	lsls	r3, r2, #30
 8006848:	680e      	ldr	r6, [r1, #0]
 800684a:	bf08      	it	eq
 800684c:	694b      	ldreq	r3, [r1, #20]
 800684e:	600f      	str	r7, [r1, #0]
 8006850:	bf18      	it	ne
 8006852:	2300      	movne	r3, #0
 8006854:	eba6 0807 	sub.w	r8, r6, r7
 8006858:	608b      	str	r3, [r1, #8]
 800685a:	f1b8 0f00 	cmp.w	r8, #0
 800685e:	dd9c      	ble.n	800679a <__sflush_r+0x1a>
 8006860:	6a21      	ldr	r1, [r4, #32]
 8006862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006864:	4643      	mov	r3, r8
 8006866:	463a      	mov	r2, r7
 8006868:	4628      	mov	r0, r5
 800686a:	47b0      	blx	r6
 800686c:	2800      	cmp	r0, #0
 800686e:	dc06      	bgt.n	800687e <__sflush_r+0xfe>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e78e      	b.n	800679c <__sflush_r+0x1c>
 800687e:	4407      	add	r7, r0
 8006880:	eba8 0800 	sub.w	r8, r8, r0
 8006884:	e7e9      	b.n	800685a <__sflush_r+0xda>
 8006886:	bf00      	nop
 8006888:	dfbffffe 	.word	0xdfbffffe

0800688c <_fflush_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	690b      	ldr	r3, [r1, #16]
 8006890:	4605      	mov	r5, r0
 8006892:	460c      	mov	r4, r1
 8006894:	b913      	cbnz	r3, 800689c <_fflush_r+0x10>
 8006896:	2500      	movs	r5, #0
 8006898:	4628      	mov	r0, r5
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	b118      	cbz	r0, 80068a6 <_fflush_r+0x1a>
 800689e:	6a03      	ldr	r3, [r0, #32]
 80068a0:	b90b      	cbnz	r3, 80068a6 <_fflush_r+0x1a>
 80068a2:	f7fe fa8d 	bl	8004dc0 <__sinit>
 80068a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f3      	beq.n	8006896 <_fflush_r+0xa>
 80068ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068b0:	07d0      	lsls	r0, r2, #31
 80068b2:	d404      	bmi.n	80068be <_fflush_r+0x32>
 80068b4:	0599      	lsls	r1, r3, #22
 80068b6:	d402      	bmi.n	80068be <_fflush_r+0x32>
 80068b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ba:	f7fe fb97 	bl	8004fec <__retarget_lock_acquire_recursive>
 80068be:	4628      	mov	r0, r5
 80068c0:	4621      	mov	r1, r4
 80068c2:	f7ff ff5d 	bl	8006780 <__sflush_r>
 80068c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068c8:	07da      	lsls	r2, r3, #31
 80068ca:	4605      	mov	r5, r0
 80068cc:	d4e4      	bmi.n	8006898 <_fflush_r+0xc>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	059b      	lsls	r3, r3, #22
 80068d2:	d4e1      	bmi.n	8006898 <_fflush_r+0xc>
 80068d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d6:	f7fe fb8a 	bl	8004fee <__retarget_lock_release_recursive>
 80068da:	e7dd      	b.n	8006898 <_fflush_r+0xc>

080068dc <memmove>:
 80068dc:	4288      	cmp	r0, r1
 80068de:	b510      	push	{r4, lr}
 80068e0:	eb01 0402 	add.w	r4, r1, r2
 80068e4:	d902      	bls.n	80068ec <memmove+0x10>
 80068e6:	4284      	cmp	r4, r0
 80068e8:	4623      	mov	r3, r4
 80068ea:	d807      	bhi.n	80068fc <memmove+0x20>
 80068ec:	1e43      	subs	r3, r0, #1
 80068ee:	42a1      	cmp	r1, r4
 80068f0:	d008      	beq.n	8006904 <memmove+0x28>
 80068f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068fa:	e7f8      	b.n	80068ee <memmove+0x12>
 80068fc:	4402      	add	r2, r0
 80068fe:	4601      	mov	r1, r0
 8006900:	428a      	cmp	r2, r1
 8006902:	d100      	bne.n	8006906 <memmove+0x2a>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800690a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800690e:	e7f7      	b.n	8006900 <memmove+0x24>

08006910 <_sbrk_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d06      	ldr	r5, [pc, #24]	; (800692c <_sbrk_r+0x1c>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fa f96e 	bl	8000bfc <_sbrk>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_sbrk_r+0x1a>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_sbrk_r+0x1a>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	200004e4 	.word	0x200004e4

08006930 <memcpy>:
 8006930:	440a      	add	r2, r1
 8006932:	4291      	cmp	r1, r2
 8006934:	f100 33ff 	add.w	r3, r0, #4294967295
 8006938:	d100      	bne.n	800693c <memcpy+0xc>
 800693a:	4770      	bx	lr
 800693c:	b510      	push	{r4, lr}
 800693e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006946:	4291      	cmp	r1, r2
 8006948:	d1f9      	bne.n	800693e <memcpy+0xe>
 800694a:	bd10      	pop	{r4, pc}

0800694c <__assert_func>:
 800694c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800694e:	4614      	mov	r4, r2
 8006950:	461a      	mov	r2, r3
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <__assert_func+0x2c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4605      	mov	r5, r0
 8006958:	68d8      	ldr	r0, [r3, #12]
 800695a:	b14c      	cbz	r4, 8006970 <__assert_func+0x24>
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <__assert_func+0x30>)
 800695e:	9100      	str	r1, [sp, #0]
 8006960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006964:	4906      	ldr	r1, [pc, #24]	; (8006980 <__assert_func+0x34>)
 8006966:	462b      	mov	r3, r5
 8006968:	f000 f872 	bl	8006a50 <fiprintf>
 800696c:	f000 f882 	bl	8006a74 <abort>
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <__assert_func+0x38>)
 8006972:	461c      	mov	r4, r3
 8006974:	e7f3      	b.n	800695e <__assert_func+0x12>
 8006976:	bf00      	nop
 8006978:	20000064 	.word	0x20000064
 800697c:	08007267 	.word	0x08007267
 8006980:	08007274 	.word	0x08007274
 8006984:	080072a2 	.word	0x080072a2

08006988 <_calloc_r>:
 8006988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698a:	fba1 2402 	umull	r2, r4, r1, r2
 800698e:	b94c      	cbnz	r4, 80069a4 <_calloc_r+0x1c>
 8006990:	4611      	mov	r1, r2
 8006992:	9201      	str	r2, [sp, #4]
 8006994:	f7ff f994 	bl	8005cc0 <_malloc_r>
 8006998:	9a01      	ldr	r2, [sp, #4]
 800699a:	4605      	mov	r5, r0
 800699c:	b930      	cbnz	r0, 80069ac <_calloc_r+0x24>
 800699e:	4628      	mov	r0, r5
 80069a0:	b003      	add	sp, #12
 80069a2:	bd30      	pop	{r4, r5, pc}
 80069a4:	220c      	movs	r2, #12
 80069a6:	6002      	str	r2, [r0, #0]
 80069a8:	2500      	movs	r5, #0
 80069aa:	e7f8      	b.n	800699e <_calloc_r+0x16>
 80069ac:	4621      	mov	r1, r4
 80069ae:	f7fe faa0 	bl	8004ef2 <memset>
 80069b2:	e7f4      	b.n	800699e <_calloc_r+0x16>

080069b4 <__ascii_mbtowc>:
 80069b4:	b082      	sub	sp, #8
 80069b6:	b901      	cbnz	r1, 80069ba <__ascii_mbtowc+0x6>
 80069b8:	a901      	add	r1, sp, #4
 80069ba:	b142      	cbz	r2, 80069ce <__ascii_mbtowc+0x1a>
 80069bc:	b14b      	cbz	r3, 80069d2 <__ascii_mbtowc+0x1e>
 80069be:	7813      	ldrb	r3, [r2, #0]
 80069c0:	600b      	str	r3, [r1, #0]
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	1e10      	subs	r0, r2, #0
 80069c6:	bf18      	it	ne
 80069c8:	2001      	movne	r0, #1
 80069ca:	b002      	add	sp, #8
 80069cc:	4770      	bx	lr
 80069ce:	4610      	mov	r0, r2
 80069d0:	e7fb      	b.n	80069ca <__ascii_mbtowc+0x16>
 80069d2:	f06f 0001 	mvn.w	r0, #1
 80069d6:	e7f8      	b.n	80069ca <__ascii_mbtowc+0x16>

080069d8 <_realloc_r>:
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	4680      	mov	r8, r0
 80069de:	4614      	mov	r4, r2
 80069e0:	460e      	mov	r6, r1
 80069e2:	b921      	cbnz	r1, 80069ee <_realloc_r+0x16>
 80069e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	4611      	mov	r1, r2
 80069ea:	f7ff b969 	b.w	8005cc0 <_malloc_r>
 80069ee:	b92a      	cbnz	r2, 80069fc <_realloc_r+0x24>
 80069f0:	f7ff f8f2 	bl	8005bd8 <_free_r>
 80069f4:	4625      	mov	r5, r4
 80069f6:	4628      	mov	r0, r5
 80069f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069fc:	f000 f841 	bl	8006a82 <_malloc_usable_size_r>
 8006a00:	4284      	cmp	r4, r0
 8006a02:	4607      	mov	r7, r0
 8006a04:	d802      	bhi.n	8006a0c <_realloc_r+0x34>
 8006a06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a0a:	d812      	bhi.n	8006a32 <_realloc_r+0x5a>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f7ff f956 	bl	8005cc0 <_malloc_r>
 8006a14:	4605      	mov	r5, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d0ed      	beq.n	80069f6 <_realloc_r+0x1e>
 8006a1a:	42bc      	cmp	r4, r7
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	4631      	mov	r1, r6
 8006a20:	bf28      	it	cs
 8006a22:	463a      	movcs	r2, r7
 8006a24:	f7ff ff84 	bl	8006930 <memcpy>
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f7ff f8d4 	bl	8005bd8 <_free_r>
 8006a30:	e7e1      	b.n	80069f6 <_realloc_r+0x1e>
 8006a32:	4635      	mov	r5, r6
 8006a34:	e7df      	b.n	80069f6 <_realloc_r+0x1e>

08006a36 <__ascii_wctomb>:
 8006a36:	b149      	cbz	r1, 8006a4c <__ascii_wctomb+0x16>
 8006a38:	2aff      	cmp	r2, #255	; 0xff
 8006a3a:	bf85      	ittet	hi
 8006a3c:	238a      	movhi	r3, #138	; 0x8a
 8006a3e:	6003      	strhi	r3, [r0, #0]
 8006a40:	700a      	strbls	r2, [r1, #0]
 8006a42:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a46:	bf98      	it	ls
 8006a48:	2001      	movls	r0, #1
 8006a4a:	4770      	bx	lr
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4770      	bx	lr

08006a50 <fiprintf>:
 8006a50:	b40e      	push	{r1, r2, r3}
 8006a52:	b503      	push	{r0, r1, lr}
 8006a54:	4601      	mov	r1, r0
 8006a56:	ab03      	add	r3, sp, #12
 8006a58:	4805      	ldr	r0, [pc, #20]	; (8006a70 <fiprintf+0x20>)
 8006a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a5e:	6800      	ldr	r0, [r0, #0]
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	f000 f83f 	bl	8006ae4 <_vfiprintf_r>
 8006a66:	b002      	add	sp, #8
 8006a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	4770      	bx	lr
 8006a70:	20000064 	.word	0x20000064

08006a74 <abort>:
 8006a74:	b508      	push	{r3, lr}
 8006a76:	2006      	movs	r0, #6
 8006a78:	f000 fa0c 	bl	8006e94 <raise>
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	f7fa f845 	bl	8000b0c <_exit>

08006a82 <_malloc_usable_size_r>:
 8006a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a86:	1f18      	subs	r0, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbc      	itt	lt
 8006a8c:	580b      	ldrlt	r3, [r1, r0]
 8006a8e:	18c0      	addlt	r0, r0, r3
 8006a90:	4770      	bx	lr

08006a92 <__sfputc_r>:
 8006a92:	6893      	ldr	r3, [r2, #8]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	b410      	push	{r4}
 8006a9a:	6093      	str	r3, [r2, #8]
 8006a9c:	da08      	bge.n	8006ab0 <__sfputc_r+0x1e>
 8006a9e:	6994      	ldr	r4, [r2, #24]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	db01      	blt.n	8006aa8 <__sfputc_r+0x16>
 8006aa4:	290a      	cmp	r1, #10
 8006aa6:	d103      	bne.n	8006ab0 <__sfputc_r+0x1e>
 8006aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aac:	f000 b934 	b.w	8006d18 <__swbuf_r>
 8006ab0:	6813      	ldr	r3, [r2, #0]
 8006ab2:	1c58      	adds	r0, r3, #1
 8006ab4:	6010      	str	r0, [r2, #0]
 8006ab6:	7019      	strb	r1, [r3, #0]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <__sfputs_r>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	460f      	mov	r7, r1
 8006ac6:	4614      	mov	r4, r2
 8006ac8:	18d5      	adds	r5, r2, r3
 8006aca:	42ac      	cmp	r4, r5
 8006acc:	d101      	bne.n	8006ad2 <__sfputs_r+0x12>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	e007      	b.n	8006ae2 <__sfputs_r+0x22>
 8006ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad6:	463a      	mov	r2, r7
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff ffda 	bl	8006a92 <__sfputc_r>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	d1f3      	bne.n	8006aca <__sfputs_r+0xa>
 8006ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ae4 <_vfiprintf_r>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	460d      	mov	r5, r1
 8006aea:	b09d      	sub	sp, #116	; 0x74
 8006aec:	4614      	mov	r4, r2
 8006aee:	4698      	mov	r8, r3
 8006af0:	4606      	mov	r6, r0
 8006af2:	b118      	cbz	r0, 8006afc <_vfiprintf_r+0x18>
 8006af4:	6a03      	ldr	r3, [r0, #32]
 8006af6:	b90b      	cbnz	r3, 8006afc <_vfiprintf_r+0x18>
 8006af8:	f7fe f962 	bl	8004dc0 <__sinit>
 8006afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d405      	bmi.n	8006b0e <_vfiprintf_r+0x2a>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_vfiprintf_r+0x2a>
 8006b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b0a:	f7fe fa6f 	bl	8004fec <__retarget_lock_acquire_recursive>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	071b      	lsls	r3, r3, #28
 8006b12:	d501      	bpl.n	8006b18 <_vfiprintf_r+0x34>
 8006b14:	692b      	ldr	r3, [r5, #16]
 8006b16:	b99b      	cbnz	r3, 8006b40 <_vfiprintf_r+0x5c>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f93a 	bl	8006d94 <__swsetup_r>
 8006b20:	b170      	cbz	r0, 8006b40 <_vfiprintf_r+0x5c>
 8006b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b24:	07dc      	lsls	r4, r3, #31
 8006b26:	d504      	bpl.n	8006b32 <_vfiprintf_r+0x4e>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	b01d      	add	sp, #116	; 0x74
 8006b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b32:	89ab      	ldrh	r3, [r5, #12]
 8006b34:	0598      	lsls	r0, r3, #22
 8006b36:	d4f7      	bmi.n	8006b28 <_vfiprintf_r+0x44>
 8006b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b3a:	f7fe fa58 	bl	8004fee <__retarget_lock_release_recursive>
 8006b3e:	e7f3      	b.n	8006b28 <_vfiprintf_r+0x44>
 8006b40:	2300      	movs	r3, #0
 8006b42:	9309      	str	r3, [sp, #36]	; 0x24
 8006b44:	2320      	movs	r3, #32
 8006b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4e:	2330      	movs	r3, #48	; 0x30
 8006b50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d04 <_vfiprintf_r+0x220>
 8006b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	469a      	mov	sl, r3
 8006b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b64:	b10a      	cbz	r2, 8006b6a <_vfiprintf_r+0x86>
 8006b66:	2a25      	cmp	r2, #37	; 0x25
 8006b68:	d1f9      	bne.n	8006b5e <_vfiprintf_r+0x7a>
 8006b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6e:	d00b      	beq.n	8006b88 <_vfiprintf_r+0xa4>
 8006b70:	465b      	mov	r3, fp
 8006b72:	4622      	mov	r2, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ffa2 	bl	8006ac0 <__sfputs_r>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f000 80a9 	beq.w	8006cd4 <_vfiprintf_r+0x1f0>
 8006b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b84:	445a      	add	r2, fp
 8006b86:	9209      	str	r2, [sp, #36]	; 0x24
 8006b88:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80a1 	beq.w	8006cd4 <_vfiprintf_r+0x1f0>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8006baa:	4654      	mov	r4, sl
 8006bac:	2205      	movs	r2, #5
 8006bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb2:	4854      	ldr	r0, [pc, #336]	; (8006d04 <_vfiprintf_r+0x220>)
 8006bb4:	f7f9 fb44 	bl	8000240 <memchr>
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	b9d8      	cbnz	r0, 8006bf4 <_vfiprintf_r+0x110>
 8006bbc:	06d1      	lsls	r1, r2, #27
 8006bbe:	bf44      	itt	mi
 8006bc0:	2320      	movmi	r3, #32
 8006bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc6:	0713      	lsls	r3, r2, #28
 8006bc8:	bf44      	itt	mi
 8006bca:	232b      	movmi	r3, #43	; 0x2b
 8006bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd6:	d015      	beq.n	8006c04 <_vfiprintf_r+0x120>
 8006bd8:	9a07      	ldr	r2, [sp, #28]
 8006bda:	4654      	mov	r4, sl
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f04f 0c0a 	mov.w	ip, #10
 8006be2:	4621      	mov	r1, r4
 8006be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be8:	3b30      	subs	r3, #48	; 0x30
 8006bea:	2b09      	cmp	r3, #9
 8006bec:	d94d      	bls.n	8006c8a <_vfiprintf_r+0x1a6>
 8006bee:	b1b0      	cbz	r0, 8006c1e <_vfiprintf_r+0x13a>
 8006bf0:	9207      	str	r2, [sp, #28]
 8006bf2:	e014      	b.n	8006c1e <_vfiprintf_r+0x13a>
 8006bf4:	eba0 0308 	sub.w	r3, r0, r8
 8006bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	46a2      	mov	sl, r4
 8006c02:	e7d2      	b.n	8006baa <_vfiprintf_r+0xc6>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1d19      	adds	r1, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	9103      	str	r1, [sp, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfbb      	ittet	lt
 8006c10:	425b      	neglt	r3, r3
 8006c12:	f042 0202 	orrlt.w	r2, r2, #2
 8006c16:	9307      	strge	r3, [sp, #28]
 8006c18:	9307      	strlt	r3, [sp, #28]
 8006c1a:	bfb8      	it	lt
 8006c1c:	9204      	strlt	r2, [sp, #16]
 8006c1e:	7823      	ldrb	r3, [r4, #0]
 8006c20:	2b2e      	cmp	r3, #46	; 0x2e
 8006c22:	d10c      	bne.n	8006c3e <_vfiprintf_r+0x15a>
 8006c24:	7863      	ldrb	r3, [r4, #1]
 8006c26:	2b2a      	cmp	r3, #42	; 0x2a
 8006c28:	d134      	bne.n	8006c94 <_vfiprintf_r+0x1b0>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	9203      	str	r2, [sp, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bfb8      	it	lt
 8006c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c3a:	3402      	adds	r4, #2
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d14 <_vfiprintf_r+0x230>
 8006c42:	7821      	ldrb	r1, [r4, #0]
 8006c44:	2203      	movs	r2, #3
 8006c46:	4650      	mov	r0, sl
 8006c48:	f7f9 fafa 	bl	8000240 <memchr>
 8006c4c:	b138      	cbz	r0, 8006c5e <_vfiprintf_r+0x17a>
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	eba0 000a 	sub.w	r0, r0, sl
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	4082      	lsls	r2, r0
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c62:	4829      	ldr	r0, [pc, #164]	; (8006d08 <_vfiprintf_r+0x224>)
 8006c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c68:	2206      	movs	r2, #6
 8006c6a:	f7f9 fae9 	bl	8000240 <memchr>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d03f      	beq.n	8006cf2 <_vfiprintf_r+0x20e>
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <_vfiprintf_r+0x228>)
 8006c74:	bb1b      	cbnz	r3, 8006cbe <_vfiprintf_r+0x1da>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	3307      	adds	r3, #7
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	3308      	adds	r3, #8
 8006c80:	9303      	str	r3, [sp, #12]
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	443b      	add	r3, r7
 8006c86:	9309      	str	r3, [sp, #36]	; 0x24
 8006c88:	e768      	b.n	8006b5c <_vfiprintf_r+0x78>
 8006c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8e:	460c      	mov	r4, r1
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7a6      	b.n	8006be2 <_vfiprintf_r+0xfe>
 8006c94:	2300      	movs	r3, #0
 8006c96:	3401      	adds	r4, #1
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f04f 0c0a 	mov.w	ip, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca6:	3a30      	subs	r2, #48	; 0x30
 8006ca8:	2a09      	cmp	r2, #9
 8006caa:	d903      	bls.n	8006cb4 <_vfiprintf_r+0x1d0>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0c6      	beq.n	8006c3e <_vfiprintf_r+0x15a>
 8006cb0:	9105      	str	r1, [sp, #20]
 8006cb2:	e7c4      	b.n	8006c3e <_vfiprintf_r+0x15a>
 8006cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7f0      	b.n	8006ca0 <_vfiprintf_r+0x1bc>
 8006cbe:	ab03      	add	r3, sp, #12
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <_vfiprintf_r+0x22c>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7fd fc55 	bl	8004578 <_printf_float>
 8006cce:	4607      	mov	r7, r0
 8006cd0:	1c78      	adds	r0, r7, #1
 8006cd2:	d1d6      	bne.n	8006c82 <_vfiprintf_r+0x19e>
 8006cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	d405      	bmi.n	8006ce6 <_vfiprintf_r+0x202>
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	059a      	lsls	r2, r3, #22
 8006cde:	d402      	bmi.n	8006ce6 <_vfiprintf_r+0x202>
 8006ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce2:	f7fe f984 	bl	8004fee <__retarget_lock_release_recursive>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	065b      	lsls	r3, r3, #25
 8006cea:	f53f af1d 	bmi.w	8006b28 <_vfiprintf_r+0x44>
 8006cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf0:	e71c      	b.n	8006b2c <_vfiprintf_r+0x48>
 8006cf2:	ab03      	add	r3, sp, #12
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	462a      	mov	r2, r5
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <_vfiprintf_r+0x22c>)
 8006cfa:	a904      	add	r1, sp, #16
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7fd fec3 	bl	8004a88 <_printf_i>
 8006d02:	e7e4      	b.n	8006cce <_vfiprintf_r+0x1ea>
 8006d04:	0800724c 	.word	0x0800724c
 8006d08:	08007256 	.word	0x08007256
 8006d0c:	08004579 	.word	0x08004579
 8006d10:	08006ac1 	.word	0x08006ac1
 8006d14:	08007252 	.word	0x08007252

08006d18 <__swbuf_r>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	460e      	mov	r6, r1
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	4605      	mov	r5, r0
 8006d20:	b118      	cbz	r0, 8006d2a <__swbuf_r+0x12>
 8006d22:	6a03      	ldr	r3, [r0, #32]
 8006d24:	b90b      	cbnz	r3, 8006d2a <__swbuf_r+0x12>
 8006d26:	f7fe f84b 	bl	8004dc0 <__sinit>
 8006d2a:	69a3      	ldr	r3, [r4, #24]
 8006d2c:	60a3      	str	r3, [r4, #8]
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	071a      	lsls	r2, r3, #28
 8006d32:	d525      	bpl.n	8006d80 <__swbuf_r+0x68>
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	b31b      	cbz	r3, 8006d80 <__swbuf_r+0x68>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	6922      	ldr	r2, [r4, #16]
 8006d3c:	1a98      	subs	r0, r3, r2
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	b2f6      	uxtb	r6, r6
 8006d42:	4283      	cmp	r3, r0
 8006d44:	4637      	mov	r7, r6
 8006d46:	dc04      	bgt.n	8006d52 <__swbuf_r+0x3a>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f7ff fd9e 	bl	800688c <_fflush_r>
 8006d50:	b9e0      	cbnz	r0, 8006d8c <__swbuf_r+0x74>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	6022      	str	r2, [r4, #0]
 8006d5e:	701e      	strb	r6, [r3, #0]
 8006d60:	6962      	ldr	r2, [r4, #20]
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d004      	beq.n	8006d72 <__swbuf_r+0x5a>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	07db      	lsls	r3, r3, #31
 8006d6c:	d506      	bpl.n	8006d7c <__swbuf_r+0x64>
 8006d6e:	2e0a      	cmp	r6, #10
 8006d70:	d104      	bne.n	8006d7c <__swbuf_r+0x64>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7ff fd89 	bl	800688c <_fflush_r>
 8006d7a:	b938      	cbnz	r0, 8006d8c <__swbuf_r+0x74>
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d80:	4621      	mov	r1, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 f806 	bl	8006d94 <__swsetup_r>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d0d5      	beq.n	8006d38 <__swbuf_r+0x20>
 8006d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d90:	e7f4      	b.n	8006d7c <__swbuf_r+0x64>
	...

08006d94 <__swsetup_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <__swsetup_r+0xac>)
 8006d98:	4605      	mov	r5, r0
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	b118      	cbz	r0, 8006da8 <__swsetup_r+0x14>
 8006da0:	6a03      	ldr	r3, [r0, #32]
 8006da2:	b90b      	cbnz	r3, 8006da8 <__swsetup_r+0x14>
 8006da4:	f7fe f80c 	bl	8004dc0 <__sinit>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dae:	0718      	lsls	r0, r3, #28
 8006db0:	d422      	bmi.n	8006df8 <__swsetup_r+0x64>
 8006db2:	06d9      	lsls	r1, r3, #27
 8006db4:	d407      	bmi.n	8006dc6 <__swsetup_r+0x32>
 8006db6:	2309      	movs	r3, #9
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e034      	b.n	8006e30 <__swsetup_r+0x9c>
 8006dc6:	0758      	lsls	r0, r3, #29
 8006dc8:	d512      	bpl.n	8006df0 <__swsetup_r+0x5c>
 8006dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dcc:	b141      	cbz	r1, 8006de0 <__swsetup_r+0x4c>
 8006dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd2:	4299      	cmp	r1, r3
 8006dd4:	d002      	beq.n	8006ddc <__swsetup_r+0x48>
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7fe fefe 	bl	8005bd8 <_free_r>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6363      	str	r3, [r4, #52]	; 0x34
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	2300      	movs	r3, #0
 8006dea:	6063      	str	r3, [r4, #4]
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f043 0308 	orr.w	r3, r3, #8
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	b94b      	cbnz	r3, 8006e10 <__swsetup_r+0x7c>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d003      	beq.n	8006e10 <__swsetup_r+0x7c>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f884 	bl	8006f18 <__smakebuf_r>
 8006e10:	89a0      	ldrh	r0, [r4, #12]
 8006e12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e16:	f010 0301 	ands.w	r3, r0, #1
 8006e1a:	d00a      	beq.n	8006e32 <__swsetup_r+0x9e>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60a3      	str	r3, [r4, #8]
 8006e20:	6963      	ldr	r3, [r4, #20]
 8006e22:	425b      	negs	r3, r3
 8006e24:	61a3      	str	r3, [r4, #24]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	b943      	cbnz	r3, 8006e3c <__swsetup_r+0xa8>
 8006e2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e2e:	d1c4      	bne.n	8006dba <__swsetup_r+0x26>
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
 8006e32:	0781      	lsls	r1, r0, #30
 8006e34:	bf58      	it	pl
 8006e36:	6963      	ldrpl	r3, [r4, #20]
 8006e38:	60a3      	str	r3, [r4, #8]
 8006e3a:	e7f4      	b.n	8006e26 <__swsetup_r+0x92>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	e7f7      	b.n	8006e30 <__swsetup_r+0x9c>
 8006e40:	20000064 	.word	0x20000064

08006e44 <_raise_r>:
 8006e44:	291f      	cmp	r1, #31
 8006e46:	b538      	push	{r3, r4, r5, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	d904      	bls.n	8006e58 <_raise_r+0x14>
 8006e4e:	2316      	movs	r3, #22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e5a:	b112      	cbz	r2, 8006e62 <_raise_r+0x1e>
 8006e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e60:	b94b      	cbnz	r3, 8006e76 <_raise_r+0x32>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f830 	bl	8006ec8 <_getpid_r>
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e72:	f000 b817 	b.w	8006ea4 <_kill_r>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00a      	beq.n	8006e90 <_raise_r+0x4c>
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	d103      	bne.n	8006e86 <_raise_r+0x42>
 8006e7e:	2316      	movs	r3, #22
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	2001      	movs	r0, #1
 8006e84:	e7e7      	b.n	8006e56 <_raise_r+0x12>
 8006e86:	2400      	movs	r4, #0
 8006e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	4798      	blx	r3
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7e0      	b.n	8006e56 <_raise_r+0x12>

08006e94 <raise>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <raise+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f7ff bfd3 	b.w	8006e44 <_raise_r>
 8006e9e:	bf00      	nop
 8006ea0:	20000064 	.word	0x20000064

08006ea4 <_kill_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d07      	ldr	r5, [pc, #28]	; (8006ec4 <_kill_r+0x20>)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	4611      	mov	r1, r2
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	f7f9 fe1b 	bl	8000aec <_kill>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	d102      	bne.n	8006ec0 <_kill_r+0x1c>
 8006eba:	682b      	ldr	r3, [r5, #0]
 8006ebc:	b103      	cbz	r3, 8006ec0 <_kill_r+0x1c>
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200004e4 	.word	0x200004e4

08006ec8 <_getpid_r>:
 8006ec8:	f7f9 be08 	b.w	8000adc <_getpid>

08006ecc <__swhatbuf_r>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	b096      	sub	sp, #88	; 0x58
 8006ed8:	4615      	mov	r5, r2
 8006eda:	461e      	mov	r6, r3
 8006edc:	da0d      	bge.n	8006efa <__swhatbuf_r+0x2e>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ee4:	f04f 0100 	mov.w	r1, #0
 8006ee8:	bf0c      	ite	eq
 8006eea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006eee:	2340      	movne	r3, #64	; 0x40
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	6031      	str	r1, [r6, #0]
 8006ef4:	602b      	str	r3, [r5, #0]
 8006ef6:	b016      	add	sp, #88	; 0x58
 8006ef8:	bd70      	pop	{r4, r5, r6, pc}
 8006efa:	466a      	mov	r2, sp
 8006efc:	f000 f848 	bl	8006f90 <_fstat_r>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	dbec      	blt.n	8006ede <__swhatbuf_r+0x12>
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f0e:	4259      	negs	r1, r3
 8006f10:	4159      	adcs	r1, r3
 8006f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f16:	e7eb      	b.n	8006ef0 <__swhatbuf_r+0x24>

08006f18 <__smakebuf_r>:
 8006f18:	898b      	ldrh	r3, [r1, #12]
 8006f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f1c:	079d      	lsls	r5, r3, #30
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	d507      	bpl.n	8006f34 <__smakebuf_r+0x1c>
 8006f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	b002      	add	sp, #8
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	ab01      	add	r3, sp, #4
 8006f36:	466a      	mov	r2, sp
 8006f38:	f7ff ffc8 	bl	8006ecc <__swhatbuf_r>
 8006f3c:	9900      	ldr	r1, [sp, #0]
 8006f3e:	4605      	mov	r5, r0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7fe febd 	bl	8005cc0 <_malloc_r>
 8006f46:	b948      	cbnz	r0, 8006f5c <__smakebuf_r+0x44>
 8006f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d4ef      	bmi.n	8006f30 <__smakebuf_r+0x18>
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	f043 0302 	orr.w	r3, r3, #2
 8006f58:	81a3      	strh	r3, [r4, #12]
 8006f5a:	e7e3      	b.n	8006f24 <__smakebuf_r+0xc>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	6020      	str	r0, [r4, #0]
 8006f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	9b00      	ldr	r3, [sp, #0]
 8006f68:	6163      	str	r3, [r4, #20]
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	6120      	str	r0, [r4, #16]
 8006f6e:	b15b      	cbz	r3, 8006f88 <__smakebuf_r+0x70>
 8006f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f74:	4630      	mov	r0, r6
 8006f76:	f000 f81d 	bl	8006fb4 <_isatty_r>
 8006f7a:	b128      	cbz	r0, 8006f88 <__smakebuf_r+0x70>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	81a3      	strh	r3, [r4, #12]
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	431d      	orrs	r5, r3
 8006f8c:	81a5      	strh	r5, [r4, #12]
 8006f8e:	e7cf      	b.n	8006f30 <__smakebuf_r+0x18>

08006f90 <_fstat_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	; (8006fb0 <_fstat_r+0x20>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	f7f9 fe04 	bl	8000baa <_fstat>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d102      	bne.n	8006fac <_fstat_r+0x1c>
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	b103      	cbz	r3, 8006fac <_fstat_r+0x1c>
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
 8006fae:	bf00      	nop
 8006fb0:	200004e4 	.word	0x200004e4

08006fb4 <_isatty_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d06      	ldr	r5, [pc, #24]	; (8006fd0 <_isatty_r+0x1c>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	f7f9 fe03 	bl	8000bca <_isatty>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_isatty_r+0x1a>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_isatty_r+0x1a>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	200004e4 	.word	0x200004e4

08006fd4 <_init>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr

08006fe0 <_fini>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr
