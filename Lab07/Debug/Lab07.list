
Lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006664  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006868  08006868  00016868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf4  08006bf4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bfc  08006bfc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  08006dd8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08006dd8  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f223  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220c  00000000  00000000  0002f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aab  00000000  00000000  00032438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cb1  00000000  00000000  00032ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c8c  00000000  00000000  0005bb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcea7  00000000  00000000  0006d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004670  00000000  00000000  0016a6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0016ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800684c 	.word	0x0800684c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0800684c 	.word	0x0800684c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_GPIO_Init+0x5c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <MX_GPIO_Init+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_GPIO_Init+0x5c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_GPIO_Init+0x5c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fba5 	bl	8000d9e <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000654:	f000 f892 	bl	800077c <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f822 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ffc6 	bl	80005ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000660:	f000 f9e4 	bl	8000a2c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000664:	f000 fae2 	bl	8000c2c <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/*01*/
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000668:	2108      	movs	r1, #8
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <main+0x48>)
 800066c:	f002 f8ea 	bl	8002844 <HAL_TIM_PWM_Start>
	  HAL_Delay(100);
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f000 fbf1 	bl	8000e58 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000676:	2108      	movs	r1, #8
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <main+0x48>)
 800067a:	f002 f9dd 	bl	8002a38 <HAL_TIM_PWM_Stop>
	  pwm = (GPIOB->IDR & GPIO_PIN_10) >>10;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <main+0x4c>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	0a9b      	lsrs	r3, r3, #10
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <main+0x50>)
 800068e:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000690:	e7ea      	b.n	8000668 <main+0x1c>
 8000692:	bf00      	nop
 8000694:	200001f8 	.word	0x200001f8
 8000698:	40020400 	.word	0x40020400
 800069c:	200001f0 	.word	0x200001f0

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fa03 	bl	8004aba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <SystemClock_Config+0xd4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <SystemClock_Config+0xd4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xd4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a25      	ldr	r2, [pc, #148]	; (8000778 <SystemClock_Config+0xd8>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800070c:	23d8      	movs	r3, #216	; 0xd8
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f000 ff1b 	bl	800155c <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800072c:	f000 f852 	bl	80007d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000730:	f000 fec4 	bl	80014bc <HAL_PWREx_EnableOverDrive>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073a:	f000 f84b 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2107      	movs	r1, #7
 800075c:	4618      	mov	r0, r3
 800075e:	f001 f9ab 	bl	8001ab8 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000768:	f000 f834 	bl	80007d4 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	; 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800078e:	f000 fc6d 	bl	800106c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000792:	2301      	movs	r3, #1
 8000794:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000796:	2300      	movs	r3, #0
 8000798:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800079e:	231f      	movs	r3, #31
 80007a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007a2:	2387      	movs	r3, #135	; 0x87
 80007a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007aa:	2300      	movs	r3, #0
 80007ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007be:	463b      	mov	r3, r7
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fc8b 	bl	80010dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f000 fc68 	bl	800109c <HAL_MPU_Enable>

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x44>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x44>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x44>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x44>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x44>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f000 fad0 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return 1;
 8000880:	2301      	movs	r3, #1
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <_kill>:

int _kill(int pid, int sig)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000896:	f004 f963 	bl	8004b60 <__errno>
 800089a:	4603      	mov	r3, r0
 800089c:	2216      	movs	r2, #22
 800089e:	601a      	str	r2, [r3, #0]
  return -1;
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_exit>:

void _exit (int status)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ffe7 	bl	800088c <_kill>
  while (1) {}    /* Make sure we hang here */
 80008be:	e7fe      	b.n	80008be <_exit+0x12>

080008c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00a      	b.n	80008e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d2:	f3af 8000 	nop.w
 80008d6:	4601      	mov	r1, r0
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf0      	blt.n	80008d2 <_read+0x12>
  }

  return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e009      	b.n	8000920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf1      	blt.n	800090c <_write+0x12>
  }
  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	605a      	str	r2, [r3, #4]
  return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f004 f8c8 	bl	8004b60 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20080000 	.word	0x20080000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	200001f4 	.word	0x200001f4
 8000a04:	20000420 	.word	0x20000420

08000a08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5e:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a68:	f240 4237 	movw	r2, #1079	; 0x437
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a76:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a88:	482e      	ldr	r0, [pc, #184]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000a8a:	f001 fe23 	bl	80026d4 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000a94:	f7ff fe9e 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4827      	ldr	r0, [pc, #156]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000aa6:	f002 f95b 	bl	8002d60 <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ab0:	f7ff fe90 	bl	80007d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab4:	4823      	ldr	r0, [pc, #140]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000ab6:	f001 fe64 	bl	8002782 <HAL_TIM_PWM_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ac0:	f7ff fe88 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000ad4:	f002 fdcc 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000ade:	f7ff fe79 	bl	80007d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ae2:	2370      	movs	r3, #112	; 0x70
 8000ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000ae6:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000afc:	f002 f81c 	bl	8002b38 <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000b06:	f7ff fe65 	bl	80007d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000b12:	f002 f811 	bl	8002b38 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000b1c:	f7ff fe5a 	bl	80007d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	220c      	movs	r2, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000b28:	f002 f806 	bl	8002b38 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000b32:	f7ff fe4f 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_TIM2_Init+0x118>)
 8000b38:	f000 f824 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 8000b3c:	bf00      	nop
 8000b3e:	3738      	adds	r7, #56	; 0x38
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001f8 	.word	0x200001f8

08000b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b58:	d10b      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_TIM_Base_MspInit+0x38>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_TIM_Base_MspInit+0x38>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_TIM_Base_MspInit+0x38>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d138      	bne.n	8000c18 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000bd6:	2328      	movs	r3, #40	; 0x28
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be6:	2301      	movs	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <HAL_TIM_MspPostInit+0xa0>)
 8000bf2:	f000 fab7 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_TIM_MspPostInit+0xa4>)
 8000c14:	f000 faa6 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400

08000c2c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART3_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c70:	f002 fd8c 	bl	800378c <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f7ff fdab 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000244 	.word	0x20000244
 8000c88:	40004800 	.word	0x40004800

08000c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ae      	sub	sp, #184	; 0xb8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2290      	movs	r2, #144	; 0x90
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 ff04 	bl	8004aba <memset>
  if(uartHandle->Instance==USART3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <HAL_UART_MspInit+0xb4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d13c      	bne.n	8000d36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f8da 	bl	8001e84 <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd6:	f7ff fd7d 	bl	80007d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xb8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_UART_MspInit+0xbc>)
 8000d32:	f000 fa17 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	37b8      	adds	r7, #184	; 0xb8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004800 	.word	0x40004800
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020c00 	.word	0x40020c00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d52:	490e      	ldr	r1, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d68:	4c0b      	ldr	r4, [pc, #44]	; (8000d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d76:	f7ff fe47 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f003 fef7 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fc65 	bl	800064c <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000d90:	08006c04 	.word	0x08006c04
  ldr r2, =_sbss
 8000d94:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000d98:	2000041c 	.word	0x2000041c

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>

08000d9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 f92e 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da8:	200f      	movs	r0, #15
 8000daa:	f000 f805 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dae:	f7ff fd17 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f93b 	bl	8001052 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f911 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200002cc 	.word	0x200002cc

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200002cc 	.word	0x200002cc

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff47 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff5c 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb0 	bl	8000fc0 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001070:	f3bf 8f5f 	dmb	sy
}
 8001074:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_MPU_Disable+0x28>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_MPU_Disable+0x28>)
 800107c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001080:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_MPU_Disable+0x2c>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	e000ed90 	.word	0xe000ed90

0800109c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_MPU_Enable+0x38>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MPU_Enable+0x3c>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_MPU_Enable+0x3c>)
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010ba:	f3bf 8f4f 	dsb	sy
}
 80010be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010c0:	f3bf 8f6f 	isb	sy
}
 80010c4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed90 	.word	0xe000ed90
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	785a      	ldrb	r2, [r3, #1]
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_MPU_ConfigRegion+0x84>)
 80010ea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d029      	beq.n	8001148 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80010f4:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <HAL_MPU_ConfigRegion+0x84>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7b1b      	ldrb	r3, [r3, #12]
 8001100:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7adb      	ldrb	r3, [r3, #11]
 8001106:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001108:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7a9b      	ldrb	r3, [r3, #10]
 800110e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001110:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7b5b      	ldrb	r3, [r3, #13]
 8001116:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001118:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7b9b      	ldrb	r3, [r3, #14]
 800111e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001120:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7bdb      	ldrb	r3, [r3, #15]
 8001126:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001128:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7a5b      	ldrb	r3, [r3, #9]
 800112e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001130:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7a1b      	ldrb	r3, [r3, #8]
 8001136:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001138:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001142:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001144:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001146:	e005      	b.n	8001154 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_MPU_ConfigRegion+0x84>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <HAL_MPU_ConfigRegion+0x84>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed90 	.word	0xe000ed90

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e175      	b.n	8001470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8164 	bne.w	800146a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x56>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80be 	beq.w	800146a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b66      	ldr	r3, [pc, #408]	; (8001488 <HAL_GPIO_Init+0x324>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_GPIO_Init+0x324>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_GPIO_Init+0x324>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001306:	4a61      	ldr	r2, [pc, #388]	; (800148c <HAL_GPIO_Init+0x328>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_GPIO_Init+0x32c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d037      	beq.n	80013a2 <HAL_GPIO_Init+0x23e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a57      	ldr	r2, [pc, #348]	; (8001494 <HAL_GPIO_Init+0x330>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d031      	beq.n	800139e <HAL_GPIO_Init+0x23a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x334>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d02b      	beq.n	800139a <HAL_GPIO_Init+0x236>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a55      	ldr	r2, [pc, #340]	; (800149c <HAL_GPIO_Init+0x338>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d025      	beq.n	8001396 <HAL_GPIO_Init+0x232>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a54      	ldr	r2, [pc, #336]	; (80014a0 <HAL_GPIO_Init+0x33c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d01f      	beq.n	8001392 <HAL_GPIO_Init+0x22e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <HAL_GPIO_Init+0x340>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x22a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x344>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x348>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a50      	ldr	r2, [pc, #320]	; (80014b0 <HAL_GPIO_Init+0x34c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_GPIO_Init+0x350>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x21a>
 800137a:	2309      	movs	r3, #9
 800137c:	e012      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800137e:	230a      	movs	r3, #10
 8001380:	e010      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001382:	2308      	movs	r3, #8
 8001384:	e00e      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001386:	2307      	movs	r3, #7
 8001388:	e00c      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800138a:	2306      	movs	r3, #6
 800138c:	e00a      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800138e:	2305      	movs	r3, #5
 8001390:	e008      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001392:	2304      	movs	r3, #4
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 8001396:	2303      	movs	r3, #3
 8001398:	e004      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800139a:	2302      	movs	r3, #2
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_GPIO_Init+0x240>
 80013a2:	2300      	movs	r3, #0
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f002 0203 	and.w	r2, r2, #3
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4093      	lsls	r3, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013b4:	4935      	ldr	r1, [pc, #212]	; (800148c <HAL_GPIO_Init+0x328>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_GPIO_Init+0x354>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e6:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <HAL_GPIO_Init+0x354>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_GPIO_Init+0x354>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_GPIO_Init+0x354>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_GPIO_Init+0x354>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	f67f ae86 	bls.w	8001184 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021c00 	.word	0x40021c00
 80014b0:	40022000 	.word	0x40022000
 80014b4:	40022400 	.word	0x40022400
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ea:	f7ff fca9 	bl	8000e40 <HAL_GetTick>
 80014ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f0:	e009      	b.n	8001506 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f2:	f7ff fca5 	bl	8000e40 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001500:	d901      	bls.n	8001506 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e022      	b.n	800154c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001512:	d1ee      	bne.n	80014f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800151a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001520:	f7ff fc8e 	bl	8000e40 <HAL_GetTick>
 8001524:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001526:	e009      	b.n	800153c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001528:	f7ff fc8a 	bl	8000e40 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001536:	d901      	bls.n	800153c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e007      	b.n	800154c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001548:	d1ee      	bne.n	8001528 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e29b      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8087 	beq.w	800168e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	4b96      	ldr	r3, [pc, #600]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158c:	4b93      	ldr	r3, [pc, #588]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x62>
 8001598:	4b90      	ldr	r3, [pc, #576]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b8d      	ldr	r3, [pc, #564]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06c      	beq.n	800168c <HAL_RCC_OscConfig+0x130>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d168      	bne.n	800168c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e275      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x7a>
 80015c8:	4b84      	ldr	r3, [pc, #528]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a83      	ldr	r2, [pc, #524]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e02e      	b.n	8001634 <HAL_RCC_OscConfig+0xd8>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x9c>
 80015de:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7e      	ldr	r2, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7b      	ldr	r2, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80015f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xd8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0xc0>
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b73      	ldr	r3, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a72      	ldr	r2, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xd8>
 800161c:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6e      	ldr	r2, [pc, #440]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a6b      	ldr	r2, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fc00 	bl	8000e40 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fbfc 	bl	8000e40 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e229      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b61      	ldr	r3, [pc, #388]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xe8>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fbec 	bl	8000e40 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fbe8 	bl	8000e40 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e215      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x110>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d069      	beq.n	800176e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169a:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x190>
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1e9      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	493d      	ldr	r1, [pc, #244]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e040      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d023      	beq.n	800173c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a38      	ldr	r2, [pc, #224]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb9e 	bl	8000e40 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fb9a 	bl	8000e40 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1c7      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4929      	ldr	r1, [pc, #164]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
 800173a:	e018      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fb7a 	bl	8000e40 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001750:	f7ff fb76 	bl	8000e40 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1a3      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d038      	beq.n	80017ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d019      	beq.n	80017b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fb57 	bl	8000e40 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fb53 	bl	8000e40 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e180      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x23a>
 80017b4:	e01a      	b.n	80017ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80017b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x280>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb3d 	bl	8000e40 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fb39 	bl	8000e40 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d903      	bls.n	80017e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e166      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
 80017dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a4 	beq.w	8001942 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10d      	bne.n	8001822 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a88      	ldr	r2, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001822:	4b83      	ldr	r3, [pc, #524]	; (8001a30 <HAL_RCC_OscConfig+0x4d4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_RCC_OscConfig+0x4d4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7f      	ldr	r2, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x4d4>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb01 	bl	8000e40 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001842:	f7ff fafd 	bl	8000e40 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b64      	cmp	r3, #100	; 0x64
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e12a      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001854:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x4d4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x31a>
 8001868:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a6f      	ldr	r2, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	e02d      	b.n	80018d2 <HAL_RCC_OscConfig+0x376>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x33c>
 800187e:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	e01c      	b.n	80018d2 <HAL_RCC_OscConfig+0x376>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x35e>
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a61      	ldr	r2, [pc, #388]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a5e      	ldr	r2, [pc, #376]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	e00b      	b.n	80018d2 <HAL_RCC_OscConfig+0x376>
 80018ba:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a5b      	ldr	r2, [pc, #364]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d015      	beq.n	8001906 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fab1 	bl	8000e40 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff faad 	bl	8000e40 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0d8      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ee      	beq.n	80018e2 <HAL_RCC_OscConfig+0x386>
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff fa9b 	bl	8000e40 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fa97 	bl	8000e40 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0c2      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d105      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a3c      	ldr	r2, [pc, #240]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 800193c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80ae 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194c:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d06d      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d14b      	bne.n	80019f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fa68 	bl	8000e40 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fa64 	bl	8000e40 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e091      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	071b      	lsls	r3, r3, #28
 80019be:	491b      	ldr	r1, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa36 	bl	8000e40 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa32 	bl	8000e40 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e05f      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x47c>
 80019f6:	e057      	b.n	8001aa8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa1c 	bl	8000e40 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fa18 	bl	8000e40 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e045      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_OscConfig+0x4d0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4b0>
 8001a2a:	e03d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x54c>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_RCC_OscConfig+0x558>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d030      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d129      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d122      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d119      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d10f      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d0      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d910      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 020f 	bic.w	r2, r3, #15
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d040      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e073      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06b      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4936      	ldr	r1, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bac:	f7ff f948 	bl	8000e40 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff f944 	bl	8000e40 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e053      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d210      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 020f 	bic.w	r2, r3, #15
 8001bf2:	4922      	ldr	r1, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1cc>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1d0>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1d4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f8a4 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08006868 	.word	0x08006868
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b090      	sub	sp, #64	; 0x40
 8001c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 80a1 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc8:	e09b      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cce:	e098      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d028      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cfc:	fb03 f201 	mul.w	r2, r3, r1
 8001d00:	2300      	movs	r3, #0
 8001d02:	fb00 f303 	mul.w	r3, r0, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d10:	460a      	mov	r2, r1
 8001d12:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	4413      	add	r3, r2
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	61fa      	str	r2, [r7, #28]
 8001d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d2a:	f7fe fae1 	bl	80002f0 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d36:	e053      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	2200      	movs	r2, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	617a      	str	r2, [r7, #20]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d4a:	f04f 0b00 	mov.w	fp, #0
 8001d4e:	4652      	mov	r2, sl
 8001d50:	465b      	mov	r3, fp
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ebb2 080a 	subs.w	r8, r2, sl
 8001d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d82:	ebb2 0408 	subs.w	r4, r2, r8
 8001d86:	eb63 0509 	sbc.w	r5, r3, r9
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	00eb      	lsls	r3, r5, #3
 8001d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d98:	00e2      	lsls	r2, r4, #3
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	eb14 030a 	adds.w	r3, r4, sl
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	eb45 030b 	adc.w	r3, r5, fp
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db6:	4629      	mov	r1, r5
 8001db8:	028b      	lsls	r3, r1, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	028a      	lsls	r2, r1, #10
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd4:	f7fe fa8c 	bl	80002f0 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3740      	adds	r7, #64	; 0x40
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	017d7840 	.word	0x017d7840

08001e1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	08006878 	.word	0x08006878

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e60:	f7ff ffdc 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0b5b      	lsrs	r3, r3, #13
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	08006878 	.word	0x08006878

08001e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d012      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eb6:	6093      	str	r3, [r2, #8]
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	4964      	ldr	r1, [pc, #400]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d017      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ede:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	4959      	ldr	r1, [pc, #356]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001efc:	d101      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d017      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	494a      	ldr	r1, [pc, #296]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 808b 	beq.w	800207e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4a39      	ldr	r2, [pc, #228]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe ff58 	bl	8000e40 <HAL_GetTick>
 8001f90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe ff54 	bl	8000e40 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e38f      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d035      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d02e      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d114      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe ff1c 	bl	8000e40 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe ff18 	bl	8000e40 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e351      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800203a:	d111      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800204a:	400b      	ands	r3, r1
 800204c:	4901      	ldr	r1, [pc, #4]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
 8002052:	e00b      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000
 800205c:	0ffffcff 	.word	0x0ffffcff
 8002060:	4bac      	ldr	r3, [pc, #688]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4aab      	ldr	r2, [pc, #684]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800206a:	6093      	str	r3, [r2, #8]
 800206c:	4ba9      	ldr	r3, [pc, #676]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	49a6      	ldr	r1, [pc, #664]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d010      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800208a:	4ba2      	ldr	r3, [pc, #648]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002090:	4aa0      	ldr	r2, [pc, #640]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800209a:	4b9e      	ldr	r3, [pc, #632]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a4:	499b      	ldr	r1, [pc, #620]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b8:	4b96      	ldr	r3, [pc, #600]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c6:	4993      	ldr	r1, [pc, #588]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e8:	498a      	ldr	r1, [pc, #552]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fc:	4b85      	ldr	r3, [pc, #532]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210a:	4982      	ldr	r1, [pc, #520]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800211e:	4b7d      	ldr	r3, [pc, #500]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4979      	ldr	r1, [pc, #484]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002140:	4b74      	ldr	r3, [pc, #464]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4971      	ldr	r1, [pc, #452]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002162:	4b6c      	ldr	r3, [pc, #432]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f023 020c 	bic.w	r2, r3, #12
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	4968      	ldr	r1, [pc, #416]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002184:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4960      	ldr	r1, [pc, #384]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b4:	4957      	ldr	r1, [pc, #348]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021c8:	4b52      	ldr	r3, [pc, #328]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	494f      	ldr	r1, [pc, #316]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	4946      	ldr	r1, [pc, #280]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800220c:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	493e      	ldr	r1, [pc, #248]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	4935      	ldr	r1, [pc, #212]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225e:	492d      	ldr	r1, [pc, #180]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d011      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002280:	4924      	ldr	r1, [pc, #144]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800228c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002290:	d101      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	4914      	ldr	r1, [pc, #80]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e4:	490b      	ldr	r1, [pc, #44]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002308:	4902      	ldr	r1, [pc, #8]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002310:	e002      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002324:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800232a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	4986      	ldr	r1, [pc, #536]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002358:	497d      	ldr	r1, [pc, #500]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d006      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80d6 	beq.w	8002520 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002374:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800237e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fd5e 	bl	8000e40 <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002388:	f7fe fd5a 	bl	8000e40 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e195      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d021      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d11d      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ce:	0e1b      	lsrs	r3, r3, #24
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4958      	ldr	r1, [pc, #352]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02e      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002420:	d129      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002422:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002430:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002436:	0f1b      	lsrs	r3, r3, #28
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	019a      	lsls	r2, r3, #6
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	061b      	lsls	r3, r3, #24
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	493e      	ldr	r1, [pc, #248]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002464:	f023 021f 	bic.w	r2, r3, #31
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	3b01      	subs	r3, #1
 800246e:	4938      	ldr	r1, [pc, #224]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01d      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002488:	0e1b      	lsrs	r3, r3, #24
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002496:	0f1b      	lsrs	r3, r3, #28
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	019a      	lsls	r2, r3, #6
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	061b      	lsls	r3, r3, #24
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	071b      	lsls	r3, r3, #28
 80024b6:	4926      	ldr	r1, [pc, #152]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d011      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	019a      	lsls	r2, r3, #6
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	491a      	ldr	r1, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fa:	f7fe fca1 	bl	8000e40 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002502:	f7fe fc9d 	bl	8000e40 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0d8      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 80ce 	bne.w	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002534:	f7fe fc84 	bl	8000e40 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800253a:	e00b      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800253c:	f7fe fc80 	bl	8000e40 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d904      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0bb      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800255c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002560:	d0ec      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800257e:	2b00      	cmp	r3, #0
 8002580:	d02e      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d12a      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800258a:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002598:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	0f1b      	lsrs	r3, r3, #28
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	019a      	lsls	r2, r3, #6
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	071b      	lsls	r3, r3, #28
 80025be:	4944      	ldr	r1, [pc, #272]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	493d      	ldr	r1, [pc, #244]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d022      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f4:	d11d      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	0f1b      	lsrs	r3, r3, #28
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	019a      	lsls	r2, r3, #6
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	4929      	ldr	r1, [pc, #164]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	0e1b      	lsrs	r3, r3, #24
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	019a      	lsls	r2, r3, #6
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	071b      	lsls	r3, r3, #28
 8002672:	4917      	ldr	r1, [pc, #92]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	4911      	ldr	r1, [pc, #68]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fbd0 	bl	8000e40 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026a4:	f7fe fbcc 	bl	8000e40 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e007      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c2:	d1ef      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e049      	b.n	800277a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fa24 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f000 fbee 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e049      	b.n	8002828 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f841 	bl	8002830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f000 fb97 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_TIM_PWM_Start+0x24>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e03c      	b.n	80028e2 <HAL_TIM_PWM_Start+0x9e>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b04      	cmp	r3, #4
 800286c:	d109      	bne.n	8002882 <HAL_TIM_PWM_Start+0x3e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	e02f      	b.n	80028e2 <HAL_TIM_PWM_Start+0x9e>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d109      	bne.n	800289c <HAL_TIM_PWM_Start+0x58>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e022      	b.n	80028e2 <HAL_TIM_PWM_Start+0x9e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d109      	bne.n	80028b6 <HAL_TIM_PWM_Start+0x72>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	e015      	b.n	80028e2 <HAL_TIM_PWM_Start+0x9e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d109      	bne.n	80028d0 <HAL_TIM_PWM_Start+0x8c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e008      	b.n	80028e2 <HAL_TIM_PWM_Start+0x9e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e092      	b.n	8002a10 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <HAL_TIM_PWM_Start+0xb6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	e023      	b.n	8002942 <HAL_TIM_PWM_Start+0xfe>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d104      	bne.n	800290a <HAL_TIM_PWM_Start+0xc6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002908:	e01b      	b.n	8002942 <HAL_TIM_PWM_Start+0xfe>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d104      	bne.n	800291a <HAL_TIM_PWM_Start+0xd6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002918:	e013      	b.n	8002942 <HAL_TIM_PWM_Start+0xfe>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d104      	bne.n	800292a <HAL_TIM_PWM_Start+0xe6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002928:	e00b      	b.n	8002942 <HAL_TIM_PWM_Start+0xfe>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b10      	cmp	r3, #16
 800292e:	d104      	bne.n	800293a <HAL_TIM_PWM_Start+0xf6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002938:	e003      	b.n	8002942 <HAL_TIM_PWM_Start+0xfe>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fe6a 	bl	8003624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <HAL_TIM_PWM_Start+0x1d4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_TIM_PWM_Start+0x120>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_TIM_PWM_Start+0x1d8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_TIM_PWM_Start+0x124>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_TIM_PWM_Start+0x126>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <HAL_TIM_PWM_Start+0x1d4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d01d      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <HAL_TIM_PWM_Start+0x1dc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_TIM_PWM_Start+0x1e0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_TIM_PWM_Start+0x1e4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_PWM_Start+0x1d8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_TIM_PWM_Start+0x1e8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_PWM_Start+0x18a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_TIM_PWM_Start+0x1ec>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d115      	bne.n	80029fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_TIM_PWM_Start+0x1f0>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d015      	beq.n	8002a0c <HAL_TIM_PWM_Start+0x1c8>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d011      	beq.n	8002a0c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e008      	b.n	8002a0c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010400 	.word	0x40010400
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40001800 	.word	0x40001800
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fdea 	bl	8003624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <HAL_TIM_PWM_Stop+0xf8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_TIM_PWM_Stop+0x2c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a35      	ldr	r2, [pc, #212]	; (8002b34 <HAL_TIM_PWM_Stop+0xfc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_TIM_PWM_Stop+0x30>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_TIM_PWM_Stop+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_TIM_PWM_Stop+0x66>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	f240 4344 	movw	r3, #1092	; 0x444
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <HAL_TIM_PWM_Stop+0x66>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <HAL_TIM_PWM_Stop+0x96>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	f240 4344 	movw	r3, #1092	; 0x444
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_TIM_PWM_Stop+0x96>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Stop+0xa6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002adc:	e023      	b.n	8002b26 <HAL_TIM_PWM_Stop+0xee>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Stop+0xb6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aec:	e01b      	b.n	8002b26 <HAL_TIM_PWM_Stop+0xee>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Stop+0xc6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	e013      	b.n	8002b26 <HAL_TIM_PWM_Stop+0xee>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Stop+0xd6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b0c:	e00b      	b.n	8002b26 <HAL_TIM_PWM_Stop+0xee>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Stop+0xe6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	e003      	b.n	8002b26 <HAL_TIM_PWM_Stop+0xee>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0ff      	b.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b14      	cmp	r3, #20
 8002b62:	f200 80f0 	bhi.w	8002d46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002bc1 	.word	0x08002bc1
 8002b70:	08002d47 	.word	0x08002d47
 8002b74:	08002d47 	.word	0x08002d47
 8002b78:	08002d47 	.word	0x08002d47
 8002b7c:	08002c01 	.word	0x08002c01
 8002b80:	08002d47 	.word	0x08002d47
 8002b84:	08002d47 	.word	0x08002d47
 8002b88:	08002d47 	.word	0x08002d47
 8002b8c:	08002c43 	.word	0x08002c43
 8002b90:	08002d47 	.word	0x08002d47
 8002b94:	08002d47 	.word	0x08002d47
 8002b98:	08002d47 	.word	0x08002d47
 8002b9c:	08002c83 	.word	0x08002c83
 8002ba0:	08002d47 	.word	0x08002d47
 8002ba4:	08002d47 	.word	0x08002d47
 8002ba8:	08002d47 	.word	0x08002d47
 8002bac:	08002cc5 	.word	0x08002cc5
 8002bb0:	08002d47 	.word	0x08002d47
 8002bb4:	08002d47 	.word	0x08002d47
 8002bb8:	08002d47 	.word	0x08002d47
 8002bbc:	08002d05 	.word	0x08002d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fa34 	bl	8003034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6999      	ldr	r1, [r3, #24]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	619a      	str	r2, [r3, #24]
      break;
 8002bfe:	e0a5      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fa86 	bl	8003118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6999      	ldr	r1, [r3, #24]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	021a      	lsls	r2, r3, #8
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	619a      	str	r2, [r3, #24]
      break;
 8002c40:	e084      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fadd 	bl	8003208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0208 	orr.w	r2, r2, #8
 8002c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0204 	bic.w	r2, r2, #4
 8002c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69d9      	ldr	r1, [r3, #28]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	61da      	str	r2, [r3, #28]
      break;
 8002c80:	e064      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fb33 	bl	80032f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69d9      	ldr	r1, [r3, #28]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	61da      	str	r2, [r3, #28]
      break;
 8002cc2:	e043      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fb6a 	bl	80033a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0208 	orr.w	r2, r2, #8
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0204 	bic.w	r2, r2, #4
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d02:	e023      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb9c 	bl	8003448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	021a      	lsls	r2, r3, #8
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop

08002d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_TIM_ConfigClockSource+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0b4      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x186>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <HAL_TIM_ConfigClockSource+0x190>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db4:	d03e      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0xd4>
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dba:	f200 8087 	bhi.w	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	f000 8086 	beq.w	8002ed2 <HAL_TIM_ConfigClockSource+0x172>
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	d87f      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b70      	cmp	r3, #112	; 0x70
 8002dce:	d01a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0xa6>
 8002dd0:	2b70      	cmp	r3, #112	; 0x70
 8002dd2:	d87b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b60      	cmp	r3, #96	; 0x60
 8002dd6:	d050      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x11a>
 8002dd8:	2b60      	cmp	r3, #96	; 0x60
 8002dda:	d877      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b50      	cmp	r3, #80	; 0x50
 8002dde:	d03c      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0xfa>
 8002de0:	2b50      	cmp	r3, #80	; 0x50
 8002de2:	d873      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d058      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x13a>
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d86f      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b30      	cmp	r3, #48	; 0x30
 8002dee:	d064      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	2b30      	cmp	r3, #48	; 0x30
 8002df2:	d86b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d060      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d867      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05c      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d05a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002e04:	e062      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	f000 fbe5 	bl	80035e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	609a      	str	r2, [r3, #8]
      break;
 8002e32:	e04f      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	f000 fbce 	bl	80035e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e56:	609a      	str	r2, [r3, #8]
      break;
 8002e58:	e03c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 fb42 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2150      	movs	r1, #80	; 0x50
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fb9b 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8002e78:	e02c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 fb61 	bl	800354e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2160      	movs	r1, #96	; 0x60
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fb8b 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8002e98:	e01c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 fb22 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2140      	movs	r1, #64	; 0x40
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fb7b 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e00c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f000 fb72 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 8002eca:	e003      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e000      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	fffeff88 	.word	0xfffeff88

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a40      	ldr	r2, [pc, #256]	; (8003008 <TIM_Base_SetConfig+0x114>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d00f      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3d      	ldr	r2, [pc, #244]	; (800300c <TIM_Base_SetConfig+0x118>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <TIM_Base_SetConfig+0x11c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <TIM_Base_SetConfig+0x120>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3a      	ldr	r2, [pc, #232]	; (8003018 <TIM_Base_SetConfig+0x124>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <TIM_Base_SetConfig+0x114>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d027      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <TIM_Base_SetConfig+0x118>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d023      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <TIM_Base_SetConfig+0x11c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01f      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <TIM_Base_SetConfig+0x120>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01b      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a29      	ldr	r2, [pc, #164]	; (8003018 <TIM_Base_SetConfig+0x124>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d017      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <TIM_Base_SetConfig+0x128>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a27      	ldr	r2, [pc, #156]	; (8003020 <TIM_Base_SetConfig+0x12c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00f      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <TIM_Base_SetConfig+0x130>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a25      	ldr	r2, [pc, #148]	; (8003028 <TIM_Base_SetConfig+0x134>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <TIM_Base_SetConfig+0x138>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a23      	ldr	r2, [pc, #140]	; (8003030 <TIM_Base_SetConfig+0x13c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <TIM_Base_SetConfig+0x114>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <TIM_Base_SetConfig+0x124>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40010400 	.word	0x40010400
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800
 8003028:	40001800 	.word	0x40001800
 800302c:	40001c00 	.word	0x40001c00
 8003030:	40002000 	.word	0x40002000

08003034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <TIM_OC1_SetConfig+0xd8>)
 8003060:	4013      	ands	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a21      	ldr	r2, [pc, #132]	; (8003110 <TIM_OC1_SetConfig+0xdc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_OC1_SetConfig+0x64>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a20      	ldr	r2, [pc, #128]	; (8003114 <TIM_OC1_SetConfig+0xe0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10c      	bne.n	80030b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0308 	bic.w	r3, r3, #8
 800309e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <TIM_OC1_SetConfig+0xdc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_OC1_SetConfig+0x8e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <TIM_OC1_SetConfig+0xe0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	fffeff8f 	.word	0xfffeff8f
 8003110:	40010000 	.word	0x40010000
 8003114:	40010400 	.word	0x40010400

08003118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <TIM_OC2_SetConfig+0xe4>)
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0320 	bic.w	r3, r3, #32
 8003162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a23      	ldr	r2, [pc, #140]	; (8003200 <TIM_OC2_SetConfig+0xe8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC2_SetConfig+0x68>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <TIM_OC2_SetConfig+0xec>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10d      	bne.n	800319c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <TIM_OC2_SetConfig+0xe8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_OC2_SetConfig+0x94>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <TIM_OC2_SetConfig+0xec>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d113      	bne.n	80031d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	feff8fff 	.word	0xfeff8fff
 8003200:	40010000 	.word	0x40010000
 8003204:	40010400 	.word	0x40010400

08003208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <TIM_OC3_SetConfig+0xe0>)
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <TIM_OC3_SetConfig+0xe4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_OC3_SetConfig+0x66>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <TIM_OC3_SetConfig+0xe8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10d      	bne.n	800328a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <TIM_OC3_SetConfig+0xe4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_OC3_SetConfig+0x92>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <TIM_OC3_SetConfig+0xe8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d113      	bne.n	80032c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	fffeff8f 	.word	0xfffeff8f
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40010400 	.word	0x40010400

080032f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <TIM_OC4_SetConfig+0xa4>)
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a13      	ldr	r2, [pc, #76]	; (800339c <TIM_OC4_SetConfig+0xa8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_OC4_SetConfig+0x68>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <TIM_OC4_SetConfig+0xac>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d109      	bne.n	8003370 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	019b      	lsls	r3, r3, #6
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	feff8fff 	.word	0xfeff8fff
 800339c:	40010000 	.word	0x40010000
 80033a0:	40010400 	.word	0x40010400

080033a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <TIM_OC5_SetConfig+0x98>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	041b      	lsls	r3, r3, #16
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a12      	ldr	r2, [pc, #72]	; (8003440 <TIM_OC5_SetConfig+0x9c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_OC5_SetConfig+0x5e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <TIM_OC5_SetConfig+0xa0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d109      	bne.n	8003416 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	fffeff8f 	.word	0xfffeff8f
 8003440:	40010000 	.word	0x40010000
 8003444:	40010400 	.word	0x40010400

08003448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <TIM_OC6_SetConfig+0x9c>)
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800348a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	051b      	lsls	r3, r3, #20
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <TIM_OC6_SetConfig+0xa0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_OC6_SetConfig+0x60>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <TIM_OC6_SetConfig+0xa4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d109      	bne.n	80034bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	feff8fff 	.word	0xfeff8fff
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010400 	.word	0x40010400

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 030a 	bic.w	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0210 	bic.w	r2, r3, #16
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f043 0307 	orr.w	r3, r3, #7
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	431a      	orrs	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	609a      	str	r2, [r3, #8]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2201      	movs	r2, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	43db      	mvns	r3, r3
 8003646:	401a      	ands	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e06d      	b.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d108      	bne.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d01d      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10c      	bne.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40014000 	.word	0x40014000
 8003788:	40001800 	.word	0x40001800

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e040      	b.n	8003820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fa6c 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f82c 	bl	8003828 <UART_SetConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa84 	bl	8003cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb0b 	bl	8003e34 <UART_CheckIdleState>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4ba6      	ldr	r3, [pc, #664]	; (8003aec <UART_SetConfig+0x2c4>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	6979      	ldr	r1, [r7, #20]
 800385c:	430b      	orrs	r3, r1
 800385e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a94      	ldr	r2, [pc, #592]	; (8003af0 <UART_SetConfig+0x2c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d120      	bne.n	80038e6 <UART_SetConfig+0xbe>
 80038a4:	4b93      	ldr	r3, [pc, #588]	; (8003af4 <UART_SetConfig+0x2cc>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d816      	bhi.n	80038e0 <UART_SetConfig+0xb8>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <UART_SetConfig+0x90>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038d5 	.word	0x080038d5
 80038c0:	080038cf 	.word	0x080038cf
 80038c4:	080038db 	.word	0x080038db
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e150      	b.n	8003b70 <UART_SetConfig+0x348>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e14d      	b.n	8003b70 <UART_SetConfig+0x348>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e14a      	b.n	8003b70 <UART_SetConfig+0x348>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e147      	b.n	8003b70 <UART_SetConfig+0x348>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e144      	b.n	8003b70 <UART_SetConfig+0x348>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a83      	ldr	r2, [pc, #524]	; (8003af8 <UART_SetConfig+0x2d0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d132      	bne.n	8003956 <UART_SetConfig+0x12e>
 80038f0:	4b80      	ldr	r3, [pc, #512]	; (8003af4 <UART_SetConfig+0x2cc>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d828      	bhi.n	8003950 <UART_SetConfig+0x128>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <UART_SetConfig+0xdc>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003939 	.word	0x08003939
 8003908:	08003951 	.word	0x08003951
 800390c:	08003951 	.word	0x08003951
 8003910:	08003951 	.word	0x08003951
 8003914:	08003945 	.word	0x08003945
 8003918:	08003951 	.word	0x08003951
 800391c:	08003951 	.word	0x08003951
 8003920:	08003951 	.word	0x08003951
 8003924:	0800393f 	.word	0x0800393f
 8003928:	08003951 	.word	0x08003951
 800392c:	08003951 	.word	0x08003951
 8003930:	08003951 	.word	0x08003951
 8003934:	0800394b 	.word	0x0800394b
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e118      	b.n	8003b70 <UART_SetConfig+0x348>
 800393e:	2302      	movs	r3, #2
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e115      	b.n	8003b70 <UART_SetConfig+0x348>
 8003944:	2304      	movs	r3, #4
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e112      	b.n	8003b70 <UART_SetConfig+0x348>
 800394a:	2308      	movs	r3, #8
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e10f      	b.n	8003b70 <UART_SetConfig+0x348>
 8003950:	2310      	movs	r3, #16
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e10c      	b.n	8003b70 <UART_SetConfig+0x348>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a68      	ldr	r2, [pc, #416]	; (8003afc <UART_SetConfig+0x2d4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d120      	bne.n	80039a2 <UART_SetConfig+0x17a>
 8003960:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <UART_SetConfig+0x2cc>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800396a:	2b30      	cmp	r3, #48	; 0x30
 800396c:	d013      	beq.n	8003996 <UART_SetConfig+0x16e>
 800396e:	2b30      	cmp	r3, #48	; 0x30
 8003970:	d814      	bhi.n	800399c <UART_SetConfig+0x174>
 8003972:	2b20      	cmp	r3, #32
 8003974:	d009      	beq.n	800398a <UART_SetConfig+0x162>
 8003976:	2b20      	cmp	r3, #32
 8003978:	d810      	bhi.n	800399c <UART_SetConfig+0x174>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <UART_SetConfig+0x15c>
 800397e:	2b10      	cmp	r3, #16
 8003980:	d006      	beq.n	8003990 <UART_SetConfig+0x168>
 8003982:	e00b      	b.n	800399c <UART_SetConfig+0x174>
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e0f2      	b.n	8003b70 <UART_SetConfig+0x348>
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e0ef      	b.n	8003b70 <UART_SetConfig+0x348>
 8003990:	2304      	movs	r3, #4
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e0ec      	b.n	8003b70 <UART_SetConfig+0x348>
 8003996:	2308      	movs	r3, #8
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e0e9      	b.n	8003b70 <UART_SetConfig+0x348>
 800399c:	2310      	movs	r3, #16
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e0e6      	b.n	8003b70 <UART_SetConfig+0x348>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a56      	ldr	r2, [pc, #344]	; (8003b00 <UART_SetConfig+0x2d8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d120      	bne.n	80039ee <UART_SetConfig+0x1c6>
 80039ac:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <UART_SetConfig+0x2cc>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039b6:	2bc0      	cmp	r3, #192	; 0xc0
 80039b8:	d013      	beq.n	80039e2 <UART_SetConfig+0x1ba>
 80039ba:	2bc0      	cmp	r3, #192	; 0xc0
 80039bc:	d814      	bhi.n	80039e8 <UART_SetConfig+0x1c0>
 80039be:	2b80      	cmp	r3, #128	; 0x80
 80039c0:	d009      	beq.n	80039d6 <UART_SetConfig+0x1ae>
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d810      	bhi.n	80039e8 <UART_SetConfig+0x1c0>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <UART_SetConfig+0x1a8>
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d006      	beq.n	80039dc <UART_SetConfig+0x1b4>
 80039ce:	e00b      	b.n	80039e8 <UART_SetConfig+0x1c0>
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0cc      	b.n	8003b70 <UART_SetConfig+0x348>
 80039d6:	2302      	movs	r3, #2
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e0c9      	b.n	8003b70 <UART_SetConfig+0x348>
 80039dc:	2304      	movs	r3, #4
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e0c6      	b.n	8003b70 <UART_SetConfig+0x348>
 80039e2:	2308      	movs	r3, #8
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e0c3      	b.n	8003b70 <UART_SetConfig+0x348>
 80039e8:	2310      	movs	r3, #16
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e0c0      	b.n	8003b70 <UART_SetConfig+0x348>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a44      	ldr	r2, [pc, #272]	; (8003b04 <UART_SetConfig+0x2dc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d125      	bne.n	8003a44 <UART_SetConfig+0x21c>
 80039f8:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <UART_SetConfig+0x2cc>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a06:	d017      	beq.n	8003a38 <UART_SetConfig+0x210>
 8003a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0c:	d817      	bhi.n	8003a3e <UART_SetConfig+0x216>
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d00b      	beq.n	8003a2c <UART_SetConfig+0x204>
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a18:	d811      	bhi.n	8003a3e <UART_SetConfig+0x216>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <UART_SetConfig+0x1fe>
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d006      	beq.n	8003a32 <UART_SetConfig+0x20a>
 8003a24:	e00b      	b.n	8003a3e <UART_SetConfig+0x216>
 8003a26:	2300      	movs	r3, #0
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e0a1      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e09e      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a32:	2304      	movs	r3, #4
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e09b      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e098      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a3e:	2310      	movs	r3, #16
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e095      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <UART_SetConfig+0x2e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d125      	bne.n	8003a9a <UART_SetConfig+0x272>
 8003a4e:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <UART_SetConfig+0x2cc>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a5c:	d017      	beq.n	8003a8e <UART_SetConfig+0x266>
 8003a5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a62:	d817      	bhi.n	8003a94 <UART_SetConfig+0x26c>
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a68:	d00b      	beq.n	8003a82 <UART_SetConfig+0x25a>
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6e:	d811      	bhi.n	8003a94 <UART_SetConfig+0x26c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <UART_SetConfig+0x254>
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a78:	d006      	beq.n	8003a88 <UART_SetConfig+0x260>
 8003a7a:	e00b      	b.n	8003a94 <UART_SetConfig+0x26c>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e076      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a82:	2302      	movs	r3, #2
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e073      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e070      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	77fb      	strb	r3, [r7, #31]
 8003a92:	e06d      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a94:	2310      	movs	r3, #16
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e06a      	b.n	8003b70 <UART_SetConfig+0x348>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <UART_SetConfig+0x2e4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d138      	bne.n	8003b16 <UART_SetConfig+0x2ee>
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <UART_SetConfig+0x2cc>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003aae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab2:	d017      	beq.n	8003ae4 <UART_SetConfig+0x2bc>
 8003ab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab8:	d82a      	bhi.n	8003b10 <UART_SetConfig+0x2e8>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	d00b      	beq.n	8003ad8 <UART_SetConfig+0x2b0>
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d824      	bhi.n	8003b10 <UART_SetConfig+0x2e8>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <UART_SetConfig+0x2aa>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d006      	beq.n	8003ade <UART_SetConfig+0x2b6>
 8003ad0:	e01e      	b.n	8003b10 <UART_SetConfig+0x2e8>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e04b      	b.n	8003b70 <UART_SetConfig+0x348>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e048      	b.n	8003b70 <UART_SetConfig+0x348>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e045      	b.n	8003b70 <UART_SetConfig+0x348>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e042      	b.n	8003b70 <UART_SetConfig+0x348>
 8003aea:	bf00      	nop
 8003aec:	efff69f3 	.word	0xefff69f3
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40004400 	.word	0x40004400
 8003afc:	40004800 	.word	0x40004800
 8003b00:	40004c00 	.word	0x40004c00
 8003b04:	40005000 	.word	0x40005000
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	40007800 	.word	0x40007800
 8003b10:	2310      	movs	r3, #16
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e02c      	b.n	8003b70 <UART_SetConfig+0x348>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a72      	ldr	r2, [pc, #456]	; (8003ce4 <UART_SetConfig+0x4bc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d125      	bne.n	8003b6c <UART_SetConfig+0x344>
 8003b20:	4b71      	ldr	r3, [pc, #452]	; (8003ce8 <UART_SetConfig+0x4c0>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b2e:	d017      	beq.n	8003b60 <UART_SetConfig+0x338>
 8003b30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b34:	d817      	bhi.n	8003b66 <UART_SetConfig+0x33e>
 8003b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3a:	d00b      	beq.n	8003b54 <UART_SetConfig+0x32c>
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b40:	d811      	bhi.n	8003b66 <UART_SetConfig+0x33e>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <UART_SetConfig+0x326>
 8003b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4a:	d006      	beq.n	8003b5a <UART_SetConfig+0x332>
 8003b4c:	e00b      	b.n	8003b66 <UART_SetConfig+0x33e>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e00d      	b.n	8003b70 <UART_SetConfig+0x348>
 8003b54:	2302      	movs	r3, #2
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e00a      	b.n	8003b70 <UART_SetConfig+0x348>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e007      	b.n	8003b70 <UART_SetConfig+0x348>
 8003b60:	2308      	movs	r3, #8
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e004      	b.n	8003b70 <UART_SetConfig+0x348>
 8003b66:	2310      	movs	r3, #16
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e001      	b.n	8003b70 <UART_SetConfig+0x348>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	d15b      	bne.n	8003c32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b7a:	7ffb      	ldrb	r3, [r7, #31]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d828      	bhi.n	8003bd2 <UART_SetConfig+0x3aa>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x360>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003bc3 	.word	0x08003bc3
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bd3 	.word	0x08003bd3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe f942 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	61b8      	str	r0, [r7, #24]
        break;
 8003bb2:	e013      	b.n	8003bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7fe f952 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8003bb8:	61b8      	str	r0, [r7, #24]
        break;
 8003bba:	e00f      	b.n	8003bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <UART_SetConfig+0x4c4>)
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e00c      	b.n	8003bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe f865 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8003bc6:	61b8      	str	r0, [r7, #24]
        break;
 8003bc8:	e008      	b.n	8003bdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	61bb      	str	r3, [r7, #24]
        break;
 8003bd0:	e004      	b.n	8003bdc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d074      	beq.n	8003ccc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	005a      	lsls	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b0f      	cmp	r3, #15
 8003bfc:	d916      	bls.n	8003c2c <UART_SetConfig+0x404>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d212      	bcs.n	8003c2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f023 030f 	bic.w	r3, r3, #15
 8003c0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	89fb      	ldrh	r3, [r7, #14]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	89fa      	ldrh	r2, [r7, #14]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e04f      	b.n	8003ccc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77bb      	strb	r3, [r7, #30]
 8003c30:	e04c      	b.n	8003ccc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c32:	7ffb      	ldrb	r3, [r7, #31]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d828      	bhi.n	8003c8a <UART_SetConfig+0x462>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0x418>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c8b 	.word	0x08003c8b
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003c8b 	.word	0x08003c8b
 8003c5c:	08003c8b 	.word	0x08003c8b
 8003c60:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe f8e6 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8003c68:	61b8      	str	r0, [r7, #24]
        break;
 8003c6a:	e013      	b.n	8003c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe f8f6 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8003c70:	61b8      	str	r0, [r7, #24]
        break;
 8003c72:	e00f      	b.n	8003c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <UART_SetConfig+0x4c4>)
 8003c76:	61bb      	str	r3, [r7, #24]
        break;
 8003c78:	e00c      	b.n	8003c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe f809 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8003c7e:	61b8      	str	r0, [r7, #24]
        break;
 8003c80:	e008      	b.n	8003c94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c86:	61bb      	str	r3, [r7, #24]
        break;
 8003c88:	e004      	b.n	8003c94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	77bb      	strb	r3, [r7, #30]
        break;
 8003c92:	bf00      	nop
    }

    if (pclk != 0U)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085a      	lsrs	r2, r3, #1
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d909      	bls.n	8003cc8 <UART_SetConfig+0x4a0>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cba:	d205      	bcs.n	8003cc8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	e001      	b.n	8003ccc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40007c00 	.word	0x40007c00
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d10a      	bne.n	8003e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e44:	f7fc fffc 	bl	8000e40 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10e      	bne.n	8003e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f831 	bl	8003ece <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e027      	b.n	8003ec6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d10e      	bne.n	8003ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f81b 	bl	8003ece <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e011      	b.n	8003ec6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b09c      	sub	sp, #112	; 0x70
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ede:	e0a7      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	f000 80a3 	beq.w	8004030 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fc ffa9 	bl	8000e40 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x32>
 8003efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d13f      	bne.n	8003f80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f14:	667b      	str	r3, [r7, #100]	; 0x64
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e6      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f52:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e068      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d050      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d148      	bne.n	8004030 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e6      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ffa:	623a      	str	r2, [r7, #32]
 8003ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	69f9      	ldr	r1, [r7, #28]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	61bb      	str	r3, [r7, #24]
   return(result);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e010      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	f43f af48 	beq.w	8003ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3770      	adds	r7, #112	; 0x70
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <__cvt>:
 800405a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405c:	ed2d 8b02 	vpush	{d8}
 8004060:	eeb0 8b40 	vmov.f64	d8, d0
 8004064:	b085      	sub	sp, #20
 8004066:	4617      	mov	r7, r2
 8004068:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800406a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800406c:	ee18 2a90 	vmov	r2, s17
 8004070:	f025 0520 	bic.w	r5, r5, #32
 8004074:	2a00      	cmp	r2, #0
 8004076:	bfb6      	itet	lt
 8004078:	222d      	movlt	r2, #45	; 0x2d
 800407a:	2200      	movge	r2, #0
 800407c:	eeb1 8b40 	vneglt.f64	d8, d0
 8004080:	2d46      	cmp	r5, #70	; 0x46
 8004082:	460c      	mov	r4, r1
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	d004      	beq.n	8004092 <__cvt+0x38>
 8004088:	2d45      	cmp	r5, #69	; 0x45
 800408a:	d100      	bne.n	800408e <__cvt+0x34>
 800408c:	3401      	adds	r4, #1
 800408e:	2102      	movs	r1, #2
 8004090:	e000      	b.n	8004094 <__cvt+0x3a>
 8004092:	2103      	movs	r1, #3
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	ab02      	add	r3, sp, #8
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4622      	mov	r2, r4
 800409e:	4633      	mov	r3, r6
 80040a0:	eeb0 0b48 	vmov.f64	d0, d8
 80040a4:	f000 fe10 	bl	8004cc8 <_dtoa_r>
 80040a8:	2d47      	cmp	r5, #71	; 0x47
 80040aa:	d101      	bne.n	80040b0 <__cvt+0x56>
 80040ac:	07fb      	lsls	r3, r7, #31
 80040ae:	d51a      	bpl.n	80040e6 <__cvt+0x8c>
 80040b0:	2d46      	cmp	r5, #70	; 0x46
 80040b2:	eb00 0204 	add.w	r2, r0, r4
 80040b6:	d10c      	bne.n	80040d2 <__cvt+0x78>
 80040b8:	7803      	ldrb	r3, [r0, #0]
 80040ba:	2b30      	cmp	r3, #48	; 0x30
 80040bc:	d107      	bne.n	80040ce <__cvt+0x74>
 80040be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	bf1c      	itt	ne
 80040c8:	f1c4 0401 	rsbne	r4, r4, #1
 80040cc:	6034      	strne	r4, [r6, #0]
 80040ce:	6833      	ldr	r3, [r6, #0]
 80040d0:	441a      	add	r2, r3
 80040d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040da:	bf08      	it	eq
 80040dc:	9203      	streq	r2, [sp, #12]
 80040de:	2130      	movs	r1, #48	; 0x30
 80040e0:	9b03      	ldr	r3, [sp, #12]
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d307      	bcc.n	80040f6 <__cvt+0x9c>
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ea:	1a1b      	subs	r3, r3, r0
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	b005      	add	sp, #20
 80040f0:	ecbd 8b02 	vpop	{d8}
 80040f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f6:	1c5c      	adds	r4, r3, #1
 80040f8:	9403      	str	r4, [sp, #12]
 80040fa:	7019      	strb	r1, [r3, #0]
 80040fc:	e7f0      	b.n	80040e0 <__cvt+0x86>

080040fe <__exponent>:
 80040fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004100:	4603      	mov	r3, r0
 8004102:	2900      	cmp	r1, #0
 8004104:	bfb8      	it	lt
 8004106:	4249      	neglt	r1, r1
 8004108:	f803 2b02 	strb.w	r2, [r3], #2
 800410c:	bfb4      	ite	lt
 800410e:	222d      	movlt	r2, #45	; 0x2d
 8004110:	222b      	movge	r2, #43	; 0x2b
 8004112:	2909      	cmp	r1, #9
 8004114:	7042      	strb	r2, [r0, #1]
 8004116:	dd2a      	ble.n	800416e <__exponent+0x70>
 8004118:	f10d 0207 	add.w	r2, sp, #7
 800411c:	4617      	mov	r7, r2
 800411e:	260a      	movs	r6, #10
 8004120:	4694      	mov	ip, r2
 8004122:	fb91 f5f6 	sdiv	r5, r1, r6
 8004126:	fb06 1415 	mls	r4, r6, r5, r1
 800412a:	3430      	adds	r4, #48	; 0x30
 800412c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004130:	460c      	mov	r4, r1
 8004132:	2c63      	cmp	r4, #99	; 0x63
 8004134:	f102 32ff 	add.w	r2, r2, #4294967295
 8004138:	4629      	mov	r1, r5
 800413a:	dcf1      	bgt.n	8004120 <__exponent+0x22>
 800413c:	3130      	adds	r1, #48	; 0x30
 800413e:	f1ac 0402 	sub.w	r4, ip, #2
 8004142:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004146:	1c41      	adds	r1, r0, #1
 8004148:	4622      	mov	r2, r4
 800414a:	42ba      	cmp	r2, r7
 800414c:	d30a      	bcc.n	8004164 <__exponent+0x66>
 800414e:	f10d 0209 	add.w	r2, sp, #9
 8004152:	eba2 020c 	sub.w	r2, r2, ip
 8004156:	42bc      	cmp	r4, r7
 8004158:	bf88      	it	hi
 800415a:	2200      	movhi	r2, #0
 800415c:	4413      	add	r3, r2
 800415e:	1a18      	subs	r0, r3, r0
 8004160:	b003      	add	sp, #12
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004164:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004168:	f801 5f01 	strb.w	r5, [r1, #1]!
 800416c:	e7ed      	b.n	800414a <__exponent+0x4c>
 800416e:	2330      	movs	r3, #48	; 0x30
 8004170:	3130      	adds	r1, #48	; 0x30
 8004172:	7083      	strb	r3, [r0, #2]
 8004174:	70c1      	strb	r1, [r0, #3]
 8004176:	1d03      	adds	r3, r0, #4
 8004178:	e7f1      	b.n	800415e <__exponent+0x60>
 800417a:	0000      	movs	r0, r0
 800417c:	0000      	movs	r0, r0
	...

08004180 <_printf_float>:
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	b08b      	sub	sp, #44	; 0x2c
 8004186:	460c      	mov	r4, r1
 8004188:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800418c:	4616      	mov	r6, r2
 800418e:	461f      	mov	r7, r3
 8004190:	4605      	mov	r5, r0
 8004192:	f000 fc9b 	bl	8004acc <_localeconv_r>
 8004196:	f8d0 b000 	ldr.w	fp, [r0]
 800419a:	4658      	mov	r0, fp
 800419c:	f7fc f8a0 	bl	80002e0 <strlen>
 80041a0:	2300      	movs	r3, #0
 80041a2:	9308      	str	r3, [sp, #32]
 80041a4:	f8d8 3000 	ldr.w	r3, [r8]
 80041a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	3307      	adds	r3, #7
 80041b0:	f023 0307 	bic.w	r3, r3, #7
 80041b4:	f103 0108 	add.w	r1, r3, #8
 80041b8:	f8c8 1000 	str.w	r1, [r8]
 80041bc:	ed93 0b00 	vldr	d0, [r3]
 80041c0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004420 <_printf_float+0x2a0>
 80041c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80041c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80041cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80041d4:	4682      	mov	sl, r0
 80041d6:	dd24      	ble.n	8004222 <_printf_float+0xa2>
 80041d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d502      	bpl.n	80041e8 <_printf_float+0x68>
 80041e2:	232d      	movs	r3, #45	; 0x2d
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e8:	498f      	ldr	r1, [pc, #572]	; (8004428 <_printf_float+0x2a8>)
 80041ea:	4b90      	ldr	r3, [pc, #576]	; (800442c <_printf_float+0x2ac>)
 80041ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041f0:	bf94      	ite	ls
 80041f2:	4688      	movls	r8, r1
 80041f4:	4698      	movhi	r8, r3
 80041f6:	2303      	movs	r3, #3
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	2300      	movs	r3, #0
 8004200:	6022      	str	r2, [r4, #0]
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	9700      	str	r7, [sp, #0]
 8004206:	4633      	mov	r3, r6
 8004208:	aa09      	add	r2, sp, #36	; 0x24
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 f9d1 	bl	80045b4 <_printf_common>
 8004212:	3001      	adds	r0, #1
 8004214:	f040 808a 	bne.w	800432c <_printf_float+0x1ac>
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	b00b      	add	sp, #44	; 0x2c
 800421e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004222:	eeb4 0b40 	vcmp.f64	d0, d0
 8004226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422a:	d709      	bvc.n	8004240 <_printf_float+0xc0>
 800422c:	ee10 3a90 	vmov	r3, s1
 8004230:	2b00      	cmp	r3, #0
 8004232:	bfbc      	itt	lt
 8004234:	232d      	movlt	r3, #45	; 0x2d
 8004236:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800423a:	497d      	ldr	r1, [pc, #500]	; (8004430 <_printf_float+0x2b0>)
 800423c:	4b7d      	ldr	r3, [pc, #500]	; (8004434 <_printf_float+0x2b4>)
 800423e:	e7d5      	b.n	80041ec <_printf_float+0x6c>
 8004240:	6863      	ldr	r3, [r4, #4]
 8004242:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004246:	9104      	str	r1, [sp, #16]
 8004248:	1c59      	adds	r1, r3, #1
 800424a:	d13c      	bne.n	80042c6 <_printf_float+0x146>
 800424c:	2306      	movs	r3, #6
 800424e:	6063      	str	r3, [r4, #4]
 8004250:	2300      	movs	r3, #0
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	ab08      	add	r3, sp, #32
 8004256:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800425a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800425e:	ab07      	add	r3, sp, #28
 8004260:	6861      	ldr	r1, [r4, #4]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	f10d 031b 	add.w	r3, sp, #27
 800426a:	4628      	mov	r0, r5
 800426c:	f7ff fef5 	bl	800405a <__cvt>
 8004270:	9b04      	ldr	r3, [sp, #16]
 8004272:	9907      	ldr	r1, [sp, #28]
 8004274:	2b47      	cmp	r3, #71	; 0x47
 8004276:	4680      	mov	r8, r0
 8004278:	d108      	bne.n	800428c <_printf_float+0x10c>
 800427a:	1cc8      	adds	r0, r1, #3
 800427c:	db02      	blt.n	8004284 <_printf_float+0x104>
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	4299      	cmp	r1, r3
 8004282:	dd41      	ble.n	8004308 <_printf_float+0x188>
 8004284:	f1a9 0902 	sub.w	r9, r9, #2
 8004288:	fa5f f989 	uxtb.w	r9, r9
 800428c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004290:	d820      	bhi.n	80042d4 <_printf_float+0x154>
 8004292:	3901      	subs	r1, #1
 8004294:	464a      	mov	r2, r9
 8004296:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800429a:	9107      	str	r1, [sp, #28]
 800429c:	f7ff ff2f 	bl	80040fe <__exponent>
 80042a0:	9a08      	ldr	r2, [sp, #32]
 80042a2:	9004      	str	r0, [sp, #16]
 80042a4:	1813      	adds	r3, r2, r0
 80042a6:	2a01      	cmp	r2, #1
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	dc02      	bgt.n	80042b2 <_printf_float+0x132>
 80042ac:	6822      	ldr	r2, [r4, #0]
 80042ae:	07d2      	lsls	r2, r2, #31
 80042b0:	d501      	bpl.n	80042b6 <_printf_float+0x136>
 80042b2:	3301      	adds	r3, #1
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0a2      	beq.n	8004204 <_printf_float+0x84>
 80042be:	232d      	movs	r3, #45	; 0x2d
 80042c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c4:	e79e      	b.n	8004204 <_printf_float+0x84>
 80042c6:	9904      	ldr	r1, [sp, #16]
 80042c8:	2947      	cmp	r1, #71	; 0x47
 80042ca:	d1c1      	bne.n	8004250 <_printf_float+0xd0>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1bf      	bne.n	8004250 <_printf_float+0xd0>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e7bc      	b.n	800424e <_printf_float+0xce>
 80042d4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042d8:	d118      	bne.n	800430c <_printf_float+0x18c>
 80042da:	2900      	cmp	r1, #0
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	dd0b      	ble.n	80042f8 <_printf_float+0x178>
 80042e0:	6121      	str	r1, [r4, #16]
 80042e2:	b913      	cbnz	r3, 80042ea <_printf_float+0x16a>
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	07d0      	lsls	r0, r2, #31
 80042e8:	d502      	bpl.n	80042f0 <_printf_float+0x170>
 80042ea:	3301      	adds	r3, #1
 80042ec:	440b      	add	r3, r1
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	2300      	movs	r3, #0
 80042f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	e7de      	b.n	80042b6 <_printf_float+0x136>
 80042f8:	b913      	cbnz	r3, 8004300 <_printf_float+0x180>
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	07d2      	lsls	r2, r2, #31
 80042fe:	d501      	bpl.n	8004304 <_printf_float+0x184>
 8004300:	3302      	adds	r3, #2
 8004302:	e7f4      	b.n	80042ee <_printf_float+0x16e>
 8004304:	2301      	movs	r3, #1
 8004306:	e7f2      	b.n	80042ee <_printf_float+0x16e>
 8004308:	f04f 0967 	mov.w	r9, #103	; 0x67
 800430c:	9b08      	ldr	r3, [sp, #32]
 800430e:	4299      	cmp	r1, r3
 8004310:	db05      	blt.n	800431e <_printf_float+0x19e>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	6121      	str	r1, [r4, #16]
 8004316:	07d8      	lsls	r0, r3, #31
 8004318:	d5ea      	bpl.n	80042f0 <_printf_float+0x170>
 800431a:	1c4b      	adds	r3, r1, #1
 800431c:	e7e7      	b.n	80042ee <_printf_float+0x16e>
 800431e:	2900      	cmp	r1, #0
 8004320:	bfd4      	ite	le
 8004322:	f1c1 0202 	rsble	r2, r1, #2
 8004326:	2201      	movgt	r2, #1
 8004328:	4413      	add	r3, r2
 800432a:	e7e0      	b.n	80042ee <_printf_float+0x16e>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	055a      	lsls	r2, r3, #21
 8004330:	d407      	bmi.n	8004342 <_printf_float+0x1c2>
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	4642      	mov	r2, r8
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	d12a      	bne.n	8004396 <_printf_float+0x216>
 8004340:	e76a      	b.n	8004218 <_printf_float+0x98>
 8004342:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004346:	f240 80e0 	bls.w	800450a <_printf_float+0x38a>
 800434a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800434e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	d133      	bne.n	80043c0 <_printf_float+0x240>
 8004358:	4a37      	ldr	r2, [pc, #220]	; (8004438 <_printf_float+0x2b8>)
 800435a:	2301      	movs	r3, #1
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f af58 	beq.w	8004218 <_printf_float+0x98>
 8004368:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800436c:	429a      	cmp	r2, r3
 800436e:	db02      	blt.n	8004376 <_printf_float+0x1f6>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	07d8      	lsls	r0, r3, #31
 8004374:	d50f      	bpl.n	8004396 <_printf_float+0x216>
 8004376:	4653      	mov	r3, sl
 8004378:	465a      	mov	r2, fp
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f af49 	beq.w	8004218 <_printf_float+0x98>
 8004386:	f04f 0800 	mov.w	r8, #0
 800438a:	f104 091a 	add.w	r9, r4, #26
 800438e:	9b08      	ldr	r3, [sp, #32]
 8004390:	3b01      	subs	r3, #1
 8004392:	4543      	cmp	r3, r8
 8004394:	dc09      	bgt.n	80043aa <_printf_float+0x22a>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	079b      	lsls	r3, r3, #30
 800439a:	f100 8106 	bmi.w	80045aa <_printf_float+0x42a>
 800439e:	68e0      	ldr	r0, [r4, #12]
 80043a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a2:	4298      	cmp	r0, r3
 80043a4:	bfb8      	it	lt
 80043a6:	4618      	movlt	r0, r3
 80043a8:	e738      	b.n	800421c <_printf_float+0x9c>
 80043aa:	2301      	movs	r3, #1
 80043ac:	464a      	mov	r2, r9
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f af2f 	beq.w	8004218 <_printf_float+0x98>
 80043ba:	f108 0801 	add.w	r8, r8, #1
 80043be:	e7e6      	b.n	800438e <_printf_float+0x20e>
 80043c0:	9b07      	ldr	r3, [sp, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	dc3a      	bgt.n	800443c <_printf_float+0x2bc>
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <_printf_float+0x2b8>)
 80043c8:	2301      	movs	r3, #1
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f af21 	beq.w	8004218 <_printf_float+0x98>
 80043d6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80043da:	4313      	orrs	r3, r2
 80043dc:	d102      	bne.n	80043e4 <_printf_float+0x264>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	07d9      	lsls	r1, r3, #31
 80043e2:	d5d8      	bpl.n	8004396 <_printf_float+0x216>
 80043e4:	4653      	mov	r3, sl
 80043e6:	465a      	mov	r2, fp
 80043e8:	4631      	mov	r1, r6
 80043ea:	4628      	mov	r0, r5
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	f43f af12 	beq.w	8004218 <_printf_float+0x98>
 80043f4:	f04f 0900 	mov.w	r9, #0
 80043f8:	f104 0a1a 	add.w	sl, r4, #26
 80043fc:	9b07      	ldr	r3, [sp, #28]
 80043fe:	425b      	negs	r3, r3
 8004400:	454b      	cmp	r3, r9
 8004402:	dc01      	bgt.n	8004408 <_printf_float+0x288>
 8004404:	9b08      	ldr	r3, [sp, #32]
 8004406:	e795      	b.n	8004334 <_printf_float+0x1b4>
 8004408:	2301      	movs	r3, #1
 800440a:	4652      	mov	r2, sl
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f af00 	beq.w	8004218 <_printf_float+0x98>
 8004418:	f109 0901 	add.w	r9, r9, #1
 800441c:	e7ee      	b.n	80043fc <_printf_float+0x27c>
 800441e:	bf00      	nop
 8004420:	ffffffff 	.word	0xffffffff
 8004424:	7fefffff 	.word	0x7fefffff
 8004428:	08006880 	.word	0x08006880
 800442c:	08006884 	.word	0x08006884
 8004430:	08006888 	.word	0x08006888
 8004434:	0800688c 	.word	0x0800688c
 8004438:	08006890 	.word	0x08006890
 800443c:	9a08      	ldr	r2, [sp, #32]
 800443e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004440:	429a      	cmp	r2, r3
 8004442:	bfa8      	it	ge
 8004444:	461a      	movge	r2, r3
 8004446:	2a00      	cmp	r2, #0
 8004448:	4691      	mov	r9, r2
 800444a:	dc38      	bgt.n	80044be <_printf_float+0x33e>
 800444c:	2300      	movs	r3, #0
 800444e:	9305      	str	r3, [sp, #20]
 8004450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004454:	f104 021a 	add.w	r2, r4, #26
 8004458:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800445a:	9905      	ldr	r1, [sp, #20]
 800445c:	9304      	str	r3, [sp, #16]
 800445e:	eba3 0309 	sub.w	r3, r3, r9
 8004462:	428b      	cmp	r3, r1
 8004464:	dc33      	bgt.n	80044ce <_printf_float+0x34e>
 8004466:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800446a:	429a      	cmp	r2, r3
 800446c:	db3c      	blt.n	80044e8 <_printf_float+0x368>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	07da      	lsls	r2, r3, #31
 8004472:	d439      	bmi.n	80044e8 <_printf_float+0x368>
 8004474:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004478:	eba2 0903 	sub.w	r9, r2, r3
 800447c:	9b04      	ldr	r3, [sp, #16]
 800447e:	1ad2      	subs	r2, r2, r3
 8004480:	4591      	cmp	r9, r2
 8004482:	bfa8      	it	ge
 8004484:	4691      	movge	r9, r2
 8004486:	f1b9 0f00 	cmp.w	r9, #0
 800448a:	dc35      	bgt.n	80044f8 <_printf_float+0x378>
 800448c:	f04f 0800 	mov.w	r8, #0
 8004490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004494:	f104 0a1a 	add.w	sl, r4, #26
 8004498:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	eba3 0309 	sub.w	r3, r3, r9
 80044a2:	4543      	cmp	r3, r8
 80044a4:	f77f af77 	ble.w	8004396 <_printf_float+0x216>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4652      	mov	r2, sl
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b8      	blx	r7
 80044b2:	3001      	adds	r0, #1
 80044b4:	f43f aeb0 	beq.w	8004218 <_printf_float+0x98>
 80044b8:	f108 0801 	add.w	r8, r8, #1
 80044bc:	e7ec      	b.n	8004498 <_printf_float+0x318>
 80044be:	4613      	mov	r3, r2
 80044c0:	4631      	mov	r1, r6
 80044c2:	4642      	mov	r2, r8
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1bf      	bne.n	800444c <_printf_float+0x2cc>
 80044cc:	e6a4      	b.n	8004218 <_printf_float+0x98>
 80044ce:	2301      	movs	r3, #1
 80044d0:	4631      	mov	r1, r6
 80044d2:	4628      	mov	r0, r5
 80044d4:	9204      	str	r2, [sp, #16]
 80044d6:	47b8      	blx	r7
 80044d8:	3001      	adds	r0, #1
 80044da:	f43f ae9d 	beq.w	8004218 <_printf_float+0x98>
 80044de:	9b05      	ldr	r3, [sp, #20]
 80044e0:	9a04      	ldr	r2, [sp, #16]
 80044e2:	3301      	adds	r3, #1
 80044e4:	9305      	str	r3, [sp, #20]
 80044e6:	e7b7      	b.n	8004458 <_printf_float+0x2d8>
 80044e8:	4653      	mov	r3, sl
 80044ea:	465a      	mov	r2, fp
 80044ec:	4631      	mov	r1, r6
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b8      	blx	r7
 80044f2:	3001      	adds	r0, #1
 80044f4:	d1be      	bne.n	8004474 <_printf_float+0x2f4>
 80044f6:	e68f      	b.n	8004218 <_printf_float+0x98>
 80044f8:	9a04      	ldr	r2, [sp, #16]
 80044fa:	464b      	mov	r3, r9
 80044fc:	4442      	add	r2, r8
 80044fe:	4631      	mov	r1, r6
 8004500:	4628      	mov	r0, r5
 8004502:	47b8      	blx	r7
 8004504:	3001      	adds	r0, #1
 8004506:	d1c1      	bne.n	800448c <_printf_float+0x30c>
 8004508:	e686      	b.n	8004218 <_printf_float+0x98>
 800450a:	9a08      	ldr	r2, [sp, #32]
 800450c:	2a01      	cmp	r2, #1
 800450e:	dc01      	bgt.n	8004514 <_printf_float+0x394>
 8004510:	07db      	lsls	r3, r3, #31
 8004512:	d537      	bpl.n	8004584 <_printf_float+0x404>
 8004514:	2301      	movs	r3, #1
 8004516:	4642      	mov	r2, r8
 8004518:	4631      	mov	r1, r6
 800451a:	4628      	mov	r0, r5
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	f43f ae7a 	beq.w	8004218 <_printf_float+0x98>
 8004524:	4653      	mov	r3, sl
 8004526:	465a      	mov	r2, fp
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	f43f ae72 	beq.w	8004218 <_printf_float+0x98>
 8004534:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004538:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	9b08      	ldr	r3, [sp, #32]
 8004542:	d01a      	beq.n	800457a <_printf_float+0x3fa>
 8004544:	3b01      	subs	r3, #1
 8004546:	f108 0201 	add.w	r2, r8, #1
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	d10e      	bne.n	8004572 <_printf_float+0x3f2>
 8004554:	e660      	b.n	8004218 <_printf_float+0x98>
 8004556:	2301      	movs	r3, #1
 8004558:	464a      	mov	r2, r9
 800455a:	4631      	mov	r1, r6
 800455c:	4628      	mov	r0, r5
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	f43f ae59 	beq.w	8004218 <_printf_float+0x98>
 8004566:	f108 0801 	add.w	r8, r8, #1
 800456a:	9b08      	ldr	r3, [sp, #32]
 800456c:	3b01      	subs	r3, #1
 800456e:	4543      	cmp	r3, r8
 8004570:	dcf1      	bgt.n	8004556 <_printf_float+0x3d6>
 8004572:	9b04      	ldr	r3, [sp, #16]
 8004574:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004578:	e6dd      	b.n	8004336 <_printf_float+0x1b6>
 800457a:	f04f 0800 	mov.w	r8, #0
 800457e:	f104 091a 	add.w	r9, r4, #26
 8004582:	e7f2      	b.n	800456a <_printf_float+0x3ea>
 8004584:	2301      	movs	r3, #1
 8004586:	4642      	mov	r2, r8
 8004588:	e7df      	b.n	800454a <_printf_float+0x3ca>
 800458a:	2301      	movs	r3, #1
 800458c:	464a      	mov	r2, r9
 800458e:	4631      	mov	r1, r6
 8004590:	4628      	mov	r0, r5
 8004592:	47b8      	blx	r7
 8004594:	3001      	adds	r0, #1
 8004596:	f43f ae3f 	beq.w	8004218 <_printf_float+0x98>
 800459a:	f108 0801 	add.w	r8, r8, #1
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045a2:	1a5b      	subs	r3, r3, r1
 80045a4:	4543      	cmp	r3, r8
 80045a6:	dcf0      	bgt.n	800458a <_printf_float+0x40a>
 80045a8:	e6f9      	b.n	800439e <_printf_float+0x21e>
 80045aa:	f04f 0800 	mov.w	r8, #0
 80045ae:	f104 0919 	add.w	r9, r4, #25
 80045b2:	e7f4      	b.n	800459e <_printf_float+0x41e>

080045b4 <_printf_common>:
 80045b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b8:	4616      	mov	r6, r2
 80045ba:	4699      	mov	r9, r3
 80045bc:	688a      	ldr	r2, [r1, #8]
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bfb8      	it	lt
 80045c8:	4613      	movlt	r3, r2
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d0:	4607      	mov	r7, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	b10a      	cbz	r2, 80045da <_printf_common+0x26>
 80045d6:	3301      	adds	r3, #1
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	0699      	lsls	r1, r3, #26
 80045de:	bf42      	ittt	mi
 80045e0:	6833      	ldrmi	r3, [r6, #0]
 80045e2:	3302      	addmi	r3, #2
 80045e4:	6033      	strmi	r3, [r6, #0]
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	f015 0506 	ands.w	r5, r5, #6
 80045ec:	d106      	bne.n	80045fc <_printf_common+0x48>
 80045ee:	f104 0a19 	add.w	sl, r4, #25
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	6832      	ldr	r2, [r6, #0]
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dc26      	bgt.n	800464a <_printf_common+0x96>
 80045fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004600:	1e13      	subs	r3, r2, #0
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	bf18      	it	ne
 8004606:	2301      	movne	r3, #1
 8004608:	0692      	lsls	r2, r2, #26
 800460a:	d42b      	bmi.n	8004664 <_printf_common+0xb0>
 800460c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004610:	4649      	mov	r1, r9
 8004612:	4638      	mov	r0, r7
 8004614:	47c0      	blx	r8
 8004616:	3001      	adds	r0, #1
 8004618:	d01e      	beq.n	8004658 <_printf_common+0xa4>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	f003 0306 	and.w	r3, r3, #6
 8004622:	2b04      	cmp	r3, #4
 8004624:	bf02      	ittt	eq
 8004626:	68e5      	ldreq	r5, [r4, #12]
 8004628:	6833      	ldreq	r3, [r6, #0]
 800462a:	1aed      	subeq	r5, r5, r3
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	bf0c      	ite	eq
 8004630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004634:	2500      	movne	r5, #0
 8004636:	4293      	cmp	r3, r2
 8004638:	bfc4      	itt	gt
 800463a:	1a9b      	subgt	r3, r3, r2
 800463c:	18ed      	addgt	r5, r5, r3
 800463e:	2600      	movs	r6, #0
 8004640:	341a      	adds	r4, #26
 8004642:	42b5      	cmp	r5, r6
 8004644:	d11a      	bne.n	800467c <_printf_common+0xc8>
 8004646:	2000      	movs	r0, #0
 8004648:	e008      	b.n	800465c <_printf_common+0xa8>
 800464a:	2301      	movs	r3, #1
 800464c:	4652      	mov	r2, sl
 800464e:	4649      	mov	r1, r9
 8004650:	4638      	mov	r0, r7
 8004652:	47c0      	blx	r8
 8004654:	3001      	adds	r0, #1
 8004656:	d103      	bne.n	8004660 <_printf_common+0xac>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004660:	3501      	adds	r5, #1
 8004662:	e7c6      	b.n	80045f2 <_printf_common+0x3e>
 8004664:	18e1      	adds	r1, r4, r3
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	2030      	movs	r0, #48	; 0x30
 800466a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800466e:	4422      	add	r2, r4
 8004670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004678:	3302      	adds	r3, #2
 800467a:	e7c7      	b.n	800460c <_printf_common+0x58>
 800467c:	2301      	movs	r3, #1
 800467e:	4622      	mov	r2, r4
 8004680:	4649      	mov	r1, r9
 8004682:	4638      	mov	r0, r7
 8004684:	47c0      	blx	r8
 8004686:	3001      	adds	r0, #1
 8004688:	d0e6      	beq.n	8004658 <_printf_common+0xa4>
 800468a:	3601      	adds	r6, #1
 800468c:	e7d9      	b.n	8004642 <_printf_common+0x8e>
	...

08004690 <_printf_i>:
 8004690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	7e0f      	ldrb	r7, [r1, #24]
 8004696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004698:	2f78      	cmp	r7, #120	; 0x78
 800469a:	4691      	mov	r9, r2
 800469c:	4680      	mov	r8, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	469a      	mov	sl, r3
 80046a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046a6:	d807      	bhi.n	80046b8 <_printf_i+0x28>
 80046a8:	2f62      	cmp	r7, #98	; 0x62
 80046aa:	d80a      	bhi.n	80046c2 <_printf_i+0x32>
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	f000 80d4 	beq.w	800485a <_printf_i+0x1ca>
 80046b2:	2f58      	cmp	r7, #88	; 0x58
 80046b4:	f000 80c0 	beq.w	8004838 <_printf_i+0x1a8>
 80046b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c0:	e03a      	b.n	8004738 <_printf_i+0xa8>
 80046c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046c6:	2b15      	cmp	r3, #21
 80046c8:	d8f6      	bhi.n	80046b8 <_printf_i+0x28>
 80046ca:	a101      	add	r1, pc, #4	; (adr r1, 80046d0 <_printf_i+0x40>)
 80046cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046d0:	08004729 	.word	0x08004729
 80046d4:	0800473d 	.word	0x0800473d
 80046d8:	080046b9 	.word	0x080046b9
 80046dc:	080046b9 	.word	0x080046b9
 80046e0:	080046b9 	.word	0x080046b9
 80046e4:	080046b9 	.word	0x080046b9
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	080046b9 	.word	0x080046b9
 80046f0:	080046b9 	.word	0x080046b9
 80046f4:	080046b9 	.word	0x080046b9
 80046f8:	080046b9 	.word	0x080046b9
 80046fc:	08004841 	.word	0x08004841
 8004700:	08004769 	.word	0x08004769
 8004704:	080047fb 	.word	0x080047fb
 8004708:	080046b9 	.word	0x080046b9
 800470c:	080046b9 	.word	0x080046b9
 8004710:	08004863 	.word	0x08004863
 8004714:	080046b9 	.word	0x080046b9
 8004718:	08004769 	.word	0x08004769
 800471c:	080046b9 	.word	0x080046b9
 8004720:	080046b9 	.word	0x080046b9
 8004724:	08004803 	.word	0x08004803
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	1d1a      	adds	r2, r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	602a      	str	r2, [r5, #0]
 8004730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004738:	2301      	movs	r3, #1
 800473a:	e09f      	b.n	800487c <_printf_i+0x1ec>
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	0607      	lsls	r7, r0, #24
 8004742:	f103 0104 	add.w	r1, r3, #4
 8004746:	6029      	str	r1, [r5, #0]
 8004748:	d501      	bpl.n	800474e <_printf_i+0xbe>
 800474a:	681e      	ldr	r6, [r3, #0]
 800474c:	e003      	b.n	8004756 <_printf_i+0xc6>
 800474e:	0646      	lsls	r6, r0, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0xba>
 8004752:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004756:	2e00      	cmp	r6, #0
 8004758:	da03      	bge.n	8004762 <_printf_i+0xd2>
 800475a:	232d      	movs	r3, #45	; 0x2d
 800475c:	4276      	negs	r6, r6
 800475e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004762:	485a      	ldr	r0, [pc, #360]	; (80048cc <_printf_i+0x23c>)
 8004764:	230a      	movs	r3, #10
 8004766:	e012      	b.n	800478e <_printf_i+0xfe>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1d19      	adds	r1, r3, #4
 800476e:	6029      	str	r1, [r5, #0]
 8004770:	0605      	lsls	r5, r0, #24
 8004772:	d501      	bpl.n	8004778 <_printf_i+0xe8>
 8004774:	681e      	ldr	r6, [r3, #0]
 8004776:	e002      	b.n	800477e <_printf_i+0xee>
 8004778:	0641      	lsls	r1, r0, #25
 800477a:	d5fb      	bpl.n	8004774 <_printf_i+0xe4>
 800477c:	881e      	ldrh	r6, [r3, #0]
 800477e:	4853      	ldr	r0, [pc, #332]	; (80048cc <_printf_i+0x23c>)
 8004780:	2f6f      	cmp	r7, #111	; 0x6f
 8004782:	bf0c      	ite	eq
 8004784:	2308      	moveq	r3, #8
 8004786:	230a      	movne	r3, #10
 8004788:	2100      	movs	r1, #0
 800478a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800478e:	6865      	ldr	r5, [r4, #4]
 8004790:	60a5      	str	r5, [r4, #8]
 8004792:	2d00      	cmp	r5, #0
 8004794:	bfa2      	ittt	ge
 8004796:	6821      	ldrge	r1, [r4, #0]
 8004798:	f021 0104 	bicge.w	r1, r1, #4
 800479c:	6021      	strge	r1, [r4, #0]
 800479e:	b90e      	cbnz	r6, 80047a4 <_printf_i+0x114>
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	d04b      	beq.n	800483c <_printf_i+0x1ac>
 80047a4:	4615      	mov	r5, r2
 80047a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80047aa:	fb03 6711 	mls	r7, r3, r1, r6
 80047ae:	5dc7      	ldrb	r7, [r0, r7]
 80047b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047b4:	4637      	mov	r7, r6
 80047b6:	42bb      	cmp	r3, r7
 80047b8:	460e      	mov	r6, r1
 80047ba:	d9f4      	bls.n	80047a6 <_printf_i+0x116>
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d10b      	bne.n	80047d8 <_printf_i+0x148>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07de      	lsls	r6, r3, #31
 80047c4:	d508      	bpl.n	80047d8 <_printf_i+0x148>
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	6861      	ldr	r1, [r4, #4]
 80047ca:	4299      	cmp	r1, r3
 80047cc:	bfde      	ittt	le
 80047ce:	2330      	movle	r3, #48	; 0x30
 80047d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047d8:	1b52      	subs	r2, r2, r5
 80047da:	6122      	str	r2, [r4, #16]
 80047dc:	f8cd a000 	str.w	sl, [sp]
 80047e0:	464b      	mov	r3, r9
 80047e2:	aa03      	add	r2, sp, #12
 80047e4:	4621      	mov	r1, r4
 80047e6:	4640      	mov	r0, r8
 80047e8:	f7ff fee4 	bl	80045b4 <_printf_common>
 80047ec:	3001      	adds	r0, #1
 80047ee:	d14a      	bne.n	8004886 <_printf_i+0x1f6>
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	b004      	add	sp, #16
 80047f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	f043 0320 	orr.w	r3, r3, #32
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	4833      	ldr	r0, [pc, #204]	; (80048d0 <_printf_i+0x240>)
 8004804:	2778      	movs	r7, #120	; 0x78
 8004806:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	6829      	ldr	r1, [r5, #0]
 800480e:	061f      	lsls	r7, r3, #24
 8004810:	f851 6b04 	ldr.w	r6, [r1], #4
 8004814:	d402      	bmi.n	800481c <_printf_i+0x18c>
 8004816:	065f      	lsls	r7, r3, #25
 8004818:	bf48      	it	mi
 800481a:	b2b6      	uxthmi	r6, r6
 800481c:	07df      	lsls	r7, r3, #31
 800481e:	bf48      	it	mi
 8004820:	f043 0320 	orrmi.w	r3, r3, #32
 8004824:	6029      	str	r1, [r5, #0]
 8004826:	bf48      	it	mi
 8004828:	6023      	strmi	r3, [r4, #0]
 800482a:	b91e      	cbnz	r6, 8004834 <_printf_i+0x1a4>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	f023 0320 	bic.w	r3, r3, #32
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	2310      	movs	r3, #16
 8004836:	e7a7      	b.n	8004788 <_printf_i+0xf8>
 8004838:	4824      	ldr	r0, [pc, #144]	; (80048cc <_printf_i+0x23c>)
 800483a:	e7e4      	b.n	8004806 <_printf_i+0x176>
 800483c:	4615      	mov	r5, r2
 800483e:	e7bd      	b.n	80047bc <_printf_i+0x12c>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	6826      	ldr	r6, [r4, #0]
 8004844:	6961      	ldr	r1, [r4, #20]
 8004846:	1d18      	adds	r0, r3, #4
 8004848:	6028      	str	r0, [r5, #0]
 800484a:	0635      	lsls	r5, r6, #24
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	d501      	bpl.n	8004854 <_printf_i+0x1c4>
 8004850:	6019      	str	r1, [r3, #0]
 8004852:	e002      	b.n	800485a <_printf_i+0x1ca>
 8004854:	0670      	lsls	r0, r6, #25
 8004856:	d5fb      	bpl.n	8004850 <_printf_i+0x1c0>
 8004858:	8019      	strh	r1, [r3, #0]
 800485a:	2300      	movs	r3, #0
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	4615      	mov	r5, r2
 8004860:	e7bc      	b.n	80047dc <_printf_i+0x14c>
 8004862:	682b      	ldr	r3, [r5, #0]
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	602a      	str	r2, [r5, #0]
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	6862      	ldr	r2, [r4, #4]
 800486c:	2100      	movs	r1, #0
 800486e:	4628      	mov	r0, r5
 8004870:	f7fb fce6 	bl	8000240 <memchr>
 8004874:	b108      	cbz	r0, 800487a <_printf_i+0x1ea>
 8004876:	1b40      	subs	r0, r0, r5
 8004878:	6060      	str	r0, [r4, #4]
 800487a:	6863      	ldr	r3, [r4, #4]
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	2300      	movs	r3, #0
 8004880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004884:	e7aa      	b.n	80047dc <_printf_i+0x14c>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	462a      	mov	r2, r5
 800488a:	4649      	mov	r1, r9
 800488c:	4640      	mov	r0, r8
 800488e:	47d0      	blx	sl
 8004890:	3001      	adds	r0, #1
 8004892:	d0ad      	beq.n	80047f0 <_printf_i+0x160>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	079b      	lsls	r3, r3, #30
 8004898:	d413      	bmi.n	80048c2 <_printf_i+0x232>
 800489a:	68e0      	ldr	r0, [r4, #12]
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	4298      	cmp	r0, r3
 80048a0:	bfb8      	it	lt
 80048a2:	4618      	movlt	r0, r3
 80048a4:	e7a6      	b.n	80047f4 <_printf_i+0x164>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4632      	mov	r2, r6
 80048aa:	4649      	mov	r1, r9
 80048ac:	4640      	mov	r0, r8
 80048ae:	47d0      	blx	sl
 80048b0:	3001      	adds	r0, #1
 80048b2:	d09d      	beq.n	80047f0 <_printf_i+0x160>
 80048b4:	3501      	adds	r5, #1
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	9903      	ldr	r1, [sp, #12]
 80048ba:	1a5b      	subs	r3, r3, r1
 80048bc:	42ab      	cmp	r3, r5
 80048be:	dcf2      	bgt.n	80048a6 <_printf_i+0x216>
 80048c0:	e7eb      	b.n	800489a <_printf_i+0x20a>
 80048c2:	2500      	movs	r5, #0
 80048c4:	f104 0619 	add.w	r6, r4, #25
 80048c8:	e7f5      	b.n	80048b6 <_printf_i+0x226>
 80048ca:	bf00      	nop
 80048cc:	08006892 	.word	0x08006892
 80048d0:	080068a3 	.word	0x080068a3

080048d4 <std>:
 80048d4:	2300      	movs	r3, #0
 80048d6:	b510      	push	{r4, lr}
 80048d8:	4604      	mov	r4, r0
 80048da:	e9c0 3300 	strd	r3, r3, [r0]
 80048de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048e2:	6083      	str	r3, [r0, #8]
 80048e4:	8181      	strh	r1, [r0, #12]
 80048e6:	6643      	str	r3, [r0, #100]	; 0x64
 80048e8:	81c2      	strh	r2, [r0, #14]
 80048ea:	6183      	str	r3, [r0, #24]
 80048ec:	4619      	mov	r1, r3
 80048ee:	2208      	movs	r2, #8
 80048f0:	305c      	adds	r0, #92	; 0x5c
 80048f2:	f000 f8e2 	bl	8004aba <memset>
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <std+0x38>)
 80048f8:	6263      	str	r3, [r4, #36]	; 0x24
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <std+0x3c>)
 80048fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <std+0x40>)
 8004900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <std+0x44>)
 8004904:	6224      	str	r4, [r4, #32]
 8004906:	6323      	str	r3, [r4, #48]	; 0x30
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08004a35 	.word	0x08004a35
 8004910:	08004a57 	.word	0x08004a57
 8004914:	08004a8f 	.word	0x08004a8f
 8004918:	08004ab3 	.word	0x08004ab3

0800491c <stdio_exit_handler>:
 800491c:	4a02      	ldr	r2, [pc, #8]	; (8004928 <stdio_exit_handler+0xc>)
 800491e:	4903      	ldr	r1, [pc, #12]	; (800492c <stdio_exit_handler+0x10>)
 8004920:	4803      	ldr	r0, [pc, #12]	; (8004930 <stdio_exit_handler+0x14>)
 8004922:	f000 b869 	b.w	80049f8 <_fwalk_sglue>
 8004926:	bf00      	nop
 8004928:	2000000c 	.word	0x2000000c
 800492c:	080061a5 	.word	0x080061a5
 8004930:	20000018 	.word	0x20000018

08004934 <cleanup_stdio>:
 8004934:	6841      	ldr	r1, [r0, #4]
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <cleanup_stdio+0x34>)
 8004938:	4299      	cmp	r1, r3
 800493a:	b510      	push	{r4, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	d001      	beq.n	8004944 <cleanup_stdio+0x10>
 8004940:	f001 fc30 	bl	80061a4 <_fflush_r>
 8004944:	68a1      	ldr	r1, [r4, #8]
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <cleanup_stdio+0x38>)
 8004948:	4299      	cmp	r1, r3
 800494a:	d002      	beq.n	8004952 <cleanup_stdio+0x1e>
 800494c:	4620      	mov	r0, r4
 800494e:	f001 fc29 	bl	80061a4 <_fflush_r>
 8004952:	68e1      	ldr	r1, [r4, #12]
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <cleanup_stdio+0x3c>)
 8004956:	4299      	cmp	r1, r3
 8004958:	d004      	beq.n	8004964 <cleanup_stdio+0x30>
 800495a:	4620      	mov	r0, r4
 800495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004960:	f001 bc20 	b.w	80061a4 <_fflush_r>
 8004964:	bd10      	pop	{r4, pc}
 8004966:	bf00      	nop
 8004968:	200002d0 	.word	0x200002d0
 800496c:	20000338 	.word	0x20000338
 8004970:	200003a0 	.word	0x200003a0

08004974 <global_stdio_init.part.0>:
 8004974:	b510      	push	{r4, lr}
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <global_stdio_init.part.0+0x30>)
 8004978:	4c0b      	ldr	r4, [pc, #44]	; (80049a8 <global_stdio_init.part.0+0x34>)
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <global_stdio_init.part.0+0x38>)
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	4620      	mov	r0, r4
 8004980:	2200      	movs	r2, #0
 8004982:	2104      	movs	r1, #4
 8004984:	f7ff ffa6 	bl	80048d4 <std>
 8004988:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800498c:	2201      	movs	r2, #1
 800498e:	2109      	movs	r1, #9
 8004990:	f7ff ffa0 	bl	80048d4 <std>
 8004994:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004998:	2202      	movs	r2, #2
 800499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499e:	2112      	movs	r1, #18
 80049a0:	f7ff bf98 	b.w	80048d4 <std>
 80049a4:	20000408 	.word	0x20000408
 80049a8:	200002d0 	.word	0x200002d0
 80049ac:	0800491d 	.word	0x0800491d

080049b0 <__sfp_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sfp_lock_acquire+0x8>)
 80049b2:	f000 b8ff 	b.w	8004bb4 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000411 	.word	0x20000411

080049bc <__sfp_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sfp_lock_release+0x8>)
 80049be:	f000 b8fa 	b.w	8004bb6 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	20000411 	.word	0x20000411

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sfp_lock_acquire>
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sfp_lock_release>
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <__sinit+0x28>)
 80049de:	6223      	str	r3, [r4, #32]
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <__sinit+0x2c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f5      	bne.n	80049d4 <__sinit+0xc>
 80049e8:	f7ff ffc4 	bl	8004974 <global_stdio_init.part.0>
 80049ec:	e7f2      	b.n	80049d4 <__sinit+0xc>
 80049ee:	bf00      	nop
 80049f0:	08004935 	.word	0x08004935
 80049f4:	20000408 	.word	0x20000408

080049f8 <_fwalk_sglue>:
 80049f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049fc:	4607      	mov	r7, r0
 80049fe:	4688      	mov	r8, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	2600      	movs	r6, #0
 8004a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a08:	f1b9 0901 	subs.w	r9, r9, #1
 8004a0c:	d505      	bpl.n	8004a1a <_fwalk_sglue+0x22>
 8004a0e:	6824      	ldr	r4, [r4, #0]
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	d1f7      	bne.n	8004a04 <_fwalk_sglue+0xc>
 8004a14:	4630      	mov	r0, r6
 8004a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1a:	89ab      	ldrh	r3, [r5, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d907      	bls.n	8004a30 <_fwalk_sglue+0x38>
 8004a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a24:	3301      	adds	r3, #1
 8004a26:	d003      	beq.n	8004a30 <_fwalk_sglue+0x38>
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	47c0      	blx	r8
 8004a2e:	4306      	orrs	r6, r0
 8004a30:	3568      	adds	r5, #104	; 0x68
 8004a32:	e7e9      	b.n	8004a08 <_fwalk_sglue+0x10>

08004a34 <__sread>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	460c      	mov	r4, r1
 8004a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3c:	f000 f86c 	bl	8004b18 <_read_r>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	bfab      	itete	ge
 8004a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a46:	89a3      	ldrhlt	r3, [r4, #12]
 8004a48:	181b      	addge	r3, r3, r0
 8004a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a4e:	bfac      	ite	ge
 8004a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a52:	81a3      	strhlt	r3, [r4, #12]
 8004a54:	bd10      	pop	{r4, pc}

08004a56 <__swrite>:
 8004a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	898b      	ldrh	r3, [r1, #12]
 8004a5e:	05db      	lsls	r3, r3, #23
 8004a60:	4605      	mov	r5, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	4616      	mov	r6, r2
 8004a66:	d505      	bpl.n	8004a74 <__swrite+0x1e>
 8004a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f000 f840 	bl	8004af4 <_lseek_r>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8a:	f000 b857 	b.w	8004b3c <_write_r>

08004a8e <__sseek>:
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	460c      	mov	r4, r1
 8004a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a96:	f000 f82d 	bl	8004af4 <_lseek_r>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	bf15      	itete	ne
 8004aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aaa:	81a3      	strheq	r3, [r4, #12]
 8004aac:	bf18      	it	ne
 8004aae:	81a3      	strhne	r3, [r4, #12]
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <__sclose>:
 8004ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab6:	f000 b80d 	b.w	8004ad4 <_close_r>

08004aba <memset>:
 8004aba:	4402      	add	r2, r0
 8004abc:	4603      	mov	r3, r0
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d100      	bne.n	8004ac4 <memset+0xa>
 8004ac2:	4770      	bx	lr
 8004ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac8:	e7f9      	b.n	8004abe <memset+0x4>
	...

08004acc <_localeconv_r>:
 8004acc:	4800      	ldr	r0, [pc, #0]	; (8004ad0 <_localeconv_r+0x4>)
 8004ace:	4770      	bx	lr
 8004ad0:	20000158 	.word	0x20000158

08004ad4 <_close_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d06      	ldr	r5, [pc, #24]	; (8004af0 <_close_r+0x1c>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fb ff27 	bl	8000932 <_close>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_close_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_close_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	2000040c 	.word	0x2000040c

08004af4 <_lseek_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	; (8004b14 <_lseek_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fb ff3c 	bl	8000980 <_lseek>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_lseek_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_lseek_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	2000040c 	.word	0x2000040c

08004b18 <_read_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d07      	ldr	r5, [pc, #28]	; (8004b38 <_read_r+0x20>)
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	602a      	str	r2, [r5, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f7fb feca 	bl	80008c0 <_read>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_read_r+0x1e>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_read_r+0x1e>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	2000040c 	.word	0x2000040c

08004b3c <_write_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d07      	ldr	r5, [pc, #28]	; (8004b5c <_write_r+0x20>)
 8004b40:	4604      	mov	r4, r0
 8004b42:	4608      	mov	r0, r1
 8004b44:	4611      	mov	r1, r2
 8004b46:	2200      	movs	r2, #0
 8004b48:	602a      	str	r2, [r5, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f7fb fed5 	bl	80008fa <_write>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_write_r+0x1e>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_write_r+0x1e>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	2000040c 	.word	0x2000040c

08004b60 <__errno>:
 8004b60:	4b01      	ldr	r3, [pc, #4]	; (8004b68 <__errno+0x8>)
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000064 	.word	0x20000064

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	; (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1b64      	subs	r4, r4, r5
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2600      	movs	r6, #0
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4d0b      	ldr	r5, [pc, #44]	; (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	; (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f001 fe64 	bl	800684c <_init>
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2600      	movs	r6, #0
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08006bfc 	.word	0x08006bfc
 8004ba8:	08006bfc 	.word	0x08006bfc
 8004bac:	08006bfc 	.word	0x08006bfc
 8004bb0:	08006c00 	.word	0x08006c00

08004bb4 <__retarget_lock_acquire_recursive>:
 8004bb4:	4770      	bx	lr

08004bb6 <__retarget_lock_release_recursive>:
 8004bb6:	4770      	bx	lr

08004bb8 <quorem>:
 8004bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	6903      	ldr	r3, [r0, #16]
 8004bbe:	690c      	ldr	r4, [r1, #16]
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	db7e      	blt.n	8004cc4 <quorem+0x10c>
 8004bc6:	3c01      	subs	r4, #1
 8004bc8:	f101 0814 	add.w	r8, r1, #20
 8004bcc:	f100 0514 	add.w	r5, r0, #20
 8004bd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bde:	3301      	adds	r3, #1
 8004be0:	429a      	cmp	r2, r3
 8004be2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004be6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bea:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bee:	d331      	bcc.n	8004c54 <quorem+0x9c>
 8004bf0:	f04f 0e00 	mov.w	lr, #0
 8004bf4:	4640      	mov	r0, r8
 8004bf6:	46ac      	mov	ip, r5
 8004bf8:	46f2      	mov	sl, lr
 8004bfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bfe:	b293      	uxth	r3, r2
 8004c00:	fb06 e303 	mla	r3, r6, r3, lr
 8004c04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c08:	0c1a      	lsrs	r2, r3, #16
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004c10:	f8dc a000 	ldr.w	sl, [ip]
 8004c14:	fa13 f38a 	uxtah	r3, r3, sl
 8004c18:	fb06 220e 	mla	r2, r6, lr, r2
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	9b00      	ldr	r3, [sp, #0]
 8004c20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c24:	b292      	uxth	r2, r2
 8004c26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c32:	4581      	cmp	r9, r0
 8004c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c38:	f84c 3b04 	str.w	r3, [ip], #4
 8004c3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c40:	d2db      	bcs.n	8004bfa <quorem+0x42>
 8004c42:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c46:	b92b      	cbnz	r3, 8004c54 <quorem+0x9c>
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	3b04      	subs	r3, #4
 8004c4c:	429d      	cmp	r5, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	d32c      	bcc.n	8004cac <quorem+0xf4>
 8004c52:	613c      	str	r4, [r7, #16]
 8004c54:	4638      	mov	r0, r7
 8004c56:	f001 f91f 	bl	8005e98 <__mcmp>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	db22      	blt.n	8004ca4 <quorem+0xec>
 8004c5e:	3601      	adds	r6, #1
 8004c60:	4629      	mov	r1, r5
 8004c62:	2000      	movs	r0, #0
 8004c64:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c68:	f8d1 c000 	ldr.w	ip, [r1]
 8004c6c:	b293      	uxth	r3, r2
 8004c6e:	1ac3      	subs	r3, r0, r3
 8004c70:	0c12      	lsrs	r2, r2, #16
 8004c72:	fa13 f38c 	uxtah	r3, r3, ip
 8004c76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c84:	45c1      	cmp	r9, r8
 8004c86:	f841 3b04 	str.w	r3, [r1], #4
 8004c8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c8e:	d2e9      	bcs.n	8004c64 <quorem+0xac>
 8004c90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c98:	b922      	cbnz	r2, 8004ca4 <quorem+0xec>
 8004c9a:	3b04      	subs	r3, #4
 8004c9c:	429d      	cmp	r5, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	d30a      	bcc.n	8004cb8 <quorem+0x100>
 8004ca2:	613c      	str	r4, [r7, #16]
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	b003      	add	sp, #12
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	3b04      	subs	r3, #4
 8004cb0:	2a00      	cmp	r2, #0
 8004cb2:	d1ce      	bne.n	8004c52 <quorem+0x9a>
 8004cb4:	3c01      	subs	r4, #1
 8004cb6:	e7c9      	b.n	8004c4c <quorem+0x94>
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	3b04      	subs	r3, #4
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <quorem+0xea>
 8004cc0:	3c01      	subs	r4, #1
 8004cc2:	e7eb      	b.n	8004c9c <quorem+0xe4>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e7ee      	b.n	8004ca6 <quorem+0xee>

08004cc8 <_dtoa_r>:
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	ed2d 8b02 	vpush	{d8}
 8004cd0:	69c5      	ldr	r5, [r0, #28]
 8004cd2:	b091      	sub	sp, #68	; 0x44
 8004cd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004cd8:	ec59 8b10 	vmov	r8, r9, d0
 8004cdc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004cde:	9106      	str	r1, [sp, #24]
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	9208      	str	r2, [sp, #32]
 8004ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ce6:	b975      	cbnz	r5, 8004d06 <_dtoa_r+0x3e>
 8004ce8:	2010      	movs	r0, #16
 8004cea:	f000 fda5 	bl	8005838 <malloc>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	61f0      	str	r0, [r6, #28]
 8004cf2:	b920      	cbnz	r0, 8004cfe <_dtoa_r+0x36>
 8004cf4:	4ba6      	ldr	r3, [pc, #664]	; (8004f90 <_dtoa_r+0x2c8>)
 8004cf6:	21ef      	movs	r1, #239	; 0xef
 8004cf8:	48a6      	ldr	r0, [pc, #664]	; (8004f94 <_dtoa_r+0x2cc>)
 8004cfa:	f001 fa99 	bl	8006230 <__assert_func>
 8004cfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d02:	6005      	str	r5, [r0, #0]
 8004d04:	60c5      	str	r5, [r0, #12]
 8004d06:	69f3      	ldr	r3, [r6, #28]
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	b151      	cbz	r1, 8004d22 <_dtoa_r+0x5a>
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	604a      	str	r2, [r1, #4]
 8004d10:	2301      	movs	r3, #1
 8004d12:	4093      	lsls	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 fe82 	bl	8005a20 <_Bfree>
 8004d1c:	69f3      	ldr	r3, [r6, #28]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f1b9 0300 	subs.w	r3, r9, #0
 8004d26:	bfbb      	ittet	lt
 8004d28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	9303      	strlt	r3, [sp, #12]
 8004d2e:	2300      	movge	r3, #0
 8004d30:	2201      	movlt	r2, #1
 8004d32:	bfac      	ite	ge
 8004d34:	6023      	strge	r3, [r4, #0]
 8004d36:	6022      	strlt	r2, [r4, #0]
 8004d38:	4b97      	ldr	r3, [pc, #604]	; (8004f98 <_dtoa_r+0x2d0>)
 8004d3a:	9c03      	ldr	r4, [sp, #12]
 8004d3c:	43a3      	bics	r3, r4
 8004d3e:	d11c      	bne.n	8004d7a <_dtoa_r+0xb2>
 8004d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d42:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004d4c:	ea53 0308 	orrs.w	r3, r3, r8
 8004d50:	f000 84fb 	beq.w	800574a <_dtoa_r+0xa82>
 8004d54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d56:	b963      	cbnz	r3, 8004d72 <_dtoa_r+0xaa>
 8004d58:	4b90      	ldr	r3, [pc, #576]	; (8004f9c <_dtoa_r+0x2d4>)
 8004d5a:	e020      	b.n	8004d9e <_dtoa_r+0xd6>
 8004d5c:	4b90      	ldr	r3, [pc, #576]	; (8004fa0 <_dtoa_r+0x2d8>)
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	3308      	adds	r3, #8
 8004d62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	9801      	ldr	r0, [sp, #4]
 8004d68:	b011      	add	sp, #68	; 0x44
 8004d6a:	ecbd 8b02 	vpop	{d8}
 8004d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d72:	4b8a      	ldr	r3, [pc, #552]	; (8004f9c <_dtoa_r+0x2d4>)
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	3303      	adds	r3, #3
 8004d78:	e7f3      	b.n	8004d62 <_dtoa_r+0x9a>
 8004d7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004d7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d86:	d10c      	bne.n	8004da2 <_dtoa_r+0xda>
 8004d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 84d7 	beq.w	8005744 <_dtoa_r+0xa7c>
 8004d96:	4b83      	ldr	r3, [pc, #524]	; (8004fa4 <_dtoa_r+0x2dc>)
 8004d98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	e7e1      	b.n	8004d66 <_dtoa_r+0x9e>
 8004da2:	aa0e      	add	r2, sp, #56	; 0x38
 8004da4:	a90f      	add	r1, sp, #60	; 0x3c
 8004da6:	4630      	mov	r0, r6
 8004da8:	eeb0 0b48 	vmov.f64	d0, d8
 8004dac:	f001 f91a 	bl	8005fe4 <__d2b>
 8004db0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8004db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004db6:	4605      	mov	r5, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d046      	beq.n	8004e4a <_dtoa_r+0x182>
 8004dbc:	eeb0 7b48 	vmov.f64	d7, d8
 8004dc0:	ee18 1a90 	vmov	r1, s17
 8004dc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004dc8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004dcc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004dd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	ee07 1a90 	vmov	s15, r1
 8004dda:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004dde:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004f78 <_dtoa_r+0x2b0>
 8004de2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004de6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004f80 <_dtoa_r+0x2b8>
 8004dea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004dee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004f88 <_dtoa_r+0x2c0>
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004dfa:	eeb0 7b46 	vmov.f64	d7, d6
 8004dfe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004e02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004e06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0e:	ee16 ba90 	vmov	fp, s13
 8004e12:	9009      	str	r0, [sp, #36]	; 0x24
 8004e14:	d508      	bpl.n	8004e28 <_dtoa_r+0x160>
 8004e16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004e1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	bf18      	it	ne
 8004e24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004e28:	f1bb 0f16 	cmp.w	fp, #22
 8004e2c:	d82b      	bhi.n	8004e86 <_dtoa_r+0x1be>
 8004e2e:	495e      	ldr	r1, [pc, #376]	; (8004fa8 <_dtoa_r+0x2e0>)
 8004e30:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004e34:	ed91 7b00 	vldr	d7, [r1]
 8004e38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e40:	d501      	bpl.n	8004e46 <_dtoa_r+0x17e>
 8004e42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e46:	2100      	movs	r1, #0
 8004e48:	e01e      	b.n	8004e88 <_dtoa_r+0x1c0>
 8004e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8004e52:	2920      	cmp	r1, #32
 8004e54:	bfc1      	itttt	gt
 8004e56:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004e5a:	408c      	lslgt	r4, r1
 8004e5c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004e60:	fa28 f101 	lsrgt.w	r1, r8, r1
 8004e64:	bfd6      	itet	le
 8004e66:	f1c1 0120 	rsble	r1, r1, #32
 8004e6a:	4321      	orrgt	r1, r4
 8004e6c:	fa08 f101 	lslle.w	r1, r8, r1
 8004e70:	ee07 1a90 	vmov	s15, r1
 8004e74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	ee17 1a90 	vmov	r1, s15
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e84:	e7a7      	b.n	8004dd6 <_dtoa_r+0x10e>
 8004e86:	2101      	movs	r1, #1
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	1e53      	subs	r3, r2, #1
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	bf45      	ittet	mi
 8004e90:	f1c2 0301 	rsbmi	r3, r2, #1
 8004e94:	9304      	strmi	r3, [sp, #16]
 8004e96:	2300      	movpl	r3, #0
 8004e98:	2300      	movmi	r3, #0
 8004e9a:	bf4c      	ite	mi
 8004e9c:	9305      	strmi	r3, [sp, #20]
 8004e9e:	9304      	strpl	r3, [sp, #16]
 8004ea0:	f1bb 0f00 	cmp.w	fp, #0
 8004ea4:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ea6:	db18      	blt.n	8004eda <_dtoa_r+0x212>
 8004ea8:	9b05      	ldr	r3, [sp, #20]
 8004eaa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004eae:	445b      	add	r3, fp
 8004eb0:	9305      	str	r3, [sp, #20]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9a06      	ldr	r2, [sp, #24]
 8004eb6:	2a09      	cmp	r2, #9
 8004eb8:	d848      	bhi.n	8004f4c <_dtoa_r+0x284>
 8004eba:	2a05      	cmp	r2, #5
 8004ebc:	bfc4      	itt	gt
 8004ebe:	3a04      	subgt	r2, #4
 8004ec0:	9206      	strgt	r2, [sp, #24]
 8004ec2:	9a06      	ldr	r2, [sp, #24]
 8004ec4:	f1a2 0202 	sub.w	r2, r2, #2
 8004ec8:	bfcc      	ite	gt
 8004eca:	2400      	movgt	r4, #0
 8004ecc:	2401      	movle	r4, #1
 8004ece:	2a03      	cmp	r2, #3
 8004ed0:	d847      	bhi.n	8004f62 <_dtoa_r+0x29a>
 8004ed2:	e8df f002 	tbb	[pc, r2]
 8004ed6:	2d0b      	.short	0x2d0b
 8004ed8:	392b      	.short	0x392b
 8004eda:	9b04      	ldr	r3, [sp, #16]
 8004edc:	2200      	movs	r2, #0
 8004ede:	eba3 030b 	sub.w	r3, r3, fp
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ee6:	f1cb 0300 	rsb	r3, fp, #0
 8004eea:	e7e3      	b.n	8004eb4 <_dtoa_r+0x1ec>
 8004eec:	2200      	movs	r2, #0
 8004eee:	9207      	str	r2, [sp, #28]
 8004ef0:	9a08      	ldr	r2, [sp, #32]
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	dc38      	bgt.n	8004f68 <_dtoa_r+0x2a0>
 8004ef6:	f04f 0a01 	mov.w	sl, #1
 8004efa:	46d1      	mov	r9, sl
 8004efc:	4652      	mov	r2, sl
 8004efe:	f8cd a020 	str.w	sl, [sp, #32]
 8004f02:	69f7      	ldr	r7, [r6, #28]
 8004f04:	2100      	movs	r1, #0
 8004f06:	2004      	movs	r0, #4
 8004f08:	f100 0c14 	add.w	ip, r0, #20
 8004f0c:	4594      	cmp	ip, r2
 8004f0e:	d930      	bls.n	8004f72 <_dtoa_r+0x2aa>
 8004f10:	6079      	str	r1, [r7, #4]
 8004f12:	4630      	mov	r0, r6
 8004f14:	930d      	str	r3, [sp, #52]	; 0x34
 8004f16:	f000 fd43 	bl	80059a0 <_Balloc>
 8004f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f1c:	9001      	str	r0, [sp, #4]
 8004f1e:	4602      	mov	r2, r0
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d145      	bne.n	8004fb0 <_dtoa_r+0x2e8>
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <_dtoa_r+0x2e4>)
 8004f26:	f240 11af 	movw	r1, #431	; 0x1af
 8004f2a:	e6e5      	b.n	8004cf8 <_dtoa_r+0x30>
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	e7de      	b.n	8004eee <_dtoa_r+0x226>
 8004f30:	2200      	movs	r2, #0
 8004f32:	9207      	str	r2, [sp, #28]
 8004f34:	9a08      	ldr	r2, [sp, #32]
 8004f36:	eb0b 0a02 	add.w	sl, fp, r2
 8004f3a:	f10a 0901 	add.w	r9, sl, #1
 8004f3e:	464a      	mov	r2, r9
 8004f40:	2a01      	cmp	r2, #1
 8004f42:	bfb8      	it	lt
 8004f44:	2201      	movlt	r2, #1
 8004f46:	e7dc      	b.n	8004f02 <_dtoa_r+0x23a>
 8004f48:	2201      	movs	r2, #1
 8004f4a:	e7f2      	b.n	8004f32 <_dtoa_r+0x26a>
 8004f4c:	2401      	movs	r4, #1
 8004f4e:	2200      	movs	r2, #0
 8004f50:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004f54:	f04f 3aff 	mov.w	sl, #4294967295
 8004f58:	2100      	movs	r1, #0
 8004f5a:	46d1      	mov	r9, sl
 8004f5c:	2212      	movs	r2, #18
 8004f5e:	9108      	str	r1, [sp, #32]
 8004f60:	e7cf      	b.n	8004f02 <_dtoa_r+0x23a>
 8004f62:	2201      	movs	r2, #1
 8004f64:	9207      	str	r2, [sp, #28]
 8004f66:	e7f5      	b.n	8004f54 <_dtoa_r+0x28c>
 8004f68:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004f6c:	46d1      	mov	r9, sl
 8004f6e:	4652      	mov	r2, sl
 8004f70:	e7c7      	b.n	8004f02 <_dtoa_r+0x23a>
 8004f72:	3101      	adds	r1, #1
 8004f74:	0040      	lsls	r0, r0, #1
 8004f76:	e7c7      	b.n	8004f08 <_dtoa_r+0x240>
 8004f78:	636f4361 	.word	0x636f4361
 8004f7c:	3fd287a7 	.word	0x3fd287a7
 8004f80:	8b60c8b3 	.word	0x8b60c8b3
 8004f84:	3fc68a28 	.word	0x3fc68a28
 8004f88:	509f79fb 	.word	0x509f79fb
 8004f8c:	3fd34413 	.word	0x3fd34413
 8004f90:	080068c1 	.word	0x080068c1
 8004f94:	080068d8 	.word	0x080068d8
 8004f98:	7ff00000 	.word	0x7ff00000
 8004f9c:	080068bd 	.word	0x080068bd
 8004fa0:	080068b4 	.word	0x080068b4
 8004fa4:	08006891 	.word	0x08006891
 8004fa8:	080069c8 	.word	0x080069c8
 8004fac:	08006930 	.word	0x08006930
 8004fb0:	69f2      	ldr	r2, [r6, #28]
 8004fb2:	9901      	ldr	r1, [sp, #4]
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	f1b9 0f0e 	cmp.w	r9, #14
 8004fba:	d86c      	bhi.n	8005096 <_dtoa_r+0x3ce>
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	d06a      	beq.n	8005096 <_dtoa_r+0x3ce>
 8004fc0:	f1bb 0f00 	cmp.w	fp, #0
 8004fc4:	f340 80a0 	ble.w	8005108 <_dtoa_r+0x440>
 8004fc8:	4ac1      	ldr	r2, [pc, #772]	; (80052d0 <_dtoa_r+0x608>)
 8004fca:	f00b 010f 	and.w	r1, fp, #15
 8004fce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004fd2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004fd6:	ed92 7b00 	vldr	d7, [r2]
 8004fda:	ea4f 122b 	mov.w	r2, fp, asr #4
 8004fde:	f000 8087 	beq.w	80050f0 <_dtoa_r+0x428>
 8004fe2:	49bc      	ldr	r1, [pc, #752]	; (80052d4 <_dtoa_r+0x60c>)
 8004fe4:	ed91 6b08 	vldr	d6, [r1, #32]
 8004fe8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004fec:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004ff0:	f002 020f 	and.w	r2, r2, #15
 8004ff4:	2103      	movs	r1, #3
 8004ff6:	48b7      	ldr	r0, [pc, #732]	; (80052d4 <_dtoa_r+0x60c>)
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d17b      	bne.n	80050f4 <_dtoa_r+0x42c>
 8004ffc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005000:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005004:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800500a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800500e:	2a00      	cmp	r2, #0
 8005010:	f000 80a0 	beq.w	8005154 <_dtoa_r+0x48c>
 8005014:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005018:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005020:	f140 8098 	bpl.w	8005154 <_dtoa_r+0x48c>
 8005024:	f1b9 0f00 	cmp.w	r9, #0
 8005028:	f000 8094 	beq.w	8005154 <_dtoa_r+0x48c>
 800502c:	f1ba 0f00 	cmp.w	sl, #0
 8005030:	dd2f      	ble.n	8005092 <_dtoa_r+0x3ca>
 8005032:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005036:	ee27 7b06 	vmul.f64	d7, d7, d6
 800503a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800503e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005042:	3101      	adds	r1, #1
 8005044:	4654      	mov	r4, sl
 8005046:	ed9d 6b02 	vldr	d6, [sp, #8]
 800504a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800504e:	ee07 1a90 	vmov	s15, r1
 8005052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005056:	eea7 5b06 	vfma.f64	d5, d7, d6
 800505a:	ee15 7a90 	vmov	r7, s11
 800505e:	ec51 0b15 	vmov	r0, r1, d5
 8005062:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005066:	2c00      	cmp	r4, #0
 8005068:	d177      	bne.n	800515a <_dtoa_r+0x492>
 800506a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800506e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005072:	ec41 0b17 	vmov	d7, r0, r1
 8005076:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507e:	f300 826a 	bgt.w	8005556 <_dtoa_r+0x88e>
 8005082:	eeb1 7b47 	vneg.f64	d7, d7
 8005086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	f100 8260 	bmi.w	8005552 <_dtoa_r+0x88a>
 8005092:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005098:	2a00      	cmp	r2, #0
 800509a:	f2c0 811d 	blt.w	80052d8 <_dtoa_r+0x610>
 800509e:	f1bb 0f0e 	cmp.w	fp, #14
 80050a2:	f300 8119 	bgt.w	80052d8 <_dtoa_r+0x610>
 80050a6:	4b8a      	ldr	r3, [pc, #552]	; (80052d0 <_dtoa_r+0x608>)
 80050a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050ac:	ed93 6b00 	vldr	d6, [r3]
 80050b0:	9b08      	ldr	r3, [sp, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f280 80b7 	bge.w	8005226 <_dtoa_r+0x55e>
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	f300 80b3 	bgt.w	8005226 <_dtoa_r+0x55e>
 80050c0:	f040 8246 	bne.w	8005550 <_dtoa_r+0x888>
 80050c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80050c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80050cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	464c      	mov	r4, r9
 80050da:	464f      	mov	r7, r9
 80050dc:	f280 821c 	bge.w	8005518 <_dtoa_r+0x850>
 80050e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80050e4:	2331      	movs	r3, #49	; 0x31
 80050e6:	f808 3b01 	strb.w	r3, [r8], #1
 80050ea:	f10b 0b01 	add.w	fp, fp, #1
 80050ee:	e218      	b.n	8005522 <_dtoa_r+0x85a>
 80050f0:	2102      	movs	r1, #2
 80050f2:	e780      	b.n	8004ff6 <_dtoa_r+0x32e>
 80050f4:	07d4      	lsls	r4, r2, #31
 80050f6:	d504      	bpl.n	8005102 <_dtoa_r+0x43a>
 80050f8:	ed90 6b00 	vldr	d6, [r0]
 80050fc:	3101      	adds	r1, #1
 80050fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005102:	1052      	asrs	r2, r2, #1
 8005104:	3008      	adds	r0, #8
 8005106:	e777      	b.n	8004ff8 <_dtoa_r+0x330>
 8005108:	d022      	beq.n	8005150 <_dtoa_r+0x488>
 800510a:	f1cb 0200 	rsb	r2, fp, #0
 800510e:	4970      	ldr	r1, [pc, #448]	; (80052d0 <_dtoa_r+0x608>)
 8005110:	f002 000f 	and.w	r0, r2, #15
 8005114:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005118:	ed91 7b00 	vldr	d7, [r1]
 800511c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005120:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005124:	486b      	ldr	r0, [pc, #428]	; (80052d4 <_dtoa_r+0x60c>)
 8005126:	1112      	asrs	r2, r2, #4
 8005128:	2400      	movs	r4, #0
 800512a:	2102      	movs	r1, #2
 800512c:	b92a      	cbnz	r2, 800513a <_dtoa_r+0x472>
 800512e:	2c00      	cmp	r4, #0
 8005130:	f43f af6a 	beq.w	8005008 <_dtoa_r+0x340>
 8005134:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005138:	e766      	b.n	8005008 <_dtoa_r+0x340>
 800513a:	07d7      	lsls	r7, r2, #31
 800513c:	d505      	bpl.n	800514a <_dtoa_r+0x482>
 800513e:	ed90 6b00 	vldr	d6, [r0]
 8005142:	3101      	adds	r1, #1
 8005144:	2401      	movs	r4, #1
 8005146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800514a:	1052      	asrs	r2, r2, #1
 800514c:	3008      	adds	r0, #8
 800514e:	e7ed      	b.n	800512c <_dtoa_r+0x464>
 8005150:	2102      	movs	r1, #2
 8005152:	e759      	b.n	8005008 <_dtoa_r+0x340>
 8005154:	465a      	mov	r2, fp
 8005156:	464c      	mov	r4, r9
 8005158:	e775      	b.n	8005046 <_dtoa_r+0x37e>
 800515a:	ec41 0b17 	vmov	d7, r0, r1
 800515e:	495c      	ldr	r1, [pc, #368]	; (80052d0 <_dtoa_r+0x608>)
 8005160:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005164:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005168:	9901      	ldr	r1, [sp, #4]
 800516a:	440c      	add	r4, r1
 800516c:	9907      	ldr	r1, [sp, #28]
 800516e:	b351      	cbz	r1, 80051c6 <_dtoa_r+0x4fe>
 8005170:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005174:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005178:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800517c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005180:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005184:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005188:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800518c:	ee14 1a90 	vmov	r1, s9
 8005190:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005194:	3130      	adds	r1, #48	; 0x30
 8005196:	ee36 6b45 	vsub.f64	d6, d6, d5
 800519a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a2:	f808 1b01 	strb.w	r1, [r8], #1
 80051a6:	d439      	bmi.n	800521c <_dtoa_r+0x554>
 80051a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80051ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	d472      	bmi.n	800529c <_dtoa_r+0x5d4>
 80051b6:	45a0      	cmp	r8, r4
 80051b8:	f43f af6b 	beq.w	8005092 <_dtoa_r+0x3ca>
 80051bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80051c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80051c4:	e7e0      	b.n	8005188 <_dtoa_r+0x4c0>
 80051c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80051ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80051ce:	4620      	mov	r0, r4
 80051d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80051d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80051d8:	ee14 1a90 	vmov	r1, s9
 80051dc:	3130      	adds	r1, #48	; 0x30
 80051de:	f808 1b01 	strb.w	r1, [r8], #1
 80051e2:	45a0      	cmp	r8, r4
 80051e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80051e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80051ec:	d118      	bne.n	8005220 <_dtoa_r+0x558>
 80051ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80051f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80051f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	dc4d      	bgt.n	800529c <_dtoa_r+0x5d4>
 8005200:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005204:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	f57f af41 	bpl.w	8005092 <_dtoa_r+0x3ca>
 8005210:	4680      	mov	r8, r0
 8005212:	3801      	subs	r0, #1
 8005214:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d0f9      	beq.n	8005210 <_dtoa_r+0x548>
 800521c:	4693      	mov	fp, r2
 800521e:	e02a      	b.n	8005276 <_dtoa_r+0x5ae>
 8005220:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005224:	e7d6      	b.n	80051d4 <_dtoa_r+0x50c>
 8005226:	ed9d 7b02 	vldr	d7, [sp, #8]
 800522a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800522e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005232:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005236:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800523a:	ee15 3a10 	vmov	r3, s10
 800523e:	3330      	adds	r3, #48	; 0x30
 8005240:	f808 3b01 	strb.w	r3, [r8], #1
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	eba8 0303 	sub.w	r3, r8, r3
 800524a:	4599      	cmp	r9, r3
 800524c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005250:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005254:	d133      	bne.n	80052be <_dtoa_r+0x5f6>
 8005256:	ee37 7b07 	vadd.f64	d7, d7, d7
 800525a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	dc1a      	bgt.n	800529a <_dtoa_r+0x5d2>
 8005264:	eeb4 7b46 	vcmp.f64	d7, d6
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d103      	bne.n	8005276 <_dtoa_r+0x5ae>
 800526e:	ee15 3a10 	vmov	r3, s10
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	d411      	bmi.n	800529a <_dtoa_r+0x5d2>
 8005276:	4629      	mov	r1, r5
 8005278:	4630      	mov	r0, r6
 800527a:	f000 fbd1 	bl	8005a20 <_Bfree>
 800527e:	2300      	movs	r3, #0
 8005280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005282:	f888 3000 	strb.w	r3, [r8]
 8005286:	f10b 0301 	add.w	r3, fp, #1
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800528e:	2b00      	cmp	r3, #0
 8005290:	f43f ad69 	beq.w	8004d66 <_dtoa_r+0x9e>
 8005294:	f8c3 8000 	str.w	r8, [r3]
 8005298:	e565      	b.n	8004d66 <_dtoa_r+0x9e>
 800529a:	465a      	mov	r2, fp
 800529c:	4643      	mov	r3, r8
 800529e:	4698      	mov	r8, r3
 80052a0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80052a4:	2939      	cmp	r1, #57	; 0x39
 80052a6:	d106      	bne.n	80052b6 <_dtoa_r+0x5ee>
 80052a8:	9901      	ldr	r1, [sp, #4]
 80052aa:	4299      	cmp	r1, r3
 80052ac:	d1f7      	bne.n	800529e <_dtoa_r+0x5d6>
 80052ae:	9801      	ldr	r0, [sp, #4]
 80052b0:	2130      	movs	r1, #48	; 0x30
 80052b2:	3201      	adds	r2, #1
 80052b4:	7001      	strb	r1, [r0, #0]
 80052b6:	7819      	ldrb	r1, [r3, #0]
 80052b8:	3101      	adds	r1, #1
 80052ba:	7019      	strb	r1, [r3, #0]
 80052bc:	e7ae      	b.n	800521c <_dtoa_r+0x554>
 80052be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80052c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d1b2      	bne.n	8005232 <_dtoa_r+0x56a>
 80052cc:	e7d3      	b.n	8005276 <_dtoa_r+0x5ae>
 80052ce:	bf00      	nop
 80052d0:	080069c8 	.word	0x080069c8
 80052d4:	080069a0 	.word	0x080069a0
 80052d8:	9907      	ldr	r1, [sp, #28]
 80052da:	2900      	cmp	r1, #0
 80052dc:	f000 80d0 	beq.w	8005480 <_dtoa_r+0x7b8>
 80052e0:	9906      	ldr	r1, [sp, #24]
 80052e2:	2901      	cmp	r1, #1
 80052e4:	f300 80b4 	bgt.w	8005450 <_dtoa_r+0x788>
 80052e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ea:	2900      	cmp	r1, #0
 80052ec:	f000 80ac 	beq.w	8005448 <_dtoa_r+0x780>
 80052f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80052f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80052f8:	461c      	mov	r4, r3
 80052fa:	9309      	str	r3, [sp, #36]	; 0x24
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	9b05      	ldr	r3, [sp, #20]
 8005304:	2101      	movs	r1, #1
 8005306:	4413      	add	r3, r2
 8005308:	4630      	mov	r0, r6
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	f000 fc3e 	bl	8005b8c <__i2b>
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	4607      	mov	r7, r0
 8005314:	f1b8 0f00 	cmp.w	r8, #0
 8005318:	d00d      	beq.n	8005336 <_dtoa_r+0x66e>
 800531a:	9a05      	ldr	r2, [sp, #20]
 800531c:	2a00      	cmp	r2, #0
 800531e:	dd0a      	ble.n	8005336 <_dtoa_r+0x66e>
 8005320:	4542      	cmp	r2, r8
 8005322:	9904      	ldr	r1, [sp, #16]
 8005324:	bfa8      	it	ge
 8005326:	4642      	movge	r2, r8
 8005328:	1a89      	subs	r1, r1, r2
 800532a:	9104      	str	r1, [sp, #16]
 800532c:	9905      	ldr	r1, [sp, #20]
 800532e:	eba8 0802 	sub.w	r8, r8, r2
 8005332:	1a8a      	subs	r2, r1, r2
 8005334:	9205      	str	r2, [sp, #20]
 8005336:	b303      	cbz	r3, 800537a <_dtoa_r+0x6b2>
 8005338:	9a07      	ldr	r2, [sp, #28]
 800533a:	2a00      	cmp	r2, #0
 800533c:	f000 80a5 	beq.w	800548a <_dtoa_r+0x7c2>
 8005340:	2c00      	cmp	r4, #0
 8005342:	dd13      	ble.n	800536c <_dtoa_r+0x6a4>
 8005344:	4639      	mov	r1, r7
 8005346:	4622      	mov	r2, r4
 8005348:	4630      	mov	r0, r6
 800534a:	930d      	str	r3, [sp, #52]	; 0x34
 800534c:	f000 fcde 	bl	8005d0c <__pow5mult>
 8005350:	462a      	mov	r2, r5
 8005352:	4601      	mov	r1, r0
 8005354:	4607      	mov	r7, r0
 8005356:	4630      	mov	r0, r6
 8005358:	f000 fc2e 	bl	8005bb8 <__multiply>
 800535c:	4629      	mov	r1, r5
 800535e:	9009      	str	r0, [sp, #36]	; 0x24
 8005360:	4630      	mov	r0, r6
 8005362:	f000 fb5d 	bl	8005a20 <_Bfree>
 8005366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800536a:	4615      	mov	r5, r2
 800536c:	1b1a      	subs	r2, r3, r4
 800536e:	d004      	beq.n	800537a <_dtoa_r+0x6b2>
 8005370:	4629      	mov	r1, r5
 8005372:	4630      	mov	r0, r6
 8005374:	f000 fcca 	bl	8005d0c <__pow5mult>
 8005378:	4605      	mov	r5, r0
 800537a:	2101      	movs	r1, #1
 800537c:	4630      	mov	r0, r6
 800537e:	f000 fc05 	bl	8005b8c <__i2b>
 8005382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	f340 8081 	ble.w	800548e <_dtoa_r+0x7c6>
 800538c:	461a      	mov	r2, r3
 800538e:	4601      	mov	r1, r0
 8005390:	4630      	mov	r0, r6
 8005392:	f000 fcbb 	bl	8005d0c <__pow5mult>
 8005396:	9b06      	ldr	r3, [sp, #24]
 8005398:	2b01      	cmp	r3, #1
 800539a:	4604      	mov	r4, r0
 800539c:	dd7a      	ble.n	8005494 <_dtoa_r+0x7cc>
 800539e:	2300      	movs	r3, #0
 80053a0:	9309      	str	r3, [sp, #36]	; 0x24
 80053a2:	6922      	ldr	r2, [r4, #16]
 80053a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80053a8:	6910      	ldr	r0, [r2, #16]
 80053aa:	f000 fba1 	bl	8005af0 <__hi0bits>
 80053ae:	f1c0 0020 	rsb	r0, r0, #32
 80053b2:	9b05      	ldr	r3, [sp, #20]
 80053b4:	4418      	add	r0, r3
 80053b6:	f010 001f 	ands.w	r0, r0, #31
 80053ba:	f000 8093 	beq.w	80054e4 <_dtoa_r+0x81c>
 80053be:	f1c0 0220 	rsb	r2, r0, #32
 80053c2:	2a04      	cmp	r2, #4
 80053c4:	f340 8085 	ble.w	80054d2 <_dtoa_r+0x80a>
 80053c8:	9b04      	ldr	r3, [sp, #16]
 80053ca:	f1c0 001c 	rsb	r0, r0, #28
 80053ce:	4403      	add	r3, r0
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	9b05      	ldr	r3, [sp, #20]
 80053d4:	4480      	add	r8, r0
 80053d6:	4403      	add	r3, r0
 80053d8:	9305      	str	r3, [sp, #20]
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dd05      	ble.n	80053ec <_dtoa_r+0x724>
 80053e0:	4629      	mov	r1, r5
 80053e2:	461a      	mov	r2, r3
 80053e4:	4630      	mov	r0, r6
 80053e6:	f000 fceb 	bl	8005dc0 <__lshift>
 80053ea:	4605      	mov	r5, r0
 80053ec:	9b05      	ldr	r3, [sp, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dd05      	ble.n	80053fe <_dtoa_r+0x736>
 80053f2:	4621      	mov	r1, r4
 80053f4:	461a      	mov	r2, r3
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 fce2 	bl	8005dc0 <__lshift>
 80053fc:	4604      	mov	r4, r0
 80053fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d071      	beq.n	80054e8 <_dtoa_r+0x820>
 8005404:	4621      	mov	r1, r4
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fd46 	bl	8005e98 <__mcmp>
 800540c:	2800      	cmp	r0, #0
 800540e:	da6b      	bge.n	80054e8 <_dtoa_r+0x820>
 8005410:	2300      	movs	r3, #0
 8005412:	4629      	mov	r1, r5
 8005414:	220a      	movs	r2, #10
 8005416:	4630      	mov	r0, r6
 8005418:	f000 fb24 	bl	8005a64 <__multadd>
 800541c:	9b07      	ldr	r3, [sp, #28]
 800541e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005422:	4605      	mov	r5, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8197 	beq.w	8005758 <_dtoa_r+0xa90>
 800542a:	4639      	mov	r1, r7
 800542c:	2300      	movs	r3, #0
 800542e:	220a      	movs	r2, #10
 8005430:	4630      	mov	r0, r6
 8005432:	f000 fb17 	bl	8005a64 <__multadd>
 8005436:	f1ba 0f00 	cmp.w	sl, #0
 800543a:	4607      	mov	r7, r0
 800543c:	f300 8093 	bgt.w	8005566 <_dtoa_r+0x89e>
 8005440:	9b06      	ldr	r3, [sp, #24]
 8005442:	2b02      	cmp	r3, #2
 8005444:	dc57      	bgt.n	80054f6 <_dtoa_r+0x82e>
 8005446:	e08e      	b.n	8005566 <_dtoa_r+0x89e>
 8005448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800544a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800544e:	e751      	b.n	80052f4 <_dtoa_r+0x62c>
 8005450:	f109 34ff 	add.w	r4, r9, #4294967295
 8005454:	42a3      	cmp	r3, r4
 8005456:	bfbf      	itttt	lt
 8005458:	1ae2      	sublt	r2, r4, r3
 800545a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800545c:	189b      	addlt	r3, r3, r2
 800545e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005460:	bfae      	itee	ge
 8005462:	1b1c      	subge	r4, r3, r4
 8005464:	4623      	movlt	r3, r4
 8005466:	2400      	movlt	r4, #0
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	bfb5      	itete	lt
 800546e:	9a04      	ldrlt	r2, [sp, #16]
 8005470:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005474:	eba2 0809 	sublt.w	r8, r2, r9
 8005478:	464a      	movge	r2, r9
 800547a:	bfb8      	it	lt
 800547c:	2200      	movlt	r2, #0
 800547e:	e73c      	b.n	80052fa <_dtoa_r+0x632>
 8005480:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005484:	9f07      	ldr	r7, [sp, #28]
 8005486:	461c      	mov	r4, r3
 8005488:	e744      	b.n	8005314 <_dtoa_r+0x64c>
 800548a:	461a      	mov	r2, r3
 800548c:	e770      	b.n	8005370 <_dtoa_r+0x6a8>
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	dc18      	bgt.n	80054c6 <_dtoa_r+0x7fe>
 8005494:	9b02      	ldr	r3, [sp, #8]
 8005496:	b9b3      	cbnz	r3, 80054c6 <_dtoa_r+0x7fe>
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800549e:	b9a2      	cbnz	r2, 80054ca <_dtoa_r+0x802>
 80054a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054a4:	0d12      	lsrs	r2, r2, #20
 80054a6:	0512      	lsls	r2, r2, #20
 80054a8:	b18a      	cbz	r2, 80054ce <_dtoa_r+0x806>
 80054aa:	9b04      	ldr	r3, [sp, #16]
 80054ac:	3301      	adds	r3, #1
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	9b05      	ldr	r3, [sp, #20]
 80054b2:	3301      	adds	r3, #1
 80054b4:	9305      	str	r3, [sp, #20]
 80054b6:	2301      	movs	r3, #1
 80054b8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f47f af70 	bne.w	80053a2 <_dtoa_r+0x6da>
 80054c2:	2001      	movs	r0, #1
 80054c4:	e775      	b.n	80053b2 <_dtoa_r+0x6ea>
 80054c6:	2300      	movs	r3, #0
 80054c8:	e7f6      	b.n	80054b8 <_dtoa_r+0x7f0>
 80054ca:	9b02      	ldr	r3, [sp, #8]
 80054cc:	e7f4      	b.n	80054b8 <_dtoa_r+0x7f0>
 80054ce:	9209      	str	r2, [sp, #36]	; 0x24
 80054d0:	e7f3      	b.n	80054ba <_dtoa_r+0x7f2>
 80054d2:	d082      	beq.n	80053da <_dtoa_r+0x712>
 80054d4:	9b04      	ldr	r3, [sp, #16]
 80054d6:	321c      	adds	r2, #28
 80054d8:	4413      	add	r3, r2
 80054da:	9304      	str	r3, [sp, #16]
 80054dc:	9b05      	ldr	r3, [sp, #20]
 80054de:	4490      	add	r8, r2
 80054e0:	4413      	add	r3, r2
 80054e2:	e779      	b.n	80053d8 <_dtoa_r+0x710>
 80054e4:	4602      	mov	r2, r0
 80054e6:	e7f5      	b.n	80054d4 <_dtoa_r+0x80c>
 80054e8:	f1b9 0f00 	cmp.w	r9, #0
 80054ec:	dc36      	bgt.n	800555c <_dtoa_r+0x894>
 80054ee:	9b06      	ldr	r3, [sp, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	dd33      	ble.n	800555c <_dtoa_r+0x894>
 80054f4:	46ca      	mov	sl, r9
 80054f6:	f1ba 0f00 	cmp.w	sl, #0
 80054fa:	d10d      	bne.n	8005518 <_dtoa_r+0x850>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4653      	mov	r3, sl
 8005500:	2205      	movs	r2, #5
 8005502:	4630      	mov	r0, r6
 8005504:	f000 faae 	bl	8005a64 <__multadd>
 8005508:	4601      	mov	r1, r0
 800550a:	4604      	mov	r4, r0
 800550c:	4628      	mov	r0, r5
 800550e:	f000 fcc3 	bl	8005e98 <__mcmp>
 8005512:	2800      	cmp	r0, #0
 8005514:	f73f ade4 	bgt.w	80050e0 <_dtoa_r+0x418>
 8005518:	9b08      	ldr	r3, [sp, #32]
 800551a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800551e:	ea6f 0b03 	mvn.w	fp, r3
 8005522:	f04f 0900 	mov.w	r9, #0
 8005526:	4621      	mov	r1, r4
 8005528:	4630      	mov	r0, r6
 800552a:	f000 fa79 	bl	8005a20 <_Bfree>
 800552e:	2f00      	cmp	r7, #0
 8005530:	f43f aea1 	beq.w	8005276 <_dtoa_r+0x5ae>
 8005534:	f1b9 0f00 	cmp.w	r9, #0
 8005538:	d005      	beq.n	8005546 <_dtoa_r+0x87e>
 800553a:	45b9      	cmp	r9, r7
 800553c:	d003      	beq.n	8005546 <_dtoa_r+0x87e>
 800553e:	4649      	mov	r1, r9
 8005540:	4630      	mov	r0, r6
 8005542:	f000 fa6d 	bl	8005a20 <_Bfree>
 8005546:	4639      	mov	r1, r7
 8005548:	4630      	mov	r0, r6
 800554a:	f000 fa69 	bl	8005a20 <_Bfree>
 800554e:	e692      	b.n	8005276 <_dtoa_r+0x5ae>
 8005550:	2400      	movs	r4, #0
 8005552:	4627      	mov	r7, r4
 8005554:	e7e0      	b.n	8005518 <_dtoa_r+0x850>
 8005556:	4693      	mov	fp, r2
 8005558:	4627      	mov	r7, r4
 800555a:	e5c1      	b.n	80050e0 <_dtoa_r+0x418>
 800555c:	9b07      	ldr	r3, [sp, #28]
 800555e:	46ca      	mov	sl, r9
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8100 	beq.w	8005766 <_dtoa_r+0xa9e>
 8005566:	f1b8 0f00 	cmp.w	r8, #0
 800556a:	dd05      	ble.n	8005578 <_dtoa_r+0x8b0>
 800556c:	4639      	mov	r1, r7
 800556e:	4642      	mov	r2, r8
 8005570:	4630      	mov	r0, r6
 8005572:	f000 fc25 	bl	8005dc0 <__lshift>
 8005576:	4607      	mov	r7, r0
 8005578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d05d      	beq.n	800563a <_dtoa_r+0x972>
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4630      	mov	r0, r6
 8005582:	f000 fa0d 	bl	80059a0 <_Balloc>
 8005586:	4680      	mov	r8, r0
 8005588:	b928      	cbnz	r0, 8005596 <_dtoa_r+0x8ce>
 800558a:	4b82      	ldr	r3, [pc, #520]	; (8005794 <_dtoa_r+0xacc>)
 800558c:	4602      	mov	r2, r0
 800558e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005592:	f7ff bbb1 	b.w	8004cf8 <_dtoa_r+0x30>
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	3202      	adds	r2, #2
 800559a:	0092      	lsls	r2, r2, #2
 800559c:	f107 010c 	add.w	r1, r7, #12
 80055a0:	300c      	adds	r0, #12
 80055a2:	f000 fe37 	bl	8006214 <memcpy>
 80055a6:	2201      	movs	r2, #1
 80055a8:	4641      	mov	r1, r8
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 fc08 	bl	8005dc0 <__lshift>
 80055b0:	9b01      	ldr	r3, [sp, #4]
 80055b2:	3301      	adds	r3, #1
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	4453      	add	r3, sl
 80055ba:	9308      	str	r3, [sp, #32]
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	46b9      	mov	r9, r7
 80055c4:	9307      	str	r3, [sp, #28]
 80055c6:	4607      	mov	r7, r0
 80055c8:	9b04      	ldr	r3, [sp, #16]
 80055ca:	4621      	mov	r1, r4
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4628      	mov	r0, r5
 80055d0:	9302      	str	r3, [sp, #8]
 80055d2:	f7ff faf1 	bl	8004bb8 <quorem>
 80055d6:	4603      	mov	r3, r0
 80055d8:	3330      	adds	r3, #48	; 0x30
 80055da:	9005      	str	r0, [sp, #20]
 80055dc:	4649      	mov	r1, r9
 80055de:	4628      	mov	r0, r5
 80055e0:	9309      	str	r3, [sp, #36]	; 0x24
 80055e2:	f000 fc59 	bl	8005e98 <__mcmp>
 80055e6:	463a      	mov	r2, r7
 80055e8:	4682      	mov	sl, r0
 80055ea:	4621      	mov	r1, r4
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 fc6f 	bl	8005ed0 <__mdiff>
 80055f2:	68c2      	ldr	r2, [r0, #12]
 80055f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f6:	4680      	mov	r8, r0
 80055f8:	bb0a      	cbnz	r2, 800563e <_dtoa_r+0x976>
 80055fa:	4601      	mov	r1, r0
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 fc4b 	bl	8005e98 <__mcmp>
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	4602      	mov	r2, r0
 8005606:	4641      	mov	r1, r8
 8005608:	4630      	mov	r0, r6
 800560a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800560e:	f000 fa07 	bl	8005a20 <_Bfree>
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005616:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800561a:	ea43 0102 	orr.w	r1, r3, r2
 800561e:	9b07      	ldr	r3, [sp, #28]
 8005620:	4319      	orrs	r1, r3
 8005622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005624:	d10d      	bne.n	8005642 <_dtoa_r+0x97a>
 8005626:	2b39      	cmp	r3, #57	; 0x39
 8005628:	d029      	beq.n	800567e <_dtoa_r+0x9b6>
 800562a:	f1ba 0f00 	cmp.w	sl, #0
 800562e:	dd01      	ble.n	8005634 <_dtoa_r+0x96c>
 8005630:	9b05      	ldr	r3, [sp, #20]
 8005632:	3331      	adds	r3, #49	; 0x31
 8005634:	9a02      	ldr	r2, [sp, #8]
 8005636:	7013      	strb	r3, [r2, #0]
 8005638:	e775      	b.n	8005526 <_dtoa_r+0x85e>
 800563a:	4638      	mov	r0, r7
 800563c:	e7b8      	b.n	80055b0 <_dtoa_r+0x8e8>
 800563e:	2201      	movs	r2, #1
 8005640:	e7e1      	b.n	8005606 <_dtoa_r+0x93e>
 8005642:	f1ba 0f00 	cmp.w	sl, #0
 8005646:	db06      	blt.n	8005656 <_dtoa_r+0x98e>
 8005648:	9906      	ldr	r1, [sp, #24]
 800564a:	ea41 0a0a 	orr.w	sl, r1, sl
 800564e:	9907      	ldr	r1, [sp, #28]
 8005650:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005654:	d120      	bne.n	8005698 <_dtoa_r+0x9d0>
 8005656:	2a00      	cmp	r2, #0
 8005658:	ddec      	ble.n	8005634 <_dtoa_r+0x96c>
 800565a:	4629      	mov	r1, r5
 800565c:	2201      	movs	r2, #1
 800565e:	4630      	mov	r0, r6
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	f000 fbad 	bl	8005dc0 <__lshift>
 8005666:	4621      	mov	r1, r4
 8005668:	4605      	mov	r5, r0
 800566a:	f000 fc15 	bl	8005e98 <__mcmp>
 800566e:	2800      	cmp	r0, #0
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	dc02      	bgt.n	800567a <_dtoa_r+0x9b2>
 8005674:	d1de      	bne.n	8005634 <_dtoa_r+0x96c>
 8005676:	07da      	lsls	r2, r3, #31
 8005678:	d5dc      	bpl.n	8005634 <_dtoa_r+0x96c>
 800567a:	2b39      	cmp	r3, #57	; 0x39
 800567c:	d1d8      	bne.n	8005630 <_dtoa_r+0x968>
 800567e:	9a02      	ldr	r2, [sp, #8]
 8005680:	2339      	movs	r3, #57	; 0x39
 8005682:	7013      	strb	r3, [r2, #0]
 8005684:	4643      	mov	r3, r8
 8005686:	4698      	mov	r8, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800568e:	2a39      	cmp	r2, #57	; 0x39
 8005690:	d051      	beq.n	8005736 <_dtoa_r+0xa6e>
 8005692:	3201      	adds	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e746      	b.n	8005526 <_dtoa_r+0x85e>
 8005698:	2a00      	cmp	r2, #0
 800569a:	dd03      	ble.n	80056a4 <_dtoa_r+0x9dc>
 800569c:	2b39      	cmp	r3, #57	; 0x39
 800569e:	d0ee      	beq.n	800567e <_dtoa_r+0x9b6>
 80056a0:	3301      	adds	r3, #1
 80056a2:	e7c7      	b.n	8005634 <_dtoa_r+0x96c>
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	9908      	ldr	r1, [sp, #32]
 80056a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80056ac:	428a      	cmp	r2, r1
 80056ae:	d02b      	beq.n	8005708 <_dtoa_r+0xa40>
 80056b0:	4629      	mov	r1, r5
 80056b2:	2300      	movs	r3, #0
 80056b4:	220a      	movs	r2, #10
 80056b6:	4630      	mov	r0, r6
 80056b8:	f000 f9d4 	bl	8005a64 <__multadd>
 80056bc:	45b9      	cmp	r9, r7
 80056be:	4605      	mov	r5, r0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f04f 020a 	mov.w	r2, #10
 80056c8:	4649      	mov	r1, r9
 80056ca:	4630      	mov	r0, r6
 80056cc:	d107      	bne.n	80056de <_dtoa_r+0xa16>
 80056ce:	f000 f9c9 	bl	8005a64 <__multadd>
 80056d2:	4681      	mov	r9, r0
 80056d4:	4607      	mov	r7, r0
 80056d6:	9b04      	ldr	r3, [sp, #16]
 80056d8:	3301      	adds	r3, #1
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	e774      	b.n	80055c8 <_dtoa_r+0x900>
 80056de:	f000 f9c1 	bl	8005a64 <__multadd>
 80056e2:	4639      	mov	r1, r7
 80056e4:	4681      	mov	r9, r0
 80056e6:	2300      	movs	r3, #0
 80056e8:	220a      	movs	r2, #10
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 f9ba 	bl	8005a64 <__multadd>
 80056f0:	4607      	mov	r7, r0
 80056f2:	e7f0      	b.n	80056d6 <_dtoa_r+0xa0e>
 80056f4:	f1ba 0f00 	cmp.w	sl, #0
 80056f8:	9a01      	ldr	r2, [sp, #4]
 80056fa:	bfcc      	ite	gt
 80056fc:	46d0      	movgt	r8, sl
 80056fe:	f04f 0801 	movle.w	r8, #1
 8005702:	4490      	add	r8, r2
 8005704:	f04f 0900 	mov.w	r9, #0
 8005708:	4629      	mov	r1, r5
 800570a:	2201      	movs	r2, #1
 800570c:	4630      	mov	r0, r6
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	f000 fb56 	bl	8005dc0 <__lshift>
 8005714:	4621      	mov	r1, r4
 8005716:	4605      	mov	r5, r0
 8005718:	f000 fbbe 	bl	8005e98 <__mcmp>
 800571c:	2800      	cmp	r0, #0
 800571e:	dcb1      	bgt.n	8005684 <_dtoa_r+0x9bc>
 8005720:	d102      	bne.n	8005728 <_dtoa_r+0xa60>
 8005722:	9b02      	ldr	r3, [sp, #8]
 8005724:	07db      	lsls	r3, r3, #31
 8005726:	d4ad      	bmi.n	8005684 <_dtoa_r+0x9bc>
 8005728:	4643      	mov	r3, r8
 800572a:	4698      	mov	r8, r3
 800572c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005730:	2a30      	cmp	r2, #48	; 0x30
 8005732:	d0fa      	beq.n	800572a <_dtoa_r+0xa62>
 8005734:	e6f7      	b.n	8005526 <_dtoa_r+0x85e>
 8005736:	9a01      	ldr	r2, [sp, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d1a4      	bne.n	8005686 <_dtoa_r+0x9be>
 800573c:	f10b 0b01 	add.w	fp, fp, #1
 8005740:	2331      	movs	r3, #49	; 0x31
 8005742:	e778      	b.n	8005636 <_dtoa_r+0x96e>
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <_dtoa_r+0xad0>)
 8005746:	f7ff bb2a 	b.w	8004d9e <_dtoa_r+0xd6>
 800574a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800574c:	2b00      	cmp	r3, #0
 800574e:	f47f ab05 	bne.w	8004d5c <_dtoa_r+0x94>
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <_dtoa_r+0xad4>)
 8005754:	f7ff bb23 	b.w	8004d9e <_dtoa_r+0xd6>
 8005758:	f1ba 0f00 	cmp.w	sl, #0
 800575c:	dc03      	bgt.n	8005766 <_dtoa_r+0xa9e>
 800575e:	9b06      	ldr	r3, [sp, #24]
 8005760:	2b02      	cmp	r3, #2
 8005762:	f73f aec8 	bgt.w	80054f6 <_dtoa_r+0x82e>
 8005766:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800576a:	4621      	mov	r1, r4
 800576c:	4628      	mov	r0, r5
 800576e:	f7ff fa23 	bl	8004bb8 <quorem>
 8005772:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005776:	f808 3b01 	strb.w	r3, [r8], #1
 800577a:	9a01      	ldr	r2, [sp, #4]
 800577c:	eba8 0202 	sub.w	r2, r8, r2
 8005780:	4592      	cmp	sl, r2
 8005782:	ddb7      	ble.n	80056f4 <_dtoa_r+0xa2c>
 8005784:	4629      	mov	r1, r5
 8005786:	2300      	movs	r3, #0
 8005788:	220a      	movs	r2, #10
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f96a 	bl	8005a64 <__multadd>
 8005790:	4605      	mov	r5, r0
 8005792:	e7ea      	b.n	800576a <_dtoa_r+0xaa2>
 8005794:	08006930 	.word	0x08006930
 8005798:	08006890 	.word	0x08006890
 800579c:	080068b4 	.word	0x080068b4

080057a0 <_free_r>:
 80057a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d044      	beq.n	8005830 <_free_r+0x90>
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	9001      	str	r0, [sp, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f1a1 0404 	sub.w	r4, r1, #4
 80057b2:	bfb8      	it	lt
 80057b4:	18e4      	addlt	r4, r4, r3
 80057b6:	f000 f8e7 	bl	8005988 <__malloc_lock>
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <_free_r+0x94>)
 80057bc:	9801      	ldr	r0, [sp, #4]
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	b933      	cbnz	r3, 80057d0 <_free_r+0x30>
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	6014      	str	r4, [r2, #0]
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057cc:	f000 b8e2 	b.w	8005994 <__malloc_unlock>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d908      	bls.n	80057e6 <_free_r+0x46>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf01      	itttt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	1949      	addeq	r1, r1, r5
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	e7ed      	b.n	80057c2 <_free_r+0x22>
 80057e6:	461a      	mov	r2, r3
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b10b      	cbz	r3, 80057f0 <_free_r+0x50>
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d9fa      	bls.n	80057e6 <_free_r+0x46>
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	1855      	adds	r5, r2, r1
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d10b      	bne.n	8005810 <_free_r+0x70>
 80057f8:	6824      	ldr	r4, [r4, #0]
 80057fa:	4421      	add	r1, r4
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	42a3      	cmp	r3, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	d1e0      	bne.n	80057c6 <_free_r+0x26>
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	440c      	add	r4, r1
 800580c:	6014      	str	r4, [r2, #0]
 800580e:	e7da      	b.n	80057c6 <_free_r+0x26>
 8005810:	d902      	bls.n	8005818 <_free_r+0x78>
 8005812:	230c      	movs	r3, #12
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	e7d6      	b.n	80057c6 <_free_r+0x26>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf04      	itt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	bf04      	itt	eq
 8005828:	1949      	addeq	r1, r1, r5
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	6054      	str	r4, [r2, #4]
 800582e:	e7ca      	b.n	80057c6 <_free_r+0x26>
 8005830:	b003      	add	sp, #12
 8005832:	bd30      	pop	{r4, r5, pc}
 8005834:	20000414 	.word	0x20000414

08005838 <malloc>:
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <malloc+0xc>)
 800583a:	4601      	mov	r1, r0
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f000 b823 	b.w	8005888 <_malloc_r>
 8005842:	bf00      	nop
 8005844:	20000064 	.word	0x20000064

08005848 <sbrk_aligned>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4e0e      	ldr	r6, [pc, #56]	; (8005884 <sbrk_aligned+0x3c>)
 800584c:	460c      	mov	r4, r1
 800584e:	6831      	ldr	r1, [r6, #0]
 8005850:	4605      	mov	r5, r0
 8005852:	b911      	cbnz	r1, 800585a <sbrk_aligned+0x12>
 8005854:	f000 fcce 	bl	80061f4 <_sbrk_r>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 fcc9 	bl	80061f4 <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d00a      	beq.n	800587c <sbrk_aligned+0x34>
 8005866:	1cc4      	adds	r4, r0, #3
 8005868:	f024 0403 	bic.w	r4, r4, #3
 800586c:	42a0      	cmp	r0, r4
 800586e:	d007      	beq.n	8005880 <sbrk_aligned+0x38>
 8005870:	1a21      	subs	r1, r4, r0
 8005872:	4628      	mov	r0, r5
 8005874:	f000 fcbe 	bl	80061f4 <_sbrk_r>
 8005878:	3001      	adds	r0, #1
 800587a:	d101      	bne.n	8005880 <sbrk_aligned+0x38>
 800587c:	f04f 34ff 	mov.w	r4, #4294967295
 8005880:	4620      	mov	r0, r4
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	20000418 	.word	0x20000418

08005888 <_malloc_r>:
 8005888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800588c:	1ccd      	adds	r5, r1, #3
 800588e:	f025 0503 	bic.w	r5, r5, #3
 8005892:	3508      	adds	r5, #8
 8005894:	2d0c      	cmp	r5, #12
 8005896:	bf38      	it	cc
 8005898:	250c      	movcc	r5, #12
 800589a:	2d00      	cmp	r5, #0
 800589c:	4607      	mov	r7, r0
 800589e:	db01      	blt.n	80058a4 <_malloc_r+0x1c>
 80058a0:	42a9      	cmp	r1, r5
 80058a2:	d905      	bls.n	80058b0 <_malloc_r+0x28>
 80058a4:	230c      	movs	r3, #12
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	2600      	movs	r6, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005984 <_malloc_r+0xfc>
 80058b4:	f000 f868 	bl	8005988 <__malloc_lock>
 80058b8:	f8d8 3000 	ldr.w	r3, [r8]
 80058bc:	461c      	mov	r4, r3
 80058be:	bb5c      	cbnz	r4, 8005918 <_malloc_r+0x90>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ffc0 	bl	8005848 <sbrk_aligned>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	4604      	mov	r4, r0
 80058cc:	d155      	bne.n	800597a <_malloc_r+0xf2>
 80058ce:	f8d8 4000 	ldr.w	r4, [r8]
 80058d2:	4626      	mov	r6, r4
 80058d4:	2e00      	cmp	r6, #0
 80058d6:	d145      	bne.n	8005964 <_malloc_r+0xdc>
 80058d8:	2c00      	cmp	r4, #0
 80058da:	d048      	beq.n	800596e <_malloc_r+0xe6>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	4631      	mov	r1, r6
 80058e0:	4638      	mov	r0, r7
 80058e2:	eb04 0903 	add.w	r9, r4, r3
 80058e6:	f000 fc85 	bl	80061f4 <_sbrk_r>
 80058ea:	4581      	cmp	r9, r0
 80058ec:	d13f      	bne.n	800596e <_malloc_r+0xe6>
 80058ee:	6821      	ldr	r1, [r4, #0]
 80058f0:	1a6d      	subs	r5, r5, r1
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ffa7 	bl	8005848 <sbrk_aligned>
 80058fa:	3001      	adds	r0, #1
 80058fc:	d037      	beq.n	800596e <_malloc_r+0xe6>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	442b      	add	r3, r5
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	f8d8 3000 	ldr.w	r3, [r8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d038      	beq.n	800597e <_malloc_r+0xf6>
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	42a2      	cmp	r2, r4
 8005910:	d12b      	bne.n	800596a <_malloc_r+0xe2>
 8005912:	2200      	movs	r2, #0
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	e00f      	b.n	8005938 <_malloc_r+0xb0>
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	1b52      	subs	r2, r2, r5
 800591c:	d41f      	bmi.n	800595e <_malloc_r+0xd6>
 800591e:	2a0b      	cmp	r2, #11
 8005920:	d917      	bls.n	8005952 <_malloc_r+0xca>
 8005922:	1961      	adds	r1, r4, r5
 8005924:	42a3      	cmp	r3, r4
 8005926:	6025      	str	r5, [r4, #0]
 8005928:	bf18      	it	ne
 800592a:	6059      	strne	r1, [r3, #4]
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	bf08      	it	eq
 8005930:	f8c8 1000 	streq.w	r1, [r8]
 8005934:	5162      	str	r2, [r4, r5]
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	4638      	mov	r0, r7
 800593a:	f104 060b 	add.w	r6, r4, #11
 800593e:	f000 f829 	bl	8005994 <__malloc_unlock>
 8005942:	f026 0607 	bic.w	r6, r6, #7
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	1af2      	subs	r2, r6, r3
 800594a:	d0ae      	beq.n	80058aa <_malloc_r+0x22>
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	50a3      	str	r3, [r4, r2]
 8005950:	e7ab      	b.n	80058aa <_malloc_r+0x22>
 8005952:	42a3      	cmp	r3, r4
 8005954:	6862      	ldr	r2, [r4, #4]
 8005956:	d1dd      	bne.n	8005914 <_malloc_r+0x8c>
 8005958:	f8c8 2000 	str.w	r2, [r8]
 800595c:	e7ec      	b.n	8005938 <_malloc_r+0xb0>
 800595e:	4623      	mov	r3, r4
 8005960:	6864      	ldr	r4, [r4, #4]
 8005962:	e7ac      	b.n	80058be <_malloc_r+0x36>
 8005964:	4634      	mov	r4, r6
 8005966:	6876      	ldr	r6, [r6, #4]
 8005968:	e7b4      	b.n	80058d4 <_malloc_r+0x4c>
 800596a:	4613      	mov	r3, r2
 800596c:	e7cc      	b.n	8005908 <_malloc_r+0x80>
 800596e:	230c      	movs	r3, #12
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4638      	mov	r0, r7
 8005974:	f000 f80e 	bl	8005994 <__malloc_unlock>
 8005978:	e797      	b.n	80058aa <_malloc_r+0x22>
 800597a:	6025      	str	r5, [r4, #0]
 800597c:	e7dc      	b.n	8005938 <_malloc_r+0xb0>
 800597e:	605b      	str	r3, [r3, #4]
 8005980:	deff      	udf	#255	; 0xff
 8005982:	bf00      	nop
 8005984:	20000414 	.word	0x20000414

08005988 <__malloc_lock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_lock+0x8>)
 800598a:	f7ff b913 	b.w	8004bb4 <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	20000410 	.word	0x20000410

08005994 <__malloc_unlock>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__malloc_unlock+0x8>)
 8005996:	f7ff b90e 	b.w	8004bb6 <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	20000410 	.word	0x20000410

080059a0 <_Balloc>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	69c6      	ldr	r6, [r0, #28]
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	b976      	cbnz	r6, 80059c8 <_Balloc+0x28>
 80059aa:	2010      	movs	r0, #16
 80059ac:	f7ff ff44 	bl	8005838 <malloc>
 80059b0:	4602      	mov	r2, r0
 80059b2:	61e0      	str	r0, [r4, #28]
 80059b4:	b920      	cbnz	r0, 80059c0 <_Balloc+0x20>
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <_Balloc+0x78>)
 80059b8:	4818      	ldr	r0, [pc, #96]	; (8005a1c <_Balloc+0x7c>)
 80059ba:	216b      	movs	r1, #107	; 0x6b
 80059bc:	f000 fc38 	bl	8006230 <__assert_func>
 80059c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059c4:	6006      	str	r6, [r0, #0]
 80059c6:	60c6      	str	r6, [r0, #12]
 80059c8:	69e6      	ldr	r6, [r4, #28]
 80059ca:	68f3      	ldr	r3, [r6, #12]
 80059cc:	b183      	cbz	r3, 80059f0 <_Balloc+0x50>
 80059ce:	69e3      	ldr	r3, [r4, #28]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059d6:	b9b8      	cbnz	r0, 8005a08 <_Balloc+0x68>
 80059d8:	2101      	movs	r1, #1
 80059da:	fa01 f605 	lsl.w	r6, r1, r5
 80059de:	1d72      	adds	r2, r6, #5
 80059e0:	0092      	lsls	r2, r2, #2
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fc42 	bl	800626c <_calloc_r>
 80059e8:	b160      	cbz	r0, 8005a04 <_Balloc+0x64>
 80059ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059ee:	e00e      	b.n	8005a0e <_Balloc+0x6e>
 80059f0:	2221      	movs	r2, #33	; 0x21
 80059f2:	2104      	movs	r1, #4
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 fc39 	bl	800626c <_calloc_r>
 80059fa:	69e3      	ldr	r3, [r4, #28]
 80059fc:	60f0      	str	r0, [r6, #12]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e4      	bne.n	80059ce <_Balloc+0x2e>
 8005a04:	2000      	movs	r0, #0
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
 8005a08:	6802      	ldr	r2, [r0, #0]
 8005a0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a14:	e7f7      	b.n	8005a06 <_Balloc+0x66>
 8005a16:	bf00      	nop
 8005a18:	080068c1 	.word	0x080068c1
 8005a1c:	08006941 	.word	0x08006941

08005a20 <_Bfree>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	69c6      	ldr	r6, [r0, #28]
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	b976      	cbnz	r6, 8005a48 <_Bfree+0x28>
 8005a2a:	2010      	movs	r0, #16
 8005a2c:	f7ff ff04 	bl	8005838 <malloc>
 8005a30:	4602      	mov	r2, r0
 8005a32:	61e8      	str	r0, [r5, #28]
 8005a34:	b920      	cbnz	r0, 8005a40 <_Bfree+0x20>
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <_Bfree+0x3c>)
 8005a38:	4809      	ldr	r0, [pc, #36]	; (8005a60 <_Bfree+0x40>)
 8005a3a:	218f      	movs	r1, #143	; 0x8f
 8005a3c:	f000 fbf8 	bl	8006230 <__assert_func>
 8005a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a44:	6006      	str	r6, [r0, #0]
 8005a46:	60c6      	str	r6, [r0, #12]
 8005a48:	b13c      	cbz	r4, 8005a5a <_Bfree+0x3a>
 8005a4a:	69eb      	ldr	r3, [r5, #28]
 8005a4c:	6862      	ldr	r2, [r4, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a54:	6021      	str	r1, [r4, #0]
 8005a56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	080068c1 	.word	0x080068c1
 8005a60:	08006941 	.word	0x08006941

08005a64 <__multadd>:
 8005a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a68:	690d      	ldr	r5, [r1, #16]
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	461e      	mov	r6, r3
 8005a70:	f101 0c14 	add.w	ip, r1, #20
 8005a74:	2000      	movs	r0, #0
 8005a76:	f8dc 3000 	ldr.w	r3, [ip]
 8005a7a:	b299      	uxth	r1, r3
 8005a7c:	fb02 6101 	mla	r1, r2, r1, r6
 8005a80:	0c1e      	lsrs	r6, r3, #16
 8005a82:	0c0b      	lsrs	r3, r1, #16
 8005a84:	fb02 3306 	mla	r3, r2, r6, r3
 8005a88:	b289      	uxth	r1, r1
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a90:	4285      	cmp	r5, r0
 8005a92:	f84c 1b04 	str.w	r1, [ip], #4
 8005a96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a9a:	dcec      	bgt.n	8005a76 <__multadd+0x12>
 8005a9c:	b30e      	cbz	r6, 8005ae2 <__multadd+0x7e>
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	dc19      	bgt.n	8005ad8 <__multadd+0x74>
 8005aa4:	6861      	ldr	r1, [r4, #4]
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	3101      	adds	r1, #1
 8005aaa:	f7ff ff79 	bl	80059a0 <_Balloc>
 8005aae:	4680      	mov	r8, r0
 8005ab0:	b928      	cbnz	r0, 8005abe <__multadd+0x5a>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <__multadd+0x84>)
 8005ab6:	480d      	ldr	r0, [pc, #52]	; (8005aec <__multadd+0x88>)
 8005ab8:	21ba      	movs	r1, #186	; 0xba
 8005aba:	f000 fbb9 	bl	8006230 <__assert_func>
 8005abe:	6922      	ldr	r2, [r4, #16]
 8005ac0:	3202      	adds	r2, #2
 8005ac2:	f104 010c 	add.w	r1, r4, #12
 8005ac6:	0092      	lsls	r2, r2, #2
 8005ac8:	300c      	adds	r0, #12
 8005aca:	f000 fba3 	bl	8006214 <memcpy>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ffa5 	bl	8005a20 <_Bfree>
 8005ad6:	4644      	mov	r4, r8
 8005ad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005adc:	3501      	adds	r5, #1
 8005ade:	615e      	str	r6, [r3, #20]
 8005ae0:	6125      	str	r5, [r4, #16]
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae8:	08006930 	.word	0x08006930
 8005aec:	08006941 	.word	0x08006941

08005af0 <__hi0bits>:
 8005af0:	0c03      	lsrs	r3, r0, #16
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	b9d3      	cbnz	r3, 8005b2c <__hi0bits+0x3c>
 8005af6:	0400      	lsls	r0, r0, #16
 8005af8:	2310      	movs	r3, #16
 8005afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005afe:	bf04      	itt	eq
 8005b00:	0200      	lsleq	r0, r0, #8
 8005b02:	3308      	addeq	r3, #8
 8005b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b08:	bf04      	itt	eq
 8005b0a:	0100      	lsleq	r0, r0, #4
 8005b0c:	3304      	addeq	r3, #4
 8005b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b12:	bf04      	itt	eq
 8005b14:	0080      	lsleq	r0, r0, #2
 8005b16:	3302      	addeq	r3, #2
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	db05      	blt.n	8005b28 <__hi0bits+0x38>
 8005b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b20:	f103 0301 	add.w	r3, r3, #1
 8005b24:	bf08      	it	eq
 8005b26:	2320      	moveq	r3, #32
 8005b28:	4618      	mov	r0, r3
 8005b2a:	4770      	bx	lr
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e7e4      	b.n	8005afa <__hi0bits+0xa>

08005b30 <__lo0bits>:
 8005b30:	6803      	ldr	r3, [r0, #0]
 8005b32:	f013 0207 	ands.w	r2, r3, #7
 8005b36:	d00c      	beq.n	8005b52 <__lo0bits+0x22>
 8005b38:	07d9      	lsls	r1, r3, #31
 8005b3a:	d422      	bmi.n	8005b82 <__lo0bits+0x52>
 8005b3c:	079a      	lsls	r2, r3, #30
 8005b3e:	bf49      	itett	mi
 8005b40:	085b      	lsrmi	r3, r3, #1
 8005b42:	089b      	lsrpl	r3, r3, #2
 8005b44:	6003      	strmi	r3, [r0, #0]
 8005b46:	2201      	movmi	r2, #1
 8005b48:	bf5c      	itt	pl
 8005b4a:	6003      	strpl	r3, [r0, #0]
 8005b4c:	2202      	movpl	r2, #2
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4770      	bx	lr
 8005b52:	b299      	uxth	r1, r3
 8005b54:	b909      	cbnz	r1, 8005b5a <__lo0bits+0x2a>
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	2210      	movs	r2, #16
 8005b5a:	b2d9      	uxtb	r1, r3
 8005b5c:	b909      	cbnz	r1, 8005b62 <__lo0bits+0x32>
 8005b5e:	3208      	adds	r2, #8
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	0719      	lsls	r1, r3, #28
 8005b64:	bf04      	itt	eq
 8005b66:	091b      	lsreq	r3, r3, #4
 8005b68:	3204      	addeq	r2, #4
 8005b6a:	0799      	lsls	r1, r3, #30
 8005b6c:	bf04      	itt	eq
 8005b6e:	089b      	lsreq	r3, r3, #2
 8005b70:	3202      	addeq	r2, #2
 8005b72:	07d9      	lsls	r1, r3, #31
 8005b74:	d403      	bmi.n	8005b7e <__lo0bits+0x4e>
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	f102 0201 	add.w	r2, r2, #1
 8005b7c:	d003      	beq.n	8005b86 <__lo0bits+0x56>
 8005b7e:	6003      	str	r3, [r0, #0]
 8005b80:	e7e5      	b.n	8005b4e <__lo0bits+0x1e>
 8005b82:	2200      	movs	r2, #0
 8005b84:	e7e3      	b.n	8005b4e <__lo0bits+0x1e>
 8005b86:	2220      	movs	r2, #32
 8005b88:	e7e1      	b.n	8005b4e <__lo0bits+0x1e>
	...

08005b8c <__i2b>:
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	460c      	mov	r4, r1
 8005b90:	2101      	movs	r1, #1
 8005b92:	f7ff ff05 	bl	80059a0 <_Balloc>
 8005b96:	4602      	mov	r2, r0
 8005b98:	b928      	cbnz	r0, 8005ba6 <__i2b+0x1a>
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <__i2b+0x24>)
 8005b9c:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <__i2b+0x28>)
 8005b9e:	f240 1145 	movw	r1, #325	; 0x145
 8005ba2:	f000 fb45 	bl	8006230 <__assert_func>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	6144      	str	r4, [r0, #20]
 8005baa:	6103      	str	r3, [r0, #16]
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	bf00      	nop
 8005bb0:	08006930 	.word	0x08006930
 8005bb4:	08006941 	.word	0x08006941

08005bb8 <__multiply>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	4691      	mov	r9, r2
 8005bbe:	690a      	ldr	r2, [r1, #16]
 8005bc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	bfb8      	it	lt
 8005bc8:	460b      	movlt	r3, r1
 8005bca:	460c      	mov	r4, r1
 8005bcc:	bfbc      	itt	lt
 8005bce:	464c      	movlt	r4, r9
 8005bd0:	4699      	movlt	r9, r3
 8005bd2:	6927      	ldr	r7, [r4, #16]
 8005bd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bd8:	68a3      	ldr	r3, [r4, #8]
 8005bda:	6861      	ldr	r1, [r4, #4]
 8005bdc:	eb07 060a 	add.w	r6, r7, sl
 8005be0:	42b3      	cmp	r3, r6
 8005be2:	b085      	sub	sp, #20
 8005be4:	bfb8      	it	lt
 8005be6:	3101      	addlt	r1, #1
 8005be8:	f7ff feda 	bl	80059a0 <_Balloc>
 8005bec:	b930      	cbnz	r0, 8005bfc <__multiply+0x44>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	4b44      	ldr	r3, [pc, #272]	; (8005d04 <__multiply+0x14c>)
 8005bf2:	4845      	ldr	r0, [pc, #276]	; (8005d08 <__multiply+0x150>)
 8005bf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005bf8:	f000 fb1a 	bl	8006230 <__assert_func>
 8005bfc:	f100 0514 	add.w	r5, r0, #20
 8005c00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c04:	462b      	mov	r3, r5
 8005c06:	2200      	movs	r2, #0
 8005c08:	4543      	cmp	r3, r8
 8005c0a:	d321      	bcc.n	8005c50 <__multiply+0x98>
 8005c0c:	f104 0314 	add.w	r3, r4, #20
 8005c10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c14:	f109 0314 	add.w	r3, r9, #20
 8005c18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c1c:	9202      	str	r2, [sp, #8]
 8005c1e:	1b3a      	subs	r2, r7, r4
 8005c20:	3a15      	subs	r2, #21
 8005c22:	f022 0203 	bic.w	r2, r2, #3
 8005c26:	3204      	adds	r2, #4
 8005c28:	f104 0115 	add.w	r1, r4, #21
 8005c2c:	428f      	cmp	r7, r1
 8005c2e:	bf38      	it	cc
 8005c30:	2204      	movcc	r2, #4
 8005c32:	9201      	str	r2, [sp, #4]
 8005c34:	9a02      	ldr	r2, [sp, #8]
 8005c36:	9303      	str	r3, [sp, #12]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d80c      	bhi.n	8005c56 <__multiply+0x9e>
 8005c3c:	2e00      	cmp	r6, #0
 8005c3e:	dd03      	ble.n	8005c48 <__multiply+0x90>
 8005c40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05b      	beq.n	8005d00 <__multiply+0x148>
 8005c48:	6106      	str	r6, [r0, #16]
 8005c4a:	b005      	add	sp, #20
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c50:	f843 2b04 	str.w	r2, [r3], #4
 8005c54:	e7d8      	b.n	8005c08 <__multiply+0x50>
 8005c56:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c5a:	f1ba 0f00 	cmp.w	sl, #0
 8005c5e:	d024      	beq.n	8005caa <__multiply+0xf2>
 8005c60:	f104 0e14 	add.w	lr, r4, #20
 8005c64:	46a9      	mov	r9, r5
 8005c66:	f04f 0c00 	mov.w	ip, #0
 8005c6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c6e:	f8d9 1000 	ldr.w	r1, [r9]
 8005c72:	fa1f fb82 	uxth.w	fp, r2
 8005c76:	b289      	uxth	r1, r1
 8005c78:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c80:	f8d9 2000 	ldr.w	r2, [r9]
 8005c84:	4461      	add	r1, ip
 8005c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c92:	b289      	uxth	r1, r1
 8005c94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c98:	4577      	cmp	r7, lr
 8005c9a:	f849 1b04 	str.w	r1, [r9], #4
 8005c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ca2:	d8e2      	bhi.n	8005c6a <__multiply+0xb2>
 8005ca4:	9a01      	ldr	r2, [sp, #4]
 8005ca6:	f845 c002 	str.w	ip, [r5, r2]
 8005caa:	9a03      	ldr	r2, [sp, #12]
 8005cac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	f1b9 0f00 	cmp.w	r9, #0
 8005cb6:	d021      	beq.n	8005cfc <__multiply+0x144>
 8005cb8:	6829      	ldr	r1, [r5, #0]
 8005cba:	f104 0c14 	add.w	ip, r4, #20
 8005cbe:	46ae      	mov	lr, r5
 8005cc0:	f04f 0a00 	mov.w	sl, #0
 8005cc4:	f8bc b000 	ldrh.w	fp, [ip]
 8005cc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ccc:	fb09 220b 	mla	r2, r9, fp, r2
 8005cd0:	4452      	add	r2, sl
 8005cd2:	b289      	uxth	r1, r1
 8005cd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cd8:	f84e 1b04 	str.w	r1, [lr], #4
 8005cdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005ce0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ce4:	f8be 1000 	ldrh.w	r1, [lr]
 8005ce8:	fb09 110a 	mla	r1, r9, sl, r1
 8005cec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005cf0:	4567      	cmp	r7, ip
 8005cf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005cf6:	d8e5      	bhi.n	8005cc4 <__multiply+0x10c>
 8005cf8:	9a01      	ldr	r2, [sp, #4]
 8005cfa:	50a9      	str	r1, [r5, r2]
 8005cfc:	3504      	adds	r5, #4
 8005cfe:	e799      	b.n	8005c34 <__multiply+0x7c>
 8005d00:	3e01      	subs	r6, #1
 8005d02:	e79b      	b.n	8005c3c <__multiply+0x84>
 8005d04:	08006930 	.word	0x08006930
 8005d08:	08006941 	.word	0x08006941

08005d0c <__pow5mult>:
 8005d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d10:	4615      	mov	r5, r2
 8005d12:	f012 0203 	ands.w	r2, r2, #3
 8005d16:	4606      	mov	r6, r0
 8005d18:	460f      	mov	r7, r1
 8005d1a:	d007      	beq.n	8005d2c <__pow5mult+0x20>
 8005d1c:	4c25      	ldr	r4, [pc, #148]	; (8005db4 <__pow5mult+0xa8>)
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	2300      	movs	r3, #0
 8005d22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d26:	f7ff fe9d 	bl	8005a64 <__multadd>
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	10ad      	asrs	r5, r5, #2
 8005d2e:	d03d      	beq.n	8005dac <__pow5mult+0xa0>
 8005d30:	69f4      	ldr	r4, [r6, #28]
 8005d32:	b97c      	cbnz	r4, 8005d54 <__pow5mult+0x48>
 8005d34:	2010      	movs	r0, #16
 8005d36:	f7ff fd7f 	bl	8005838 <malloc>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	61f0      	str	r0, [r6, #28]
 8005d3e:	b928      	cbnz	r0, 8005d4c <__pow5mult+0x40>
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <__pow5mult+0xac>)
 8005d42:	481e      	ldr	r0, [pc, #120]	; (8005dbc <__pow5mult+0xb0>)
 8005d44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005d48:	f000 fa72 	bl	8006230 <__assert_func>
 8005d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d50:	6004      	str	r4, [r0, #0]
 8005d52:	60c4      	str	r4, [r0, #12]
 8005d54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d5c:	b94c      	cbnz	r4, 8005d72 <__pow5mult+0x66>
 8005d5e:	f240 2171 	movw	r1, #625	; 0x271
 8005d62:	4630      	mov	r0, r6
 8005d64:	f7ff ff12 	bl	8005b8c <__i2b>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d6e:	4604      	mov	r4, r0
 8005d70:	6003      	str	r3, [r0, #0]
 8005d72:	f04f 0900 	mov.w	r9, #0
 8005d76:	07eb      	lsls	r3, r5, #31
 8005d78:	d50a      	bpl.n	8005d90 <__pow5mult+0x84>
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ff1a 	bl	8005bb8 <__multiply>
 8005d84:	4639      	mov	r1, r7
 8005d86:	4680      	mov	r8, r0
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff fe49 	bl	8005a20 <_Bfree>
 8005d8e:	4647      	mov	r7, r8
 8005d90:	106d      	asrs	r5, r5, #1
 8005d92:	d00b      	beq.n	8005dac <__pow5mult+0xa0>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	b938      	cbnz	r0, 8005da8 <__pow5mult+0x9c>
 8005d98:	4622      	mov	r2, r4
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff ff0b 	bl	8005bb8 <__multiply>
 8005da2:	6020      	str	r0, [r4, #0]
 8005da4:	f8c0 9000 	str.w	r9, [r0]
 8005da8:	4604      	mov	r4, r0
 8005daa:	e7e4      	b.n	8005d76 <__pow5mult+0x6a>
 8005dac:	4638      	mov	r0, r7
 8005dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db2:	bf00      	nop
 8005db4:	08006a90 	.word	0x08006a90
 8005db8:	080068c1 	.word	0x080068c1
 8005dbc:	08006941 	.word	0x08006941

08005dc0 <__lshift>:
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	6849      	ldr	r1, [r1, #4]
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	4691      	mov	r9, r2
 8005dd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dd8:	f108 0601 	add.w	r6, r8, #1
 8005ddc:	42b3      	cmp	r3, r6
 8005dde:	db0b      	blt.n	8005df8 <__lshift+0x38>
 8005de0:	4638      	mov	r0, r7
 8005de2:	f7ff fddd 	bl	80059a0 <_Balloc>
 8005de6:	4605      	mov	r5, r0
 8005de8:	b948      	cbnz	r0, 8005dfe <__lshift+0x3e>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b28      	ldr	r3, [pc, #160]	; (8005e90 <__lshift+0xd0>)
 8005dee:	4829      	ldr	r0, [pc, #164]	; (8005e94 <__lshift+0xd4>)
 8005df0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005df4:	f000 fa1c 	bl	8006230 <__assert_func>
 8005df8:	3101      	adds	r1, #1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	e7ee      	b.n	8005ddc <__lshift+0x1c>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f100 0114 	add.w	r1, r0, #20
 8005e04:	f100 0210 	add.w	r2, r0, #16
 8005e08:	4618      	mov	r0, r3
 8005e0a:	4553      	cmp	r3, sl
 8005e0c:	db33      	blt.n	8005e76 <__lshift+0xb6>
 8005e0e:	6920      	ldr	r0, [r4, #16]
 8005e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e14:	f104 0314 	add.w	r3, r4, #20
 8005e18:	f019 091f 	ands.w	r9, r9, #31
 8005e1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e24:	d02b      	beq.n	8005e7e <__lshift+0xbe>
 8005e26:	f1c9 0e20 	rsb	lr, r9, #32
 8005e2a:	468a      	mov	sl, r1
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	fa00 f009 	lsl.w	r0, r0, r9
 8005e34:	4310      	orrs	r0, r2
 8005e36:	f84a 0b04 	str.w	r0, [sl], #4
 8005e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3e:	459c      	cmp	ip, r3
 8005e40:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e44:	d8f3      	bhi.n	8005e2e <__lshift+0x6e>
 8005e46:	ebac 0304 	sub.w	r3, ip, r4
 8005e4a:	3b15      	subs	r3, #21
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	3304      	adds	r3, #4
 8005e52:	f104 0015 	add.w	r0, r4, #21
 8005e56:	4584      	cmp	ip, r0
 8005e58:	bf38      	it	cc
 8005e5a:	2304      	movcc	r3, #4
 8005e5c:	50ca      	str	r2, [r1, r3]
 8005e5e:	b10a      	cbz	r2, 8005e64 <__lshift+0xa4>
 8005e60:	f108 0602 	add.w	r6, r8, #2
 8005e64:	3e01      	subs	r6, #1
 8005e66:	4638      	mov	r0, r7
 8005e68:	612e      	str	r6, [r5, #16]
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	f7ff fdd8 	bl	8005a20 <_Bfree>
 8005e70:	4628      	mov	r0, r5
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	e7c5      	b.n	8005e0a <__lshift+0x4a>
 8005e7e:	3904      	subs	r1, #4
 8005e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e84:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e88:	459c      	cmp	ip, r3
 8005e8a:	d8f9      	bhi.n	8005e80 <__lshift+0xc0>
 8005e8c:	e7ea      	b.n	8005e64 <__lshift+0xa4>
 8005e8e:	bf00      	nop
 8005e90:	08006930 	.word	0x08006930
 8005e94:	08006941 	.word	0x08006941

08005e98 <__mcmp>:
 8005e98:	b530      	push	{r4, r5, lr}
 8005e9a:	6902      	ldr	r2, [r0, #16]
 8005e9c:	690c      	ldr	r4, [r1, #16]
 8005e9e:	1b12      	subs	r2, r2, r4
 8005ea0:	d10e      	bne.n	8005ec0 <__mcmp+0x28>
 8005ea2:	f100 0314 	add.w	r3, r0, #20
 8005ea6:	3114      	adds	r1, #20
 8005ea8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005eac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005eb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005eb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d003      	beq.n	8005ec4 <__mcmp+0x2c>
 8005ebc:	d305      	bcc.n	8005eca <__mcmp+0x32>
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	bd30      	pop	{r4, r5, pc}
 8005ec4:	4283      	cmp	r3, r0
 8005ec6:	d3f3      	bcc.n	8005eb0 <__mcmp+0x18>
 8005ec8:	e7fa      	b.n	8005ec0 <__mcmp+0x28>
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ece:	e7f7      	b.n	8005ec0 <__mcmp+0x28>

08005ed0 <__mdiff>:
 8005ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4620      	mov	r0, r4
 8005edc:	4690      	mov	r8, r2
 8005ede:	f7ff ffdb 	bl	8005e98 <__mcmp>
 8005ee2:	1e05      	subs	r5, r0, #0
 8005ee4:	d110      	bne.n	8005f08 <__mdiff+0x38>
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff fd59 	bl	80059a0 <_Balloc>
 8005eee:	b930      	cbnz	r0, 8005efe <__mdiff+0x2e>
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <__mdiff+0x10c>)
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f240 2137 	movw	r1, #567	; 0x237
 8005ef8:	4839      	ldr	r0, [pc, #228]	; (8005fe0 <__mdiff+0x110>)
 8005efa:	f000 f999 	bl	8006230 <__assert_func>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f08:	bfa4      	itt	ge
 8005f0a:	4643      	movge	r3, r8
 8005f0c:	46a0      	movge	r8, r4
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f14:	bfa6      	itte	ge
 8005f16:	461c      	movge	r4, r3
 8005f18:	2500      	movge	r5, #0
 8005f1a:	2501      	movlt	r5, #1
 8005f1c:	f7ff fd40 	bl	80059a0 <_Balloc>
 8005f20:	b920      	cbnz	r0, 8005f2c <__mdiff+0x5c>
 8005f22:	4b2e      	ldr	r3, [pc, #184]	; (8005fdc <__mdiff+0x10c>)
 8005f24:	4602      	mov	r2, r0
 8005f26:	f240 2145 	movw	r1, #581	; 0x245
 8005f2a:	e7e5      	b.n	8005ef8 <__mdiff+0x28>
 8005f2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f30:	6926      	ldr	r6, [r4, #16]
 8005f32:	60c5      	str	r5, [r0, #12]
 8005f34:	f104 0914 	add.w	r9, r4, #20
 8005f38:	f108 0514 	add.w	r5, r8, #20
 8005f3c:	f100 0e14 	add.w	lr, r0, #20
 8005f40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f48:	f108 0210 	add.w	r2, r8, #16
 8005f4c:	46f2      	mov	sl, lr
 8005f4e:	2100      	movs	r1, #0
 8005f50:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f58:	fa11 f88b 	uxtah	r8, r1, fp
 8005f5c:	b299      	uxth	r1, r3
 8005f5e:	0c1b      	lsrs	r3, r3, #16
 8005f60:	eba8 0801 	sub.w	r8, r8, r1
 8005f64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f6c:	fa1f f888 	uxth.w	r8, r8
 8005f70:	1419      	asrs	r1, r3, #16
 8005f72:	454e      	cmp	r6, r9
 8005f74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f78:	f84a 3b04 	str.w	r3, [sl], #4
 8005f7c:	d8e8      	bhi.n	8005f50 <__mdiff+0x80>
 8005f7e:	1b33      	subs	r3, r6, r4
 8005f80:	3b15      	subs	r3, #21
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	3304      	adds	r3, #4
 8005f88:	3415      	adds	r4, #21
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	bf38      	it	cc
 8005f8e:	2304      	movcc	r3, #4
 8005f90:	441d      	add	r5, r3
 8005f92:	4473      	add	r3, lr
 8005f94:	469e      	mov	lr, r3
 8005f96:	462e      	mov	r6, r5
 8005f98:	4566      	cmp	r6, ip
 8005f9a:	d30e      	bcc.n	8005fba <__mdiff+0xea>
 8005f9c:	f10c 0203 	add.w	r2, ip, #3
 8005fa0:	1b52      	subs	r2, r2, r5
 8005fa2:	f022 0203 	bic.w	r2, r2, #3
 8005fa6:	3d03      	subs	r5, #3
 8005fa8:	45ac      	cmp	ip, r5
 8005faa:	bf38      	it	cc
 8005fac:	2200      	movcc	r2, #0
 8005fae:	4413      	add	r3, r2
 8005fb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005fb4:	b17a      	cbz	r2, 8005fd6 <__mdiff+0x106>
 8005fb6:	6107      	str	r7, [r0, #16]
 8005fb8:	e7a4      	b.n	8005f04 <__mdiff+0x34>
 8005fba:	f856 8b04 	ldr.w	r8, [r6], #4
 8005fbe:	fa11 f288 	uxtah	r2, r1, r8
 8005fc2:	1414      	asrs	r4, r2, #16
 8005fc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fc8:	b292      	uxth	r2, r2
 8005fca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005fce:	f84e 2b04 	str.w	r2, [lr], #4
 8005fd2:	1421      	asrs	r1, r4, #16
 8005fd4:	e7e0      	b.n	8005f98 <__mdiff+0xc8>
 8005fd6:	3f01      	subs	r7, #1
 8005fd8:	e7ea      	b.n	8005fb0 <__mdiff+0xe0>
 8005fda:	bf00      	nop
 8005fdc:	08006930 	.word	0x08006930
 8005fe0:	08006941 	.word	0x08006941

08005fe4 <__d2b>:
 8005fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fe8:	460f      	mov	r7, r1
 8005fea:	2101      	movs	r1, #1
 8005fec:	ec59 8b10 	vmov	r8, r9, d0
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	f7ff fcd5 	bl	80059a0 <_Balloc>
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	b930      	cbnz	r0, 8006008 <__d2b+0x24>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	4b24      	ldr	r3, [pc, #144]	; (8006090 <__d2b+0xac>)
 8005ffe:	4825      	ldr	r0, [pc, #148]	; (8006094 <__d2b+0xb0>)
 8006000:	f240 310f 	movw	r1, #783	; 0x30f
 8006004:	f000 f914 	bl	8006230 <__assert_func>
 8006008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800600c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006010:	bb2d      	cbnz	r5, 800605e <__d2b+0x7a>
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	f1b8 0300 	subs.w	r3, r8, #0
 8006018:	d026      	beq.n	8006068 <__d2b+0x84>
 800601a:	4668      	mov	r0, sp
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	f7ff fd87 	bl	8005b30 <__lo0bits>
 8006022:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006026:	b1e8      	cbz	r0, 8006064 <__d2b+0x80>
 8006028:	f1c0 0320 	rsb	r3, r0, #32
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	430b      	orrs	r3, r1
 8006032:	40c2      	lsrs	r2, r0
 8006034:	6163      	str	r3, [r4, #20]
 8006036:	9201      	str	r2, [sp, #4]
 8006038:	9b01      	ldr	r3, [sp, #4]
 800603a:	61a3      	str	r3, [r4, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2202      	movne	r2, #2
 8006042:	2201      	moveq	r2, #1
 8006044:	6122      	str	r2, [r4, #16]
 8006046:	b1bd      	cbz	r5, 8006078 <__d2b+0x94>
 8006048:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800604c:	4405      	add	r5, r0
 800604e:	603d      	str	r5, [r7, #0]
 8006050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006054:	6030      	str	r0, [r6, #0]
 8006056:	4620      	mov	r0, r4
 8006058:	b003      	add	sp, #12
 800605a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800605e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006062:	e7d6      	b.n	8006012 <__d2b+0x2e>
 8006064:	6161      	str	r1, [r4, #20]
 8006066:	e7e7      	b.n	8006038 <__d2b+0x54>
 8006068:	a801      	add	r0, sp, #4
 800606a:	f7ff fd61 	bl	8005b30 <__lo0bits>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	6163      	str	r3, [r4, #20]
 8006072:	3020      	adds	r0, #32
 8006074:	2201      	movs	r2, #1
 8006076:	e7e5      	b.n	8006044 <__d2b+0x60>
 8006078:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800607c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006080:	6038      	str	r0, [r7, #0]
 8006082:	6918      	ldr	r0, [r3, #16]
 8006084:	f7ff fd34 	bl	8005af0 <__hi0bits>
 8006088:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800608c:	e7e2      	b.n	8006054 <__d2b+0x70>
 800608e:	bf00      	nop
 8006090:	08006930 	.word	0x08006930
 8006094:	08006941 	.word	0x08006941

08006098 <__sflush_r>:
 8006098:	898a      	ldrh	r2, [r1, #12]
 800609a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	4605      	mov	r5, r0
 80060a0:	0710      	lsls	r0, r2, #28
 80060a2:	460c      	mov	r4, r1
 80060a4:	d458      	bmi.n	8006158 <__sflush_r+0xc0>
 80060a6:	684b      	ldr	r3, [r1, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dc05      	bgt.n	80060b8 <__sflush_r+0x20>
 80060ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dc02      	bgt.n	80060b8 <__sflush_r+0x20>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d0f9      	beq.n	80060b2 <__sflush_r+0x1a>
 80060be:	2300      	movs	r3, #0
 80060c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060c4:	682f      	ldr	r7, [r5, #0]
 80060c6:	6a21      	ldr	r1, [r4, #32]
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	d032      	beq.n	8006132 <__sflush_r+0x9a>
 80060cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	075a      	lsls	r2, r3, #29
 80060d2:	d505      	bpl.n	80060e0 <__sflush_r+0x48>
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	1ac0      	subs	r0, r0, r3
 80060d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060da:	b10b      	cbz	r3, 80060e0 <__sflush_r+0x48>
 80060dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060de:	1ac0      	subs	r0, r0, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060e6:	6a21      	ldr	r1, [r4, #32]
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b0      	blx	r6
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	d106      	bne.n	8006100 <__sflush_r+0x68>
 80060f2:	6829      	ldr	r1, [r5, #0]
 80060f4:	291d      	cmp	r1, #29
 80060f6:	d82b      	bhi.n	8006150 <__sflush_r+0xb8>
 80060f8:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <__sflush_r+0x108>)
 80060fa:	410a      	asrs	r2, r1
 80060fc:	07d6      	lsls	r6, r2, #31
 80060fe:	d427      	bmi.n	8006150 <__sflush_r+0xb8>
 8006100:	2200      	movs	r2, #0
 8006102:	6062      	str	r2, [r4, #4]
 8006104:	04d9      	lsls	r1, r3, #19
 8006106:	6922      	ldr	r2, [r4, #16]
 8006108:	6022      	str	r2, [r4, #0]
 800610a:	d504      	bpl.n	8006116 <__sflush_r+0x7e>
 800610c:	1c42      	adds	r2, r0, #1
 800610e:	d101      	bne.n	8006114 <__sflush_r+0x7c>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b903      	cbnz	r3, 8006116 <__sflush_r+0x7e>
 8006114:	6560      	str	r0, [r4, #84]	; 0x54
 8006116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006118:	602f      	str	r7, [r5, #0]
 800611a:	2900      	cmp	r1, #0
 800611c:	d0c9      	beq.n	80060b2 <__sflush_r+0x1a>
 800611e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006122:	4299      	cmp	r1, r3
 8006124:	d002      	beq.n	800612c <__sflush_r+0x94>
 8006126:	4628      	mov	r0, r5
 8006128:	f7ff fb3a 	bl	80057a0 <_free_r>
 800612c:	2000      	movs	r0, #0
 800612e:	6360      	str	r0, [r4, #52]	; 0x34
 8006130:	e7c0      	b.n	80060b4 <__sflush_r+0x1c>
 8006132:	2301      	movs	r3, #1
 8006134:	4628      	mov	r0, r5
 8006136:	47b0      	blx	r6
 8006138:	1c41      	adds	r1, r0, #1
 800613a:	d1c8      	bne.n	80060ce <__sflush_r+0x36>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0c5      	beq.n	80060ce <__sflush_r+0x36>
 8006142:	2b1d      	cmp	r3, #29
 8006144:	d001      	beq.n	800614a <__sflush_r+0xb2>
 8006146:	2b16      	cmp	r3, #22
 8006148:	d101      	bne.n	800614e <__sflush_r+0xb6>
 800614a:	602f      	str	r7, [r5, #0]
 800614c:	e7b1      	b.n	80060b2 <__sflush_r+0x1a>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	e7ad      	b.n	80060b4 <__sflush_r+0x1c>
 8006158:	690f      	ldr	r7, [r1, #16]
 800615a:	2f00      	cmp	r7, #0
 800615c:	d0a9      	beq.n	80060b2 <__sflush_r+0x1a>
 800615e:	0793      	lsls	r3, r2, #30
 8006160:	680e      	ldr	r6, [r1, #0]
 8006162:	bf08      	it	eq
 8006164:	694b      	ldreq	r3, [r1, #20]
 8006166:	600f      	str	r7, [r1, #0]
 8006168:	bf18      	it	ne
 800616a:	2300      	movne	r3, #0
 800616c:	eba6 0807 	sub.w	r8, r6, r7
 8006170:	608b      	str	r3, [r1, #8]
 8006172:	f1b8 0f00 	cmp.w	r8, #0
 8006176:	dd9c      	ble.n	80060b2 <__sflush_r+0x1a>
 8006178:	6a21      	ldr	r1, [r4, #32]
 800617a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800617c:	4643      	mov	r3, r8
 800617e:	463a      	mov	r2, r7
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	2800      	cmp	r0, #0
 8006186:	dc06      	bgt.n	8006196 <__sflush_r+0xfe>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	e78e      	b.n	80060b4 <__sflush_r+0x1c>
 8006196:	4407      	add	r7, r0
 8006198:	eba8 0800 	sub.w	r8, r8, r0
 800619c:	e7e9      	b.n	8006172 <__sflush_r+0xda>
 800619e:	bf00      	nop
 80061a0:	dfbffffe 	.word	0xdfbffffe

080061a4 <_fflush_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	690b      	ldr	r3, [r1, #16]
 80061a8:	4605      	mov	r5, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	b913      	cbnz	r3, 80061b4 <_fflush_r+0x10>
 80061ae:	2500      	movs	r5, #0
 80061b0:	4628      	mov	r0, r5
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	b118      	cbz	r0, 80061be <_fflush_r+0x1a>
 80061b6:	6a03      	ldr	r3, [r0, #32]
 80061b8:	b90b      	cbnz	r3, 80061be <_fflush_r+0x1a>
 80061ba:	f7fe fc05 	bl	80049c8 <__sinit>
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f3      	beq.n	80061ae <_fflush_r+0xa>
 80061c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061c8:	07d0      	lsls	r0, r2, #31
 80061ca:	d404      	bmi.n	80061d6 <_fflush_r+0x32>
 80061cc:	0599      	lsls	r1, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_fflush_r+0x32>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f7fe fcef 	bl	8004bb4 <__retarget_lock_acquire_recursive>
 80061d6:	4628      	mov	r0, r5
 80061d8:	4621      	mov	r1, r4
 80061da:	f7ff ff5d 	bl	8006098 <__sflush_r>
 80061de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e0:	07da      	lsls	r2, r3, #31
 80061e2:	4605      	mov	r5, r0
 80061e4:	d4e4      	bmi.n	80061b0 <_fflush_r+0xc>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	059b      	lsls	r3, r3, #22
 80061ea:	d4e1      	bmi.n	80061b0 <_fflush_r+0xc>
 80061ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ee:	f7fe fce2 	bl	8004bb6 <__retarget_lock_release_recursive>
 80061f2:	e7dd      	b.n	80061b0 <_fflush_r+0xc>

080061f4 <_sbrk_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d06      	ldr	r5, [pc, #24]	; (8006210 <_sbrk_r+0x1c>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	f7fa fbcc 	bl	800099c <_sbrk>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_sbrk_r+0x1a>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_sbrk_r+0x1a>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	2000040c 	.word	0x2000040c

08006214 <memcpy>:
 8006214:	440a      	add	r2, r1
 8006216:	4291      	cmp	r1, r2
 8006218:	f100 33ff 	add.w	r3, r0, #4294967295
 800621c:	d100      	bne.n	8006220 <memcpy+0xc>
 800621e:	4770      	bx	lr
 8006220:	b510      	push	{r4, lr}
 8006222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800622a:	4291      	cmp	r1, r2
 800622c:	d1f9      	bne.n	8006222 <memcpy+0xe>
 800622e:	bd10      	pop	{r4, pc}

08006230 <__assert_func>:
 8006230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006232:	4614      	mov	r4, r2
 8006234:	461a      	mov	r2, r3
 8006236:	4b09      	ldr	r3, [pc, #36]	; (800625c <__assert_func+0x2c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4605      	mov	r5, r0
 800623c:	68d8      	ldr	r0, [r3, #12]
 800623e:	b14c      	cbz	r4, 8006254 <__assert_func+0x24>
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <__assert_func+0x30>)
 8006242:	9100      	str	r1, [sp, #0]
 8006244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006248:	4906      	ldr	r1, [pc, #24]	; (8006264 <__assert_func+0x34>)
 800624a:	462b      	mov	r3, r5
 800624c:	f000 f844 	bl	80062d8 <fiprintf>
 8006250:	f000 f854 	bl	80062fc <abort>
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <__assert_func+0x38>)
 8006256:	461c      	mov	r4, r3
 8006258:	e7f3      	b.n	8006242 <__assert_func+0x12>
 800625a:	bf00      	nop
 800625c:	20000064 	.word	0x20000064
 8006260:	08006aa6 	.word	0x08006aa6
 8006264:	08006ab3 	.word	0x08006ab3
 8006268:	08006ae1 	.word	0x08006ae1

0800626c <_calloc_r>:
 800626c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626e:	fba1 2402 	umull	r2, r4, r1, r2
 8006272:	b94c      	cbnz	r4, 8006288 <_calloc_r+0x1c>
 8006274:	4611      	mov	r1, r2
 8006276:	9201      	str	r2, [sp, #4]
 8006278:	f7ff fb06 	bl	8005888 <_malloc_r>
 800627c:	9a01      	ldr	r2, [sp, #4]
 800627e:	4605      	mov	r5, r0
 8006280:	b930      	cbnz	r0, 8006290 <_calloc_r+0x24>
 8006282:	4628      	mov	r0, r5
 8006284:	b003      	add	sp, #12
 8006286:	bd30      	pop	{r4, r5, pc}
 8006288:	220c      	movs	r2, #12
 800628a:	6002      	str	r2, [r0, #0]
 800628c:	2500      	movs	r5, #0
 800628e:	e7f8      	b.n	8006282 <_calloc_r+0x16>
 8006290:	4621      	mov	r1, r4
 8006292:	f7fe fc12 	bl	8004aba <memset>
 8006296:	e7f4      	b.n	8006282 <_calloc_r+0x16>

08006298 <__ascii_mbtowc>:
 8006298:	b082      	sub	sp, #8
 800629a:	b901      	cbnz	r1, 800629e <__ascii_mbtowc+0x6>
 800629c:	a901      	add	r1, sp, #4
 800629e:	b142      	cbz	r2, 80062b2 <__ascii_mbtowc+0x1a>
 80062a0:	b14b      	cbz	r3, 80062b6 <__ascii_mbtowc+0x1e>
 80062a2:	7813      	ldrb	r3, [r2, #0]
 80062a4:	600b      	str	r3, [r1, #0]
 80062a6:	7812      	ldrb	r2, [r2, #0]
 80062a8:	1e10      	subs	r0, r2, #0
 80062aa:	bf18      	it	ne
 80062ac:	2001      	movne	r0, #1
 80062ae:	b002      	add	sp, #8
 80062b0:	4770      	bx	lr
 80062b2:	4610      	mov	r0, r2
 80062b4:	e7fb      	b.n	80062ae <__ascii_mbtowc+0x16>
 80062b6:	f06f 0001 	mvn.w	r0, #1
 80062ba:	e7f8      	b.n	80062ae <__ascii_mbtowc+0x16>

080062bc <__ascii_wctomb>:
 80062bc:	b149      	cbz	r1, 80062d2 <__ascii_wctomb+0x16>
 80062be:	2aff      	cmp	r2, #255	; 0xff
 80062c0:	bf85      	ittet	hi
 80062c2:	238a      	movhi	r3, #138	; 0x8a
 80062c4:	6003      	strhi	r3, [r0, #0]
 80062c6:	700a      	strbls	r2, [r1, #0]
 80062c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80062cc:	bf98      	it	ls
 80062ce:	2001      	movls	r0, #1
 80062d0:	4770      	bx	lr
 80062d2:	4608      	mov	r0, r1
 80062d4:	4770      	bx	lr
	...

080062d8 <fiprintf>:
 80062d8:	b40e      	push	{r1, r2, r3}
 80062da:	b503      	push	{r0, r1, lr}
 80062dc:	4601      	mov	r1, r0
 80062de:	ab03      	add	r3, sp, #12
 80062e0:	4805      	ldr	r0, [pc, #20]	; (80062f8 <fiprintf+0x20>)
 80062e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e6:	6800      	ldr	r0, [r0, #0]
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	f000 f837 	bl	800635c <_vfiprintf_r>
 80062ee:	b002      	add	sp, #8
 80062f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062f4:	b003      	add	sp, #12
 80062f6:	4770      	bx	lr
 80062f8:	20000064 	.word	0x20000064

080062fc <abort>:
 80062fc:	b508      	push	{r3, lr}
 80062fe:	2006      	movs	r0, #6
 8006300:	f000 fa04 	bl	800670c <raise>
 8006304:	2001      	movs	r0, #1
 8006306:	f7fa fad1 	bl	80008ac <_exit>

0800630a <__sfputc_r>:
 800630a:	6893      	ldr	r3, [r2, #8]
 800630c:	3b01      	subs	r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	b410      	push	{r4}
 8006312:	6093      	str	r3, [r2, #8]
 8006314:	da08      	bge.n	8006328 <__sfputc_r+0x1e>
 8006316:	6994      	ldr	r4, [r2, #24]
 8006318:	42a3      	cmp	r3, r4
 800631a:	db01      	blt.n	8006320 <__sfputc_r+0x16>
 800631c:	290a      	cmp	r1, #10
 800631e:	d103      	bne.n	8006328 <__sfputc_r+0x1e>
 8006320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006324:	f000 b934 	b.w	8006590 <__swbuf_r>
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	1c58      	adds	r0, r3, #1
 800632c:	6010      	str	r0, [r2, #0]
 800632e:	7019      	strb	r1, [r3, #0]
 8006330:	4608      	mov	r0, r1
 8006332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006336:	4770      	bx	lr

08006338 <__sfputs_r>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	4606      	mov	r6, r0
 800633c:	460f      	mov	r7, r1
 800633e:	4614      	mov	r4, r2
 8006340:	18d5      	adds	r5, r2, r3
 8006342:	42ac      	cmp	r4, r5
 8006344:	d101      	bne.n	800634a <__sfputs_r+0x12>
 8006346:	2000      	movs	r0, #0
 8006348:	e007      	b.n	800635a <__sfputs_r+0x22>
 800634a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800634e:	463a      	mov	r2, r7
 8006350:	4630      	mov	r0, r6
 8006352:	f7ff ffda 	bl	800630a <__sfputc_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d1f3      	bne.n	8006342 <__sfputs_r+0xa>
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800635c <_vfiprintf_r>:
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	460d      	mov	r5, r1
 8006362:	b09d      	sub	sp, #116	; 0x74
 8006364:	4614      	mov	r4, r2
 8006366:	4698      	mov	r8, r3
 8006368:	4606      	mov	r6, r0
 800636a:	b118      	cbz	r0, 8006374 <_vfiprintf_r+0x18>
 800636c:	6a03      	ldr	r3, [r0, #32]
 800636e:	b90b      	cbnz	r3, 8006374 <_vfiprintf_r+0x18>
 8006370:	f7fe fb2a 	bl	80049c8 <__sinit>
 8006374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006376:	07d9      	lsls	r1, r3, #31
 8006378:	d405      	bmi.n	8006386 <_vfiprintf_r+0x2a>
 800637a:	89ab      	ldrh	r3, [r5, #12]
 800637c:	059a      	lsls	r2, r3, #22
 800637e:	d402      	bmi.n	8006386 <_vfiprintf_r+0x2a>
 8006380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006382:	f7fe fc17 	bl	8004bb4 <__retarget_lock_acquire_recursive>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	071b      	lsls	r3, r3, #28
 800638a:	d501      	bpl.n	8006390 <_vfiprintf_r+0x34>
 800638c:	692b      	ldr	r3, [r5, #16]
 800638e:	b99b      	cbnz	r3, 80063b8 <_vfiprintf_r+0x5c>
 8006390:	4629      	mov	r1, r5
 8006392:	4630      	mov	r0, r6
 8006394:	f000 f93a 	bl	800660c <__swsetup_r>
 8006398:	b170      	cbz	r0, 80063b8 <_vfiprintf_r+0x5c>
 800639a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800639c:	07dc      	lsls	r4, r3, #31
 800639e:	d504      	bpl.n	80063aa <_vfiprintf_r+0x4e>
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	b01d      	add	sp, #116	; 0x74
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	89ab      	ldrh	r3, [r5, #12]
 80063ac:	0598      	lsls	r0, r3, #22
 80063ae:	d4f7      	bmi.n	80063a0 <_vfiprintf_r+0x44>
 80063b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063b2:	f7fe fc00 	bl	8004bb6 <__retarget_lock_release_recursive>
 80063b6:	e7f3      	b.n	80063a0 <_vfiprintf_r+0x44>
 80063b8:	2300      	movs	r3, #0
 80063ba:	9309      	str	r3, [sp, #36]	; 0x24
 80063bc:	2320      	movs	r3, #32
 80063be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c6:	2330      	movs	r3, #48	; 0x30
 80063c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800657c <_vfiprintf_r+0x220>
 80063cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063d0:	f04f 0901 	mov.w	r9, #1
 80063d4:	4623      	mov	r3, r4
 80063d6:	469a      	mov	sl, r3
 80063d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063dc:	b10a      	cbz	r2, 80063e2 <_vfiprintf_r+0x86>
 80063de:	2a25      	cmp	r2, #37	; 0x25
 80063e0:	d1f9      	bne.n	80063d6 <_vfiprintf_r+0x7a>
 80063e2:	ebba 0b04 	subs.w	fp, sl, r4
 80063e6:	d00b      	beq.n	8006400 <_vfiprintf_r+0xa4>
 80063e8:	465b      	mov	r3, fp
 80063ea:	4622      	mov	r2, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff ffa2 	bl	8006338 <__sfputs_r>
 80063f4:	3001      	adds	r0, #1
 80063f6:	f000 80a9 	beq.w	800654c <_vfiprintf_r+0x1f0>
 80063fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fc:	445a      	add	r2, fp
 80063fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006400:	f89a 3000 	ldrb.w	r3, [sl]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80a1 	beq.w	800654c <_vfiprintf_r+0x1f0>
 800640a:	2300      	movs	r3, #0
 800640c:	f04f 32ff 	mov.w	r2, #4294967295
 8006410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006414:	f10a 0a01 	add.w	sl, sl, #1
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	9307      	str	r3, [sp, #28]
 800641c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006420:	931a      	str	r3, [sp, #104]	; 0x68
 8006422:	4654      	mov	r4, sl
 8006424:	2205      	movs	r2, #5
 8006426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642a:	4854      	ldr	r0, [pc, #336]	; (800657c <_vfiprintf_r+0x220>)
 800642c:	f7f9 ff08 	bl	8000240 <memchr>
 8006430:	9a04      	ldr	r2, [sp, #16]
 8006432:	b9d8      	cbnz	r0, 800646c <_vfiprintf_r+0x110>
 8006434:	06d1      	lsls	r1, r2, #27
 8006436:	bf44      	itt	mi
 8006438:	2320      	movmi	r3, #32
 800643a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800643e:	0713      	lsls	r3, r2, #28
 8006440:	bf44      	itt	mi
 8006442:	232b      	movmi	r3, #43	; 0x2b
 8006444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006448:	f89a 3000 	ldrb.w	r3, [sl]
 800644c:	2b2a      	cmp	r3, #42	; 0x2a
 800644e:	d015      	beq.n	800647c <_vfiprintf_r+0x120>
 8006450:	9a07      	ldr	r2, [sp, #28]
 8006452:	4654      	mov	r4, sl
 8006454:	2000      	movs	r0, #0
 8006456:	f04f 0c0a 	mov.w	ip, #10
 800645a:	4621      	mov	r1, r4
 800645c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006460:	3b30      	subs	r3, #48	; 0x30
 8006462:	2b09      	cmp	r3, #9
 8006464:	d94d      	bls.n	8006502 <_vfiprintf_r+0x1a6>
 8006466:	b1b0      	cbz	r0, 8006496 <_vfiprintf_r+0x13a>
 8006468:	9207      	str	r2, [sp, #28]
 800646a:	e014      	b.n	8006496 <_vfiprintf_r+0x13a>
 800646c:	eba0 0308 	sub.w	r3, r0, r8
 8006470:	fa09 f303 	lsl.w	r3, r9, r3
 8006474:	4313      	orrs	r3, r2
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	46a2      	mov	sl, r4
 800647a:	e7d2      	b.n	8006422 <_vfiprintf_r+0xc6>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	1d19      	adds	r1, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	9103      	str	r1, [sp, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	bfbb      	ittet	lt
 8006488:	425b      	neglt	r3, r3
 800648a:	f042 0202 	orrlt.w	r2, r2, #2
 800648e:	9307      	strge	r3, [sp, #28]
 8006490:	9307      	strlt	r3, [sp, #28]
 8006492:	bfb8      	it	lt
 8006494:	9204      	strlt	r2, [sp, #16]
 8006496:	7823      	ldrb	r3, [r4, #0]
 8006498:	2b2e      	cmp	r3, #46	; 0x2e
 800649a:	d10c      	bne.n	80064b6 <_vfiprintf_r+0x15a>
 800649c:	7863      	ldrb	r3, [r4, #1]
 800649e:	2b2a      	cmp	r3, #42	; 0x2a
 80064a0:	d134      	bne.n	800650c <_vfiprintf_r+0x1b0>
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	1d1a      	adds	r2, r3, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	9203      	str	r2, [sp, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bfb8      	it	lt
 80064ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80064b2:	3402      	adds	r4, #2
 80064b4:	9305      	str	r3, [sp, #20]
 80064b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800658c <_vfiprintf_r+0x230>
 80064ba:	7821      	ldrb	r1, [r4, #0]
 80064bc:	2203      	movs	r2, #3
 80064be:	4650      	mov	r0, sl
 80064c0:	f7f9 febe 	bl	8000240 <memchr>
 80064c4:	b138      	cbz	r0, 80064d6 <_vfiprintf_r+0x17a>
 80064c6:	9b04      	ldr	r3, [sp, #16]
 80064c8:	eba0 000a 	sub.w	r0, r0, sl
 80064cc:	2240      	movs	r2, #64	; 0x40
 80064ce:	4082      	lsls	r2, r0
 80064d0:	4313      	orrs	r3, r2
 80064d2:	3401      	adds	r4, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064da:	4829      	ldr	r0, [pc, #164]	; (8006580 <_vfiprintf_r+0x224>)
 80064dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064e0:	2206      	movs	r2, #6
 80064e2:	f7f9 fead 	bl	8000240 <memchr>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d03f      	beq.n	800656a <_vfiprintf_r+0x20e>
 80064ea:	4b26      	ldr	r3, [pc, #152]	; (8006584 <_vfiprintf_r+0x228>)
 80064ec:	bb1b      	cbnz	r3, 8006536 <_vfiprintf_r+0x1da>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	3307      	adds	r3, #7
 80064f2:	f023 0307 	bic.w	r3, r3, #7
 80064f6:	3308      	adds	r3, #8
 80064f8:	9303      	str	r3, [sp, #12]
 80064fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fc:	443b      	add	r3, r7
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	e768      	b.n	80063d4 <_vfiprintf_r+0x78>
 8006502:	fb0c 3202 	mla	r2, ip, r2, r3
 8006506:	460c      	mov	r4, r1
 8006508:	2001      	movs	r0, #1
 800650a:	e7a6      	b.n	800645a <_vfiprintf_r+0xfe>
 800650c:	2300      	movs	r3, #0
 800650e:	3401      	adds	r4, #1
 8006510:	9305      	str	r3, [sp, #20]
 8006512:	4619      	mov	r1, r3
 8006514:	f04f 0c0a 	mov.w	ip, #10
 8006518:	4620      	mov	r0, r4
 800651a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800651e:	3a30      	subs	r2, #48	; 0x30
 8006520:	2a09      	cmp	r2, #9
 8006522:	d903      	bls.n	800652c <_vfiprintf_r+0x1d0>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0c6      	beq.n	80064b6 <_vfiprintf_r+0x15a>
 8006528:	9105      	str	r1, [sp, #20]
 800652a:	e7c4      	b.n	80064b6 <_vfiprintf_r+0x15a>
 800652c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006530:	4604      	mov	r4, r0
 8006532:	2301      	movs	r3, #1
 8006534:	e7f0      	b.n	8006518 <_vfiprintf_r+0x1bc>
 8006536:	ab03      	add	r3, sp, #12
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	462a      	mov	r2, r5
 800653c:	4b12      	ldr	r3, [pc, #72]	; (8006588 <_vfiprintf_r+0x22c>)
 800653e:	a904      	add	r1, sp, #16
 8006540:	4630      	mov	r0, r6
 8006542:	f7fd fe1d 	bl	8004180 <_printf_float>
 8006546:	4607      	mov	r7, r0
 8006548:	1c78      	adds	r0, r7, #1
 800654a:	d1d6      	bne.n	80064fa <_vfiprintf_r+0x19e>
 800654c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800654e:	07d9      	lsls	r1, r3, #31
 8006550:	d405      	bmi.n	800655e <_vfiprintf_r+0x202>
 8006552:	89ab      	ldrh	r3, [r5, #12]
 8006554:	059a      	lsls	r2, r3, #22
 8006556:	d402      	bmi.n	800655e <_vfiprintf_r+0x202>
 8006558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800655a:	f7fe fb2c 	bl	8004bb6 <__retarget_lock_release_recursive>
 800655e:	89ab      	ldrh	r3, [r5, #12]
 8006560:	065b      	lsls	r3, r3, #25
 8006562:	f53f af1d 	bmi.w	80063a0 <_vfiprintf_r+0x44>
 8006566:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006568:	e71c      	b.n	80063a4 <_vfiprintf_r+0x48>
 800656a:	ab03      	add	r3, sp, #12
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	462a      	mov	r2, r5
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <_vfiprintf_r+0x22c>)
 8006572:	a904      	add	r1, sp, #16
 8006574:	4630      	mov	r0, r6
 8006576:	f7fe f88b 	bl	8004690 <_printf_i>
 800657a:	e7e4      	b.n	8006546 <_vfiprintf_r+0x1ea>
 800657c:	08006be3 	.word	0x08006be3
 8006580:	08006bed 	.word	0x08006bed
 8006584:	08004181 	.word	0x08004181
 8006588:	08006339 	.word	0x08006339
 800658c:	08006be9 	.word	0x08006be9

08006590 <__swbuf_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	460e      	mov	r6, r1
 8006594:	4614      	mov	r4, r2
 8006596:	4605      	mov	r5, r0
 8006598:	b118      	cbz	r0, 80065a2 <__swbuf_r+0x12>
 800659a:	6a03      	ldr	r3, [r0, #32]
 800659c:	b90b      	cbnz	r3, 80065a2 <__swbuf_r+0x12>
 800659e:	f7fe fa13 	bl	80049c8 <__sinit>
 80065a2:	69a3      	ldr	r3, [r4, #24]
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	071a      	lsls	r2, r3, #28
 80065aa:	d525      	bpl.n	80065f8 <__swbuf_r+0x68>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	b31b      	cbz	r3, 80065f8 <__swbuf_r+0x68>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	6922      	ldr	r2, [r4, #16]
 80065b4:	1a98      	subs	r0, r3, r2
 80065b6:	6963      	ldr	r3, [r4, #20]
 80065b8:	b2f6      	uxtb	r6, r6
 80065ba:	4283      	cmp	r3, r0
 80065bc:	4637      	mov	r7, r6
 80065be:	dc04      	bgt.n	80065ca <__swbuf_r+0x3a>
 80065c0:	4621      	mov	r1, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7ff fdee 	bl	80061a4 <_fflush_r>
 80065c8:	b9e0      	cbnz	r0, 8006604 <__swbuf_r+0x74>
 80065ca:	68a3      	ldr	r3, [r4, #8]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	60a3      	str	r3, [r4, #8]
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	701e      	strb	r6, [r3, #0]
 80065d8:	6962      	ldr	r2, [r4, #20]
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	429a      	cmp	r2, r3
 80065de:	d004      	beq.n	80065ea <__swbuf_r+0x5a>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	07db      	lsls	r3, r3, #31
 80065e4:	d506      	bpl.n	80065f4 <__swbuf_r+0x64>
 80065e6:	2e0a      	cmp	r6, #10
 80065e8:	d104      	bne.n	80065f4 <__swbuf_r+0x64>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f7ff fdd9 	bl	80061a4 <_fflush_r>
 80065f2:	b938      	cbnz	r0, 8006604 <__swbuf_r+0x74>
 80065f4:	4638      	mov	r0, r7
 80065f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 f806 	bl	800660c <__swsetup_r>
 8006600:	2800      	cmp	r0, #0
 8006602:	d0d5      	beq.n	80065b0 <__swbuf_r+0x20>
 8006604:	f04f 37ff 	mov.w	r7, #4294967295
 8006608:	e7f4      	b.n	80065f4 <__swbuf_r+0x64>
	...

0800660c <__swsetup_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <__swsetup_r+0xac>)
 8006610:	4605      	mov	r5, r0
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	460c      	mov	r4, r1
 8006616:	b118      	cbz	r0, 8006620 <__swsetup_r+0x14>
 8006618:	6a03      	ldr	r3, [r0, #32]
 800661a:	b90b      	cbnz	r3, 8006620 <__swsetup_r+0x14>
 800661c:	f7fe f9d4 	bl	80049c8 <__sinit>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006626:	0718      	lsls	r0, r3, #28
 8006628:	d422      	bmi.n	8006670 <__swsetup_r+0x64>
 800662a:	06d9      	lsls	r1, r3, #27
 800662c:	d407      	bmi.n	800663e <__swsetup_r+0x32>
 800662e:	2309      	movs	r3, #9
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e034      	b.n	80066a8 <__swsetup_r+0x9c>
 800663e:	0758      	lsls	r0, r3, #29
 8006640:	d512      	bpl.n	8006668 <__swsetup_r+0x5c>
 8006642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006644:	b141      	cbz	r1, 8006658 <__swsetup_r+0x4c>
 8006646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <__swsetup_r+0x48>
 800664e:	4628      	mov	r0, r5
 8006650:	f7ff f8a6 	bl	80057a0 <_free_r>
 8006654:	2300      	movs	r3, #0
 8006656:	6363      	str	r3, [r4, #52]	; 0x34
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	2300      	movs	r3, #0
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	6923      	ldr	r3, [r4, #16]
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f043 0308 	orr.w	r3, r3, #8
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	b94b      	cbnz	r3, 8006688 <__swsetup_r+0x7c>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800667a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667e:	d003      	beq.n	8006688 <__swsetup_r+0x7c>
 8006680:	4621      	mov	r1, r4
 8006682:	4628      	mov	r0, r5
 8006684:	f000 f884 	bl	8006790 <__smakebuf_r>
 8006688:	89a0      	ldrh	r0, [r4, #12]
 800668a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800668e:	f010 0301 	ands.w	r3, r0, #1
 8006692:	d00a      	beq.n	80066aa <__swsetup_r+0x9e>
 8006694:	2300      	movs	r3, #0
 8006696:	60a3      	str	r3, [r4, #8]
 8006698:	6963      	ldr	r3, [r4, #20]
 800669a:	425b      	negs	r3, r3
 800669c:	61a3      	str	r3, [r4, #24]
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	b943      	cbnz	r3, 80066b4 <__swsetup_r+0xa8>
 80066a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066a6:	d1c4      	bne.n	8006632 <__swsetup_r+0x26>
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	0781      	lsls	r1, r0, #30
 80066ac:	bf58      	it	pl
 80066ae:	6963      	ldrpl	r3, [r4, #20]
 80066b0:	60a3      	str	r3, [r4, #8]
 80066b2:	e7f4      	b.n	800669e <__swsetup_r+0x92>
 80066b4:	2000      	movs	r0, #0
 80066b6:	e7f7      	b.n	80066a8 <__swsetup_r+0x9c>
 80066b8:	20000064 	.word	0x20000064

080066bc <_raise_r>:
 80066bc:	291f      	cmp	r1, #31
 80066be:	b538      	push	{r3, r4, r5, lr}
 80066c0:	4604      	mov	r4, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	d904      	bls.n	80066d0 <_raise_r+0x14>
 80066c6:	2316      	movs	r3, #22
 80066c8:	6003      	str	r3, [r0, #0]
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80066d2:	b112      	cbz	r2, 80066da <_raise_r+0x1e>
 80066d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066d8:	b94b      	cbnz	r3, 80066ee <_raise_r+0x32>
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 f830 	bl	8006740 <_getpid_r>
 80066e0:	462a      	mov	r2, r5
 80066e2:	4601      	mov	r1, r0
 80066e4:	4620      	mov	r0, r4
 80066e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ea:	f000 b817 	b.w	800671c <_kill_r>
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d00a      	beq.n	8006708 <_raise_r+0x4c>
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	d103      	bne.n	80066fe <_raise_r+0x42>
 80066f6:	2316      	movs	r3, #22
 80066f8:	6003      	str	r3, [r0, #0]
 80066fa:	2001      	movs	r0, #1
 80066fc:	e7e7      	b.n	80066ce <_raise_r+0x12>
 80066fe:	2400      	movs	r4, #0
 8006700:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006704:	4628      	mov	r0, r5
 8006706:	4798      	blx	r3
 8006708:	2000      	movs	r0, #0
 800670a:	e7e0      	b.n	80066ce <_raise_r+0x12>

0800670c <raise>:
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <raise+0xc>)
 800670e:	4601      	mov	r1, r0
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f7ff bfd3 	b.w	80066bc <_raise_r>
 8006716:	bf00      	nop
 8006718:	20000064 	.word	0x20000064

0800671c <_kill_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	; (800673c <_kill_r+0x20>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	4611      	mov	r1, r2
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	f7fa f8af 	bl	800088c <_kill>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d102      	bne.n	8006738 <_kill_r+0x1c>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	b103      	cbz	r3, 8006738 <_kill_r+0x1c>
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	bf00      	nop
 800673c:	2000040c 	.word	0x2000040c

08006740 <_getpid_r>:
 8006740:	f7fa b89c 	b.w	800087c <_getpid>

08006744 <__swhatbuf_r>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	460c      	mov	r4, r1
 8006748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674c:	2900      	cmp	r1, #0
 800674e:	b096      	sub	sp, #88	; 0x58
 8006750:	4615      	mov	r5, r2
 8006752:	461e      	mov	r6, r3
 8006754:	da0d      	bge.n	8006772 <__swhatbuf_r+0x2e>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	bf0c      	ite	eq
 8006762:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006766:	2340      	movne	r3, #64	; 0x40
 8006768:	2000      	movs	r0, #0
 800676a:	6031      	str	r1, [r6, #0]
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	b016      	add	sp, #88	; 0x58
 8006770:	bd70      	pop	{r4, r5, r6, pc}
 8006772:	466a      	mov	r2, sp
 8006774:	f000 f848 	bl	8006808 <_fstat_r>
 8006778:	2800      	cmp	r0, #0
 800677a:	dbec      	blt.n	8006756 <__swhatbuf_r+0x12>
 800677c:	9901      	ldr	r1, [sp, #4]
 800677e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006782:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006786:	4259      	negs	r1, r3
 8006788:	4159      	adcs	r1, r3
 800678a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678e:	e7eb      	b.n	8006768 <__swhatbuf_r+0x24>

08006790 <__smakebuf_r>:
 8006790:	898b      	ldrh	r3, [r1, #12]
 8006792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006794:	079d      	lsls	r5, r3, #30
 8006796:	4606      	mov	r6, r0
 8006798:	460c      	mov	r4, r1
 800679a:	d507      	bpl.n	80067ac <__smakebuf_r+0x1c>
 800679c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	2301      	movs	r3, #1
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	b002      	add	sp, #8
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	ab01      	add	r3, sp, #4
 80067ae:	466a      	mov	r2, sp
 80067b0:	f7ff ffc8 	bl	8006744 <__swhatbuf_r>
 80067b4:	9900      	ldr	r1, [sp, #0]
 80067b6:	4605      	mov	r5, r0
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff f865 	bl	8005888 <_malloc_r>
 80067be:	b948      	cbnz	r0, 80067d4 <__smakebuf_r+0x44>
 80067c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d4ef      	bmi.n	80067a8 <__smakebuf_r+0x18>
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7e3      	b.n	800679c <__smakebuf_r+0xc>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	6020      	str	r0, [r4, #0]
 80067d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	9b00      	ldr	r3, [sp, #0]
 80067e0:	6163      	str	r3, [r4, #20]
 80067e2:	9b01      	ldr	r3, [sp, #4]
 80067e4:	6120      	str	r0, [r4, #16]
 80067e6:	b15b      	cbz	r3, 8006800 <__smakebuf_r+0x70>
 80067e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ec:	4630      	mov	r0, r6
 80067ee:	f000 f81d 	bl	800682c <_isatty_r>
 80067f2:	b128      	cbz	r0, 8006800 <__smakebuf_r+0x70>
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	81a3      	strh	r3, [r4, #12]
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	431d      	orrs	r5, r3
 8006804:	81a5      	strh	r5, [r4, #12]
 8006806:	e7cf      	b.n	80067a8 <__smakebuf_r+0x18>

08006808 <_fstat_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d07      	ldr	r5, [pc, #28]	; (8006828 <_fstat_r+0x20>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	4611      	mov	r1, r2
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	f7fa f898 	bl	800094a <_fstat>
 800681a:	1c43      	adds	r3, r0, #1
 800681c:	d102      	bne.n	8006824 <_fstat_r+0x1c>
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	b103      	cbz	r3, 8006824 <_fstat_r+0x1c>
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	bf00      	nop
 8006828:	2000040c 	.word	0x2000040c

0800682c <_isatty_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d06      	ldr	r5, [pc, #24]	; (8006848 <_isatty_r+0x1c>)
 8006830:	2300      	movs	r3, #0
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	f7fa f897 	bl	800096a <_isatty>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_isatty_r+0x1a>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_isatty_r+0x1a>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	2000040c 	.word	0x2000040c

0800684c <_init>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr

08006858 <_fini>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr
