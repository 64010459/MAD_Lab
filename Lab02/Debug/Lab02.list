
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006638  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08006838  08006838  00016838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c70  08006c70  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c78  08006c78  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08006c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000021c  08006e9c  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006e9c  00020390  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000515a  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001490  00000000  00000000  000253e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  00026878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ea  00000000  00000000  00026df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e38  00000000  00000000  000271da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006f88  00000000  00000000  0004e012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed000  00000000  00000000  00054f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026e0  00000000  00000000  00141f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0014467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000021c 	.word	0x2000021c
 800021c:	00000000 	.word	0x00000000
 8000220:	08006820 	.word	0x08006820

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000220 	.word	0x20000220
 800023c:	08006820 	.word	0x08006820

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MX_GPIO_Init>:

/* USER CODE END 1 */

/** Configure pins
 */
void MX_GPIO_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b66      	ldr	r3, [pc, #408]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a65      	ldr	r2, [pc, #404]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b63      	ldr	r3, [pc, #396]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b60      	ldr	r3, [pc, #384]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a5f      	ldr	r2, [pc, #380]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b5d      	ldr	r3, [pc, #372]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b5a      	ldr	r3, [pc, #360]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a59      	ldr	r2, [pc, #356]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a32:	4b54      	ldr	r3, [pc, #336]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a53      	ldr	r2, [pc, #332]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0320 	and.w	r3, r3, #32
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b4e      	ldr	r3, [pc, #312]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a4d      	ldr	r2, [pc, #308]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <MX_GPIO_Init+0x1b0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4842      	ldr	r0, [pc, #264]	; (8000b88 <MX_GPIO_Init+0x1b4>)
 8000a80:	f000 ff42 	bl	8001908 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a8a:	4840      	ldr	r0, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x1b8>)
 8000a8c:	f000 ff3c 	bl	8001908 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13,
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000a96:	483e      	ldr	r0, [pc, #248]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000a98:	f000 ff36 	bl	8001908 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa2:	483c      	ldr	r0, [pc, #240]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000aa4:	f000 ff30 	bl	8001908 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000aae:	483a      	ldr	r0, [pc, #232]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000ab0:	f000 ff2a 	bl	8001908 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4832      	ldr	r0, [pc, #200]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000aca:	f000 fd59 	bl	8001580 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	482e      	ldr	r0, [pc, #184]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000ae2:	f000 fd4d 	bl	8001580 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4822      	ldr	r0, [pc, #136]	; (8000b88 <MX_GPIO_Init+0x1b4>)
 8000afe:	f000 fd3f 	bl	8001580 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF13 PF14 PF15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000b02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <MX_GPIO_Init+0x1b8>)
 8000b1c:	f000 fd30 	bl	8001580 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE9 PE11 PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13;
 8000b20:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000b24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4815      	ldr	r0, [pc, #84]	; (8000b90 <MX_GPIO_Init+0x1bc>)
 8000b3a:	f000 fd21 	bl	8001580 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <MX_GPIO_Init+0x1c0>)
 8000b58:	f000 fd12 	bl	8001580 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 8000b5c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000b60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000b76:	f000 fd03 	bl	8001580 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ba4:	f000 fb09 	bl	80011ba <HAL_Init>

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000ba8:	f000 f986 	bl	8000eb8 <MPU_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bac:	f000 f916 	bl	8000ddc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bb0:	f7ff ff10 	bl	80009d4 <MX_GPIO_Init>
//
//	  	//Turn off LD2 at PC8
//	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
//	}
		/*04*/
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	4880      	ldr	r0, [pc, #512]	; (8000dbc <main+0x21c>)
 8000bba:	f000 fe8d 	bl	80018d8 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d110      	bne.n	8000be6 <main+0x46>
			num++;
 8000bc4:	4b7e      	ldr	r3, [pc, #504]	; (8000dc0 <main+0x220>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b7c      	ldr	r3, [pc, #496]	; (8000dc0 <main+0x220>)
 8000bce:	701a      	strb	r2, [r3, #0]
			if (num > 8) {
 8000bd0:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <main+0x220>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d902      	bls.n	8000bde <main+0x3e>
				num = 0;
 8000bd8:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <main+0x220>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(300);
 8000bde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000be2:	f000 fb47 	bl	8001274 <HAL_Delay>
		}

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, counting[num][0]);
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <main+0x220>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <main+0x224>)
 8000bee:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf8:	4873      	ldr	r0, [pc, #460]	; (8000dc8 <main+0x228>)
 8000bfa:	f000 fe85 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, counting[num][1]);
 8000bfe:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <main+0x220>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4a70      	ldr	r2, [pc, #448]	; (8000dc4 <main+0x224>)
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	486e      	ldr	r0, [pc, #440]	; (8000dcc <main+0x22c>)
 8000c12:	f000 fe79 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, counting[num][2]);
 8000c16:	4b6a      	ldr	r3, [pc, #424]	; (8000dc0 <main+0x220>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4a6a      	ldr	r2, [pc, #424]	; (8000dc4 <main+0x224>)
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	4413      	add	r3, r2
 8000c20:	789b      	ldrb	r3, [r3, #2]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c28:	4868      	ldr	r0, [pc, #416]	; (8000dcc <main+0x22c>)
 8000c2a:	f000 fe6d 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, counting[num][3]);
 8000c2e:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <main+0x220>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4a64      	ldr	r2, [pc, #400]	; (8000dc4 <main+0x224>)
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	4413      	add	r3, r2
 8000c38:	78db      	ldrb	r3, [r3, #3]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <main+0x228>)
 8000c42:	f000 fe61 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, counting[num][4]);
 8000c46:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <main+0x220>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4a5e      	ldr	r2, [pc, #376]	; (8000dc4 <main+0x224>)
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4413      	add	r3, r2
 8000c50:	791b      	ldrb	r3, [r3, #4]
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	485c      	ldr	r0, [pc, #368]	; (8000dcc <main+0x22c>)
 8000c5a:	f000 fe55 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, counting[num][5]);
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <main+0x220>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4a58      	ldr	r2, [pc, #352]	; (8000dc4 <main+0x224>)
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	795b      	ldrb	r3, [r3, #5]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c70:	4855      	ldr	r0, [pc, #340]	; (8000dc8 <main+0x228>)
 8000c72:	f000 fe49 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, counting[num][6]);
 8000c76:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <main+0x220>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4a52      	ldr	r2, [pc, #328]	; (8000dc4 <main+0x224>)
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	799b      	ldrb	r3, [r3, #6]
 8000c82:	461a      	mov	r2, r3
 8000c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <main+0x230>)
 8000c8a:	f000 fe3d 	bl	8001908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, counting[num][7]);
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <main+0x220>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <main+0x224>)
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	79db      	ldrb	r3, [r3, #7]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	484b      	ldr	r0, [pc, #300]	; (8000dd0 <main+0x230>)
 8000ca2:	f000 fe31 	bl	8001908 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <main+0x234>)
 8000caa:	f000 fe15 	bl	80018d8 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f47f af7f 	bne.w	8000bb4 <main+0x14>
			temp = num;
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <main+0x220>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <main+0x238>)
 8000cbc:	701a      	strb	r2, [r3, #0]
			num--;
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <main+0x220>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <main+0x220>)
 8000cc8:	701a      	strb	r2, [r3, #0]
			while (num != temp) {
 8000cca:	e070      	b.n	8000dae <main+0x20e>
				if (num >= 9) {
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <main+0x220>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d902      	bls.n	8000cda <main+0x13a>
					num = 8;
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <main+0x220>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	701a      	strb	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, counting[num][0]);
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <main+0x220>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <main+0x224>)
 8000ce2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <main+0x228>)
 8000cee:	f000 fe0b 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, counting[num][1]);
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <main+0x220>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <main+0x224>)
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	785b      	ldrb	r3, [r3, #1]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d04:	4831      	ldr	r0, [pc, #196]	; (8000dcc <main+0x22c>)
 8000d06:	f000 fdff 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, counting[num][2]);
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <main+0x220>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <main+0x224>)
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4413      	add	r3, r2
 8000d14:	789b      	ldrb	r3, [r3, #2]
 8000d16:	461a      	mov	r2, r3
 8000d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1c:	482b      	ldr	r0, [pc, #172]	; (8000dcc <main+0x22c>)
 8000d1e:	f000 fdf3 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, counting[num][3]);
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <main+0x220>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <main+0x224>)
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	78db      	ldrb	r3, [r3, #3]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <main+0x228>)
 8000d36:	f000 fde7 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, counting[num][4]);
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <main+0x220>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <main+0x224>)
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4413      	add	r3, r2
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	461a      	mov	r2, r3
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	481f      	ldr	r0, [pc, #124]	; (8000dcc <main+0x22c>)
 8000d4e:	f000 fddb 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, counting[num][5]);
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <main+0x220>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <main+0x224>)
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <main+0x228>)
 8000d66:	f000 fdcf 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, counting[num][6]);
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <main+0x220>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <main+0x224>)
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	4413      	add	r3, r2
 8000d74:	799b      	ldrb	r3, [r3, #6]
 8000d76:	461a      	mov	r2, r3
 8000d78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7c:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <main+0x230>)
 8000d7e:	f000 fdc3 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, counting[num][7]);
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <main+0x220>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <main+0x224>)
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	79db      	ldrb	r3, [r3, #7]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <main+0x230>)
 8000d96:	f000 fdb7 	bl	8001908 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9e:	f000 fa69 	bl	8001274 <HAL_Delay>
				num--;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <main+0x220>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <main+0x220>)
 8000dac:	701a      	strb	r2, [r3, #0]
			while (num != temp) {
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <main+0x220>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <main+0x238>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d188      	bne.n	8000ccc <main+0x12c>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000dba:	e6fb      	b.n	8000bb4 <main+0x14>
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	20000238 	.word	0x20000238
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	20000239 	.word	0x20000239

08000ddc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2234      	movs	r2, #52	; 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 f9a9 	bl	8003142 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <SystemClock_Config+0xd8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e44:	2308      	movs	r3, #8
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000e48:	23d8      	movs	r3, #216	; 0xd8
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fdbd 	bl	80019dc <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x90>
		Error_Handler();
 8000e68:	f000 f852 	bl	8000f10 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000e6c:	f000 fd66 	bl	800193c <HAL_PWREx_EnableOverDrive>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x9e>
		Error_Handler();
 8000e76:	f000 f84b 	bl	8000f10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2107      	movs	r1, #7
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 f84d 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xcc>
		Error_Handler();
 8000ea4:	f000 f834 	bl	8000f10 <Error_Handler>
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	3750      	adds	r7, #80	; 0x50
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000eca:	f000 fadd 	bl	8001488 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eda:	231f      	movs	r3, #31
 8000edc:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000ede:	2387      	movs	r3, #135	; 0x87
 8000ee0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000efa:	463b      	mov	r3, r7
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fafb 	bl	80014f8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f02:	2004      	movs	r0, #4
 8000f04:	f000 fad8 	bl	80014b8 <HAL_MPU_Enable>

}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000fb0:	f000 f940 	bl	8001234 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	return 1;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_kill>:

int _kill(int pid, int sig) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8000fd2:	f002 f909 	bl	80031e8 <__errno>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2216      	movs	r2, #22
 8000fda:	601a      	str	r2, [r3, #0]
	return -1;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_exit>:

void _exit(int status) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ffe7 	bl	8000fc8 <_kill>
	while (1) {
 8000ffa:	e7fe      	b.n	8000ffa <_exit+0x12>

08000ffc <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
		*ptr++ = __io_getchar();
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
	}

	return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <_write+0x26>
		__io_putchar(*ptr++);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf1      	blt.n	8001048 <_write+0x12>
	}
	return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_close>:

int _close(int file) {
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	605a      	str	r2, [r3, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_isatty>:

int _isatty(int file) {
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
		errno = ENOMEM;
 8001108:	f002 f86e 	bl	80031e8 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20080000 	.word	0x20080000
 8001138:	00000400 	.word	0x00000400
 800113c:	2000023c 	.word	0x2000023c
 8001140:	20000390 	.word	0x20000390

08001144 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001184:	4c0b      	ldr	r4, [pc, #44]	; (80011b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001192:	f7ff ffd7 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f002 f82d 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fd01 	bl	8000ba0 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80011ac:	08006c80 	.word	0x08006c80
  ldr r2, =_sbss
 80011b0:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80011b4:	20000390 	.word	0x20000390

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>

080011ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 f92e 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c4:	200f      	movs	r0, #15
 80011c6:	f000 f805 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ca:	f7ff fea7 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f93b 	bl	800146e <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f911 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000048 	.word	0x20000048
 800122c:	20000050 	.word	0x20000050
 8001230:	2000004c 	.word	0x2000004c

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000050 	.word	0x20000050
 8001258:	20000240 	.word	0x20000240

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000240 	.word	0x20000240

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000050 	.word	0x20000050

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x40>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	05fa0000 	.word	0x05fa0000

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff5c 	bl	8001304 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffb0 	bl	80013dc <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800148c:	f3bf 8f5f 	dmb	sy
}
 8001490:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_MPU_Disable+0x28>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_MPU_Disable+0x28>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_MPU_Disable+0x2c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	e000ed90 	.word	0xe000ed90

080014b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_MPU_Enable+0x38>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_MPU_Enable+0x3c>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_MPU_Enable+0x3c>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014d6:	f3bf 8f4f 	dsb	sy
}
 80014da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014dc:	f3bf 8f6f 	isb	sy
}
 80014e0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed90 	.word	0xe000ed90
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	785a      	ldrb	r2, [r3, #1]
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_MPU_ConfigRegion+0x84>)
 8001506:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d029      	beq.n	8001564 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001510:	4a1a      	ldr	r2, [pc, #104]	; (800157c <HAL_MPU_ConfigRegion+0x84>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7b1b      	ldrb	r3, [r3, #12]
 800151c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7adb      	ldrb	r3, [r3, #11]
 8001522:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001524:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7a9b      	ldrb	r3, [r3, #10]
 800152a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800152c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7b5b      	ldrb	r3, [r3, #13]
 8001532:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001534:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7b9b      	ldrb	r3, [r3, #14]
 800153a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800153c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7bdb      	ldrb	r3, [r3, #15]
 8001542:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001544:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7a5b      	ldrb	r3, [r3, #9]
 800154a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800154c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7a1b      	ldrb	r3, [r3, #8]
 8001552:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001554:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800155e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001560:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001562:	e005      	b.n	8001570 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_MPU_ConfigRegion+0x84>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_MPU_ConfigRegion+0x84>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed90 	.word	0xe000ed90

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e175      	b.n	800188c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8164 	bne.w	8001886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d005      	beq.n	80015d6 <HAL_GPIO_Init+0x56>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d130      	bne.n	8001638 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80be 	beq.w	8001886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_GPIO_Init+0x324>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a65      	ldr	r2, [pc, #404]	; (80018a4 <HAL_GPIO_Init+0x324>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_GPIO_Init+0x324>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001722:	4a61      	ldr	r2, [pc, #388]	; (80018a8 <HAL_GPIO_Init+0x328>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_GPIO_Init+0x32c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d037      	beq.n	80017be <HAL_GPIO_Init+0x23e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_GPIO_Init+0x330>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d031      	beq.n	80017ba <HAL_GPIO_Init+0x23a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a56      	ldr	r2, [pc, #344]	; (80018b4 <HAL_GPIO_Init+0x334>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x236>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_Init+0x338>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x232>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x33c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x22e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a53      	ldr	r2, [pc, #332]	; (80018c0 <HAL_GPIO_Init+0x340>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x22a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_GPIO_Init+0x344>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x348>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x222>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_GPIO_Init+0x34c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x21e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_GPIO_Init+0x350>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x21a>
 8001796:	2309      	movs	r3, #9
 8001798:	e012      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 800179a:	230a      	movs	r3, #10
 800179c:	e010      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00e      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x240>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	; (80018a8 <HAL_GPIO_Init+0x328>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_GPIO_Init+0x354>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_GPIO_Init+0x354>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a29      	ldr	r2, [pc, #164]	; (80018d4 <HAL_GPIO_Init+0x354>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_GPIO_Init+0x354>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_GPIO_Init+0x354>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f ae86 	bls.w	80015a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40021c00 	.word	0x40021c00
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40022400 	.word	0x40022400
 80018d4:	40013c00 	.word	0x40013c00

080018d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800196a:	f7ff fc77 	bl	800125c <HAL_GetTick>
 800196e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001970:	e009      	b.n	8001986 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001972:	f7ff fc73 	bl	800125c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001980:	d901      	bls.n	8001986 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e022      	b.n	80019cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d1ee      	bne.n	8001972 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800199a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a0:	f7ff fc5c 	bl	800125c <HAL_GetTick>
 80019a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019a6:	e009      	b.n	80019bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019a8:	f7ff fc58 	bl	800125c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b6:	d901      	bls.n	80019bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e007      	b.n	80019cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c8:	d1ee      	bne.n	80019a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e29b      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a00:	4b96      	ldr	r3, [pc, #600]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0c:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62>
 8001a18:	4b90      	ldr	r3, [pc, #576]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b8d      	ldr	r3, [pc, #564]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x130>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d168      	bne.n	8001b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e275      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x7a>
 8001a48:	4b84      	ldr	r3, [pc, #528]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a83      	ldr	r2, [pc, #524]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x9c>
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7e      	ldr	r2, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xc0>
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd8>
 8001a9c:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fbce 	bl	800125c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fbca 	bl	800125c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e229      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe8>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fbba 	bl	800125c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fbb6 	bl	800125c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e215      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x110>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d069      	beq.n	8001bee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x190>
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x17a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1e9      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	493d      	ldr	r1, [pc, #244]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e040      	b.n	8001bee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb6c 	bl	800125c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb68 	bl	800125c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1c7      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4929      	ldr	r1, [pc, #164]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
 8001bba:	e018      	b.n	8001bee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb48 	bl	800125c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fb44 	bl	800125c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1a3      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d038      	beq.n	8001c6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d019      	beq.n	8001c36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb25 	bl	800125c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff fb21 	bl	800125c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e180      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x23a>
 8001c34:	e01a      	b.n	8001c6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb0b 	bl	800125c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fb07 	bl	800125c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d903      	bls.n	8001c60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e166      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
 8001c5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a4 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10d      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a88      	ldr	r2, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b86      	ldr	r3, [pc, #536]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca2:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x4d4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cae:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x4d4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7f      	ldr	r2, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x4d4>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff facf 	bl	800125c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff facb 	bl	800125c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e12a      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd4:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x4d4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x31a>
 8001ce8:	4b70      	ldr	r3, [pc, #448]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a6f      	ldr	r2, [pc, #444]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	e02d      	b.n	8001d52 <HAL_RCC_OscConfig+0x376>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x33c>
 8001cfe:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a67      	ldr	r2, [pc, #412]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e01c      	b.n	8001d52 <HAL_RCC_OscConfig+0x376>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x35e>
 8001d20:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a61      	ldr	r2, [pc, #388]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a5e      	ldr	r2, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x376>
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fa7f 	bl	800125c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7ff fa7b 	bl	800125c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0d8      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ee      	beq.n	8001d62 <HAL_RCC_OscConfig+0x386>
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff fa69 	bl	800125c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fa65 	bl	800125c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0c2      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80ae 	beq.w	8001f28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d06d      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d14b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fa36 	bl	800125c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff fa32 	bl	800125c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e091      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	071b      	lsls	r3, r3, #28
 8001e3e:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fa04 	bl	800125c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff fa00 	bl	800125c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e05f      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x47c>
 8001e76:	e057      	b.n	8001f28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f9ea 	bl	800125c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f9e6 	bl	800125c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e045      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_RCC_OscConfig+0x4d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4b0>
 8001eaa:	e03d      	b.n	8001f28 <HAL_RCC_OscConfig+0x54c>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_RCC_OscConfig+0x558>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d030      	beq.n	8001f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d129      	bne.n	8001f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d122      	bne.n	8001f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d119      	bne.n	8001f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10f      	bne.n	8001f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0d0      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	4965      	ldr	r1, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	494d      	ldr	r1, [pc, #308]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e073      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7ff f916 	bl	800125c <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff f912 	bl	800125c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e053      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	4922      	ldr	r1, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	490a      	ldr	r1, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1cc>)
 80020dc:	5ccb      	ldrb	r3, [r1, r3]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1d0>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1d4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f872 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00
 8002100:	40023800 	.word	0x40023800
 8002104:	08006838 	.word	0x08006838
 8002108:	20000048 	.word	0x20000048
 800210c:	2000004c 	.word	0x2000004c

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002114:	b090      	sub	sp, #64	; 0x40
 8002116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
 800211c:	2300      	movs	r3, #0
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002120:	2300      	movs	r3, #0
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_GetSysClockFreq+0x180>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d00d      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x40>
 8002134:	2b08      	cmp	r3, #8
 8002136:	f200 80a1 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x16c>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x34>
 800213e:	2b04      	cmp	r3, #4
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x3a>
 8002142:	e09b      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_GetSysClockFreq+0x184>)
 8002146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002148:	e09b      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_GetSysClockFreq+0x188>)
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800214e:	e098      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002150:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_GetSysClockFreq+0x180>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800215a:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_GetSysClockFreq+0x180>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d028      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_GetSysClockFreq+0x180>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	099b      	lsrs	r3, r3, #6
 800216c:	2200      	movs	r2, #0
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	627a      	str	r2, [r7, #36]	; 0x24
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002178:	2100      	movs	r1, #0
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_GetSysClockFreq+0x188>)
 800217c:	fb03 f201 	mul.w	r2, r3, r1
 8002180:	2300      	movs	r3, #0
 8002182:	fb00 f303 	mul.w	r3, r0, r3
 8002186:	4413      	add	r3, r2
 8002188:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_RCC_GetSysClockFreq+0x188>)
 800218a:	fba0 1202 	umull	r1, r2, r0, r2
 800218e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002190:	460a      	mov	r2, r1
 8002192:	62ba      	str	r2, [r7, #40]	; 0x28
 8002194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002196:	4413      	add	r3, r2
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	2200      	movs	r2, #0
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	61fa      	str	r2, [r7, #28]
 80021a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021aa:	f7fe fa5d 	bl	8000668 <__aeabi_uldivmod>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4613      	mov	r3, r2
 80021b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b6:	e053      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	2200      	movs	r2, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	617a      	str	r2, [r7, #20]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021ca:	f04f 0b00 	mov.w	fp, #0
 80021ce:	4652      	mov	r2, sl
 80021d0:	465b      	mov	r3, fp
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e0:	0150      	lsls	r0, r2, #5
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	ebb2 080a 	subs.w	r8, r2, sl
 80021ea:	eb63 090b 	sbc.w	r9, r3, fp
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002202:	ebb2 0408 	subs.w	r4, r2, r8
 8002206:	eb63 0509 	sbc.w	r5, r3, r9
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	00eb      	lsls	r3, r5, #3
 8002214:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002218:	00e2      	lsls	r2, r4, #3
 800221a:	4614      	mov	r4, r2
 800221c:	461d      	mov	r5, r3
 800221e:	eb14 030a 	adds.w	r3, r4, sl
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	eb45 030b 	adc.w	r3, r5, fp
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002236:	4629      	mov	r1, r5
 8002238:	028b      	lsls	r3, r1, #10
 800223a:	4621      	mov	r1, r4
 800223c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002240:	4621      	mov	r1, r4
 8002242:	028a      	lsls	r2, r1, #10
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	2200      	movs	r2, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002254:	f7fe fa08 	bl	8000668 <__aeabi_uldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4613      	mov	r3, r2
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0x180>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	3301      	adds	r3, #1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetSysClockFreq+0x184>)
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002284:	4618      	mov	r0, r3
 8002286:	3740      	adds	r7, #64	; 0x40
 8002288:	46bd      	mov	sp, r7
 800228a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	017d7840 	.word	0x017d7840

0800229c <__cvt>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	ed2d 8b02 	vpush	{d8}
 80022a2:	eeb0 8b40 	vmov.f64	d8, d0
 80022a6:	b085      	sub	sp, #20
 80022a8:	4617      	mov	r7, r2
 80022aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80022ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80022ae:	ee18 2a90 	vmov	r2, s17
 80022b2:	f025 0520 	bic.w	r5, r5, #32
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	bfb6      	itet	lt
 80022ba:	222d      	movlt	r2, #45	; 0x2d
 80022bc:	2200      	movge	r2, #0
 80022be:	eeb1 8b40 	vneglt.f64	d8, d0
 80022c2:	2d46      	cmp	r5, #70	; 0x46
 80022c4:	460c      	mov	r4, r1
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	d004      	beq.n	80022d4 <__cvt+0x38>
 80022ca:	2d45      	cmp	r5, #69	; 0x45
 80022cc:	d100      	bne.n	80022d0 <__cvt+0x34>
 80022ce:	3401      	adds	r4, #1
 80022d0:	2102      	movs	r1, #2
 80022d2:	e000      	b.n	80022d6 <__cvt+0x3a>
 80022d4:	2103      	movs	r1, #3
 80022d6:	ab03      	add	r3, sp, #12
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	ab02      	add	r3, sp, #8
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	4622      	mov	r2, r4
 80022e0:	4633      	mov	r3, r6
 80022e2:	eeb0 0b48 	vmov.f64	d0, d8
 80022e6:	f001 f83b 	bl	8003360 <_dtoa_r>
 80022ea:	2d47      	cmp	r5, #71	; 0x47
 80022ec:	d101      	bne.n	80022f2 <__cvt+0x56>
 80022ee:	07fb      	lsls	r3, r7, #31
 80022f0:	d51a      	bpl.n	8002328 <__cvt+0x8c>
 80022f2:	2d46      	cmp	r5, #70	; 0x46
 80022f4:	eb00 0204 	add.w	r2, r0, r4
 80022f8:	d10c      	bne.n	8002314 <__cvt+0x78>
 80022fa:	7803      	ldrb	r3, [r0, #0]
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d107      	bne.n	8002310 <__cvt+0x74>
 8002300:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	bf1c      	itt	ne
 800230a:	f1c4 0401 	rsbne	r4, r4, #1
 800230e:	6034      	strne	r4, [r6, #0]
 8002310:	6833      	ldr	r3, [r6, #0]
 8002312:	441a      	add	r2, r3
 8002314:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	bf08      	it	eq
 800231e:	9203      	streq	r2, [sp, #12]
 8002320:	2130      	movs	r1, #48	; 0x30
 8002322:	9b03      	ldr	r3, [sp, #12]
 8002324:	4293      	cmp	r3, r2
 8002326:	d307      	bcc.n	8002338 <__cvt+0x9c>
 8002328:	9b03      	ldr	r3, [sp, #12]
 800232a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800232c:	1a1b      	subs	r3, r3, r0
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	b005      	add	sp, #20
 8002332:	ecbd 8b02 	vpop	{d8}
 8002336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002338:	1c5c      	adds	r4, r3, #1
 800233a:	9403      	str	r4, [sp, #12]
 800233c:	7019      	strb	r1, [r3, #0]
 800233e:	e7f0      	b.n	8002322 <__cvt+0x86>

08002340 <__exponent>:
 8002340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002342:	4603      	mov	r3, r0
 8002344:	2900      	cmp	r1, #0
 8002346:	bfb8      	it	lt
 8002348:	4249      	neglt	r1, r1
 800234a:	f803 2b02 	strb.w	r2, [r3], #2
 800234e:	bfb4      	ite	lt
 8002350:	222d      	movlt	r2, #45	; 0x2d
 8002352:	222b      	movge	r2, #43	; 0x2b
 8002354:	2909      	cmp	r1, #9
 8002356:	7042      	strb	r2, [r0, #1]
 8002358:	dd2a      	ble.n	80023b0 <__exponent+0x70>
 800235a:	f10d 0207 	add.w	r2, sp, #7
 800235e:	4617      	mov	r7, r2
 8002360:	260a      	movs	r6, #10
 8002362:	4694      	mov	ip, r2
 8002364:	fb91 f5f6 	sdiv	r5, r1, r6
 8002368:	fb06 1415 	mls	r4, r6, r5, r1
 800236c:	3430      	adds	r4, #48	; 0x30
 800236e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002372:	460c      	mov	r4, r1
 8002374:	2c63      	cmp	r4, #99	; 0x63
 8002376:	f102 32ff 	add.w	r2, r2, #4294967295
 800237a:	4629      	mov	r1, r5
 800237c:	dcf1      	bgt.n	8002362 <__exponent+0x22>
 800237e:	3130      	adds	r1, #48	; 0x30
 8002380:	f1ac 0402 	sub.w	r4, ip, #2
 8002384:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002388:	1c41      	adds	r1, r0, #1
 800238a:	4622      	mov	r2, r4
 800238c:	42ba      	cmp	r2, r7
 800238e:	d30a      	bcc.n	80023a6 <__exponent+0x66>
 8002390:	f10d 0209 	add.w	r2, sp, #9
 8002394:	eba2 020c 	sub.w	r2, r2, ip
 8002398:	42bc      	cmp	r4, r7
 800239a:	bf88      	it	hi
 800239c:	2200      	movhi	r2, #0
 800239e:	4413      	add	r3, r2
 80023a0:	1a18      	subs	r0, r3, r0
 80023a2:	b003      	add	sp, #12
 80023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80023aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80023ae:	e7ed      	b.n	800238c <__exponent+0x4c>
 80023b0:	2330      	movs	r3, #48	; 0x30
 80023b2:	3130      	adds	r1, #48	; 0x30
 80023b4:	7083      	strb	r3, [r0, #2]
 80023b6:	70c1      	strb	r1, [r0, #3]
 80023b8:	1d03      	adds	r3, r0, #4
 80023ba:	e7f1      	b.n	80023a0 <__exponent+0x60>
 80023bc:	0000      	movs	r0, r0
	...

080023c0 <_printf_float>:
 80023c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c4:	b08b      	sub	sp, #44	; 0x2c
 80023c6:	460c      	mov	r4, r1
 80023c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80023cc:	4616      	mov	r6, r2
 80023ce:	461f      	mov	r7, r3
 80023d0:	4605      	mov	r5, r0
 80023d2:	f000 febf 	bl	8003154 <_localeconv_r>
 80023d6:	f8d0 b000 	ldr.w	fp, [r0]
 80023da:	4658      	mov	r0, fp
 80023dc:	f7fd ff80 	bl	80002e0 <strlen>
 80023e0:	2300      	movs	r3, #0
 80023e2:	9308      	str	r3, [sp, #32]
 80023e4:	f8d8 3000 	ldr.w	r3, [r8]
 80023e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	3307      	adds	r3, #7
 80023f0:	f023 0307 	bic.w	r3, r3, #7
 80023f4:	f103 0108 	add.w	r1, r3, #8
 80023f8:	f8c8 1000 	str.w	r1, [r8]
 80023fc:	ed93 0b00 	vldr	d0, [r3]
 8002400:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002660 <_printf_float+0x2a0>
 8002404:	eeb0 7bc0 	vabs.f64	d7, d0
 8002408:	eeb4 7b46 	vcmp.f64	d7, d6
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8002414:	4682      	mov	sl, r0
 8002416:	dd24      	ble.n	8002462 <_printf_float+0xa2>
 8002418:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d502      	bpl.n	8002428 <_printf_float+0x68>
 8002422:	232d      	movs	r3, #45	; 0x2d
 8002424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002428:	498f      	ldr	r1, [pc, #572]	; (8002668 <_printf_float+0x2a8>)
 800242a:	4b90      	ldr	r3, [pc, #576]	; (800266c <_printf_float+0x2ac>)
 800242c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002430:	bf94      	ite	ls
 8002432:	4688      	movls	r8, r1
 8002434:	4698      	movhi	r8, r3
 8002436:	2303      	movs	r3, #3
 8002438:	6123      	str	r3, [r4, #16]
 800243a:	f022 0204 	bic.w	r2, r2, #4
 800243e:	2300      	movs	r3, #0
 8002440:	6022      	str	r2, [r4, #0]
 8002442:	9304      	str	r3, [sp, #16]
 8002444:	9700      	str	r7, [sp, #0]
 8002446:	4633      	mov	r3, r6
 8002448:	aa09      	add	r2, sp, #36	; 0x24
 800244a:	4621      	mov	r1, r4
 800244c:	4628      	mov	r0, r5
 800244e:	f000 f9d1 	bl	80027f4 <_printf_common>
 8002452:	3001      	adds	r0, #1
 8002454:	f040 808a 	bne.w	800256c <_printf_float+0x1ac>
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	b00b      	add	sp, #44	; 0x2c
 800245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002462:	eeb4 0b40 	vcmp.f64	d0, d0
 8002466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246a:	d709      	bvc.n	8002480 <_printf_float+0xc0>
 800246c:	ee10 3a90 	vmov	r3, s1
 8002470:	2b00      	cmp	r3, #0
 8002472:	bfbc      	itt	lt
 8002474:	232d      	movlt	r3, #45	; 0x2d
 8002476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800247a:	497d      	ldr	r1, [pc, #500]	; (8002670 <_printf_float+0x2b0>)
 800247c:	4b7d      	ldr	r3, [pc, #500]	; (8002674 <_printf_float+0x2b4>)
 800247e:	e7d5      	b.n	800242c <_printf_float+0x6c>
 8002480:	6863      	ldr	r3, [r4, #4]
 8002482:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002486:	9104      	str	r1, [sp, #16]
 8002488:	1c59      	adds	r1, r3, #1
 800248a:	d13c      	bne.n	8002506 <_printf_float+0x146>
 800248c:	2306      	movs	r3, #6
 800248e:	6063      	str	r3, [r4, #4]
 8002490:	2300      	movs	r3, #0
 8002492:	9303      	str	r3, [sp, #12]
 8002494:	ab08      	add	r3, sp, #32
 8002496:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800249a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800249e:	ab07      	add	r3, sp, #28
 80024a0:	6861      	ldr	r1, [r4, #4]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	6022      	str	r2, [r4, #0]
 80024a6:	f10d 031b 	add.w	r3, sp, #27
 80024aa:	4628      	mov	r0, r5
 80024ac:	f7ff fef6 	bl	800229c <__cvt>
 80024b0:	9b04      	ldr	r3, [sp, #16]
 80024b2:	9907      	ldr	r1, [sp, #28]
 80024b4:	2b47      	cmp	r3, #71	; 0x47
 80024b6:	4680      	mov	r8, r0
 80024b8:	d108      	bne.n	80024cc <_printf_float+0x10c>
 80024ba:	1cc8      	adds	r0, r1, #3
 80024bc:	db02      	blt.n	80024c4 <_printf_float+0x104>
 80024be:	6863      	ldr	r3, [r4, #4]
 80024c0:	4299      	cmp	r1, r3
 80024c2:	dd41      	ble.n	8002548 <_printf_float+0x188>
 80024c4:	f1a9 0902 	sub.w	r9, r9, #2
 80024c8:	fa5f f989 	uxtb.w	r9, r9
 80024cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80024d0:	d820      	bhi.n	8002514 <_printf_float+0x154>
 80024d2:	3901      	subs	r1, #1
 80024d4:	464a      	mov	r2, r9
 80024d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80024da:	9107      	str	r1, [sp, #28]
 80024dc:	f7ff ff30 	bl	8002340 <__exponent>
 80024e0:	9a08      	ldr	r2, [sp, #32]
 80024e2:	9004      	str	r0, [sp, #16]
 80024e4:	1813      	adds	r3, r2, r0
 80024e6:	2a01      	cmp	r2, #1
 80024e8:	6123      	str	r3, [r4, #16]
 80024ea:	dc02      	bgt.n	80024f2 <_printf_float+0x132>
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	07d2      	lsls	r2, r2, #31
 80024f0:	d501      	bpl.n	80024f6 <_printf_float+0x136>
 80024f2:	3301      	adds	r3, #1
 80024f4:	6123      	str	r3, [r4, #16]
 80024f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0a2      	beq.n	8002444 <_printf_float+0x84>
 80024fe:	232d      	movs	r3, #45	; 0x2d
 8002500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002504:	e79e      	b.n	8002444 <_printf_float+0x84>
 8002506:	9904      	ldr	r1, [sp, #16]
 8002508:	2947      	cmp	r1, #71	; 0x47
 800250a:	d1c1      	bne.n	8002490 <_printf_float+0xd0>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1bf      	bne.n	8002490 <_printf_float+0xd0>
 8002510:	2301      	movs	r3, #1
 8002512:	e7bc      	b.n	800248e <_printf_float+0xce>
 8002514:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002518:	d118      	bne.n	800254c <_printf_float+0x18c>
 800251a:	2900      	cmp	r1, #0
 800251c:	6863      	ldr	r3, [r4, #4]
 800251e:	dd0b      	ble.n	8002538 <_printf_float+0x178>
 8002520:	6121      	str	r1, [r4, #16]
 8002522:	b913      	cbnz	r3, 800252a <_printf_float+0x16a>
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	07d0      	lsls	r0, r2, #31
 8002528:	d502      	bpl.n	8002530 <_printf_float+0x170>
 800252a:	3301      	adds	r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	6123      	str	r3, [r4, #16]
 8002530:	2300      	movs	r3, #0
 8002532:	65a1      	str	r1, [r4, #88]	; 0x58
 8002534:	9304      	str	r3, [sp, #16]
 8002536:	e7de      	b.n	80024f6 <_printf_float+0x136>
 8002538:	b913      	cbnz	r3, 8002540 <_printf_float+0x180>
 800253a:	6822      	ldr	r2, [r4, #0]
 800253c:	07d2      	lsls	r2, r2, #31
 800253e:	d501      	bpl.n	8002544 <_printf_float+0x184>
 8002540:	3302      	adds	r3, #2
 8002542:	e7f4      	b.n	800252e <_printf_float+0x16e>
 8002544:	2301      	movs	r3, #1
 8002546:	e7f2      	b.n	800252e <_printf_float+0x16e>
 8002548:	f04f 0967 	mov.w	r9, #103	; 0x67
 800254c:	9b08      	ldr	r3, [sp, #32]
 800254e:	4299      	cmp	r1, r3
 8002550:	db05      	blt.n	800255e <_printf_float+0x19e>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	6121      	str	r1, [r4, #16]
 8002556:	07d8      	lsls	r0, r3, #31
 8002558:	d5ea      	bpl.n	8002530 <_printf_float+0x170>
 800255a:	1c4b      	adds	r3, r1, #1
 800255c:	e7e7      	b.n	800252e <_printf_float+0x16e>
 800255e:	2900      	cmp	r1, #0
 8002560:	bfd4      	ite	le
 8002562:	f1c1 0202 	rsble	r2, r1, #2
 8002566:	2201      	movgt	r2, #1
 8002568:	4413      	add	r3, r2
 800256a:	e7e0      	b.n	800252e <_printf_float+0x16e>
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	055a      	lsls	r2, r3, #21
 8002570:	d407      	bmi.n	8002582 <_printf_float+0x1c2>
 8002572:	6923      	ldr	r3, [r4, #16]
 8002574:	4642      	mov	r2, r8
 8002576:	4631      	mov	r1, r6
 8002578:	4628      	mov	r0, r5
 800257a:	47b8      	blx	r7
 800257c:	3001      	adds	r0, #1
 800257e:	d12a      	bne.n	80025d6 <_printf_float+0x216>
 8002580:	e76a      	b.n	8002458 <_printf_float+0x98>
 8002582:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002586:	f240 80e0 	bls.w	800274a <_printf_float+0x38a>
 800258a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800258e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002596:	d133      	bne.n	8002600 <_printf_float+0x240>
 8002598:	4a37      	ldr	r2, [pc, #220]	; (8002678 <_printf_float+0x2b8>)
 800259a:	2301      	movs	r3, #1
 800259c:	4631      	mov	r1, r6
 800259e:	4628      	mov	r0, r5
 80025a0:	47b8      	blx	r7
 80025a2:	3001      	adds	r0, #1
 80025a4:	f43f af58 	beq.w	8002458 <_printf_float+0x98>
 80025a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	db02      	blt.n	80025b6 <_printf_float+0x1f6>
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	07d8      	lsls	r0, r3, #31
 80025b4:	d50f      	bpl.n	80025d6 <_printf_float+0x216>
 80025b6:	4653      	mov	r3, sl
 80025b8:	465a      	mov	r2, fp
 80025ba:	4631      	mov	r1, r6
 80025bc:	4628      	mov	r0, r5
 80025be:	47b8      	blx	r7
 80025c0:	3001      	adds	r0, #1
 80025c2:	f43f af49 	beq.w	8002458 <_printf_float+0x98>
 80025c6:	f04f 0800 	mov.w	r8, #0
 80025ca:	f104 091a 	add.w	r9, r4, #26
 80025ce:	9b08      	ldr	r3, [sp, #32]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	4543      	cmp	r3, r8
 80025d4:	dc09      	bgt.n	80025ea <_printf_float+0x22a>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	079b      	lsls	r3, r3, #30
 80025da:	f100 8106 	bmi.w	80027ea <_printf_float+0x42a>
 80025de:	68e0      	ldr	r0, [r4, #12]
 80025e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e2:	4298      	cmp	r0, r3
 80025e4:	bfb8      	it	lt
 80025e6:	4618      	movlt	r0, r3
 80025e8:	e738      	b.n	800245c <_printf_float+0x9c>
 80025ea:	2301      	movs	r3, #1
 80025ec:	464a      	mov	r2, r9
 80025ee:	4631      	mov	r1, r6
 80025f0:	4628      	mov	r0, r5
 80025f2:	47b8      	blx	r7
 80025f4:	3001      	adds	r0, #1
 80025f6:	f43f af2f 	beq.w	8002458 <_printf_float+0x98>
 80025fa:	f108 0801 	add.w	r8, r8, #1
 80025fe:	e7e6      	b.n	80025ce <_printf_float+0x20e>
 8002600:	9b07      	ldr	r3, [sp, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	dc3a      	bgt.n	800267c <_printf_float+0x2bc>
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <_printf_float+0x2b8>)
 8002608:	2301      	movs	r3, #1
 800260a:	4631      	mov	r1, r6
 800260c:	4628      	mov	r0, r5
 800260e:	47b8      	blx	r7
 8002610:	3001      	adds	r0, #1
 8002612:	f43f af21 	beq.w	8002458 <_printf_float+0x98>
 8002616:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800261a:	4313      	orrs	r3, r2
 800261c:	d102      	bne.n	8002624 <_printf_float+0x264>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	07d9      	lsls	r1, r3, #31
 8002622:	d5d8      	bpl.n	80025d6 <_printf_float+0x216>
 8002624:	4653      	mov	r3, sl
 8002626:	465a      	mov	r2, fp
 8002628:	4631      	mov	r1, r6
 800262a:	4628      	mov	r0, r5
 800262c:	47b8      	blx	r7
 800262e:	3001      	adds	r0, #1
 8002630:	f43f af12 	beq.w	8002458 <_printf_float+0x98>
 8002634:	f04f 0900 	mov.w	r9, #0
 8002638:	f104 0a1a 	add.w	sl, r4, #26
 800263c:	9b07      	ldr	r3, [sp, #28]
 800263e:	425b      	negs	r3, r3
 8002640:	454b      	cmp	r3, r9
 8002642:	dc01      	bgt.n	8002648 <_printf_float+0x288>
 8002644:	9b08      	ldr	r3, [sp, #32]
 8002646:	e795      	b.n	8002574 <_printf_float+0x1b4>
 8002648:	2301      	movs	r3, #1
 800264a:	4652      	mov	r2, sl
 800264c:	4631      	mov	r1, r6
 800264e:	4628      	mov	r0, r5
 8002650:	47b8      	blx	r7
 8002652:	3001      	adds	r0, #1
 8002654:	f43f af00 	beq.w	8002458 <_printf_float+0x98>
 8002658:	f109 0901 	add.w	r9, r9, #1
 800265c:	e7ee      	b.n	800263c <_printf_float+0x27c>
 800265e:	bf00      	nop
 8002660:	ffffffff 	.word	0xffffffff
 8002664:	7fefffff 	.word	0x7fefffff
 8002668:	08006848 	.word	0x08006848
 800266c:	0800684c 	.word	0x0800684c
 8002670:	08006850 	.word	0x08006850
 8002674:	08006854 	.word	0x08006854
 8002678:	08006858 	.word	0x08006858
 800267c:	9a08      	ldr	r2, [sp, #32]
 800267e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002680:	429a      	cmp	r2, r3
 8002682:	bfa8      	it	ge
 8002684:	461a      	movge	r2, r3
 8002686:	2a00      	cmp	r2, #0
 8002688:	4691      	mov	r9, r2
 800268a:	dc38      	bgt.n	80026fe <_printf_float+0x33e>
 800268c:	2300      	movs	r3, #0
 800268e:	9305      	str	r3, [sp, #20]
 8002690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002694:	f104 021a 	add.w	r2, r4, #26
 8002698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800269a:	9905      	ldr	r1, [sp, #20]
 800269c:	9304      	str	r3, [sp, #16]
 800269e:	eba3 0309 	sub.w	r3, r3, r9
 80026a2:	428b      	cmp	r3, r1
 80026a4:	dc33      	bgt.n	800270e <_printf_float+0x34e>
 80026a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	db3c      	blt.n	8002728 <_printf_float+0x368>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	07da      	lsls	r2, r3, #31
 80026b2:	d439      	bmi.n	8002728 <_printf_float+0x368>
 80026b4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80026b8:	eba2 0903 	sub.w	r9, r2, r3
 80026bc:	9b04      	ldr	r3, [sp, #16]
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	4591      	cmp	r9, r2
 80026c2:	bfa8      	it	ge
 80026c4:	4691      	movge	r9, r2
 80026c6:	f1b9 0f00 	cmp.w	r9, #0
 80026ca:	dc35      	bgt.n	8002738 <_printf_float+0x378>
 80026cc:	f04f 0800 	mov.w	r8, #0
 80026d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80026d4:	f104 0a1a 	add.w	sl, r4, #26
 80026d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	eba3 0309 	sub.w	r3, r3, r9
 80026e2:	4543      	cmp	r3, r8
 80026e4:	f77f af77 	ble.w	80025d6 <_printf_float+0x216>
 80026e8:	2301      	movs	r3, #1
 80026ea:	4652      	mov	r2, sl
 80026ec:	4631      	mov	r1, r6
 80026ee:	4628      	mov	r0, r5
 80026f0:	47b8      	blx	r7
 80026f2:	3001      	adds	r0, #1
 80026f4:	f43f aeb0 	beq.w	8002458 <_printf_float+0x98>
 80026f8:	f108 0801 	add.w	r8, r8, #1
 80026fc:	e7ec      	b.n	80026d8 <_printf_float+0x318>
 80026fe:	4613      	mov	r3, r2
 8002700:	4631      	mov	r1, r6
 8002702:	4642      	mov	r2, r8
 8002704:	4628      	mov	r0, r5
 8002706:	47b8      	blx	r7
 8002708:	3001      	adds	r0, #1
 800270a:	d1bf      	bne.n	800268c <_printf_float+0x2cc>
 800270c:	e6a4      	b.n	8002458 <_printf_float+0x98>
 800270e:	2301      	movs	r3, #1
 8002710:	4631      	mov	r1, r6
 8002712:	4628      	mov	r0, r5
 8002714:	9204      	str	r2, [sp, #16]
 8002716:	47b8      	blx	r7
 8002718:	3001      	adds	r0, #1
 800271a:	f43f ae9d 	beq.w	8002458 <_printf_float+0x98>
 800271e:	9b05      	ldr	r3, [sp, #20]
 8002720:	9a04      	ldr	r2, [sp, #16]
 8002722:	3301      	adds	r3, #1
 8002724:	9305      	str	r3, [sp, #20]
 8002726:	e7b7      	b.n	8002698 <_printf_float+0x2d8>
 8002728:	4653      	mov	r3, sl
 800272a:	465a      	mov	r2, fp
 800272c:	4631      	mov	r1, r6
 800272e:	4628      	mov	r0, r5
 8002730:	47b8      	blx	r7
 8002732:	3001      	adds	r0, #1
 8002734:	d1be      	bne.n	80026b4 <_printf_float+0x2f4>
 8002736:	e68f      	b.n	8002458 <_printf_float+0x98>
 8002738:	9a04      	ldr	r2, [sp, #16]
 800273a:	464b      	mov	r3, r9
 800273c:	4442      	add	r2, r8
 800273e:	4631      	mov	r1, r6
 8002740:	4628      	mov	r0, r5
 8002742:	47b8      	blx	r7
 8002744:	3001      	adds	r0, #1
 8002746:	d1c1      	bne.n	80026cc <_printf_float+0x30c>
 8002748:	e686      	b.n	8002458 <_printf_float+0x98>
 800274a:	9a08      	ldr	r2, [sp, #32]
 800274c:	2a01      	cmp	r2, #1
 800274e:	dc01      	bgt.n	8002754 <_printf_float+0x394>
 8002750:	07db      	lsls	r3, r3, #31
 8002752:	d537      	bpl.n	80027c4 <_printf_float+0x404>
 8002754:	2301      	movs	r3, #1
 8002756:	4642      	mov	r2, r8
 8002758:	4631      	mov	r1, r6
 800275a:	4628      	mov	r0, r5
 800275c:	47b8      	blx	r7
 800275e:	3001      	adds	r0, #1
 8002760:	f43f ae7a 	beq.w	8002458 <_printf_float+0x98>
 8002764:	4653      	mov	r3, sl
 8002766:	465a      	mov	r2, fp
 8002768:	4631      	mov	r1, r6
 800276a:	4628      	mov	r0, r5
 800276c:	47b8      	blx	r7
 800276e:	3001      	adds	r0, #1
 8002770:	f43f ae72 	beq.w	8002458 <_printf_float+0x98>
 8002774:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002778:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	9b08      	ldr	r3, [sp, #32]
 8002782:	d01a      	beq.n	80027ba <_printf_float+0x3fa>
 8002784:	3b01      	subs	r3, #1
 8002786:	f108 0201 	add.w	r2, r8, #1
 800278a:	4631      	mov	r1, r6
 800278c:	4628      	mov	r0, r5
 800278e:	47b8      	blx	r7
 8002790:	3001      	adds	r0, #1
 8002792:	d10e      	bne.n	80027b2 <_printf_float+0x3f2>
 8002794:	e660      	b.n	8002458 <_printf_float+0x98>
 8002796:	2301      	movs	r3, #1
 8002798:	464a      	mov	r2, r9
 800279a:	4631      	mov	r1, r6
 800279c:	4628      	mov	r0, r5
 800279e:	47b8      	blx	r7
 80027a0:	3001      	adds	r0, #1
 80027a2:	f43f ae59 	beq.w	8002458 <_printf_float+0x98>
 80027a6:	f108 0801 	add.w	r8, r8, #1
 80027aa:	9b08      	ldr	r3, [sp, #32]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	4543      	cmp	r3, r8
 80027b0:	dcf1      	bgt.n	8002796 <_printf_float+0x3d6>
 80027b2:	9b04      	ldr	r3, [sp, #16]
 80027b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80027b8:	e6dd      	b.n	8002576 <_printf_float+0x1b6>
 80027ba:	f04f 0800 	mov.w	r8, #0
 80027be:	f104 091a 	add.w	r9, r4, #26
 80027c2:	e7f2      	b.n	80027aa <_printf_float+0x3ea>
 80027c4:	2301      	movs	r3, #1
 80027c6:	4642      	mov	r2, r8
 80027c8:	e7df      	b.n	800278a <_printf_float+0x3ca>
 80027ca:	2301      	movs	r3, #1
 80027cc:	464a      	mov	r2, r9
 80027ce:	4631      	mov	r1, r6
 80027d0:	4628      	mov	r0, r5
 80027d2:	47b8      	blx	r7
 80027d4:	3001      	adds	r0, #1
 80027d6:	f43f ae3f 	beq.w	8002458 <_printf_float+0x98>
 80027da:	f108 0801 	add.w	r8, r8, #1
 80027de:	68e3      	ldr	r3, [r4, #12]
 80027e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027e2:	1a5b      	subs	r3, r3, r1
 80027e4:	4543      	cmp	r3, r8
 80027e6:	dcf0      	bgt.n	80027ca <_printf_float+0x40a>
 80027e8:	e6f9      	b.n	80025de <_printf_float+0x21e>
 80027ea:	f04f 0800 	mov.w	r8, #0
 80027ee:	f104 0919 	add.w	r9, r4, #25
 80027f2:	e7f4      	b.n	80027de <_printf_float+0x41e>

080027f4 <_printf_common>:
 80027f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f8:	4616      	mov	r6, r2
 80027fa:	4699      	mov	r9, r3
 80027fc:	688a      	ldr	r2, [r1, #8]
 80027fe:	690b      	ldr	r3, [r1, #16]
 8002800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002804:	4293      	cmp	r3, r2
 8002806:	bfb8      	it	lt
 8002808:	4613      	movlt	r3, r2
 800280a:	6033      	str	r3, [r6, #0]
 800280c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002810:	4607      	mov	r7, r0
 8002812:	460c      	mov	r4, r1
 8002814:	b10a      	cbz	r2, 800281a <_printf_common+0x26>
 8002816:	3301      	adds	r3, #1
 8002818:	6033      	str	r3, [r6, #0]
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	0699      	lsls	r1, r3, #26
 800281e:	bf42      	ittt	mi
 8002820:	6833      	ldrmi	r3, [r6, #0]
 8002822:	3302      	addmi	r3, #2
 8002824:	6033      	strmi	r3, [r6, #0]
 8002826:	6825      	ldr	r5, [r4, #0]
 8002828:	f015 0506 	ands.w	r5, r5, #6
 800282c:	d106      	bne.n	800283c <_printf_common+0x48>
 800282e:	f104 0a19 	add.w	sl, r4, #25
 8002832:	68e3      	ldr	r3, [r4, #12]
 8002834:	6832      	ldr	r2, [r6, #0]
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	42ab      	cmp	r3, r5
 800283a:	dc26      	bgt.n	800288a <_printf_common+0x96>
 800283c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002840:	1e13      	subs	r3, r2, #0
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	bf18      	it	ne
 8002846:	2301      	movne	r3, #1
 8002848:	0692      	lsls	r2, r2, #26
 800284a:	d42b      	bmi.n	80028a4 <_printf_common+0xb0>
 800284c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002850:	4649      	mov	r1, r9
 8002852:	4638      	mov	r0, r7
 8002854:	47c0      	blx	r8
 8002856:	3001      	adds	r0, #1
 8002858:	d01e      	beq.n	8002898 <_printf_common+0xa4>
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	6922      	ldr	r2, [r4, #16]
 800285e:	f003 0306 	and.w	r3, r3, #6
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf02      	ittt	eq
 8002866:	68e5      	ldreq	r5, [r4, #12]
 8002868:	6833      	ldreq	r3, [r6, #0]
 800286a:	1aed      	subeq	r5, r5, r3
 800286c:	68a3      	ldr	r3, [r4, #8]
 800286e:	bf0c      	ite	eq
 8002870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002874:	2500      	movne	r5, #0
 8002876:	4293      	cmp	r3, r2
 8002878:	bfc4      	itt	gt
 800287a:	1a9b      	subgt	r3, r3, r2
 800287c:	18ed      	addgt	r5, r5, r3
 800287e:	2600      	movs	r6, #0
 8002880:	341a      	adds	r4, #26
 8002882:	42b5      	cmp	r5, r6
 8002884:	d11a      	bne.n	80028bc <_printf_common+0xc8>
 8002886:	2000      	movs	r0, #0
 8002888:	e008      	b.n	800289c <_printf_common+0xa8>
 800288a:	2301      	movs	r3, #1
 800288c:	4652      	mov	r2, sl
 800288e:	4649      	mov	r1, r9
 8002890:	4638      	mov	r0, r7
 8002892:	47c0      	blx	r8
 8002894:	3001      	adds	r0, #1
 8002896:	d103      	bne.n	80028a0 <_printf_common+0xac>
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a0:	3501      	adds	r5, #1
 80028a2:	e7c6      	b.n	8002832 <_printf_common+0x3e>
 80028a4:	18e1      	adds	r1, r4, r3
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	2030      	movs	r0, #48	; 0x30
 80028aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028ae:	4422      	add	r2, r4
 80028b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b8:	3302      	adds	r3, #2
 80028ba:	e7c7      	b.n	800284c <_printf_common+0x58>
 80028bc:	2301      	movs	r3, #1
 80028be:	4622      	mov	r2, r4
 80028c0:	4649      	mov	r1, r9
 80028c2:	4638      	mov	r0, r7
 80028c4:	47c0      	blx	r8
 80028c6:	3001      	adds	r0, #1
 80028c8:	d0e6      	beq.n	8002898 <_printf_common+0xa4>
 80028ca:	3601      	adds	r6, #1
 80028cc:	e7d9      	b.n	8002882 <_printf_common+0x8e>
	...

080028d0 <_printf_i>:
 80028d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	7e0f      	ldrb	r7, [r1, #24]
 80028d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028d8:	2f78      	cmp	r7, #120	; 0x78
 80028da:	4691      	mov	r9, r2
 80028dc:	4680      	mov	r8, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	469a      	mov	sl, r3
 80028e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028e6:	d807      	bhi.n	80028f8 <_printf_i+0x28>
 80028e8:	2f62      	cmp	r7, #98	; 0x62
 80028ea:	d80a      	bhi.n	8002902 <_printf_i+0x32>
 80028ec:	2f00      	cmp	r7, #0
 80028ee:	f000 80d4 	beq.w	8002a9a <_printf_i+0x1ca>
 80028f2:	2f58      	cmp	r7, #88	; 0x58
 80028f4:	f000 80c0 	beq.w	8002a78 <_printf_i+0x1a8>
 80028f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002900:	e03a      	b.n	8002978 <_printf_i+0xa8>
 8002902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002906:	2b15      	cmp	r3, #21
 8002908:	d8f6      	bhi.n	80028f8 <_printf_i+0x28>
 800290a:	a101      	add	r1, pc, #4	; (adr r1, 8002910 <_printf_i+0x40>)
 800290c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002910:	08002969 	.word	0x08002969
 8002914:	0800297d 	.word	0x0800297d
 8002918:	080028f9 	.word	0x080028f9
 800291c:	080028f9 	.word	0x080028f9
 8002920:	080028f9 	.word	0x080028f9
 8002924:	080028f9 	.word	0x080028f9
 8002928:	0800297d 	.word	0x0800297d
 800292c:	080028f9 	.word	0x080028f9
 8002930:	080028f9 	.word	0x080028f9
 8002934:	080028f9 	.word	0x080028f9
 8002938:	080028f9 	.word	0x080028f9
 800293c:	08002a81 	.word	0x08002a81
 8002940:	080029a9 	.word	0x080029a9
 8002944:	08002a3b 	.word	0x08002a3b
 8002948:	080028f9 	.word	0x080028f9
 800294c:	080028f9 	.word	0x080028f9
 8002950:	08002aa3 	.word	0x08002aa3
 8002954:	080028f9 	.word	0x080028f9
 8002958:	080029a9 	.word	0x080029a9
 800295c:	080028f9 	.word	0x080028f9
 8002960:	080028f9 	.word	0x080028f9
 8002964:	08002a43 	.word	0x08002a43
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	602a      	str	r2, [r5, #0]
 8002970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002978:	2301      	movs	r3, #1
 800297a:	e09f      	b.n	8002abc <_printf_i+0x1ec>
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	682b      	ldr	r3, [r5, #0]
 8002980:	0607      	lsls	r7, r0, #24
 8002982:	f103 0104 	add.w	r1, r3, #4
 8002986:	6029      	str	r1, [r5, #0]
 8002988:	d501      	bpl.n	800298e <_printf_i+0xbe>
 800298a:	681e      	ldr	r6, [r3, #0]
 800298c:	e003      	b.n	8002996 <_printf_i+0xc6>
 800298e:	0646      	lsls	r6, r0, #25
 8002990:	d5fb      	bpl.n	800298a <_printf_i+0xba>
 8002992:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002996:	2e00      	cmp	r6, #0
 8002998:	da03      	bge.n	80029a2 <_printf_i+0xd2>
 800299a:	232d      	movs	r3, #45	; 0x2d
 800299c:	4276      	negs	r6, r6
 800299e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029a2:	485a      	ldr	r0, [pc, #360]	; (8002b0c <_printf_i+0x23c>)
 80029a4:	230a      	movs	r3, #10
 80029a6:	e012      	b.n	80029ce <_printf_i+0xfe>
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	6820      	ldr	r0, [r4, #0]
 80029ac:	1d19      	adds	r1, r3, #4
 80029ae:	6029      	str	r1, [r5, #0]
 80029b0:	0605      	lsls	r5, r0, #24
 80029b2:	d501      	bpl.n	80029b8 <_printf_i+0xe8>
 80029b4:	681e      	ldr	r6, [r3, #0]
 80029b6:	e002      	b.n	80029be <_printf_i+0xee>
 80029b8:	0641      	lsls	r1, r0, #25
 80029ba:	d5fb      	bpl.n	80029b4 <_printf_i+0xe4>
 80029bc:	881e      	ldrh	r6, [r3, #0]
 80029be:	4853      	ldr	r0, [pc, #332]	; (8002b0c <_printf_i+0x23c>)
 80029c0:	2f6f      	cmp	r7, #111	; 0x6f
 80029c2:	bf0c      	ite	eq
 80029c4:	2308      	moveq	r3, #8
 80029c6:	230a      	movne	r3, #10
 80029c8:	2100      	movs	r1, #0
 80029ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029ce:	6865      	ldr	r5, [r4, #4]
 80029d0:	60a5      	str	r5, [r4, #8]
 80029d2:	2d00      	cmp	r5, #0
 80029d4:	bfa2      	ittt	ge
 80029d6:	6821      	ldrge	r1, [r4, #0]
 80029d8:	f021 0104 	bicge.w	r1, r1, #4
 80029dc:	6021      	strge	r1, [r4, #0]
 80029de:	b90e      	cbnz	r6, 80029e4 <_printf_i+0x114>
 80029e0:	2d00      	cmp	r5, #0
 80029e2:	d04b      	beq.n	8002a7c <_printf_i+0x1ac>
 80029e4:	4615      	mov	r5, r2
 80029e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80029ea:	fb03 6711 	mls	r7, r3, r1, r6
 80029ee:	5dc7      	ldrb	r7, [r0, r7]
 80029f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029f4:	4637      	mov	r7, r6
 80029f6:	42bb      	cmp	r3, r7
 80029f8:	460e      	mov	r6, r1
 80029fa:	d9f4      	bls.n	80029e6 <_printf_i+0x116>
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d10b      	bne.n	8002a18 <_printf_i+0x148>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	07de      	lsls	r6, r3, #31
 8002a04:	d508      	bpl.n	8002a18 <_printf_i+0x148>
 8002a06:	6923      	ldr	r3, [r4, #16]
 8002a08:	6861      	ldr	r1, [r4, #4]
 8002a0a:	4299      	cmp	r1, r3
 8002a0c:	bfde      	ittt	le
 8002a0e:	2330      	movle	r3, #48	; 0x30
 8002a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a18:	1b52      	subs	r2, r2, r5
 8002a1a:	6122      	str	r2, [r4, #16]
 8002a1c:	f8cd a000 	str.w	sl, [sp]
 8002a20:	464b      	mov	r3, r9
 8002a22:	aa03      	add	r2, sp, #12
 8002a24:	4621      	mov	r1, r4
 8002a26:	4640      	mov	r0, r8
 8002a28:	f7ff fee4 	bl	80027f4 <_printf_common>
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d14a      	bne.n	8002ac6 <_printf_i+0x1f6>
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	b004      	add	sp, #16
 8002a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	f043 0320 	orr.w	r3, r3, #32
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	4833      	ldr	r0, [pc, #204]	; (8002b10 <_printf_i+0x240>)
 8002a44:	2778      	movs	r7, #120	; 0x78
 8002a46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	6829      	ldr	r1, [r5, #0]
 8002a4e:	061f      	lsls	r7, r3, #24
 8002a50:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a54:	d402      	bmi.n	8002a5c <_printf_i+0x18c>
 8002a56:	065f      	lsls	r7, r3, #25
 8002a58:	bf48      	it	mi
 8002a5a:	b2b6      	uxthmi	r6, r6
 8002a5c:	07df      	lsls	r7, r3, #31
 8002a5e:	bf48      	it	mi
 8002a60:	f043 0320 	orrmi.w	r3, r3, #32
 8002a64:	6029      	str	r1, [r5, #0]
 8002a66:	bf48      	it	mi
 8002a68:	6023      	strmi	r3, [r4, #0]
 8002a6a:	b91e      	cbnz	r6, 8002a74 <_printf_i+0x1a4>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f023 0320 	bic.w	r3, r3, #32
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	2310      	movs	r3, #16
 8002a76:	e7a7      	b.n	80029c8 <_printf_i+0xf8>
 8002a78:	4824      	ldr	r0, [pc, #144]	; (8002b0c <_printf_i+0x23c>)
 8002a7a:	e7e4      	b.n	8002a46 <_printf_i+0x176>
 8002a7c:	4615      	mov	r5, r2
 8002a7e:	e7bd      	b.n	80029fc <_printf_i+0x12c>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	6826      	ldr	r6, [r4, #0]
 8002a84:	6961      	ldr	r1, [r4, #20]
 8002a86:	1d18      	adds	r0, r3, #4
 8002a88:	6028      	str	r0, [r5, #0]
 8002a8a:	0635      	lsls	r5, r6, #24
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	d501      	bpl.n	8002a94 <_printf_i+0x1c4>
 8002a90:	6019      	str	r1, [r3, #0]
 8002a92:	e002      	b.n	8002a9a <_printf_i+0x1ca>
 8002a94:	0670      	lsls	r0, r6, #25
 8002a96:	d5fb      	bpl.n	8002a90 <_printf_i+0x1c0>
 8002a98:	8019      	strh	r1, [r3, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	4615      	mov	r5, r2
 8002aa0:	e7bc      	b.n	8002a1c <_printf_i+0x14c>
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	602a      	str	r2, [r5, #0]
 8002aa8:	681d      	ldr	r5, [r3, #0]
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	2100      	movs	r1, #0
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f7fd fbc6 	bl	8000240 <memchr>
 8002ab4:	b108      	cbz	r0, 8002aba <_printf_i+0x1ea>
 8002ab6:	1b40      	subs	r0, r0, r5
 8002ab8:	6060      	str	r0, [r4, #4]
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	6123      	str	r3, [r4, #16]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac4:	e7aa      	b.n	8002a1c <_printf_i+0x14c>
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	462a      	mov	r2, r5
 8002aca:	4649      	mov	r1, r9
 8002acc:	4640      	mov	r0, r8
 8002ace:	47d0      	blx	sl
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d0ad      	beq.n	8002a30 <_printf_i+0x160>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	079b      	lsls	r3, r3, #30
 8002ad8:	d413      	bmi.n	8002b02 <_printf_i+0x232>
 8002ada:	68e0      	ldr	r0, [r4, #12]
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	4298      	cmp	r0, r3
 8002ae0:	bfb8      	it	lt
 8002ae2:	4618      	movlt	r0, r3
 8002ae4:	e7a6      	b.n	8002a34 <_printf_i+0x164>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4632      	mov	r2, r6
 8002aea:	4649      	mov	r1, r9
 8002aec:	4640      	mov	r0, r8
 8002aee:	47d0      	blx	sl
 8002af0:	3001      	adds	r0, #1
 8002af2:	d09d      	beq.n	8002a30 <_printf_i+0x160>
 8002af4:	3501      	adds	r5, #1
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	9903      	ldr	r1, [sp, #12]
 8002afa:	1a5b      	subs	r3, r3, r1
 8002afc:	42ab      	cmp	r3, r5
 8002afe:	dcf2      	bgt.n	8002ae6 <_printf_i+0x216>
 8002b00:	e7eb      	b.n	8002ada <_printf_i+0x20a>
 8002b02:	2500      	movs	r5, #0
 8002b04:	f104 0619 	add.w	r6, r4, #25
 8002b08:	e7f5      	b.n	8002af6 <_printf_i+0x226>
 8002b0a:	bf00      	nop
 8002b0c:	0800685a 	.word	0x0800685a
 8002b10:	0800686b 	.word	0x0800686b

08002b14 <_scanf_float>:
 8002b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b18:	b087      	sub	sp, #28
 8002b1a:	4617      	mov	r7, r2
 8002b1c:	9303      	str	r3, [sp, #12]
 8002b1e:	688b      	ldr	r3, [r1, #8]
 8002b20:	1e5a      	subs	r2, r3, #1
 8002b22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002b26:	bf83      	ittte	hi
 8002b28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002b2c:	195b      	addhi	r3, r3, r5
 8002b2e:	9302      	strhi	r3, [sp, #8]
 8002b30:	2300      	movls	r3, #0
 8002b32:	bf86      	itte	hi
 8002b34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002b38:	608b      	strhi	r3, [r1, #8]
 8002b3a:	9302      	strls	r3, [sp, #8]
 8002b3c:	680b      	ldr	r3, [r1, #0]
 8002b3e:	468b      	mov	fp, r1
 8002b40:	2500      	movs	r5, #0
 8002b42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002b46:	f84b 3b1c 	str.w	r3, [fp], #28
 8002b4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002b4e:	4680      	mov	r8, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	465e      	mov	r6, fp
 8002b54:	46aa      	mov	sl, r5
 8002b56:	46a9      	mov	r9, r5
 8002b58:	9501      	str	r5, [sp, #4]
 8002b5a:	68a2      	ldr	r2, [r4, #8]
 8002b5c:	b152      	cbz	r2, 8002b74 <_scanf_float+0x60>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b4e      	cmp	r3, #78	; 0x4e
 8002b64:	d864      	bhi.n	8002c30 <_scanf_float+0x11c>
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d83c      	bhi.n	8002be4 <_scanf_float+0xd0>
 8002b6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002b6e:	b2c8      	uxtb	r0, r1
 8002b70:	280e      	cmp	r0, #14
 8002b72:	d93a      	bls.n	8002bea <_scanf_float+0xd6>
 8002b74:	f1b9 0f00 	cmp.w	r9, #0
 8002b78:	d003      	beq.n	8002b82 <_scanf_float+0x6e>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002b86:	f1ba 0f01 	cmp.w	sl, #1
 8002b8a:	f200 8113 	bhi.w	8002db4 <_scanf_float+0x2a0>
 8002b8e:	455e      	cmp	r6, fp
 8002b90:	f200 8105 	bhi.w	8002d9e <_scanf_float+0x28a>
 8002b94:	2501      	movs	r5, #1
 8002b96:	4628      	mov	r0, r5
 8002b98:	b007      	add	sp, #28
 8002b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002ba2:	2a0d      	cmp	r2, #13
 8002ba4:	d8e6      	bhi.n	8002b74 <_scanf_float+0x60>
 8002ba6:	a101      	add	r1, pc, #4	; (adr r1, 8002bac <_scanf_float+0x98>)
 8002ba8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002bac:	08002ceb 	.word	0x08002ceb
 8002bb0:	08002b75 	.word	0x08002b75
 8002bb4:	08002b75 	.word	0x08002b75
 8002bb8:	08002b75 	.word	0x08002b75
 8002bbc:	08002d4b 	.word	0x08002d4b
 8002bc0:	08002d23 	.word	0x08002d23
 8002bc4:	08002b75 	.word	0x08002b75
 8002bc8:	08002b75 	.word	0x08002b75
 8002bcc:	08002cf9 	.word	0x08002cf9
 8002bd0:	08002b75 	.word	0x08002b75
 8002bd4:	08002b75 	.word	0x08002b75
 8002bd8:	08002b75 	.word	0x08002b75
 8002bdc:	08002b75 	.word	0x08002b75
 8002be0:	08002cb1 	.word	0x08002cb1
 8002be4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002be8:	e7db      	b.n	8002ba2 <_scanf_float+0x8e>
 8002bea:	290e      	cmp	r1, #14
 8002bec:	d8c2      	bhi.n	8002b74 <_scanf_float+0x60>
 8002bee:	a001      	add	r0, pc, #4	; (adr r0, 8002bf4 <_scanf_float+0xe0>)
 8002bf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002bf4:	08002ca3 	.word	0x08002ca3
 8002bf8:	08002b75 	.word	0x08002b75
 8002bfc:	08002ca3 	.word	0x08002ca3
 8002c00:	08002d37 	.word	0x08002d37
 8002c04:	08002b75 	.word	0x08002b75
 8002c08:	08002c51 	.word	0x08002c51
 8002c0c:	08002c8d 	.word	0x08002c8d
 8002c10:	08002c8d 	.word	0x08002c8d
 8002c14:	08002c8d 	.word	0x08002c8d
 8002c18:	08002c8d 	.word	0x08002c8d
 8002c1c:	08002c8d 	.word	0x08002c8d
 8002c20:	08002c8d 	.word	0x08002c8d
 8002c24:	08002c8d 	.word	0x08002c8d
 8002c28:	08002c8d 	.word	0x08002c8d
 8002c2c:	08002c8d 	.word	0x08002c8d
 8002c30:	2b6e      	cmp	r3, #110	; 0x6e
 8002c32:	d809      	bhi.n	8002c48 <_scanf_float+0x134>
 8002c34:	2b60      	cmp	r3, #96	; 0x60
 8002c36:	d8b2      	bhi.n	8002b9e <_scanf_float+0x8a>
 8002c38:	2b54      	cmp	r3, #84	; 0x54
 8002c3a:	d077      	beq.n	8002d2c <_scanf_float+0x218>
 8002c3c:	2b59      	cmp	r3, #89	; 0x59
 8002c3e:	d199      	bne.n	8002b74 <_scanf_float+0x60>
 8002c40:	2d07      	cmp	r5, #7
 8002c42:	d197      	bne.n	8002b74 <_scanf_float+0x60>
 8002c44:	2508      	movs	r5, #8
 8002c46:	e029      	b.n	8002c9c <_scanf_float+0x188>
 8002c48:	2b74      	cmp	r3, #116	; 0x74
 8002c4a:	d06f      	beq.n	8002d2c <_scanf_float+0x218>
 8002c4c:	2b79      	cmp	r3, #121	; 0x79
 8002c4e:	e7f6      	b.n	8002c3e <_scanf_float+0x12a>
 8002c50:	6821      	ldr	r1, [r4, #0]
 8002c52:	05c8      	lsls	r0, r1, #23
 8002c54:	d51a      	bpl.n	8002c8c <_scanf_float+0x178>
 8002c56:	9b02      	ldr	r3, [sp, #8]
 8002c58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002c5c:	6021      	str	r1, [r4, #0]
 8002c5e:	f109 0901 	add.w	r9, r9, #1
 8002c62:	b11b      	cbz	r3, 8002c6c <_scanf_float+0x158>
 8002c64:	3b01      	subs	r3, #1
 8002c66:	3201      	adds	r2, #1
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	60a2      	str	r2, [r4, #8]
 8002c6c:	68a3      	ldr	r3, [r4, #8]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60a3      	str	r3, [r4, #8]
 8002c72:	6923      	ldr	r3, [r4, #16]
 8002c74:	3301      	adds	r3, #1
 8002c76:	6123      	str	r3, [r4, #16]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	f340 8084 	ble.w	8002d8c <_scanf_float+0x278>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	e766      	b.n	8002b5a <_scanf_float+0x46>
 8002c8c:	eb1a 0f05 	cmn.w	sl, r5
 8002c90:	f47f af70 	bne.w	8002b74 <_scanf_float+0x60>
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002c9a:	6022      	str	r2, [r4, #0]
 8002c9c:	f806 3b01 	strb.w	r3, [r6], #1
 8002ca0:	e7e4      	b.n	8002c6c <_scanf_float+0x158>
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	0610      	lsls	r0, r2, #24
 8002ca6:	f57f af65 	bpl.w	8002b74 <_scanf_float+0x60>
 8002caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cae:	e7f4      	b.n	8002c9a <_scanf_float+0x186>
 8002cb0:	f1ba 0f00 	cmp.w	sl, #0
 8002cb4:	d10e      	bne.n	8002cd4 <_scanf_float+0x1c0>
 8002cb6:	f1b9 0f00 	cmp.w	r9, #0
 8002cba:	d10e      	bne.n	8002cda <_scanf_float+0x1c6>
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002cc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002cc6:	d108      	bne.n	8002cda <_scanf_float+0x1c6>
 8002cc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002ccc:	6022      	str	r2, [r4, #0]
 8002cce:	f04f 0a01 	mov.w	sl, #1
 8002cd2:	e7e3      	b.n	8002c9c <_scanf_float+0x188>
 8002cd4:	f1ba 0f02 	cmp.w	sl, #2
 8002cd8:	d055      	beq.n	8002d86 <_scanf_float+0x272>
 8002cda:	2d01      	cmp	r5, #1
 8002cdc:	d002      	beq.n	8002ce4 <_scanf_float+0x1d0>
 8002cde:	2d04      	cmp	r5, #4
 8002ce0:	f47f af48 	bne.w	8002b74 <_scanf_float+0x60>
 8002ce4:	3501      	adds	r5, #1
 8002ce6:	b2ed      	uxtb	r5, r5
 8002ce8:	e7d8      	b.n	8002c9c <_scanf_float+0x188>
 8002cea:	f1ba 0f01 	cmp.w	sl, #1
 8002cee:	f47f af41 	bne.w	8002b74 <_scanf_float+0x60>
 8002cf2:	f04f 0a02 	mov.w	sl, #2
 8002cf6:	e7d1      	b.n	8002c9c <_scanf_float+0x188>
 8002cf8:	b97d      	cbnz	r5, 8002d1a <_scanf_float+0x206>
 8002cfa:	f1b9 0f00 	cmp.w	r9, #0
 8002cfe:	f47f af3c 	bne.w	8002b7a <_scanf_float+0x66>
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002d08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002d0c:	f47f af39 	bne.w	8002b82 <_scanf_float+0x6e>
 8002d10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002d14:	6022      	str	r2, [r4, #0]
 8002d16:	2501      	movs	r5, #1
 8002d18:	e7c0      	b.n	8002c9c <_scanf_float+0x188>
 8002d1a:	2d03      	cmp	r5, #3
 8002d1c:	d0e2      	beq.n	8002ce4 <_scanf_float+0x1d0>
 8002d1e:	2d05      	cmp	r5, #5
 8002d20:	e7de      	b.n	8002ce0 <_scanf_float+0x1cc>
 8002d22:	2d02      	cmp	r5, #2
 8002d24:	f47f af26 	bne.w	8002b74 <_scanf_float+0x60>
 8002d28:	2503      	movs	r5, #3
 8002d2a:	e7b7      	b.n	8002c9c <_scanf_float+0x188>
 8002d2c:	2d06      	cmp	r5, #6
 8002d2e:	f47f af21 	bne.w	8002b74 <_scanf_float+0x60>
 8002d32:	2507      	movs	r5, #7
 8002d34:	e7b2      	b.n	8002c9c <_scanf_float+0x188>
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	0591      	lsls	r1, r2, #22
 8002d3a:	f57f af1b 	bpl.w	8002b74 <_scanf_float+0x60>
 8002d3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002d42:	6022      	str	r2, [r4, #0]
 8002d44:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d48:	e7a8      	b.n	8002c9c <_scanf_float+0x188>
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002d50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002d54:	d006      	beq.n	8002d64 <_scanf_float+0x250>
 8002d56:	0550      	lsls	r0, r2, #21
 8002d58:	f57f af0c 	bpl.w	8002b74 <_scanf_float+0x60>
 8002d5c:	f1b9 0f00 	cmp.w	r9, #0
 8002d60:	f43f af0f 	beq.w	8002b82 <_scanf_float+0x6e>
 8002d64:	0591      	lsls	r1, r2, #22
 8002d66:	bf58      	it	pl
 8002d68:	9901      	ldrpl	r1, [sp, #4]
 8002d6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002d6e:	bf58      	it	pl
 8002d70:	eba9 0101 	subpl.w	r1, r9, r1
 8002d74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002d78:	bf58      	it	pl
 8002d7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002d7e:	6022      	str	r2, [r4, #0]
 8002d80:	f04f 0900 	mov.w	r9, #0
 8002d84:	e78a      	b.n	8002c9c <_scanf_float+0x188>
 8002d86:	f04f 0a03 	mov.w	sl, #3
 8002d8a:	e787      	b.n	8002c9c <_scanf_float+0x188>
 8002d8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002d90:	4639      	mov	r1, r7
 8002d92:	4640      	mov	r0, r8
 8002d94:	4798      	blx	r3
 8002d96:	2800      	cmp	r0, #0
 8002d98:	f43f aedf 	beq.w	8002b5a <_scanf_float+0x46>
 8002d9c:	e6ea      	b.n	8002b74 <_scanf_float+0x60>
 8002d9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002da2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002da6:	463a      	mov	r2, r7
 8002da8:	4640      	mov	r0, r8
 8002daa:	4798      	blx	r3
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6123      	str	r3, [r4, #16]
 8002db2:	e6ec      	b.n	8002b8e <_scanf_float+0x7a>
 8002db4:	1e6b      	subs	r3, r5, #1
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d825      	bhi.n	8002e06 <_scanf_float+0x2f2>
 8002dba:	2d02      	cmp	r5, #2
 8002dbc:	d836      	bhi.n	8002e2c <_scanf_float+0x318>
 8002dbe:	455e      	cmp	r6, fp
 8002dc0:	f67f aee8 	bls.w	8002b94 <_scanf_float+0x80>
 8002dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002dc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002dcc:	463a      	mov	r2, r7
 8002dce:	4640      	mov	r0, r8
 8002dd0:	4798      	blx	r3
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	6123      	str	r3, [r4, #16]
 8002dd8:	e7f1      	b.n	8002dbe <_scanf_float+0x2aa>
 8002dda:	9802      	ldr	r0, [sp, #8]
 8002ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002de0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002de4:	9002      	str	r0, [sp, #8]
 8002de6:	463a      	mov	r2, r7
 8002de8:	4640      	mov	r0, r8
 8002dea:	4798      	blx	r3
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6123      	str	r3, [r4, #16]
 8002df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002df6:	fa5f fa8a 	uxtb.w	sl, sl
 8002dfa:	f1ba 0f02 	cmp.w	sl, #2
 8002dfe:	d1ec      	bne.n	8002dda <_scanf_float+0x2c6>
 8002e00:	3d03      	subs	r5, #3
 8002e02:	b2ed      	uxtb	r5, r5
 8002e04:	1b76      	subs	r6, r6, r5
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	05da      	lsls	r2, r3, #23
 8002e0a:	d52f      	bpl.n	8002e6c <_scanf_float+0x358>
 8002e0c:	055b      	lsls	r3, r3, #21
 8002e0e:	d510      	bpl.n	8002e32 <_scanf_float+0x31e>
 8002e10:	455e      	cmp	r6, fp
 8002e12:	f67f aebf 	bls.w	8002b94 <_scanf_float+0x80>
 8002e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002e1e:	463a      	mov	r2, r7
 8002e20:	4640      	mov	r0, r8
 8002e22:	4798      	blx	r3
 8002e24:	6923      	ldr	r3, [r4, #16]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6123      	str	r3, [r4, #16]
 8002e2a:	e7f1      	b.n	8002e10 <_scanf_float+0x2fc>
 8002e2c:	46aa      	mov	sl, r5
 8002e2e:	9602      	str	r6, [sp, #8]
 8002e30:	e7df      	b.n	8002df2 <_scanf_float+0x2de>
 8002e32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	2965      	cmp	r1, #101	; 0x65
 8002e3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8002e42:	6123      	str	r3, [r4, #16]
 8002e44:	d00c      	beq.n	8002e60 <_scanf_float+0x34c>
 8002e46:	2945      	cmp	r1, #69	; 0x45
 8002e48:	d00a      	beq.n	8002e60 <_scanf_float+0x34c>
 8002e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e4e:	463a      	mov	r2, r7
 8002e50:	4640      	mov	r0, r8
 8002e52:	4798      	blx	r3
 8002e54:	6923      	ldr	r3, [r4, #16]
 8002e56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	1eb5      	subs	r5, r6, #2
 8002e5e:	6123      	str	r3, [r4, #16]
 8002e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e64:	463a      	mov	r2, r7
 8002e66:	4640      	mov	r0, r8
 8002e68:	4798      	blx	r3
 8002e6a:	462e      	mov	r6, r5
 8002e6c:	6825      	ldr	r5, [r4, #0]
 8002e6e:	f015 0510 	ands.w	r5, r5, #16
 8002e72:	d14d      	bne.n	8002f10 <_scanf_float+0x3fc>
 8002e74:	7035      	strb	r5, [r6, #0]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	d11a      	bne.n	8002eb8 <_scanf_float+0x3a4>
 8002e82:	9b01      	ldr	r3, [sp, #4]
 8002e84:	454b      	cmp	r3, r9
 8002e86:	eba3 0209 	sub.w	r2, r3, r9
 8002e8a:	d122      	bne.n	8002ed2 <_scanf_float+0x3be>
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4659      	mov	r1, fp
 8002e90:	4640      	mov	r0, r8
 8002e92:	f002 fb47 	bl	8005524 <_strtod_r>
 8002e96:	9b03      	ldr	r3, [sp, #12]
 8002e98:	6821      	ldr	r1, [r4, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f011 0f02 	tst.w	r1, #2
 8002ea0:	f103 0204 	add.w	r2, r3, #4
 8002ea4:	d020      	beq.n	8002ee8 <_scanf_float+0x3d4>
 8002ea6:	9903      	ldr	r1, [sp, #12]
 8002ea8:	600a      	str	r2, [r1, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	ed83 0b00 	vstr	d0, [r3]
 8002eb0:	68e3      	ldr	r3, [r4, #12]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60e3      	str	r3, [r4, #12]
 8002eb6:	e66e      	b.n	8002b96 <_scanf_float+0x82>
 8002eb8:	9b04      	ldr	r3, [sp, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0e6      	beq.n	8002e8c <_scanf_float+0x378>
 8002ebe:	9905      	ldr	r1, [sp, #20]
 8002ec0:	230a      	movs	r3, #10
 8002ec2:	462a      	mov	r2, r5
 8002ec4:	3101      	adds	r1, #1
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f002 fbb4 	bl	8005634 <_strtol_r>
 8002ecc:	9b04      	ldr	r3, [sp, #16]
 8002ece:	9e05      	ldr	r6, [sp, #20]
 8002ed0:	1ac2      	subs	r2, r0, r3
 8002ed2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002ed6:	429e      	cmp	r6, r3
 8002ed8:	bf28      	it	cs
 8002eda:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8002ede:	490d      	ldr	r1, [pc, #52]	; (8002f14 <_scanf_float+0x400>)
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f000 f8cb 	bl	800307c <siprintf>
 8002ee6:	e7d1      	b.n	8002e8c <_scanf_float+0x378>
 8002ee8:	f011 0f04 	tst.w	r1, #4
 8002eec:	9903      	ldr	r1, [sp, #12]
 8002eee:	600a      	str	r2, [r1, #0]
 8002ef0:	d1db      	bne.n	8002eaa <_scanf_float+0x396>
 8002ef2:	eeb4 0b40 	vcmp.f64	d0, d0
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	681e      	ldr	r6, [r3, #0]
 8002efc:	d705      	bvc.n	8002f0a <_scanf_float+0x3f6>
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <_scanf_float+0x404>)
 8002f00:	f000 f99e 	bl	8003240 <nanf>
 8002f04:	ed86 0a00 	vstr	s0, [r6]
 8002f08:	e7d2      	b.n	8002eb0 <_scanf_float+0x39c>
 8002f0a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8002f0e:	e7f9      	b.n	8002f04 <_scanf_float+0x3f0>
 8002f10:	2500      	movs	r5, #0
 8002f12:	e640      	b.n	8002b96 <_scanf_float+0x82>
 8002f14:	0800687c 	.word	0x0800687c
 8002f18:	08006c0d 	.word	0x08006c0d

08002f1c <std>:
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	4604      	mov	r4, r0
 8002f22:	e9c0 3300 	strd	r3, r3, [r0]
 8002f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f2a:	6083      	str	r3, [r0, #8]
 8002f2c:	8181      	strh	r1, [r0, #12]
 8002f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8002f30:	81c2      	strh	r2, [r0, #14]
 8002f32:	6183      	str	r3, [r0, #24]
 8002f34:	4619      	mov	r1, r3
 8002f36:	2208      	movs	r2, #8
 8002f38:	305c      	adds	r0, #92	; 0x5c
 8002f3a:	f000 f902 	bl	8003142 <memset>
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <std+0x38>)
 8002f40:	6263      	str	r3, [r4, #36]	; 0x24
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <std+0x3c>)
 8002f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <std+0x40>)
 8002f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <std+0x44>)
 8002f4c:	6224      	str	r4, [r4, #32]
 8002f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	bf00      	nop
 8002f54:	080030bd 	.word	0x080030bd
 8002f58:	080030df 	.word	0x080030df
 8002f5c:	08003117 	.word	0x08003117
 8002f60:	0800313b 	.word	0x0800313b

08002f64 <stdio_exit_handler>:
 8002f64:	4a02      	ldr	r2, [pc, #8]	; (8002f70 <stdio_exit_handler+0xc>)
 8002f66:	4903      	ldr	r1, [pc, #12]	; (8002f74 <stdio_exit_handler+0x10>)
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <stdio_exit_handler+0x14>)
 8002f6a:	f000 b869 	b.w	8003040 <_fwalk_sglue>
 8002f6e:	bf00      	nop
 8002f70:	20000054 	.word	0x20000054
 8002f74:	080059f5 	.word	0x080059f5
 8002f78:	20000060 	.word	0x20000060

08002f7c <cleanup_stdio>:
 8002f7c:	6841      	ldr	r1, [r0, #4]
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <cleanup_stdio+0x34>)
 8002f80:	4299      	cmp	r1, r3
 8002f82:	b510      	push	{r4, lr}
 8002f84:	4604      	mov	r4, r0
 8002f86:	d001      	beq.n	8002f8c <cleanup_stdio+0x10>
 8002f88:	f002 fd34 	bl	80059f4 <_fflush_r>
 8002f8c:	68a1      	ldr	r1, [r4, #8]
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <cleanup_stdio+0x38>)
 8002f90:	4299      	cmp	r1, r3
 8002f92:	d002      	beq.n	8002f9a <cleanup_stdio+0x1e>
 8002f94:	4620      	mov	r0, r4
 8002f96:	f002 fd2d 	bl	80059f4 <_fflush_r>
 8002f9a:	68e1      	ldr	r1, [r4, #12]
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <cleanup_stdio+0x3c>)
 8002f9e:	4299      	cmp	r1, r3
 8002fa0:	d004      	beq.n	8002fac <cleanup_stdio+0x30>
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa8:	f002 bd24 	b.w	80059f4 <_fflush_r>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000244 	.word	0x20000244
 8002fb4:	200002ac 	.word	0x200002ac
 8002fb8:	20000314 	.word	0x20000314

08002fbc <global_stdio_init.part.0>:
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <global_stdio_init.part.0+0x30>)
 8002fc0:	4c0b      	ldr	r4, [pc, #44]	; (8002ff0 <global_stdio_init.part.0+0x34>)
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <global_stdio_init.part.0+0x38>)
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2104      	movs	r1, #4
 8002fcc:	f7ff ffa6 	bl	8002f1c <std>
 8002fd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2109      	movs	r1, #9
 8002fd8:	f7ff ffa0 	bl	8002f1c <std>
 8002fdc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe6:	2112      	movs	r1, #18
 8002fe8:	f7ff bf98 	b.w	8002f1c <std>
 8002fec:	2000037c 	.word	0x2000037c
 8002ff0:	20000244 	.word	0x20000244
 8002ff4:	08002f65 	.word	0x08002f65

08002ff8 <__sfp_lock_acquire>:
 8002ff8:	4801      	ldr	r0, [pc, #4]	; (8003000 <__sfp_lock_acquire+0x8>)
 8002ffa:	f000 b91f 	b.w	800323c <__retarget_lock_acquire_recursive>
 8002ffe:	bf00      	nop
 8003000:	20000385 	.word	0x20000385

08003004 <__sfp_lock_release>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__sfp_lock_release+0x8>)
 8003006:	f000 b91a 	b.w	800323e <__retarget_lock_release_recursive>
 800300a:	bf00      	nop
 800300c:	20000385 	.word	0x20000385

08003010 <__sinit>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	f7ff fff0 	bl	8002ff8 <__sfp_lock_acquire>
 8003018:	6a23      	ldr	r3, [r4, #32]
 800301a:	b11b      	cbz	r3, 8003024 <__sinit+0x14>
 800301c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003020:	f7ff bff0 	b.w	8003004 <__sfp_lock_release>
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__sinit+0x28>)
 8003026:	6223      	str	r3, [r4, #32]
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <__sinit+0x2c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f5      	bne.n	800301c <__sinit+0xc>
 8003030:	f7ff ffc4 	bl	8002fbc <global_stdio_init.part.0>
 8003034:	e7f2      	b.n	800301c <__sinit+0xc>
 8003036:	bf00      	nop
 8003038:	08002f7d 	.word	0x08002f7d
 800303c:	2000037c 	.word	0x2000037c

08003040 <_fwalk_sglue>:
 8003040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003044:	4607      	mov	r7, r0
 8003046:	4688      	mov	r8, r1
 8003048:	4614      	mov	r4, r2
 800304a:	2600      	movs	r6, #0
 800304c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003050:	f1b9 0901 	subs.w	r9, r9, #1
 8003054:	d505      	bpl.n	8003062 <_fwalk_sglue+0x22>
 8003056:	6824      	ldr	r4, [r4, #0]
 8003058:	2c00      	cmp	r4, #0
 800305a:	d1f7      	bne.n	800304c <_fwalk_sglue+0xc>
 800305c:	4630      	mov	r0, r6
 800305e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003062:	89ab      	ldrh	r3, [r5, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d907      	bls.n	8003078 <_fwalk_sglue+0x38>
 8003068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800306c:	3301      	adds	r3, #1
 800306e:	d003      	beq.n	8003078 <_fwalk_sglue+0x38>
 8003070:	4629      	mov	r1, r5
 8003072:	4638      	mov	r0, r7
 8003074:	47c0      	blx	r8
 8003076:	4306      	orrs	r6, r0
 8003078:	3568      	adds	r5, #104	; 0x68
 800307a:	e7e9      	b.n	8003050 <_fwalk_sglue+0x10>

0800307c <siprintf>:
 800307c:	b40e      	push	{r1, r2, r3}
 800307e:	b500      	push	{lr}
 8003080:	b09c      	sub	sp, #112	; 0x70
 8003082:	ab1d      	add	r3, sp, #116	; 0x74
 8003084:	9002      	str	r0, [sp, #8]
 8003086:	9006      	str	r0, [sp, #24]
 8003088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <siprintf+0x38>)
 800308e:	9107      	str	r1, [sp, #28]
 8003090:	9104      	str	r1, [sp, #16]
 8003092:	4909      	ldr	r1, [pc, #36]	; (80030b8 <siprintf+0x3c>)
 8003094:	f853 2b04 	ldr.w	r2, [r3], #4
 8003098:	9105      	str	r1, [sp, #20]
 800309a:	6800      	ldr	r0, [r0, #0]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	a902      	add	r1, sp, #8
 80030a0:	f002 fb24 	bl	80056ec <_svfiprintf_r>
 80030a4:	9b02      	ldr	r3, [sp, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	b01c      	add	sp, #112	; 0x70
 80030ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80030b0:	b003      	add	sp, #12
 80030b2:	4770      	bx	lr
 80030b4:	200000ac 	.word	0x200000ac
 80030b8:	ffff0208 	.word	0xffff0208

080030bc <__sread>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	460c      	mov	r4, r1
 80030c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c4:	f000 f86c 	bl	80031a0 <_read_r>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	bfab      	itete	ge
 80030cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030ce:	89a3      	ldrhlt	r3, [r4, #12]
 80030d0:	181b      	addge	r3, r3, r0
 80030d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030d6:	bfac      	ite	ge
 80030d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80030da:	81a3      	strhlt	r3, [r4, #12]
 80030dc:	bd10      	pop	{r4, pc}

080030de <__swrite>:
 80030de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e2:	461f      	mov	r7, r3
 80030e4:	898b      	ldrh	r3, [r1, #12]
 80030e6:	05db      	lsls	r3, r3, #23
 80030e8:	4605      	mov	r5, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	4616      	mov	r6, r2
 80030ee:	d505      	bpl.n	80030fc <__swrite+0x1e>
 80030f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f4:	2302      	movs	r3, #2
 80030f6:	2200      	movs	r2, #0
 80030f8:	f000 f840 	bl	800317c <_lseek_r>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	4632      	mov	r2, r6
 800310a:	463b      	mov	r3, r7
 800310c:	4628      	mov	r0, r5
 800310e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003112:	f000 b857 	b.w	80031c4 <_write_r>

08003116 <__sseek>:
 8003116:	b510      	push	{r4, lr}
 8003118:	460c      	mov	r4, r1
 800311a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311e:	f000 f82d 	bl	800317c <_lseek_r>
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	bf15      	itete	ne
 8003128:	6560      	strne	r0, [r4, #84]	; 0x54
 800312a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800312e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003132:	81a3      	strheq	r3, [r4, #12]
 8003134:	bf18      	it	ne
 8003136:	81a3      	strhne	r3, [r4, #12]
 8003138:	bd10      	pop	{r4, pc}

0800313a <__sclose>:
 800313a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800313e:	f000 b80d 	b.w	800315c <_close_r>

08003142 <memset>:
 8003142:	4402      	add	r2, r0
 8003144:	4603      	mov	r3, r0
 8003146:	4293      	cmp	r3, r2
 8003148:	d100      	bne.n	800314c <memset+0xa>
 800314a:	4770      	bx	lr
 800314c:	f803 1b01 	strb.w	r1, [r3], #1
 8003150:	e7f9      	b.n	8003146 <memset+0x4>
	...

08003154 <_localeconv_r>:
 8003154:	4800      	ldr	r0, [pc, #0]	; (8003158 <_localeconv_r+0x4>)
 8003156:	4770      	bx	lr
 8003158:	200001a0 	.word	0x200001a0

0800315c <_close_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4d06      	ldr	r5, [pc, #24]	; (8003178 <_close_r+0x1c>)
 8003160:	2300      	movs	r3, #0
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fd ff81 	bl	800106e <_close>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_close_r+0x1a>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_close_r+0x1a>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000380 	.word	0x20000380

0800317c <_lseek_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4d07      	ldr	r5, [pc, #28]	; (800319c <_lseek_r+0x20>)
 8003180:	4604      	mov	r4, r0
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	2200      	movs	r2, #0
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fd ff96 	bl	80010bc <_lseek>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_lseek_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_lseek_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000380 	.word	0x20000380

080031a0 <_read_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4d07      	ldr	r5, [pc, #28]	; (80031c0 <_read_r+0x20>)
 80031a4:	4604      	mov	r4, r0
 80031a6:	4608      	mov	r0, r1
 80031a8:	4611      	mov	r1, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	602a      	str	r2, [r5, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7fd ff24 	bl	8000ffc <_read>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_read_r+0x1e>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_read_r+0x1e>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000380 	.word	0x20000380

080031c4 <_write_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4d07      	ldr	r5, [pc, #28]	; (80031e4 <_write_r+0x20>)
 80031c8:	4604      	mov	r4, r0
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	602a      	str	r2, [r5, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fd ff2f 	bl	8001036 <_write>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_write_r+0x1e>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_write_r+0x1e>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000380 	.word	0x20000380

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200000ac 	.word	0x200000ac

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4d0d      	ldr	r5, [pc, #52]	; (800322c <__libc_init_array+0x38>)
 80031f8:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fa:	1b64      	subs	r4, r4, r5
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	2600      	movs	r6, #0
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	4d0b      	ldr	r5, [pc, #44]	; (8003234 <__libc_init_array+0x40>)
 8003206:	4c0c      	ldr	r4, [pc, #48]	; (8003238 <__libc_init_array+0x44>)
 8003208:	f003 fb0a 	bl	8006820 <_init>
 800320c:	1b64      	subs	r4, r4, r5
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	2600      	movs	r6, #0
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08006c78 	.word	0x08006c78
 8003230:	08006c78 	.word	0x08006c78
 8003234:	08006c78 	.word	0x08006c78
 8003238:	08006c7c 	.word	0x08006c7c

0800323c <__retarget_lock_acquire_recursive>:
 800323c:	4770      	bx	lr

0800323e <__retarget_lock_release_recursive>:
 800323e:	4770      	bx	lr

08003240 <nanf>:
 8003240:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003248 <nanf+0x8>
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	7fc00000 	.word	0x7fc00000

0800324c <quorem>:
 800324c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003250:	6903      	ldr	r3, [r0, #16]
 8003252:	690c      	ldr	r4, [r1, #16]
 8003254:	42a3      	cmp	r3, r4
 8003256:	4607      	mov	r7, r0
 8003258:	db7e      	blt.n	8003358 <quorem+0x10c>
 800325a:	3c01      	subs	r4, #1
 800325c:	f101 0814 	add.w	r8, r1, #20
 8003260:	f100 0514 	add.w	r5, r0, #20
 8003264:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800326e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003272:	3301      	adds	r3, #1
 8003274:	429a      	cmp	r2, r3
 8003276:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800327a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800327e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003282:	d331      	bcc.n	80032e8 <quorem+0x9c>
 8003284:	f04f 0e00 	mov.w	lr, #0
 8003288:	4640      	mov	r0, r8
 800328a:	46ac      	mov	ip, r5
 800328c:	46f2      	mov	sl, lr
 800328e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003292:	b293      	uxth	r3, r2
 8003294:	fb06 e303 	mla	r3, r6, r3, lr
 8003298:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800329c:	0c1a      	lsrs	r2, r3, #16
 800329e:	b29b      	uxth	r3, r3
 80032a0:	ebaa 0303 	sub.w	r3, sl, r3
 80032a4:	f8dc a000 	ldr.w	sl, [ip]
 80032a8:	fa13 f38a 	uxtah	r3, r3, sl
 80032ac:	fb06 220e 	mla	r2, r6, lr, r2
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	9b00      	ldr	r3, [sp, #0]
 80032b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80032b8:	b292      	uxth	r2, r2
 80032ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80032be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032c2:	f8bd 3000 	ldrh.w	r3, [sp]
 80032c6:	4581      	cmp	r9, r0
 80032c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032cc:	f84c 3b04 	str.w	r3, [ip], #4
 80032d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80032d4:	d2db      	bcs.n	800328e <quorem+0x42>
 80032d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80032da:	b92b      	cbnz	r3, 80032e8 <quorem+0x9c>
 80032dc:	9b01      	ldr	r3, [sp, #4]
 80032de:	3b04      	subs	r3, #4
 80032e0:	429d      	cmp	r5, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	d32c      	bcc.n	8003340 <quorem+0xf4>
 80032e6:	613c      	str	r4, [r7, #16]
 80032e8:	4638      	mov	r0, r7
 80032ea:	f001 f96b 	bl	80045c4 <__mcmp>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	db22      	blt.n	8003338 <quorem+0xec>
 80032f2:	3601      	adds	r6, #1
 80032f4:	4629      	mov	r1, r5
 80032f6:	2000      	movs	r0, #0
 80032f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80032fc:	f8d1 c000 	ldr.w	ip, [r1]
 8003300:	b293      	uxth	r3, r2
 8003302:	1ac3      	subs	r3, r0, r3
 8003304:	0c12      	lsrs	r2, r2, #16
 8003306:	fa13 f38c 	uxtah	r3, r3, ip
 800330a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800330e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003312:	b29b      	uxth	r3, r3
 8003314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003318:	45c1      	cmp	r9, r8
 800331a:	f841 3b04 	str.w	r3, [r1], #4
 800331e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003322:	d2e9      	bcs.n	80032f8 <quorem+0xac>
 8003324:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800332c:	b922      	cbnz	r2, 8003338 <quorem+0xec>
 800332e:	3b04      	subs	r3, #4
 8003330:	429d      	cmp	r5, r3
 8003332:	461a      	mov	r2, r3
 8003334:	d30a      	bcc.n	800334c <quorem+0x100>
 8003336:	613c      	str	r4, [r7, #16]
 8003338:	4630      	mov	r0, r6
 800333a:	b003      	add	sp, #12
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	3b04      	subs	r3, #4
 8003344:	2a00      	cmp	r2, #0
 8003346:	d1ce      	bne.n	80032e6 <quorem+0x9a>
 8003348:	3c01      	subs	r4, #1
 800334a:	e7c9      	b.n	80032e0 <quorem+0x94>
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	3b04      	subs	r3, #4
 8003350:	2a00      	cmp	r2, #0
 8003352:	d1f0      	bne.n	8003336 <quorem+0xea>
 8003354:	3c01      	subs	r4, #1
 8003356:	e7eb      	b.n	8003330 <quorem+0xe4>
 8003358:	2000      	movs	r0, #0
 800335a:	e7ee      	b.n	800333a <quorem+0xee>
 800335c:	0000      	movs	r0, r0
	...

08003360 <_dtoa_r>:
 8003360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003364:	ed2d 8b02 	vpush	{d8}
 8003368:	69c5      	ldr	r5, [r0, #28]
 800336a:	b091      	sub	sp, #68	; 0x44
 800336c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003370:	ec59 8b10 	vmov	r8, r9, d0
 8003374:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8003376:	9106      	str	r1, [sp, #24]
 8003378:	4606      	mov	r6, r0
 800337a:	9208      	str	r2, [sp, #32]
 800337c:	930c      	str	r3, [sp, #48]	; 0x30
 800337e:	b975      	cbnz	r5, 800339e <_dtoa_r+0x3e>
 8003380:	2010      	movs	r0, #16
 8003382:	f000 fda5 	bl	8003ed0 <malloc>
 8003386:	4602      	mov	r2, r0
 8003388:	61f0      	str	r0, [r6, #28]
 800338a:	b920      	cbnz	r0, 8003396 <_dtoa_r+0x36>
 800338c:	4ba6      	ldr	r3, [pc, #664]	; (8003628 <_dtoa_r+0x2c8>)
 800338e:	21ef      	movs	r1, #239	; 0xef
 8003390:	48a6      	ldr	r0, [pc, #664]	; (800362c <_dtoa_r+0x2cc>)
 8003392:	f002 fba9 	bl	8005ae8 <__assert_func>
 8003396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800339a:	6005      	str	r5, [r0, #0]
 800339c:	60c5      	str	r5, [r0, #12]
 800339e:	69f3      	ldr	r3, [r6, #28]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	b151      	cbz	r1, 80033ba <_dtoa_r+0x5a>
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	604a      	str	r2, [r1, #4]
 80033a8:	2301      	movs	r3, #1
 80033aa:	4093      	lsls	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
 80033ae:	4630      	mov	r0, r6
 80033b0:	f000 fe82 	bl	80040b8 <_Bfree>
 80033b4:	69f3      	ldr	r3, [r6, #28]
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f1b9 0300 	subs.w	r3, r9, #0
 80033be:	bfbb      	ittet	lt
 80033c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80033c4:	9303      	strlt	r3, [sp, #12]
 80033c6:	2300      	movge	r3, #0
 80033c8:	2201      	movlt	r2, #1
 80033ca:	bfac      	ite	ge
 80033cc:	6023      	strge	r3, [r4, #0]
 80033ce:	6022      	strlt	r2, [r4, #0]
 80033d0:	4b97      	ldr	r3, [pc, #604]	; (8003630 <_dtoa_r+0x2d0>)
 80033d2:	9c03      	ldr	r4, [sp, #12]
 80033d4:	43a3      	bics	r3, r4
 80033d6:	d11c      	bne.n	8003412 <_dtoa_r+0xb2>
 80033d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033da:	f242 730f 	movw	r3, #9999	; 0x270f
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80033e4:	ea53 0308 	orrs.w	r3, r3, r8
 80033e8:	f000 84fb 	beq.w	8003de2 <_dtoa_r+0xa82>
 80033ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80033ee:	b963      	cbnz	r3, 800340a <_dtoa_r+0xaa>
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <_dtoa_r+0x2d4>)
 80033f2:	e020      	b.n	8003436 <_dtoa_r+0xd6>
 80033f4:	4b90      	ldr	r3, [pc, #576]	; (8003638 <_dtoa_r+0x2d8>)
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	3308      	adds	r3, #8
 80033fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	9801      	ldr	r0, [sp, #4]
 8003400:	b011      	add	sp, #68	; 0x44
 8003402:	ecbd 8b02 	vpop	{d8}
 8003406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340a:	4b8a      	ldr	r3, [pc, #552]	; (8003634 <_dtoa_r+0x2d4>)
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	3303      	adds	r3, #3
 8003410:	e7f3      	b.n	80033fa <_dtoa_r+0x9a>
 8003412:	ed9d 8b02 	vldr	d8, [sp, #8]
 8003416:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	d10c      	bne.n	800343a <_dtoa_r+0xda>
 8003420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003422:	2301      	movs	r3, #1
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 84d7 	beq.w	8003ddc <_dtoa_r+0xa7c>
 800342e:	4b83      	ldr	r3, [pc, #524]	; (800363c <_dtoa_r+0x2dc>)
 8003430:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	3b01      	subs	r3, #1
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	e7e1      	b.n	80033fe <_dtoa_r+0x9e>
 800343a:	aa0e      	add	r2, sp, #56	; 0x38
 800343c:	a90f      	add	r1, sp, #60	; 0x3c
 800343e:	4630      	mov	r0, r6
 8003440:	eeb0 0b48 	vmov.f64	d0, d8
 8003444:	f001 f9d4 	bl	80047f0 <__d2b>
 8003448:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800344c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800344e:	4605      	mov	r5, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d046      	beq.n	80034e2 <_dtoa_r+0x182>
 8003454:	eeb0 7b48 	vmov.f64	d7, d8
 8003458:	ee18 1a90 	vmov	r1, s17
 800345c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003460:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8003464:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003468:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800346c:	2000      	movs	r0, #0
 800346e:	ee07 1a90 	vmov	s15, r1
 8003472:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8003476:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8003610 <_dtoa_r+0x2b0>
 800347a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800347e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8003618 <_dtoa_r+0x2b8>
 8003482:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003486:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8003620 <_dtoa_r+0x2c0>
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003492:	eeb0 7b46 	vmov.f64	d7, d6
 8003496:	eea4 7b05 	vfma.f64	d7, d4, d5
 800349a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800349e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	ee16 ba90 	vmov	fp, s13
 80034aa:	9009      	str	r0, [sp, #36]	; 0x24
 80034ac:	d508      	bpl.n	80034c0 <_dtoa_r+0x160>
 80034ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80034b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80034b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ba:	bf18      	it	ne
 80034bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80034c0:	f1bb 0f16 	cmp.w	fp, #22
 80034c4:	d82b      	bhi.n	800351e <_dtoa_r+0x1be>
 80034c6:	495e      	ldr	r1, [pc, #376]	; (8003640 <_dtoa_r+0x2e0>)
 80034c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80034cc:	ed91 7b00 	vldr	d7, [r1]
 80034d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d501      	bpl.n	80034de <_dtoa_r+0x17e>
 80034da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80034de:	2100      	movs	r1, #0
 80034e0:	e01e      	b.n	8003520 <_dtoa_r+0x1c0>
 80034e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034e4:	4413      	add	r3, r2
 80034e6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80034ea:	2920      	cmp	r1, #32
 80034ec:	bfc1      	itttt	gt
 80034ee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80034f2:	408c      	lslgt	r4, r1
 80034f4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80034f8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80034fc:	bfd6      	itet	le
 80034fe:	f1c1 0120 	rsble	r1, r1, #32
 8003502:	4321      	orrgt	r1, r4
 8003504:	fa08 f101 	lslle.w	r1, r8, r1
 8003508:	ee07 1a90 	vmov	s15, r1
 800350c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003510:	3b01      	subs	r3, #1
 8003512:	ee17 1a90 	vmov	r1, s15
 8003516:	2001      	movs	r0, #1
 8003518:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800351c:	e7a7      	b.n	800346e <_dtoa_r+0x10e>
 800351e:	2101      	movs	r1, #1
 8003520:	1ad2      	subs	r2, r2, r3
 8003522:	1e53      	subs	r3, r2, #1
 8003524:	9305      	str	r3, [sp, #20]
 8003526:	bf45      	ittet	mi
 8003528:	f1c2 0301 	rsbmi	r3, r2, #1
 800352c:	9304      	strmi	r3, [sp, #16]
 800352e:	2300      	movpl	r3, #0
 8003530:	2300      	movmi	r3, #0
 8003532:	bf4c      	ite	mi
 8003534:	9305      	strmi	r3, [sp, #20]
 8003536:	9304      	strpl	r3, [sp, #16]
 8003538:	f1bb 0f00 	cmp.w	fp, #0
 800353c:	910b      	str	r1, [sp, #44]	; 0x2c
 800353e:	db18      	blt.n	8003572 <_dtoa_r+0x212>
 8003540:	9b05      	ldr	r3, [sp, #20]
 8003542:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003546:	445b      	add	r3, fp
 8003548:	9305      	str	r3, [sp, #20]
 800354a:	2300      	movs	r3, #0
 800354c:	9a06      	ldr	r2, [sp, #24]
 800354e:	2a09      	cmp	r2, #9
 8003550:	d848      	bhi.n	80035e4 <_dtoa_r+0x284>
 8003552:	2a05      	cmp	r2, #5
 8003554:	bfc4      	itt	gt
 8003556:	3a04      	subgt	r2, #4
 8003558:	9206      	strgt	r2, [sp, #24]
 800355a:	9a06      	ldr	r2, [sp, #24]
 800355c:	f1a2 0202 	sub.w	r2, r2, #2
 8003560:	bfcc      	ite	gt
 8003562:	2400      	movgt	r4, #0
 8003564:	2401      	movle	r4, #1
 8003566:	2a03      	cmp	r2, #3
 8003568:	d847      	bhi.n	80035fa <_dtoa_r+0x29a>
 800356a:	e8df f002 	tbb	[pc, r2]
 800356e:	2d0b      	.short	0x2d0b
 8003570:	392b      	.short	0x392b
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	2200      	movs	r2, #0
 8003576:	eba3 030b 	sub.w	r3, r3, fp
 800357a:	9304      	str	r3, [sp, #16]
 800357c:	920a      	str	r2, [sp, #40]	; 0x28
 800357e:	f1cb 0300 	rsb	r3, fp, #0
 8003582:	e7e3      	b.n	800354c <_dtoa_r+0x1ec>
 8003584:	2200      	movs	r2, #0
 8003586:	9207      	str	r2, [sp, #28]
 8003588:	9a08      	ldr	r2, [sp, #32]
 800358a:	2a00      	cmp	r2, #0
 800358c:	dc38      	bgt.n	8003600 <_dtoa_r+0x2a0>
 800358e:	f04f 0a01 	mov.w	sl, #1
 8003592:	46d1      	mov	r9, sl
 8003594:	4652      	mov	r2, sl
 8003596:	f8cd a020 	str.w	sl, [sp, #32]
 800359a:	69f7      	ldr	r7, [r6, #28]
 800359c:	2100      	movs	r1, #0
 800359e:	2004      	movs	r0, #4
 80035a0:	f100 0c14 	add.w	ip, r0, #20
 80035a4:	4594      	cmp	ip, r2
 80035a6:	d930      	bls.n	800360a <_dtoa_r+0x2aa>
 80035a8:	6079      	str	r1, [r7, #4]
 80035aa:	4630      	mov	r0, r6
 80035ac:	930d      	str	r3, [sp, #52]	; 0x34
 80035ae:	f000 fd43 	bl	8004038 <_Balloc>
 80035b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035b4:	9001      	str	r0, [sp, #4]
 80035b6:	4602      	mov	r2, r0
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d145      	bne.n	8003648 <_dtoa_r+0x2e8>
 80035bc:	4b21      	ldr	r3, [pc, #132]	; (8003644 <_dtoa_r+0x2e4>)
 80035be:	f240 11af 	movw	r1, #431	; 0x1af
 80035c2:	e6e5      	b.n	8003390 <_dtoa_r+0x30>
 80035c4:	2201      	movs	r2, #1
 80035c6:	e7de      	b.n	8003586 <_dtoa_r+0x226>
 80035c8:	2200      	movs	r2, #0
 80035ca:	9207      	str	r2, [sp, #28]
 80035cc:	9a08      	ldr	r2, [sp, #32]
 80035ce:	eb0b 0a02 	add.w	sl, fp, r2
 80035d2:	f10a 0901 	add.w	r9, sl, #1
 80035d6:	464a      	mov	r2, r9
 80035d8:	2a01      	cmp	r2, #1
 80035da:	bfb8      	it	lt
 80035dc:	2201      	movlt	r2, #1
 80035de:	e7dc      	b.n	800359a <_dtoa_r+0x23a>
 80035e0:	2201      	movs	r2, #1
 80035e2:	e7f2      	b.n	80035ca <_dtoa_r+0x26a>
 80035e4:	2401      	movs	r4, #1
 80035e6:	2200      	movs	r2, #0
 80035e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80035ec:	f04f 3aff 	mov.w	sl, #4294967295
 80035f0:	2100      	movs	r1, #0
 80035f2:	46d1      	mov	r9, sl
 80035f4:	2212      	movs	r2, #18
 80035f6:	9108      	str	r1, [sp, #32]
 80035f8:	e7cf      	b.n	800359a <_dtoa_r+0x23a>
 80035fa:	2201      	movs	r2, #1
 80035fc:	9207      	str	r2, [sp, #28]
 80035fe:	e7f5      	b.n	80035ec <_dtoa_r+0x28c>
 8003600:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003604:	46d1      	mov	r9, sl
 8003606:	4652      	mov	r2, sl
 8003608:	e7c7      	b.n	800359a <_dtoa_r+0x23a>
 800360a:	3101      	adds	r1, #1
 800360c:	0040      	lsls	r0, r0, #1
 800360e:	e7c7      	b.n	80035a0 <_dtoa_r+0x240>
 8003610:	636f4361 	.word	0x636f4361
 8003614:	3fd287a7 	.word	0x3fd287a7
 8003618:	8b60c8b3 	.word	0x8b60c8b3
 800361c:	3fc68a28 	.word	0x3fc68a28
 8003620:	509f79fb 	.word	0x509f79fb
 8003624:	3fd34413 	.word	0x3fd34413
 8003628:	0800688e 	.word	0x0800688e
 800362c:	080068a5 	.word	0x080068a5
 8003630:	7ff00000 	.word	0x7ff00000
 8003634:	0800688a 	.word	0x0800688a
 8003638:	08006881 	.word	0x08006881
 800363c:	08006859 	.word	0x08006859
 8003640:	08006990 	.word	0x08006990
 8003644:	080068fd 	.word	0x080068fd
 8003648:	69f2      	ldr	r2, [r6, #28]
 800364a:	9901      	ldr	r1, [sp, #4]
 800364c:	6011      	str	r1, [r2, #0]
 800364e:	f1b9 0f0e 	cmp.w	r9, #14
 8003652:	d86c      	bhi.n	800372e <_dtoa_r+0x3ce>
 8003654:	2c00      	cmp	r4, #0
 8003656:	d06a      	beq.n	800372e <_dtoa_r+0x3ce>
 8003658:	f1bb 0f00 	cmp.w	fp, #0
 800365c:	f340 80a0 	ble.w	80037a0 <_dtoa_r+0x440>
 8003660:	4ac1      	ldr	r2, [pc, #772]	; (8003968 <_dtoa_r+0x608>)
 8003662:	f00b 010f 	and.w	r1, fp, #15
 8003666:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800366a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800366e:	ed92 7b00 	vldr	d7, [r2]
 8003672:	ea4f 122b 	mov.w	r2, fp, asr #4
 8003676:	f000 8087 	beq.w	8003788 <_dtoa_r+0x428>
 800367a:	49bc      	ldr	r1, [pc, #752]	; (800396c <_dtoa_r+0x60c>)
 800367c:	ed91 6b08 	vldr	d6, [r1, #32]
 8003680:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8003684:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003688:	f002 020f 	and.w	r2, r2, #15
 800368c:	2103      	movs	r1, #3
 800368e:	48b7      	ldr	r0, [pc, #732]	; (800396c <_dtoa_r+0x60c>)
 8003690:	2a00      	cmp	r2, #0
 8003692:	d17b      	bne.n	800378c <_dtoa_r+0x42c>
 8003694:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003698:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800369c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80036a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	f000 80a0 	beq.w	80037ec <_dtoa_r+0x48c>
 80036ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80036b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	f140 8098 	bpl.w	80037ec <_dtoa_r+0x48c>
 80036bc:	f1b9 0f00 	cmp.w	r9, #0
 80036c0:	f000 8094 	beq.w	80037ec <_dtoa_r+0x48c>
 80036c4:	f1ba 0f00 	cmp.w	sl, #0
 80036c8:	dd2f      	ble.n	800372a <_dtoa_r+0x3ca>
 80036ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80036ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80036d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80036da:	3101      	adds	r1, #1
 80036dc:	4654      	mov	r4, sl
 80036de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80036e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80036e6:	ee07 1a90 	vmov	s15, r1
 80036ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 80036f2:	ee15 7a90 	vmov	r7, s11
 80036f6:	ec51 0b15 	vmov	r0, r1, d5
 80036fa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80036fe:	2c00      	cmp	r4, #0
 8003700:	d177      	bne.n	80037f2 <_dtoa_r+0x492>
 8003702:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003706:	ee36 6b47 	vsub.f64	d6, d6, d7
 800370a:	ec41 0b17 	vmov	d7, r0, r1
 800370e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	f300 826a 	bgt.w	8003bee <_dtoa_r+0x88e>
 800371a:	eeb1 7b47 	vneg.f64	d7, d7
 800371e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	f100 8260 	bmi.w	8003bea <_dtoa_r+0x88a>
 800372a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800372e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003730:	2a00      	cmp	r2, #0
 8003732:	f2c0 811d 	blt.w	8003970 <_dtoa_r+0x610>
 8003736:	f1bb 0f0e 	cmp.w	fp, #14
 800373a:	f300 8119 	bgt.w	8003970 <_dtoa_r+0x610>
 800373e:	4b8a      	ldr	r3, [pc, #552]	; (8003968 <_dtoa_r+0x608>)
 8003740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003744:	ed93 6b00 	vldr	d6, [r3]
 8003748:	9b08      	ldr	r3, [sp, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f280 80b7 	bge.w	80038be <_dtoa_r+0x55e>
 8003750:	f1b9 0f00 	cmp.w	r9, #0
 8003754:	f300 80b3 	bgt.w	80038be <_dtoa_r+0x55e>
 8003758:	f040 8246 	bne.w	8003be8 <_dtoa_r+0x888>
 800375c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003760:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003768:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	464c      	mov	r4, r9
 8003772:	464f      	mov	r7, r9
 8003774:	f280 821c 	bge.w	8003bb0 <_dtoa_r+0x850>
 8003778:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800377c:	2331      	movs	r3, #49	; 0x31
 800377e:	f808 3b01 	strb.w	r3, [r8], #1
 8003782:	f10b 0b01 	add.w	fp, fp, #1
 8003786:	e218      	b.n	8003bba <_dtoa_r+0x85a>
 8003788:	2102      	movs	r1, #2
 800378a:	e780      	b.n	800368e <_dtoa_r+0x32e>
 800378c:	07d4      	lsls	r4, r2, #31
 800378e:	d504      	bpl.n	800379a <_dtoa_r+0x43a>
 8003790:	ed90 6b00 	vldr	d6, [r0]
 8003794:	3101      	adds	r1, #1
 8003796:	ee27 7b06 	vmul.f64	d7, d7, d6
 800379a:	1052      	asrs	r2, r2, #1
 800379c:	3008      	adds	r0, #8
 800379e:	e777      	b.n	8003690 <_dtoa_r+0x330>
 80037a0:	d022      	beq.n	80037e8 <_dtoa_r+0x488>
 80037a2:	f1cb 0200 	rsb	r2, fp, #0
 80037a6:	4970      	ldr	r1, [pc, #448]	; (8003968 <_dtoa_r+0x608>)
 80037a8:	f002 000f 	and.w	r0, r2, #15
 80037ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80037b0:	ed91 7b00 	vldr	d7, [r1]
 80037b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80037b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80037bc:	486b      	ldr	r0, [pc, #428]	; (800396c <_dtoa_r+0x60c>)
 80037be:	1112      	asrs	r2, r2, #4
 80037c0:	2400      	movs	r4, #0
 80037c2:	2102      	movs	r1, #2
 80037c4:	b92a      	cbnz	r2, 80037d2 <_dtoa_r+0x472>
 80037c6:	2c00      	cmp	r4, #0
 80037c8:	f43f af6a 	beq.w	80036a0 <_dtoa_r+0x340>
 80037cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80037d0:	e766      	b.n	80036a0 <_dtoa_r+0x340>
 80037d2:	07d7      	lsls	r7, r2, #31
 80037d4:	d505      	bpl.n	80037e2 <_dtoa_r+0x482>
 80037d6:	ed90 6b00 	vldr	d6, [r0]
 80037da:	3101      	adds	r1, #1
 80037dc:	2401      	movs	r4, #1
 80037de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037e2:	1052      	asrs	r2, r2, #1
 80037e4:	3008      	adds	r0, #8
 80037e6:	e7ed      	b.n	80037c4 <_dtoa_r+0x464>
 80037e8:	2102      	movs	r1, #2
 80037ea:	e759      	b.n	80036a0 <_dtoa_r+0x340>
 80037ec:	465a      	mov	r2, fp
 80037ee:	464c      	mov	r4, r9
 80037f0:	e775      	b.n	80036de <_dtoa_r+0x37e>
 80037f2:	ec41 0b17 	vmov	d7, r0, r1
 80037f6:	495c      	ldr	r1, [pc, #368]	; (8003968 <_dtoa_r+0x608>)
 80037f8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80037fc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8003800:	9901      	ldr	r1, [sp, #4]
 8003802:	440c      	add	r4, r1
 8003804:	9907      	ldr	r1, [sp, #28]
 8003806:	b351      	cbz	r1, 800385e <_dtoa_r+0x4fe>
 8003808:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800380c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8003810:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003814:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8003818:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800381c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003820:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003824:	ee14 1a90 	vmov	r1, s9
 8003828:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800382c:	3130      	adds	r1, #48	; 0x30
 800382e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003832:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	f808 1b01 	strb.w	r1, [r8], #1
 800383e:	d439      	bmi.n	80038b4 <_dtoa_r+0x554>
 8003840:	ee32 5b46 	vsub.f64	d5, d2, d6
 8003844:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	d472      	bmi.n	8003934 <_dtoa_r+0x5d4>
 800384e:	45a0      	cmp	r8, r4
 8003850:	f43f af6b 	beq.w	800372a <_dtoa_r+0x3ca>
 8003854:	ee27 7b03 	vmul.f64	d7, d7, d3
 8003858:	ee26 6b03 	vmul.f64	d6, d6, d3
 800385c:	e7e0      	b.n	8003820 <_dtoa_r+0x4c0>
 800385e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003862:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003866:	4620      	mov	r0, r4
 8003868:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800386c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003870:	ee14 1a90 	vmov	r1, s9
 8003874:	3130      	adds	r1, #48	; 0x30
 8003876:	f808 1b01 	strb.w	r1, [r8], #1
 800387a:	45a0      	cmp	r8, r4
 800387c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003880:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003884:	d118      	bne.n	80038b8 <_dtoa_r+0x558>
 8003886:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800388a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800388e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	dc4d      	bgt.n	8003934 <_dtoa_r+0x5d4>
 8003898:	ee35 5b47 	vsub.f64	d5, d5, d7
 800389c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80038a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a4:	f57f af41 	bpl.w	800372a <_dtoa_r+0x3ca>
 80038a8:	4680      	mov	r8, r0
 80038aa:	3801      	subs	r0, #1
 80038ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d0f9      	beq.n	80038a8 <_dtoa_r+0x548>
 80038b4:	4693      	mov	fp, r2
 80038b6:	e02a      	b.n	800390e <_dtoa_r+0x5ae>
 80038b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80038bc:	e7d6      	b.n	800386c <_dtoa_r+0x50c>
 80038be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80038c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80038c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80038ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80038ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80038d2:	ee15 3a10 	vmov	r3, s10
 80038d6:	3330      	adds	r3, #48	; 0x30
 80038d8:	f808 3b01 	strb.w	r3, [r8], #1
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	eba8 0303 	sub.w	r3, r8, r3
 80038e2:	4599      	cmp	r9, r3
 80038e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80038e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80038ec:	d133      	bne.n	8003956 <_dtoa_r+0x5f6>
 80038ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80038f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fa:	dc1a      	bgt.n	8003932 <_dtoa_r+0x5d2>
 80038fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d103      	bne.n	800390e <_dtoa_r+0x5ae>
 8003906:	ee15 3a10 	vmov	r3, s10
 800390a:	07d9      	lsls	r1, r3, #31
 800390c:	d411      	bmi.n	8003932 <_dtoa_r+0x5d2>
 800390e:	4629      	mov	r1, r5
 8003910:	4630      	mov	r0, r6
 8003912:	f000 fbd1 	bl	80040b8 <_Bfree>
 8003916:	2300      	movs	r3, #0
 8003918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800391a:	f888 3000 	strb.w	r3, [r8]
 800391e:	f10b 0301 	add.w	r3, fp, #1
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003926:	2b00      	cmp	r3, #0
 8003928:	f43f ad69 	beq.w	80033fe <_dtoa_r+0x9e>
 800392c:	f8c3 8000 	str.w	r8, [r3]
 8003930:	e565      	b.n	80033fe <_dtoa_r+0x9e>
 8003932:	465a      	mov	r2, fp
 8003934:	4643      	mov	r3, r8
 8003936:	4698      	mov	r8, r3
 8003938:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800393c:	2939      	cmp	r1, #57	; 0x39
 800393e:	d106      	bne.n	800394e <_dtoa_r+0x5ee>
 8003940:	9901      	ldr	r1, [sp, #4]
 8003942:	4299      	cmp	r1, r3
 8003944:	d1f7      	bne.n	8003936 <_dtoa_r+0x5d6>
 8003946:	9801      	ldr	r0, [sp, #4]
 8003948:	2130      	movs	r1, #48	; 0x30
 800394a:	3201      	adds	r2, #1
 800394c:	7001      	strb	r1, [r0, #0]
 800394e:	7819      	ldrb	r1, [r3, #0]
 8003950:	3101      	adds	r1, #1
 8003952:	7019      	strb	r1, [r3, #0]
 8003954:	e7ae      	b.n	80038b4 <_dtoa_r+0x554>
 8003956:	ee27 7b04 	vmul.f64	d7, d7, d4
 800395a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	d1b2      	bne.n	80038ca <_dtoa_r+0x56a>
 8003964:	e7d3      	b.n	800390e <_dtoa_r+0x5ae>
 8003966:	bf00      	nop
 8003968:	08006990 	.word	0x08006990
 800396c:	08006968 	.word	0x08006968
 8003970:	9907      	ldr	r1, [sp, #28]
 8003972:	2900      	cmp	r1, #0
 8003974:	f000 80d0 	beq.w	8003b18 <_dtoa_r+0x7b8>
 8003978:	9906      	ldr	r1, [sp, #24]
 800397a:	2901      	cmp	r1, #1
 800397c:	f300 80b4 	bgt.w	8003ae8 <_dtoa_r+0x788>
 8003980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003982:	2900      	cmp	r1, #0
 8003984:	f000 80ac 	beq.w	8003ae0 <_dtoa_r+0x780>
 8003988:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800398c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003990:	461c      	mov	r4, r3
 8003992:	9309      	str	r3, [sp, #36]	; 0x24
 8003994:	9b04      	ldr	r3, [sp, #16]
 8003996:	4413      	add	r3, r2
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	9b05      	ldr	r3, [sp, #20]
 800399c:	2101      	movs	r1, #1
 800399e:	4413      	add	r3, r2
 80039a0:	4630      	mov	r0, r6
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	f000 fc88 	bl	80042b8 <__i2b>
 80039a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039aa:	4607      	mov	r7, r0
 80039ac:	f1b8 0f00 	cmp.w	r8, #0
 80039b0:	d00d      	beq.n	80039ce <_dtoa_r+0x66e>
 80039b2:	9a05      	ldr	r2, [sp, #20]
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	dd0a      	ble.n	80039ce <_dtoa_r+0x66e>
 80039b8:	4542      	cmp	r2, r8
 80039ba:	9904      	ldr	r1, [sp, #16]
 80039bc:	bfa8      	it	ge
 80039be:	4642      	movge	r2, r8
 80039c0:	1a89      	subs	r1, r1, r2
 80039c2:	9104      	str	r1, [sp, #16]
 80039c4:	9905      	ldr	r1, [sp, #20]
 80039c6:	eba8 0802 	sub.w	r8, r8, r2
 80039ca:	1a8a      	subs	r2, r1, r2
 80039cc:	9205      	str	r2, [sp, #20]
 80039ce:	b303      	cbz	r3, 8003a12 <_dtoa_r+0x6b2>
 80039d0:	9a07      	ldr	r2, [sp, #28]
 80039d2:	2a00      	cmp	r2, #0
 80039d4:	f000 80a5 	beq.w	8003b22 <_dtoa_r+0x7c2>
 80039d8:	2c00      	cmp	r4, #0
 80039da:	dd13      	ble.n	8003a04 <_dtoa_r+0x6a4>
 80039dc:	4639      	mov	r1, r7
 80039de:	4622      	mov	r2, r4
 80039e0:	4630      	mov	r0, r6
 80039e2:	930d      	str	r3, [sp, #52]	; 0x34
 80039e4:	f000 fd28 	bl	8004438 <__pow5mult>
 80039e8:	462a      	mov	r2, r5
 80039ea:	4601      	mov	r1, r0
 80039ec:	4607      	mov	r7, r0
 80039ee:	4630      	mov	r0, r6
 80039f0:	f000 fc78 	bl	80042e4 <__multiply>
 80039f4:	4629      	mov	r1, r5
 80039f6:	9009      	str	r0, [sp, #36]	; 0x24
 80039f8:	4630      	mov	r0, r6
 80039fa:	f000 fb5d 	bl	80040b8 <_Bfree>
 80039fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a02:	4615      	mov	r5, r2
 8003a04:	1b1a      	subs	r2, r3, r4
 8003a06:	d004      	beq.n	8003a12 <_dtoa_r+0x6b2>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f000 fd14 	bl	8004438 <__pow5mult>
 8003a10:	4605      	mov	r5, r0
 8003a12:	2101      	movs	r1, #1
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 fc4f 	bl	80042b8 <__i2b>
 8003a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	4604      	mov	r4, r0
 8003a20:	f340 8081 	ble.w	8003b26 <_dtoa_r+0x7c6>
 8003a24:	461a      	mov	r2, r3
 8003a26:	4601      	mov	r1, r0
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f000 fd05 	bl	8004438 <__pow5mult>
 8003a2e:	9b06      	ldr	r3, [sp, #24]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	4604      	mov	r4, r0
 8003a34:	dd7a      	ble.n	8003b2c <_dtoa_r+0x7cc>
 8003a36:	2300      	movs	r3, #0
 8003a38:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3a:	6922      	ldr	r2, [r4, #16]
 8003a3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003a40:	6910      	ldr	r0, [r2, #16]
 8003a42:	f000 fbeb 	bl	800421c <__hi0bits>
 8003a46:	f1c0 0020 	rsb	r0, r0, #32
 8003a4a:	9b05      	ldr	r3, [sp, #20]
 8003a4c:	4418      	add	r0, r3
 8003a4e:	f010 001f 	ands.w	r0, r0, #31
 8003a52:	f000 8093 	beq.w	8003b7c <_dtoa_r+0x81c>
 8003a56:	f1c0 0220 	rsb	r2, r0, #32
 8003a5a:	2a04      	cmp	r2, #4
 8003a5c:	f340 8085 	ble.w	8003b6a <_dtoa_r+0x80a>
 8003a60:	9b04      	ldr	r3, [sp, #16]
 8003a62:	f1c0 001c 	rsb	r0, r0, #28
 8003a66:	4403      	add	r3, r0
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	9b05      	ldr	r3, [sp, #20]
 8003a6c:	4480      	add	r8, r0
 8003a6e:	4403      	add	r3, r0
 8003a70:	9305      	str	r3, [sp, #20]
 8003a72:	9b04      	ldr	r3, [sp, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dd05      	ble.n	8003a84 <_dtoa_r+0x724>
 8003a78:	4629      	mov	r1, r5
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 fd35 	bl	80044ec <__lshift>
 8003a82:	4605      	mov	r5, r0
 8003a84:	9b05      	ldr	r3, [sp, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dd05      	ble.n	8003a96 <_dtoa_r+0x736>
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 fd2c 	bl	80044ec <__lshift>
 8003a94:	4604      	mov	r4, r0
 8003a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d071      	beq.n	8003b80 <_dtoa_r+0x820>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 fd90 	bl	80045c4 <__mcmp>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	da6b      	bge.n	8003b80 <_dtoa_r+0x820>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4629      	mov	r1, r5
 8003aac:	220a      	movs	r2, #10
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 fb24 	bl	80040fc <__multadd>
 8003ab4:	9b07      	ldr	r3, [sp, #28]
 8003ab6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003aba:	4605      	mov	r5, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8197 	beq.w	8003df0 <_dtoa_r+0xa90>
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	220a      	movs	r2, #10
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f000 fb17 	bl	80040fc <__multadd>
 8003ace:	f1ba 0f00 	cmp.w	sl, #0
 8003ad2:	4607      	mov	r7, r0
 8003ad4:	f300 8093 	bgt.w	8003bfe <_dtoa_r+0x89e>
 8003ad8:	9b06      	ldr	r3, [sp, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	dc57      	bgt.n	8003b8e <_dtoa_r+0x82e>
 8003ade:	e08e      	b.n	8003bfe <_dtoa_r+0x89e>
 8003ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ae2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003ae6:	e751      	b.n	800398c <_dtoa_r+0x62c>
 8003ae8:	f109 34ff 	add.w	r4, r9, #4294967295
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	bfbf      	itttt	lt
 8003af0:	1ae2      	sublt	r2, r4, r3
 8003af2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003af4:	189b      	addlt	r3, r3, r2
 8003af6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003af8:	bfae      	itee	ge
 8003afa:	1b1c      	subge	r4, r3, r4
 8003afc:	4623      	movlt	r3, r4
 8003afe:	2400      	movlt	r4, #0
 8003b00:	f1b9 0f00 	cmp.w	r9, #0
 8003b04:	bfb5      	itete	lt
 8003b06:	9a04      	ldrlt	r2, [sp, #16]
 8003b08:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8003b0c:	eba2 0809 	sublt.w	r8, r2, r9
 8003b10:	464a      	movge	r2, r9
 8003b12:	bfb8      	it	lt
 8003b14:	2200      	movlt	r2, #0
 8003b16:	e73c      	b.n	8003992 <_dtoa_r+0x632>
 8003b18:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003b1c:	9f07      	ldr	r7, [sp, #28]
 8003b1e:	461c      	mov	r4, r3
 8003b20:	e744      	b.n	80039ac <_dtoa_r+0x64c>
 8003b22:	461a      	mov	r2, r3
 8003b24:	e770      	b.n	8003a08 <_dtoa_r+0x6a8>
 8003b26:	9b06      	ldr	r3, [sp, #24]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	dc18      	bgt.n	8003b5e <_dtoa_r+0x7fe>
 8003b2c:	9b02      	ldr	r3, [sp, #8]
 8003b2e:	b9b3      	cbnz	r3, 8003b5e <_dtoa_r+0x7fe>
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003b36:	b9a2      	cbnz	r2, 8003b62 <_dtoa_r+0x802>
 8003b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b3c:	0d12      	lsrs	r2, r2, #20
 8003b3e:	0512      	lsls	r2, r2, #20
 8003b40:	b18a      	cbz	r2, 8003b66 <_dtoa_r+0x806>
 8003b42:	9b04      	ldr	r3, [sp, #16]
 8003b44:	3301      	adds	r3, #1
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	9b05      	ldr	r3, [sp, #20]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	9305      	str	r3, [sp, #20]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	9309      	str	r3, [sp, #36]	; 0x24
 8003b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f af70 	bne.w	8003a3a <_dtoa_r+0x6da>
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	e775      	b.n	8003a4a <_dtoa_r+0x6ea>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e7f6      	b.n	8003b50 <_dtoa_r+0x7f0>
 8003b62:	9b02      	ldr	r3, [sp, #8]
 8003b64:	e7f4      	b.n	8003b50 <_dtoa_r+0x7f0>
 8003b66:	9209      	str	r2, [sp, #36]	; 0x24
 8003b68:	e7f3      	b.n	8003b52 <_dtoa_r+0x7f2>
 8003b6a:	d082      	beq.n	8003a72 <_dtoa_r+0x712>
 8003b6c:	9b04      	ldr	r3, [sp, #16]
 8003b6e:	321c      	adds	r2, #28
 8003b70:	4413      	add	r3, r2
 8003b72:	9304      	str	r3, [sp, #16]
 8003b74:	9b05      	ldr	r3, [sp, #20]
 8003b76:	4490      	add	r8, r2
 8003b78:	4413      	add	r3, r2
 8003b7a:	e779      	b.n	8003a70 <_dtoa_r+0x710>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	e7f5      	b.n	8003b6c <_dtoa_r+0x80c>
 8003b80:	f1b9 0f00 	cmp.w	r9, #0
 8003b84:	dc36      	bgt.n	8003bf4 <_dtoa_r+0x894>
 8003b86:	9b06      	ldr	r3, [sp, #24]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	dd33      	ble.n	8003bf4 <_dtoa_r+0x894>
 8003b8c:	46ca      	mov	sl, r9
 8003b8e:	f1ba 0f00 	cmp.w	sl, #0
 8003b92:	d10d      	bne.n	8003bb0 <_dtoa_r+0x850>
 8003b94:	4621      	mov	r1, r4
 8003b96:	4653      	mov	r3, sl
 8003b98:	2205      	movs	r2, #5
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 faae 	bl	80040fc <__multadd>
 8003ba0:	4601      	mov	r1, r0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f000 fd0d 	bl	80045c4 <__mcmp>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	f73f ade4 	bgt.w	8003778 <_dtoa_r+0x418>
 8003bb0:	9b08      	ldr	r3, [sp, #32]
 8003bb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003bb6:	ea6f 0b03 	mvn.w	fp, r3
 8003bba:	f04f 0900 	mov.w	r9, #0
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f000 fa79 	bl	80040b8 <_Bfree>
 8003bc6:	2f00      	cmp	r7, #0
 8003bc8:	f43f aea1 	beq.w	800390e <_dtoa_r+0x5ae>
 8003bcc:	f1b9 0f00 	cmp.w	r9, #0
 8003bd0:	d005      	beq.n	8003bde <_dtoa_r+0x87e>
 8003bd2:	45b9      	cmp	r9, r7
 8003bd4:	d003      	beq.n	8003bde <_dtoa_r+0x87e>
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f000 fa6d 	bl	80040b8 <_Bfree>
 8003bde:	4639      	mov	r1, r7
 8003be0:	4630      	mov	r0, r6
 8003be2:	f000 fa69 	bl	80040b8 <_Bfree>
 8003be6:	e692      	b.n	800390e <_dtoa_r+0x5ae>
 8003be8:	2400      	movs	r4, #0
 8003bea:	4627      	mov	r7, r4
 8003bec:	e7e0      	b.n	8003bb0 <_dtoa_r+0x850>
 8003bee:	4693      	mov	fp, r2
 8003bf0:	4627      	mov	r7, r4
 8003bf2:	e5c1      	b.n	8003778 <_dtoa_r+0x418>
 8003bf4:	9b07      	ldr	r3, [sp, #28]
 8003bf6:	46ca      	mov	sl, r9
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8100 	beq.w	8003dfe <_dtoa_r+0xa9e>
 8003bfe:	f1b8 0f00 	cmp.w	r8, #0
 8003c02:	dd05      	ble.n	8003c10 <_dtoa_r+0x8b0>
 8003c04:	4639      	mov	r1, r7
 8003c06:	4642      	mov	r2, r8
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f000 fc6f 	bl	80044ec <__lshift>
 8003c0e:	4607      	mov	r7, r0
 8003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d05d      	beq.n	8003cd2 <_dtoa_r+0x972>
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 fa0d 	bl	8004038 <_Balloc>
 8003c1e:	4680      	mov	r8, r0
 8003c20:	b928      	cbnz	r0, 8003c2e <_dtoa_r+0x8ce>
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <_dtoa_r+0xacc>)
 8003c24:	4602      	mov	r2, r0
 8003c26:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003c2a:	f7ff bbb1 	b.w	8003390 <_dtoa_r+0x30>
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	3202      	adds	r2, #2
 8003c32:	0092      	lsls	r2, r2, #2
 8003c34:	f107 010c 	add.w	r1, r7, #12
 8003c38:	300c      	adds	r0, #12
 8003c3a:	f001 ff3f 	bl	8005abc <memcpy>
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4641      	mov	r1, r8
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 fc52 	bl	80044ec <__lshift>
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	4453      	add	r3, sl
 8003c52:	9308      	str	r3, [sp, #32]
 8003c54:	9b02      	ldr	r3, [sp, #8]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	46b9      	mov	r9, r7
 8003c5c:	9307      	str	r3, [sp, #28]
 8003c5e:	4607      	mov	r7, r0
 8003c60:	9b04      	ldr	r3, [sp, #16]
 8003c62:	4621      	mov	r1, r4
 8003c64:	3b01      	subs	r3, #1
 8003c66:	4628      	mov	r0, r5
 8003c68:	9302      	str	r3, [sp, #8]
 8003c6a:	f7ff faef 	bl	800324c <quorem>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	3330      	adds	r3, #48	; 0x30
 8003c72:	9005      	str	r0, [sp, #20]
 8003c74:	4649      	mov	r1, r9
 8003c76:	4628      	mov	r0, r5
 8003c78:	9309      	str	r3, [sp, #36]	; 0x24
 8003c7a:	f000 fca3 	bl	80045c4 <__mcmp>
 8003c7e:	463a      	mov	r2, r7
 8003c80:	4682      	mov	sl, r0
 8003c82:	4621      	mov	r1, r4
 8003c84:	4630      	mov	r0, r6
 8003c86:	f000 fcb9 	bl	80045fc <__mdiff>
 8003c8a:	68c2      	ldr	r2, [r0, #12]
 8003c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c8e:	4680      	mov	r8, r0
 8003c90:	bb0a      	cbnz	r2, 8003cd6 <_dtoa_r+0x976>
 8003c92:	4601      	mov	r1, r0
 8003c94:	4628      	mov	r0, r5
 8003c96:	f000 fc95 	bl	80045c4 <__mcmp>
 8003c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8003ca6:	f000 fa07 	bl	80040b8 <_Bfree>
 8003caa:	9b06      	ldr	r3, [sp, #24]
 8003cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003cb2:	ea43 0102 	orr.w	r1, r3, r2
 8003cb6:	9b07      	ldr	r3, [sp, #28]
 8003cb8:	4319      	orrs	r1, r3
 8003cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cbc:	d10d      	bne.n	8003cda <_dtoa_r+0x97a>
 8003cbe:	2b39      	cmp	r3, #57	; 0x39
 8003cc0:	d029      	beq.n	8003d16 <_dtoa_r+0x9b6>
 8003cc2:	f1ba 0f00 	cmp.w	sl, #0
 8003cc6:	dd01      	ble.n	8003ccc <_dtoa_r+0x96c>
 8003cc8:	9b05      	ldr	r3, [sp, #20]
 8003cca:	3331      	adds	r3, #49	; 0x31
 8003ccc:	9a02      	ldr	r2, [sp, #8]
 8003cce:	7013      	strb	r3, [r2, #0]
 8003cd0:	e775      	b.n	8003bbe <_dtoa_r+0x85e>
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	e7b8      	b.n	8003c48 <_dtoa_r+0x8e8>
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	e7e1      	b.n	8003c9e <_dtoa_r+0x93e>
 8003cda:	f1ba 0f00 	cmp.w	sl, #0
 8003cde:	db06      	blt.n	8003cee <_dtoa_r+0x98e>
 8003ce0:	9906      	ldr	r1, [sp, #24]
 8003ce2:	ea41 0a0a 	orr.w	sl, r1, sl
 8003ce6:	9907      	ldr	r1, [sp, #28]
 8003ce8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8003cec:	d120      	bne.n	8003d30 <_dtoa_r+0x9d0>
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	ddec      	ble.n	8003ccc <_dtoa_r+0x96c>
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	9304      	str	r3, [sp, #16]
 8003cfa:	f000 fbf7 	bl	80044ec <__lshift>
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4605      	mov	r5, r0
 8003d02:	f000 fc5f 	bl	80045c4 <__mcmp>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	9b04      	ldr	r3, [sp, #16]
 8003d0a:	dc02      	bgt.n	8003d12 <_dtoa_r+0x9b2>
 8003d0c:	d1de      	bne.n	8003ccc <_dtoa_r+0x96c>
 8003d0e:	07da      	lsls	r2, r3, #31
 8003d10:	d5dc      	bpl.n	8003ccc <_dtoa_r+0x96c>
 8003d12:	2b39      	cmp	r3, #57	; 0x39
 8003d14:	d1d8      	bne.n	8003cc8 <_dtoa_r+0x968>
 8003d16:	9a02      	ldr	r2, [sp, #8]
 8003d18:	2339      	movs	r3, #57	; 0x39
 8003d1a:	7013      	strb	r3, [r2, #0]
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	4698      	mov	r8, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8003d26:	2a39      	cmp	r2, #57	; 0x39
 8003d28:	d051      	beq.n	8003dce <_dtoa_r+0xa6e>
 8003d2a:	3201      	adds	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e746      	b.n	8003bbe <_dtoa_r+0x85e>
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	dd03      	ble.n	8003d3c <_dtoa_r+0x9dc>
 8003d34:	2b39      	cmp	r3, #57	; 0x39
 8003d36:	d0ee      	beq.n	8003d16 <_dtoa_r+0x9b6>
 8003d38:	3301      	adds	r3, #1
 8003d3a:	e7c7      	b.n	8003ccc <_dtoa_r+0x96c>
 8003d3c:	9a04      	ldr	r2, [sp, #16]
 8003d3e:	9908      	ldr	r1, [sp, #32]
 8003d40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003d44:	428a      	cmp	r2, r1
 8003d46:	d02b      	beq.n	8003da0 <_dtoa_r+0xa40>
 8003d48:	4629      	mov	r1, r5
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 f9d4 	bl	80040fc <__multadd>
 8003d54:	45b9      	cmp	r9, r7
 8003d56:	4605      	mov	r5, r0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	f04f 020a 	mov.w	r2, #10
 8003d60:	4649      	mov	r1, r9
 8003d62:	4630      	mov	r0, r6
 8003d64:	d107      	bne.n	8003d76 <_dtoa_r+0xa16>
 8003d66:	f000 f9c9 	bl	80040fc <__multadd>
 8003d6a:	4681      	mov	r9, r0
 8003d6c:	4607      	mov	r7, r0
 8003d6e:	9b04      	ldr	r3, [sp, #16]
 8003d70:	3301      	adds	r3, #1
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	e774      	b.n	8003c60 <_dtoa_r+0x900>
 8003d76:	f000 f9c1 	bl	80040fc <__multadd>
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	4681      	mov	r9, r0
 8003d7e:	2300      	movs	r3, #0
 8003d80:	220a      	movs	r2, #10
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f9ba 	bl	80040fc <__multadd>
 8003d88:	4607      	mov	r7, r0
 8003d8a:	e7f0      	b.n	8003d6e <_dtoa_r+0xa0e>
 8003d8c:	f1ba 0f00 	cmp.w	sl, #0
 8003d90:	9a01      	ldr	r2, [sp, #4]
 8003d92:	bfcc      	ite	gt
 8003d94:	46d0      	movgt	r8, sl
 8003d96:	f04f 0801 	movle.w	r8, #1
 8003d9a:	4490      	add	r8, r2
 8003d9c:	f04f 0900 	mov.w	r9, #0
 8003da0:	4629      	mov	r1, r5
 8003da2:	2201      	movs	r2, #1
 8003da4:	4630      	mov	r0, r6
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	f000 fba0 	bl	80044ec <__lshift>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4605      	mov	r5, r0
 8003db0:	f000 fc08 	bl	80045c4 <__mcmp>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	dcb1      	bgt.n	8003d1c <_dtoa_r+0x9bc>
 8003db8:	d102      	bne.n	8003dc0 <_dtoa_r+0xa60>
 8003dba:	9b02      	ldr	r3, [sp, #8]
 8003dbc:	07db      	lsls	r3, r3, #31
 8003dbe:	d4ad      	bmi.n	8003d1c <_dtoa_r+0x9bc>
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	4698      	mov	r8, r3
 8003dc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003dc8:	2a30      	cmp	r2, #48	; 0x30
 8003dca:	d0fa      	beq.n	8003dc2 <_dtoa_r+0xa62>
 8003dcc:	e6f7      	b.n	8003bbe <_dtoa_r+0x85e>
 8003dce:	9a01      	ldr	r2, [sp, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1a4      	bne.n	8003d1e <_dtoa_r+0x9be>
 8003dd4:	f10b 0b01 	add.w	fp, fp, #1
 8003dd8:	2331      	movs	r3, #49	; 0x31
 8003dda:	e778      	b.n	8003cce <_dtoa_r+0x96e>
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <_dtoa_r+0xad0>)
 8003dde:	f7ff bb2a 	b.w	8003436 <_dtoa_r+0xd6>
 8003de2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f ab05 	bne.w	80033f4 <_dtoa_r+0x94>
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <_dtoa_r+0xad4>)
 8003dec:	f7ff bb23 	b.w	8003436 <_dtoa_r+0xd6>
 8003df0:	f1ba 0f00 	cmp.w	sl, #0
 8003df4:	dc03      	bgt.n	8003dfe <_dtoa_r+0xa9e>
 8003df6:	9b06      	ldr	r3, [sp, #24]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f73f aec8 	bgt.w	8003b8e <_dtoa_r+0x82e>
 8003dfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7ff fa21 	bl	800324c <quorem>
 8003e0a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003e0e:	f808 3b01 	strb.w	r3, [r8], #1
 8003e12:	9a01      	ldr	r2, [sp, #4]
 8003e14:	eba8 0202 	sub.w	r2, r8, r2
 8003e18:	4592      	cmp	sl, r2
 8003e1a:	ddb7      	ble.n	8003d8c <_dtoa_r+0xa2c>
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	2300      	movs	r3, #0
 8003e20:	220a      	movs	r2, #10
 8003e22:	4630      	mov	r0, r6
 8003e24:	f000 f96a 	bl	80040fc <__multadd>
 8003e28:	4605      	mov	r5, r0
 8003e2a:	e7ea      	b.n	8003e02 <_dtoa_r+0xaa2>
 8003e2c:	080068fd 	.word	0x080068fd
 8003e30:	08006858 	.word	0x08006858
 8003e34:	08006881 	.word	0x08006881

08003e38 <_free_r>:
 8003e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e3a:	2900      	cmp	r1, #0
 8003e3c:	d044      	beq.n	8003ec8 <_free_r+0x90>
 8003e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e42:	9001      	str	r0, [sp, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f1a1 0404 	sub.w	r4, r1, #4
 8003e4a:	bfb8      	it	lt
 8003e4c:	18e4      	addlt	r4, r4, r3
 8003e4e:	f000 f8e7 	bl	8004020 <__malloc_lock>
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <_free_r+0x94>)
 8003e54:	9801      	ldr	r0, [sp, #4]
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	b933      	cbnz	r3, 8003e68 <_free_r+0x30>
 8003e5a:	6063      	str	r3, [r4, #4]
 8003e5c:	6014      	str	r4, [r2, #0]
 8003e5e:	b003      	add	sp, #12
 8003e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e64:	f000 b8e2 	b.w	800402c <__malloc_unlock>
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d908      	bls.n	8003e7e <_free_r+0x46>
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	1961      	adds	r1, r4, r5
 8003e70:	428b      	cmp	r3, r1
 8003e72:	bf01      	itttt	eq
 8003e74:	6819      	ldreq	r1, [r3, #0]
 8003e76:	685b      	ldreq	r3, [r3, #4]
 8003e78:	1949      	addeq	r1, r1, r5
 8003e7a:	6021      	streq	r1, [r4, #0]
 8003e7c:	e7ed      	b.n	8003e5a <_free_r+0x22>
 8003e7e:	461a      	mov	r2, r3
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b10b      	cbz	r3, 8003e88 <_free_r+0x50>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d9fa      	bls.n	8003e7e <_free_r+0x46>
 8003e88:	6811      	ldr	r1, [r2, #0]
 8003e8a:	1855      	adds	r5, r2, r1
 8003e8c:	42a5      	cmp	r5, r4
 8003e8e:	d10b      	bne.n	8003ea8 <_free_r+0x70>
 8003e90:	6824      	ldr	r4, [r4, #0]
 8003e92:	4421      	add	r1, r4
 8003e94:	1854      	adds	r4, r2, r1
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	d1e0      	bne.n	8003e5e <_free_r+0x26>
 8003e9c:	681c      	ldr	r4, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	6053      	str	r3, [r2, #4]
 8003ea2:	440c      	add	r4, r1
 8003ea4:	6014      	str	r4, [r2, #0]
 8003ea6:	e7da      	b.n	8003e5e <_free_r+0x26>
 8003ea8:	d902      	bls.n	8003eb0 <_free_r+0x78>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6003      	str	r3, [r0, #0]
 8003eae:	e7d6      	b.n	8003e5e <_free_r+0x26>
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1961      	adds	r1, r4, r5
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf04      	itt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	bf04      	itt	eq
 8003ec0:	1949      	addeq	r1, r1, r5
 8003ec2:	6021      	streq	r1, [r4, #0]
 8003ec4:	6054      	str	r4, [r2, #4]
 8003ec6:	e7ca      	b.n	8003e5e <_free_r+0x26>
 8003ec8:	b003      	add	sp, #12
 8003eca:	bd30      	pop	{r4, r5, pc}
 8003ecc:	20000388 	.word	0x20000388

08003ed0 <malloc>:
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <malloc+0xc>)
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	f000 b823 	b.w	8003f20 <_malloc_r>
 8003eda:	bf00      	nop
 8003edc:	200000ac 	.word	0x200000ac

08003ee0 <sbrk_aligned>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4e0e      	ldr	r6, [pc, #56]	; (8003f1c <sbrk_aligned+0x3c>)
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	6831      	ldr	r1, [r6, #0]
 8003ee8:	4605      	mov	r5, r0
 8003eea:	b911      	cbnz	r1, 8003ef2 <sbrk_aligned+0x12>
 8003eec:	f001 fdd6 	bl	8005a9c <_sbrk_r>
 8003ef0:	6030      	str	r0, [r6, #0]
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f001 fdd1 	bl	8005a9c <_sbrk_r>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d00a      	beq.n	8003f14 <sbrk_aligned+0x34>
 8003efe:	1cc4      	adds	r4, r0, #3
 8003f00:	f024 0403 	bic.w	r4, r4, #3
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d007      	beq.n	8003f18 <sbrk_aligned+0x38>
 8003f08:	1a21      	subs	r1, r4, r0
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f001 fdc6 	bl	8005a9c <_sbrk_r>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d101      	bne.n	8003f18 <sbrk_aligned+0x38>
 8003f14:	f04f 34ff 	mov.w	r4, #4294967295
 8003f18:	4620      	mov	r0, r4
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	2000038c 	.word	0x2000038c

08003f20 <_malloc_r>:
 8003f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f24:	1ccd      	adds	r5, r1, #3
 8003f26:	f025 0503 	bic.w	r5, r5, #3
 8003f2a:	3508      	adds	r5, #8
 8003f2c:	2d0c      	cmp	r5, #12
 8003f2e:	bf38      	it	cc
 8003f30:	250c      	movcc	r5, #12
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	4607      	mov	r7, r0
 8003f36:	db01      	blt.n	8003f3c <_malloc_r+0x1c>
 8003f38:	42a9      	cmp	r1, r5
 8003f3a:	d905      	bls.n	8003f48 <_malloc_r+0x28>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	2600      	movs	r6, #0
 8003f42:	4630      	mov	r0, r6
 8003f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800401c <_malloc_r+0xfc>
 8003f4c:	f000 f868 	bl	8004020 <__malloc_lock>
 8003f50:	f8d8 3000 	ldr.w	r3, [r8]
 8003f54:	461c      	mov	r4, r3
 8003f56:	bb5c      	cbnz	r4, 8003fb0 <_malloc_r+0x90>
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7ff ffc0 	bl	8003ee0 <sbrk_aligned>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	4604      	mov	r4, r0
 8003f64:	d155      	bne.n	8004012 <_malloc_r+0xf2>
 8003f66:	f8d8 4000 	ldr.w	r4, [r8]
 8003f6a:	4626      	mov	r6, r4
 8003f6c:	2e00      	cmp	r6, #0
 8003f6e:	d145      	bne.n	8003ffc <_malloc_r+0xdc>
 8003f70:	2c00      	cmp	r4, #0
 8003f72:	d048      	beq.n	8004006 <_malloc_r+0xe6>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	4631      	mov	r1, r6
 8003f78:	4638      	mov	r0, r7
 8003f7a:	eb04 0903 	add.w	r9, r4, r3
 8003f7e:	f001 fd8d 	bl	8005a9c <_sbrk_r>
 8003f82:	4581      	cmp	r9, r0
 8003f84:	d13f      	bne.n	8004006 <_malloc_r+0xe6>
 8003f86:	6821      	ldr	r1, [r4, #0]
 8003f88:	1a6d      	subs	r5, r5, r1
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f7ff ffa7 	bl	8003ee0 <sbrk_aligned>
 8003f92:	3001      	adds	r0, #1
 8003f94:	d037      	beq.n	8004006 <_malloc_r+0xe6>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	442b      	add	r3, r5
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d038      	beq.n	8004016 <_malloc_r+0xf6>
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	42a2      	cmp	r2, r4
 8003fa8:	d12b      	bne.n	8004002 <_malloc_r+0xe2>
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	e00f      	b.n	8003fd0 <_malloc_r+0xb0>
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	1b52      	subs	r2, r2, r5
 8003fb4:	d41f      	bmi.n	8003ff6 <_malloc_r+0xd6>
 8003fb6:	2a0b      	cmp	r2, #11
 8003fb8:	d917      	bls.n	8003fea <_malloc_r+0xca>
 8003fba:	1961      	adds	r1, r4, r5
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	6025      	str	r5, [r4, #0]
 8003fc0:	bf18      	it	ne
 8003fc2:	6059      	strne	r1, [r3, #4]
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	bf08      	it	eq
 8003fc8:	f8c8 1000 	streq.w	r1, [r8]
 8003fcc:	5162      	str	r2, [r4, r5]
 8003fce:	604b      	str	r3, [r1, #4]
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	f104 060b 	add.w	r6, r4, #11
 8003fd6:	f000 f829 	bl	800402c <__malloc_unlock>
 8003fda:	f026 0607 	bic.w	r6, r6, #7
 8003fde:	1d23      	adds	r3, r4, #4
 8003fe0:	1af2      	subs	r2, r6, r3
 8003fe2:	d0ae      	beq.n	8003f42 <_malloc_r+0x22>
 8003fe4:	1b9b      	subs	r3, r3, r6
 8003fe6:	50a3      	str	r3, [r4, r2]
 8003fe8:	e7ab      	b.n	8003f42 <_malloc_r+0x22>
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	6862      	ldr	r2, [r4, #4]
 8003fee:	d1dd      	bne.n	8003fac <_malloc_r+0x8c>
 8003ff0:	f8c8 2000 	str.w	r2, [r8]
 8003ff4:	e7ec      	b.n	8003fd0 <_malloc_r+0xb0>
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	6864      	ldr	r4, [r4, #4]
 8003ffa:	e7ac      	b.n	8003f56 <_malloc_r+0x36>
 8003ffc:	4634      	mov	r4, r6
 8003ffe:	6876      	ldr	r6, [r6, #4]
 8004000:	e7b4      	b.n	8003f6c <_malloc_r+0x4c>
 8004002:	4613      	mov	r3, r2
 8004004:	e7cc      	b.n	8003fa0 <_malloc_r+0x80>
 8004006:	230c      	movs	r3, #12
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4638      	mov	r0, r7
 800400c:	f000 f80e 	bl	800402c <__malloc_unlock>
 8004010:	e797      	b.n	8003f42 <_malloc_r+0x22>
 8004012:	6025      	str	r5, [r4, #0]
 8004014:	e7dc      	b.n	8003fd0 <_malloc_r+0xb0>
 8004016:	605b      	str	r3, [r3, #4]
 8004018:	deff      	udf	#255	; 0xff
 800401a:	bf00      	nop
 800401c:	20000388 	.word	0x20000388

08004020 <__malloc_lock>:
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <__malloc_lock+0x8>)
 8004022:	f7ff b90b 	b.w	800323c <__retarget_lock_acquire_recursive>
 8004026:	bf00      	nop
 8004028:	20000384 	.word	0x20000384

0800402c <__malloc_unlock>:
 800402c:	4801      	ldr	r0, [pc, #4]	; (8004034 <__malloc_unlock+0x8>)
 800402e:	f7ff b906 	b.w	800323e <__retarget_lock_release_recursive>
 8004032:	bf00      	nop
 8004034:	20000384 	.word	0x20000384

08004038 <_Balloc>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	69c6      	ldr	r6, [r0, #28]
 800403c:	4604      	mov	r4, r0
 800403e:	460d      	mov	r5, r1
 8004040:	b976      	cbnz	r6, 8004060 <_Balloc+0x28>
 8004042:	2010      	movs	r0, #16
 8004044:	f7ff ff44 	bl	8003ed0 <malloc>
 8004048:	4602      	mov	r2, r0
 800404a:	61e0      	str	r0, [r4, #28]
 800404c:	b920      	cbnz	r0, 8004058 <_Balloc+0x20>
 800404e:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <_Balloc+0x78>)
 8004050:	4818      	ldr	r0, [pc, #96]	; (80040b4 <_Balloc+0x7c>)
 8004052:	216b      	movs	r1, #107	; 0x6b
 8004054:	f001 fd48 	bl	8005ae8 <__assert_func>
 8004058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800405c:	6006      	str	r6, [r0, #0]
 800405e:	60c6      	str	r6, [r0, #12]
 8004060:	69e6      	ldr	r6, [r4, #28]
 8004062:	68f3      	ldr	r3, [r6, #12]
 8004064:	b183      	cbz	r3, 8004088 <_Balloc+0x50>
 8004066:	69e3      	ldr	r3, [r4, #28]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800406e:	b9b8      	cbnz	r0, 80040a0 <_Balloc+0x68>
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f605 	lsl.w	r6, r1, r5
 8004076:	1d72      	adds	r2, r6, #5
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	4620      	mov	r0, r4
 800407c:	f001 fd52 	bl	8005b24 <_calloc_r>
 8004080:	b160      	cbz	r0, 800409c <_Balloc+0x64>
 8004082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004086:	e00e      	b.n	80040a6 <_Balloc+0x6e>
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	2104      	movs	r1, #4
 800408c:	4620      	mov	r0, r4
 800408e:	f001 fd49 	bl	8005b24 <_calloc_r>
 8004092:	69e3      	ldr	r3, [r4, #28]
 8004094:	60f0      	str	r0, [r6, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e4      	bne.n	8004066 <_Balloc+0x2e>
 800409c:	2000      	movs	r0, #0
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	6802      	ldr	r2, [r0, #0]
 80040a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80040a6:	2300      	movs	r3, #0
 80040a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80040ac:	e7f7      	b.n	800409e <_Balloc+0x66>
 80040ae:	bf00      	nop
 80040b0:	0800688e 	.word	0x0800688e
 80040b4:	0800690e 	.word	0x0800690e

080040b8 <_Bfree>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	69c6      	ldr	r6, [r0, #28]
 80040bc:	4605      	mov	r5, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	b976      	cbnz	r6, 80040e0 <_Bfree+0x28>
 80040c2:	2010      	movs	r0, #16
 80040c4:	f7ff ff04 	bl	8003ed0 <malloc>
 80040c8:	4602      	mov	r2, r0
 80040ca:	61e8      	str	r0, [r5, #28]
 80040cc:	b920      	cbnz	r0, 80040d8 <_Bfree+0x20>
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <_Bfree+0x3c>)
 80040d0:	4809      	ldr	r0, [pc, #36]	; (80040f8 <_Bfree+0x40>)
 80040d2:	218f      	movs	r1, #143	; 0x8f
 80040d4:	f001 fd08 	bl	8005ae8 <__assert_func>
 80040d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040dc:	6006      	str	r6, [r0, #0]
 80040de:	60c6      	str	r6, [r0, #12]
 80040e0:	b13c      	cbz	r4, 80040f2 <_Bfree+0x3a>
 80040e2:	69eb      	ldr	r3, [r5, #28]
 80040e4:	6862      	ldr	r2, [r4, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ec:	6021      	str	r1, [r4, #0]
 80040ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	0800688e 	.word	0x0800688e
 80040f8:	0800690e 	.word	0x0800690e

080040fc <__multadd>:
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	690d      	ldr	r5, [r1, #16]
 8004102:	4607      	mov	r7, r0
 8004104:	460c      	mov	r4, r1
 8004106:	461e      	mov	r6, r3
 8004108:	f101 0c14 	add.w	ip, r1, #20
 800410c:	2000      	movs	r0, #0
 800410e:	f8dc 3000 	ldr.w	r3, [ip]
 8004112:	b299      	uxth	r1, r3
 8004114:	fb02 6101 	mla	r1, r2, r1, r6
 8004118:	0c1e      	lsrs	r6, r3, #16
 800411a:	0c0b      	lsrs	r3, r1, #16
 800411c:	fb02 3306 	mla	r3, r2, r6, r3
 8004120:	b289      	uxth	r1, r1
 8004122:	3001      	adds	r0, #1
 8004124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004128:	4285      	cmp	r5, r0
 800412a:	f84c 1b04 	str.w	r1, [ip], #4
 800412e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004132:	dcec      	bgt.n	800410e <__multadd+0x12>
 8004134:	b30e      	cbz	r6, 800417a <__multadd+0x7e>
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	42ab      	cmp	r3, r5
 800413a:	dc19      	bgt.n	8004170 <__multadd+0x74>
 800413c:	6861      	ldr	r1, [r4, #4]
 800413e:	4638      	mov	r0, r7
 8004140:	3101      	adds	r1, #1
 8004142:	f7ff ff79 	bl	8004038 <_Balloc>
 8004146:	4680      	mov	r8, r0
 8004148:	b928      	cbnz	r0, 8004156 <__multadd+0x5a>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <__multadd+0x84>)
 800414e:	480d      	ldr	r0, [pc, #52]	; (8004184 <__multadd+0x88>)
 8004150:	21ba      	movs	r1, #186	; 0xba
 8004152:	f001 fcc9 	bl	8005ae8 <__assert_func>
 8004156:	6922      	ldr	r2, [r4, #16]
 8004158:	3202      	adds	r2, #2
 800415a:	f104 010c 	add.w	r1, r4, #12
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	300c      	adds	r0, #12
 8004162:	f001 fcab 	bl	8005abc <memcpy>
 8004166:	4621      	mov	r1, r4
 8004168:	4638      	mov	r0, r7
 800416a:	f7ff ffa5 	bl	80040b8 <_Bfree>
 800416e:	4644      	mov	r4, r8
 8004170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004174:	3501      	adds	r5, #1
 8004176:	615e      	str	r6, [r3, #20]
 8004178:	6125      	str	r5, [r4, #16]
 800417a:	4620      	mov	r0, r4
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004180:	080068fd 	.word	0x080068fd
 8004184:	0800690e 	.word	0x0800690e

08004188 <__s2b>:
 8004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418c:	460c      	mov	r4, r1
 800418e:	4615      	mov	r5, r2
 8004190:	461f      	mov	r7, r3
 8004192:	2209      	movs	r2, #9
 8004194:	3308      	adds	r3, #8
 8004196:	4606      	mov	r6, r0
 8004198:	fb93 f3f2 	sdiv	r3, r3, r2
 800419c:	2100      	movs	r1, #0
 800419e:	2201      	movs	r2, #1
 80041a0:	429a      	cmp	r2, r3
 80041a2:	db09      	blt.n	80041b8 <__s2b+0x30>
 80041a4:	4630      	mov	r0, r6
 80041a6:	f7ff ff47 	bl	8004038 <_Balloc>
 80041aa:	b940      	cbnz	r0, 80041be <__s2b+0x36>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <__s2b+0x8c>)
 80041b0:	4819      	ldr	r0, [pc, #100]	; (8004218 <__s2b+0x90>)
 80041b2:	21d3      	movs	r1, #211	; 0xd3
 80041b4:	f001 fc98 	bl	8005ae8 <__assert_func>
 80041b8:	0052      	lsls	r2, r2, #1
 80041ba:	3101      	adds	r1, #1
 80041bc:	e7f0      	b.n	80041a0 <__s2b+0x18>
 80041be:	9b08      	ldr	r3, [sp, #32]
 80041c0:	6143      	str	r3, [r0, #20]
 80041c2:	2d09      	cmp	r5, #9
 80041c4:	f04f 0301 	mov.w	r3, #1
 80041c8:	6103      	str	r3, [r0, #16]
 80041ca:	dd16      	ble.n	80041fa <__s2b+0x72>
 80041cc:	f104 0909 	add.w	r9, r4, #9
 80041d0:	46c8      	mov	r8, r9
 80041d2:	442c      	add	r4, r5
 80041d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80041d8:	4601      	mov	r1, r0
 80041da:	3b30      	subs	r3, #48	; 0x30
 80041dc:	220a      	movs	r2, #10
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff ff8c 	bl	80040fc <__multadd>
 80041e4:	45a0      	cmp	r8, r4
 80041e6:	d1f5      	bne.n	80041d4 <__s2b+0x4c>
 80041e8:	f1a5 0408 	sub.w	r4, r5, #8
 80041ec:	444c      	add	r4, r9
 80041ee:	1b2d      	subs	r5, r5, r4
 80041f0:	1963      	adds	r3, r4, r5
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	db04      	blt.n	8004200 <__s2b+0x78>
 80041f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fa:	340a      	adds	r4, #10
 80041fc:	2509      	movs	r5, #9
 80041fe:	e7f6      	b.n	80041ee <__s2b+0x66>
 8004200:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004204:	4601      	mov	r1, r0
 8004206:	3b30      	subs	r3, #48	; 0x30
 8004208:	220a      	movs	r2, #10
 800420a:	4630      	mov	r0, r6
 800420c:	f7ff ff76 	bl	80040fc <__multadd>
 8004210:	e7ee      	b.n	80041f0 <__s2b+0x68>
 8004212:	bf00      	nop
 8004214:	080068fd 	.word	0x080068fd
 8004218:	0800690e 	.word	0x0800690e

0800421c <__hi0bits>:
 800421c:	0c03      	lsrs	r3, r0, #16
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	b9d3      	cbnz	r3, 8004258 <__hi0bits+0x3c>
 8004222:	0400      	lsls	r0, r0, #16
 8004224:	2310      	movs	r3, #16
 8004226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800422a:	bf04      	itt	eq
 800422c:	0200      	lsleq	r0, r0, #8
 800422e:	3308      	addeq	r3, #8
 8004230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004234:	bf04      	itt	eq
 8004236:	0100      	lsleq	r0, r0, #4
 8004238:	3304      	addeq	r3, #4
 800423a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800423e:	bf04      	itt	eq
 8004240:	0080      	lsleq	r0, r0, #2
 8004242:	3302      	addeq	r3, #2
 8004244:	2800      	cmp	r0, #0
 8004246:	db05      	blt.n	8004254 <__hi0bits+0x38>
 8004248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800424c:	f103 0301 	add.w	r3, r3, #1
 8004250:	bf08      	it	eq
 8004252:	2320      	moveq	r3, #32
 8004254:	4618      	mov	r0, r3
 8004256:	4770      	bx	lr
 8004258:	2300      	movs	r3, #0
 800425a:	e7e4      	b.n	8004226 <__hi0bits+0xa>

0800425c <__lo0bits>:
 800425c:	6803      	ldr	r3, [r0, #0]
 800425e:	f013 0207 	ands.w	r2, r3, #7
 8004262:	d00c      	beq.n	800427e <__lo0bits+0x22>
 8004264:	07d9      	lsls	r1, r3, #31
 8004266:	d422      	bmi.n	80042ae <__lo0bits+0x52>
 8004268:	079a      	lsls	r2, r3, #30
 800426a:	bf49      	itett	mi
 800426c:	085b      	lsrmi	r3, r3, #1
 800426e:	089b      	lsrpl	r3, r3, #2
 8004270:	6003      	strmi	r3, [r0, #0]
 8004272:	2201      	movmi	r2, #1
 8004274:	bf5c      	itt	pl
 8004276:	6003      	strpl	r3, [r0, #0]
 8004278:	2202      	movpl	r2, #2
 800427a:	4610      	mov	r0, r2
 800427c:	4770      	bx	lr
 800427e:	b299      	uxth	r1, r3
 8004280:	b909      	cbnz	r1, 8004286 <__lo0bits+0x2a>
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	2210      	movs	r2, #16
 8004286:	b2d9      	uxtb	r1, r3
 8004288:	b909      	cbnz	r1, 800428e <__lo0bits+0x32>
 800428a:	3208      	adds	r2, #8
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	0719      	lsls	r1, r3, #28
 8004290:	bf04      	itt	eq
 8004292:	091b      	lsreq	r3, r3, #4
 8004294:	3204      	addeq	r2, #4
 8004296:	0799      	lsls	r1, r3, #30
 8004298:	bf04      	itt	eq
 800429a:	089b      	lsreq	r3, r3, #2
 800429c:	3202      	addeq	r2, #2
 800429e:	07d9      	lsls	r1, r3, #31
 80042a0:	d403      	bmi.n	80042aa <__lo0bits+0x4e>
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	f102 0201 	add.w	r2, r2, #1
 80042a8:	d003      	beq.n	80042b2 <__lo0bits+0x56>
 80042aa:	6003      	str	r3, [r0, #0]
 80042ac:	e7e5      	b.n	800427a <__lo0bits+0x1e>
 80042ae:	2200      	movs	r2, #0
 80042b0:	e7e3      	b.n	800427a <__lo0bits+0x1e>
 80042b2:	2220      	movs	r2, #32
 80042b4:	e7e1      	b.n	800427a <__lo0bits+0x1e>
	...

080042b8 <__i2b>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	2101      	movs	r1, #1
 80042be:	f7ff febb 	bl	8004038 <_Balloc>
 80042c2:	4602      	mov	r2, r0
 80042c4:	b928      	cbnz	r0, 80042d2 <__i2b+0x1a>
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <__i2b+0x24>)
 80042c8:	4805      	ldr	r0, [pc, #20]	; (80042e0 <__i2b+0x28>)
 80042ca:	f240 1145 	movw	r1, #325	; 0x145
 80042ce:	f001 fc0b 	bl	8005ae8 <__assert_func>
 80042d2:	2301      	movs	r3, #1
 80042d4:	6144      	str	r4, [r0, #20]
 80042d6:	6103      	str	r3, [r0, #16]
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	bf00      	nop
 80042dc:	080068fd 	.word	0x080068fd
 80042e0:	0800690e 	.word	0x0800690e

080042e4 <__multiply>:
 80042e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e8:	4691      	mov	r9, r2
 80042ea:	690a      	ldr	r2, [r1, #16]
 80042ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	bfb8      	it	lt
 80042f4:	460b      	movlt	r3, r1
 80042f6:	460c      	mov	r4, r1
 80042f8:	bfbc      	itt	lt
 80042fa:	464c      	movlt	r4, r9
 80042fc:	4699      	movlt	r9, r3
 80042fe:	6927      	ldr	r7, [r4, #16]
 8004300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004304:	68a3      	ldr	r3, [r4, #8]
 8004306:	6861      	ldr	r1, [r4, #4]
 8004308:	eb07 060a 	add.w	r6, r7, sl
 800430c:	42b3      	cmp	r3, r6
 800430e:	b085      	sub	sp, #20
 8004310:	bfb8      	it	lt
 8004312:	3101      	addlt	r1, #1
 8004314:	f7ff fe90 	bl	8004038 <_Balloc>
 8004318:	b930      	cbnz	r0, 8004328 <__multiply+0x44>
 800431a:	4602      	mov	r2, r0
 800431c:	4b44      	ldr	r3, [pc, #272]	; (8004430 <__multiply+0x14c>)
 800431e:	4845      	ldr	r0, [pc, #276]	; (8004434 <__multiply+0x150>)
 8004320:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004324:	f001 fbe0 	bl	8005ae8 <__assert_func>
 8004328:	f100 0514 	add.w	r5, r0, #20
 800432c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004330:	462b      	mov	r3, r5
 8004332:	2200      	movs	r2, #0
 8004334:	4543      	cmp	r3, r8
 8004336:	d321      	bcc.n	800437c <__multiply+0x98>
 8004338:	f104 0314 	add.w	r3, r4, #20
 800433c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004340:	f109 0314 	add.w	r3, r9, #20
 8004344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004348:	9202      	str	r2, [sp, #8]
 800434a:	1b3a      	subs	r2, r7, r4
 800434c:	3a15      	subs	r2, #21
 800434e:	f022 0203 	bic.w	r2, r2, #3
 8004352:	3204      	adds	r2, #4
 8004354:	f104 0115 	add.w	r1, r4, #21
 8004358:	428f      	cmp	r7, r1
 800435a:	bf38      	it	cc
 800435c:	2204      	movcc	r2, #4
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9a02      	ldr	r2, [sp, #8]
 8004362:	9303      	str	r3, [sp, #12]
 8004364:	429a      	cmp	r2, r3
 8004366:	d80c      	bhi.n	8004382 <__multiply+0x9e>
 8004368:	2e00      	cmp	r6, #0
 800436a:	dd03      	ble.n	8004374 <__multiply+0x90>
 800436c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05b      	beq.n	800442c <__multiply+0x148>
 8004374:	6106      	str	r6, [r0, #16]
 8004376:	b005      	add	sp, #20
 8004378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437c:	f843 2b04 	str.w	r2, [r3], #4
 8004380:	e7d8      	b.n	8004334 <__multiply+0x50>
 8004382:	f8b3 a000 	ldrh.w	sl, [r3]
 8004386:	f1ba 0f00 	cmp.w	sl, #0
 800438a:	d024      	beq.n	80043d6 <__multiply+0xf2>
 800438c:	f104 0e14 	add.w	lr, r4, #20
 8004390:	46a9      	mov	r9, r5
 8004392:	f04f 0c00 	mov.w	ip, #0
 8004396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800439a:	f8d9 1000 	ldr.w	r1, [r9]
 800439e:	fa1f fb82 	uxth.w	fp, r2
 80043a2:	b289      	uxth	r1, r1
 80043a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80043a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80043ac:	f8d9 2000 	ldr.w	r2, [r9]
 80043b0:	4461      	add	r1, ip
 80043b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80043b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80043ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80043be:	b289      	uxth	r1, r1
 80043c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80043c4:	4577      	cmp	r7, lr
 80043c6:	f849 1b04 	str.w	r1, [r9], #4
 80043ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80043ce:	d8e2      	bhi.n	8004396 <__multiply+0xb2>
 80043d0:	9a01      	ldr	r2, [sp, #4]
 80043d2:	f845 c002 	str.w	ip, [r5, r2]
 80043d6:	9a03      	ldr	r2, [sp, #12]
 80043d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80043dc:	3304      	adds	r3, #4
 80043de:	f1b9 0f00 	cmp.w	r9, #0
 80043e2:	d021      	beq.n	8004428 <__multiply+0x144>
 80043e4:	6829      	ldr	r1, [r5, #0]
 80043e6:	f104 0c14 	add.w	ip, r4, #20
 80043ea:	46ae      	mov	lr, r5
 80043ec:	f04f 0a00 	mov.w	sl, #0
 80043f0:	f8bc b000 	ldrh.w	fp, [ip]
 80043f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80043f8:	fb09 220b 	mla	r2, r9, fp, r2
 80043fc:	4452      	add	r2, sl
 80043fe:	b289      	uxth	r1, r1
 8004400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004404:	f84e 1b04 	str.w	r1, [lr], #4
 8004408:	f85c 1b04 	ldr.w	r1, [ip], #4
 800440c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004410:	f8be 1000 	ldrh.w	r1, [lr]
 8004414:	fb09 110a 	mla	r1, r9, sl, r1
 8004418:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800441c:	4567      	cmp	r7, ip
 800441e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004422:	d8e5      	bhi.n	80043f0 <__multiply+0x10c>
 8004424:	9a01      	ldr	r2, [sp, #4]
 8004426:	50a9      	str	r1, [r5, r2]
 8004428:	3504      	adds	r5, #4
 800442a:	e799      	b.n	8004360 <__multiply+0x7c>
 800442c:	3e01      	subs	r6, #1
 800442e:	e79b      	b.n	8004368 <__multiply+0x84>
 8004430:	080068fd 	.word	0x080068fd
 8004434:	0800690e 	.word	0x0800690e

08004438 <__pow5mult>:
 8004438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800443c:	4615      	mov	r5, r2
 800443e:	f012 0203 	ands.w	r2, r2, #3
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	d007      	beq.n	8004458 <__pow5mult+0x20>
 8004448:	4c25      	ldr	r4, [pc, #148]	; (80044e0 <__pow5mult+0xa8>)
 800444a:	3a01      	subs	r2, #1
 800444c:	2300      	movs	r3, #0
 800444e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004452:	f7ff fe53 	bl	80040fc <__multadd>
 8004456:	4607      	mov	r7, r0
 8004458:	10ad      	asrs	r5, r5, #2
 800445a:	d03d      	beq.n	80044d8 <__pow5mult+0xa0>
 800445c:	69f4      	ldr	r4, [r6, #28]
 800445e:	b97c      	cbnz	r4, 8004480 <__pow5mult+0x48>
 8004460:	2010      	movs	r0, #16
 8004462:	f7ff fd35 	bl	8003ed0 <malloc>
 8004466:	4602      	mov	r2, r0
 8004468:	61f0      	str	r0, [r6, #28]
 800446a:	b928      	cbnz	r0, 8004478 <__pow5mult+0x40>
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <__pow5mult+0xac>)
 800446e:	481e      	ldr	r0, [pc, #120]	; (80044e8 <__pow5mult+0xb0>)
 8004470:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004474:	f001 fb38 	bl	8005ae8 <__assert_func>
 8004478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800447c:	6004      	str	r4, [r0, #0]
 800447e:	60c4      	str	r4, [r0, #12]
 8004480:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004488:	b94c      	cbnz	r4, 800449e <__pow5mult+0x66>
 800448a:	f240 2171 	movw	r1, #625	; 0x271
 800448e:	4630      	mov	r0, r6
 8004490:	f7ff ff12 	bl	80042b8 <__i2b>
 8004494:	2300      	movs	r3, #0
 8004496:	f8c8 0008 	str.w	r0, [r8, #8]
 800449a:	4604      	mov	r4, r0
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	f04f 0900 	mov.w	r9, #0
 80044a2:	07eb      	lsls	r3, r5, #31
 80044a4:	d50a      	bpl.n	80044bc <__pow5mult+0x84>
 80044a6:	4639      	mov	r1, r7
 80044a8:	4622      	mov	r2, r4
 80044aa:	4630      	mov	r0, r6
 80044ac:	f7ff ff1a 	bl	80042e4 <__multiply>
 80044b0:	4639      	mov	r1, r7
 80044b2:	4680      	mov	r8, r0
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7ff fdff 	bl	80040b8 <_Bfree>
 80044ba:	4647      	mov	r7, r8
 80044bc:	106d      	asrs	r5, r5, #1
 80044be:	d00b      	beq.n	80044d8 <__pow5mult+0xa0>
 80044c0:	6820      	ldr	r0, [r4, #0]
 80044c2:	b938      	cbnz	r0, 80044d4 <__pow5mult+0x9c>
 80044c4:	4622      	mov	r2, r4
 80044c6:	4621      	mov	r1, r4
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7ff ff0b 	bl	80042e4 <__multiply>
 80044ce:	6020      	str	r0, [r4, #0]
 80044d0:	f8c0 9000 	str.w	r9, [r0]
 80044d4:	4604      	mov	r4, r0
 80044d6:	e7e4      	b.n	80044a2 <__pow5mult+0x6a>
 80044d8:	4638      	mov	r0, r7
 80044da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044de:	bf00      	nop
 80044e0:	08006a58 	.word	0x08006a58
 80044e4:	0800688e 	.word	0x0800688e
 80044e8:	0800690e 	.word	0x0800690e

080044ec <__lshift>:
 80044ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	460c      	mov	r4, r1
 80044f2:	6849      	ldr	r1, [r1, #4]
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80044fa:	68a3      	ldr	r3, [r4, #8]
 80044fc:	4607      	mov	r7, r0
 80044fe:	4691      	mov	r9, r2
 8004500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004504:	f108 0601 	add.w	r6, r8, #1
 8004508:	42b3      	cmp	r3, r6
 800450a:	db0b      	blt.n	8004524 <__lshift+0x38>
 800450c:	4638      	mov	r0, r7
 800450e:	f7ff fd93 	bl	8004038 <_Balloc>
 8004512:	4605      	mov	r5, r0
 8004514:	b948      	cbnz	r0, 800452a <__lshift+0x3e>
 8004516:	4602      	mov	r2, r0
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <__lshift+0xd0>)
 800451a:	4829      	ldr	r0, [pc, #164]	; (80045c0 <__lshift+0xd4>)
 800451c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004520:	f001 fae2 	bl	8005ae8 <__assert_func>
 8004524:	3101      	adds	r1, #1
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	e7ee      	b.n	8004508 <__lshift+0x1c>
 800452a:	2300      	movs	r3, #0
 800452c:	f100 0114 	add.w	r1, r0, #20
 8004530:	f100 0210 	add.w	r2, r0, #16
 8004534:	4618      	mov	r0, r3
 8004536:	4553      	cmp	r3, sl
 8004538:	db33      	blt.n	80045a2 <__lshift+0xb6>
 800453a:	6920      	ldr	r0, [r4, #16]
 800453c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004540:	f104 0314 	add.w	r3, r4, #20
 8004544:	f019 091f 	ands.w	r9, r9, #31
 8004548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800454c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004550:	d02b      	beq.n	80045aa <__lshift+0xbe>
 8004552:	f1c9 0e20 	rsb	lr, r9, #32
 8004556:	468a      	mov	sl, r1
 8004558:	2200      	movs	r2, #0
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	fa00 f009 	lsl.w	r0, r0, r9
 8004560:	4310      	orrs	r0, r2
 8004562:	f84a 0b04 	str.w	r0, [sl], #4
 8004566:	f853 2b04 	ldr.w	r2, [r3], #4
 800456a:	459c      	cmp	ip, r3
 800456c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004570:	d8f3      	bhi.n	800455a <__lshift+0x6e>
 8004572:	ebac 0304 	sub.w	r3, ip, r4
 8004576:	3b15      	subs	r3, #21
 8004578:	f023 0303 	bic.w	r3, r3, #3
 800457c:	3304      	adds	r3, #4
 800457e:	f104 0015 	add.w	r0, r4, #21
 8004582:	4584      	cmp	ip, r0
 8004584:	bf38      	it	cc
 8004586:	2304      	movcc	r3, #4
 8004588:	50ca      	str	r2, [r1, r3]
 800458a:	b10a      	cbz	r2, 8004590 <__lshift+0xa4>
 800458c:	f108 0602 	add.w	r6, r8, #2
 8004590:	3e01      	subs	r6, #1
 8004592:	4638      	mov	r0, r7
 8004594:	612e      	str	r6, [r5, #16]
 8004596:	4621      	mov	r1, r4
 8004598:	f7ff fd8e 	bl	80040b8 <_Bfree>
 800459c:	4628      	mov	r0, r5
 800459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80045a6:	3301      	adds	r3, #1
 80045a8:	e7c5      	b.n	8004536 <__lshift+0x4a>
 80045aa:	3904      	subs	r1, #4
 80045ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80045b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80045b4:	459c      	cmp	ip, r3
 80045b6:	d8f9      	bhi.n	80045ac <__lshift+0xc0>
 80045b8:	e7ea      	b.n	8004590 <__lshift+0xa4>
 80045ba:	bf00      	nop
 80045bc:	080068fd 	.word	0x080068fd
 80045c0:	0800690e 	.word	0x0800690e

080045c4 <__mcmp>:
 80045c4:	b530      	push	{r4, r5, lr}
 80045c6:	6902      	ldr	r2, [r0, #16]
 80045c8:	690c      	ldr	r4, [r1, #16]
 80045ca:	1b12      	subs	r2, r2, r4
 80045cc:	d10e      	bne.n	80045ec <__mcmp+0x28>
 80045ce:	f100 0314 	add.w	r3, r0, #20
 80045d2:	3114      	adds	r1, #20
 80045d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80045d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80045dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80045e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80045e4:	42a5      	cmp	r5, r4
 80045e6:	d003      	beq.n	80045f0 <__mcmp+0x2c>
 80045e8:	d305      	bcc.n	80045f6 <__mcmp+0x32>
 80045ea:	2201      	movs	r2, #1
 80045ec:	4610      	mov	r0, r2
 80045ee:	bd30      	pop	{r4, r5, pc}
 80045f0:	4283      	cmp	r3, r0
 80045f2:	d3f3      	bcc.n	80045dc <__mcmp+0x18>
 80045f4:	e7fa      	b.n	80045ec <__mcmp+0x28>
 80045f6:	f04f 32ff 	mov.w	r2, #4294967295
 80045fa:	e7f7      	b.n	80045ec <__mcmp+0x28>

080045fc <__mdiff>:
 80045fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004600:	460c      	mov	r4, r1
 8004602:	4606      	mov	r6, r0
 8004604:	4611      	mov	r1, r2
 8004606:	4620      	mov	r0, r4
 8004608:	4690      	mov	r8, r2
 800460a:	f7ff ffdb 	bl	80045c4 <__mcmp>
 800460e:	1e05      	subs	r5, r0, #0
 8004610:	d110      	bne.n	8004634 <__mdiff+0x38>
 8004612:	4629      	mov	r1, r5
 8004614:	4630      	mov	r0, r6
 8004616:	f7ff fd0f 	bl	8004038 <_Balloc>
 800461a:	b930      	cbnz	r0, 800462a <__mdiff+0x2e>
 800461c:	4b3a      	ldr	r3, [pc, #232]	; (8004708 <__mdiff+0x10c>)
 800461e:	4602      	mov	r2, r0
 8004620:	f240 2137 	movw	r1, #567	; 0x237
 8004624:	4839      	ldr	r0, [pc, #228]	; (800470c <__mdiff+0x110>)
 8004626:	f001 fa5f 	bl	8005ae8 <__assert_func>
 800462a:	2301      	movs	r3, #1
 800462c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004634:	bfa4      	itt	ge
 8004636:	4643      	movge	r3, r8
 8004638:	46a0      	movge	r8, r4
 800463a:	4630      	mov	r0, r6
 800463c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004640:	bfa6      	itte	ge
 8004642:	461c      	movge	r4, r3
 8004644:	2500      	movge	r5, #0
 8004646:	2501      	movlt	r5, #1
 8004648:	f7ff fcf6 	bl	8004038 <_Balloc>
 800464c:	b920      	cbnz	r0, 8004658 <__mdiff+0x5c>
 800464e:	4b2e      	ldr	r3, [pc, #184]	; (8004708 <__mdiff+0x10c>)
 8004650:	4602      	mov	r2, r0
 8004652:	f240 2145 	movw	r1, #581	; 0x245
 8004656:	e7e5      	b.n	8004624 <__mdiff+0x28>
 8004658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800465c:	6926      	ldr	r6, [r4, #16]
 800465e:	60c5      	str	r5, [r0, #12]
 8004660:	f104 0914 	add.w	r9, r4, #20
 8004664:	f108 0514 	add.w	r5, r8, #20
 8004668:	f100 0e14 	add.w	lr, r0, #20
 800466c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004674:	f108 0210 	add.w	r2, r8, #16
 8004678:	46f2      	mov	sl, lr
 800467a:	2100      	movs	r1, #0
 800467c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004684:	fa11 f88b 	uxtah	r8, r1, fp
 8004688:	b299      	uxth	r1, r3
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	eba8 0801 	sub.w	r8, r8, r1
 8004690:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004694:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004698:	fa1f f888 	uxth.w	r8, r8
 800469c:	1419      	asrs	r1, r3, #16
 800469e:	454e      	cmp	r6, r9
 80046a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80046a4:	f84a 3b04 	str.w	r3, [sl], #4
 80046a8:	d8e8      	bhi.n	800467c <__mdiff+0x80>
 80046aa:	1b33      	subs	r3, r6, r4
 80046ac:	3b15      	subs	r3, #21
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	3304      	adds	r3, #4
 80046b4:	3415      	adds	r4, #21
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	bf38      	it	cc
 80046ba:	2304      	movcc	r3, #4
 80046bc:	441d      	add	r5, r3
 80046be:	4473      	add	r3, lr
 80046c0:	469e      	mov	lr, r3
 80046c2:	462e      	mov	r6, r5
 80046c4:	4566      	cmp	r6, ip
 80046c6:	d30e      	bcc.n	80046e6 <__mdiff+0xea>
 80046c8:	f10c 0203 	add.w	r2, ip, #3
 80046cc:	1b52      	subs	r2, r2, r5
 80046ce:	f022 0203 	bic.w	r2, r2, #3
 80046d2:	3d03      	subs	r5, #3
 80046d4:	45ac      	cmp	ip, r5
 80046d6:	bf38      	it	cc
 80046d8:	2200      	movcc	r2, #0
 80046da:	4413      	add	r3, r2
 80046dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80046e0:	b17a      	cbz	r2, 8004702 <__mdiff+0x106>
 80046e2:	6107      	str	r7, [r0, #16]
 80046e4:	e7a4      	b.n	8004630 <__mdiff+0x34>
 80046e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80046ea:	fa11 f288 	uxtah	r2, r1, r8
 80046ee:	1414      	asrs	r4, r2, #16
 80046f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80046f4:	b292      	uxth	r2, r2
 80046f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80046fa:	f84e 2b04 	str.w	r2, [lr], #4
 80046fe:	1421      	asrs	r1, r4, #16
 8004700:	e7e0      	b.n	80046c4 <__mdiff+0xc8>
 8004702:	3f01      	subs	r7, #1
 8004704:	e7ea      	b.n	80046dc <__mdiff+0xe0>
 8004706:	bf00      	nop
 8004708:	080068fd 	.word	0x080068fd
 800470c:	0800690e 	.word	0x0800690e

08004710 <__ulp>:
 8004710:	b082      	sub	sp, #8
 8004712:	ed8d 0b00 	vstr	d0, [sp]
 8004716:	9a01      	ldr	r2, [sp, #4]
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <__ulp+0x48>)
 800471a:	4013      	ands	r3, r2
 800471c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004720:	2b00      	cmp	r3, #0
 8004722:	dc08      	bgt.n	8004736 <__ulp+0x26>
 8004724:	425b      	negs	r3, r3
 8004726:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800472a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800472e:	da04      	bge.n	800473a <__ulp+0x2a>
 8004730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004734:	4113      	asrs	r3, r2
 8004736:	2200      	movs	r2, #0
 8004738:	e008      	b.n	800474c <__ulp+0x3c>
 800473a:	f1a2 0314 	sub.w	r3, r2, #20
 800473e:	2b1e      	cmp	r3, #30
 8004740:	bfda      	itte	le
 8004742:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004746:	40da      	lsrle	r2, r3
 8004748:	2201      	movgt	r2, #1
 800474a:	2300      	movs	r3, #0
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	ec41 0b10 	vmov	d0, r0, r1
 8004754:	b002      	add	sp, #8
 8004756:	4770      	bx	lr
 8004758:	7ff00000 	.word	0x7ff00000

0800475c <__b2d>:
 800475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004760:	6906      	ldr	r6, [r0, #16]
 8004762:	f100 0814 	add.w	r8, r0, #20
 8004766:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800476a:	1f37      	subs	r7, r6, #4
 800476c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fd53 	bl	800421c <__hi0bits>
 8004776:	f1c0 0320 	rsb	r3, r0, #32
 800477a:	280a      	cmp	r0, #10
 800477c:	600b      	str	r3, [r1, #0]
 800477e:	491b      	ldr	r1, [pc, #108]	; (80047ec <__b2d+0x90>)
 8004780:	dc15      	bgt.n	80047ae <__b2d+0x52>
 8004782:	f1c0 0c0b 	rsb	ip, r0, #11
 8004786:	fa22 f30c 	lsr.w	r3, r2, ip
 800478a:	45b8      	cmp	r8, r7
 800478c:	ea43 0501 	orr.w	r5, r3, r1
 8004790:	bf34      	ite	cc
 8004792:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8004796:	2300      	movcs	r3, #0
 8004798:	3015      	adds	r0, #21
 800479a:	fa02 f000 	lsl.w	r0, r2, r0
 800479e:	fa23 f30c 	lsr.w	r3, r3, ip
 80047a2:	4303      	orrs	r3, r0
 80047a4:	461c      	mov	r4, r3
 80047a6:	ec45 4b10 	vmov	d0, r4, r5
 80047aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ae:	45b8      	cmp	r8, r7
 80047b0:	bf3a      	itte	cc
 80047b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80047b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80047ba:	2300      	movcs	r3, #0
 80047bc:	380b      	subs	r0, #11
 80047be:	d012      	beq.n	80047e6 <__b2d+0x8a>
 80047c0:	f1c0 0120 	rsb	r1, r0, #32
 80047c4:	fa23 f401 	lsr.w	r4, r3, r1
 80047c8:	4082      	lsls	r2, r0
 80047ca:	4322      	orrs	r2, r4
 80047cc:	4547      	cmp	r7, r8
 80047ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80047d2:	bf8c      	ite	hi
 80047d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80047d8:	2200      	movls	r2, #0
 80047da:	4083      	lsls	r3, r0
 80047dc:	40ca      	lsrs	r2, r1
 80047de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80047e2:	4313      	orrs	r3, r2
 80047e4:	e7de      	b.n	80047a4 <__b2d+0x48>
 80047e6:	ea42 0501 	orr.w	r5, r2, r1
 80047ea:	e7db      	b.n	80047a4 <__b2d+0x48>
 80047ec:	3ff00000 	.word	0x3ff00000

080047f0 <__d2b>:
 80047f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80047f4:	460f      	mov	r7, r1
 80047f6:	2101      	movs	r1, #1
 80047f8:	ec59 8b10 	vmov	r8, r9, d0
 80047fc:	4616      	mov	r6, r2
 80047fe:	f7ff fc1b 	bl	8004038 <_Balloc>
 8004802:	4604      	mov	r4, r0
 8004804:	b930      	cbnz	r0, 8004814 <__d2b+0x24>
 8004806:	4602      	mov	r2, r0
 8004808:	4b24      	ldr	r3, [pc, #144]	; (800489c <__d2b+0xac>)
 800480a:	4825      	ldr	r0, [pc, #148]	; (80048a0 <__d2b+0xb0>)
 800480c:	f240 310f 	movw	r1, #783	; 0x30f
 8004810:	f001 f96a 	bl	8005ae8 <__assert_func>
 8004814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800481c:	bb2d      	cbnz	r5, 800486a <__d2b+0x7a>
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	f1b8 0300 	subs.w	r3, r8, #0
 8004824:	d026      	beq.n	8004874 <__d2b+0x84>
 8004826:	4668      	mov	r0, sp
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	f7ff fd17 	bl	800425c <__lo0bits>
 800482e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004832:	b1e8      	cbz	r0, 8004870 <__d2b+0x80>
 8004834:	f1c0 0320 	rsb	r3, r0, #32
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	430b      	orrs	r3, r1
 800483e:	40c2      	lsrs	r2, r0
 8004840:	6163      	str	r3, [r4, #20]
 8004842:	9201      	str	r2, [sp, #4]
 8004844:	9b01      	ldr	r3, [sp, #4]
 8004846:	61a3      	str	r3, [r4, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2202      	movne	r2, #2
 800484e:	2201      	moveq	r2, #1
 8004850:	6122      	str	r2, [r4, #16]
 8004852:	b1bd      	cbz	r5, 8004884 <__d2b+0x94>
 8004854:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004858:	4405      	add	r5, r0
 800485a:	603d      	str	r5, [r7, #0]
 800485c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004860:	6030      	str	r0, [r6, #0]
 8004862:	4620      	mov	r0, r4
 8004864:	b003      	add	sp, #12
 8004866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486e:	e7d6      	b.n	800481e <__d2b+0x2e>
 8004870:	6161      	str	r1, [r4, #20]
 8004872:	e7e7      	b.n	8004844 <__d2b+0x54>
 8004874:	a801      	add	r0, sp, #4
 8004876:	f7ff fcf1 	bl	800425c <__lo0bits>
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	6163      	str	r3, [r4, #20]
 800487e:	3020      	adds	r0, #32
 8004880:	2201      	movs	r2, #1
 8004882:	e7e5      	b.n	8004850 <__d2b+0x60>
 8004884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800488c:	6038      	str	r0, [r7, #0]
 800488e:	6918      	ldr	r0, [r3, #16]
 8004890:	f7ff fcc4 	bl	800421c <__hi0bits>
 8004894:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004898:	e7e2      	b.n	8004860 <__d2b+0x70>
 800489a:	bf00      	nop
 800489c:	080068fd 	.word	0x080068fd
 80048a0:	0800690e 	.word	0x0800690e

080048a4 <__ratio>:
 80048a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	4688      	mov	r8, r1
 80048aa:	4669      	mov	r1, sp
 80048ac:	4681      	mov	r9, r0
 80048ae:	f7ff ff55 	bl	800475c <__b2d>
 80048b2:	a901      	add	r1, sp, #4
 80048b4:	4640      	mov	r0, r8
 80048b6:	ec55 4b10 	vmov	r4, r5, d0
 80048ba:	ee10 aa10 	vmov	sl, s0
 80048be:	f7ff ff4d 	bl	800475c <__b2d>
 80048c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80048c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80048d0:	1a5b      	subs	r3, r3, r1
 80048d2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80048d6:	ec57 6b10 	vmov	r6, r7, d0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfd6      	itet	le
 80048de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80048e2:	462a      	movgt	r2, r5
 80048e4:	463a      	movle	r2, r7
 80048e6:	46ab      	mov	fp, r5
 80048e8:	bfd6      	itet	le
 80048ea:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80048ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80048f2:	ee00 3a90 	vmovle	s1, r3
 80048f6:	ec4b ab17 	vmov	d7, sl, fp
 80048fa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80048fe:	b003      	add	sp, #12
 8004900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004904 <__copybits>:
 8004904:	3901      	subs	r1, #1
 8004906:	b570      	push	{r4, r5, r6, lr}
 8004908:	1149      	asrs	r1, r1, #5
 800490a:	6914      	ldr	r4, [r2, #16]
 800490c:	3101      	adds	r1, #1
 800490e:	f102 0314 	add.w	r3, r2, #20
 8004912:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004916:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800491a:	1f05      	subs	r5, r0, #4
 800491c:	42a3      	cmp	r3, r4
 800491e:	d30c      	bcc.n	800493a <__copybits+0x36>
 8004920:	1aa3      	subs	r3, r4, r2
 8004922:	3b11      	subs	r3, #17
 8004924:	f023 0303 	bic.w	r3, r3, #3
 8004928:	3211      	adds	r2, #17
 800492a:	42a2      	cmp	r2, r4
 800492c:	bf88      	it	hi
 800492e:	2300      	movhi	r3, #0
 8004930:	4418      	add	r0, r3
 8004932:	2300      	movs	r3, #0
 8004934:	4288      	cmp	r0, r1
 8004936:	d305      	bcc.n	8004944 <__copybits+0x40>
 8004938:	bd70      	pop	{r4, r5, r6, pc}
 800493a:	f853 6b04 	ldr.w	r6, [r3], #4
 800493e:	f845 6f04 	str.w	r6, [r5, #4]!
 8004942:	e7eb      	b.n	800491c <__copybits+0x18>
 8004944:	f840 3b04 	str.w	r3, [r0], #4
 8004948:	e7f4      	b.n	8004934 <__copybits+0x30>

0800494a <__any_on>:
 800494a:	f100 0214 	add.w	r2, r0, #20
 800494e:	6900      	ldr	r0, [r0, #16]
 8004950:	114b      	asrs	r3, r1, #5
 8004952:	4298      	cmp	r0, r3
 8004954:	b510      	push	{r4, lr}
 8004956:	db11      	blt.n	800497c <__any_on+0x32>
 8004958:	dd0a      	ble.n	8004970 <__any_on+0x26>
 800495a:	f011 011f 	ands.w	r1, r1, #31
 800495e:	d007      	beq.n	8004970 <__any_on+0x26>
 8004960:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004964:	fa24 f001 	lsr.w	r0, r4, r1
 8004968:	fa00 f101 	lsl.w	r1, r0, r1
 800496c:	428c      	cmp	r4, r1
 800496e:	d10b      	bne.n	8004988 <__any_on+0x3e>
 8004970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004974:	4293      	cmp	r3, r2
 8004976:	d803      	bhi.n	8004980 <__any_on+0x36>
 8004978:	2000      	movs	r0, #0
 800497a:	bd10      	pop	{r4, pc}
 800497c:	4603      	mov	r3, r0
 800497e:	e7f7      	b.n	8004970 <__any_on+0x26>
 8004980:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004984:	2900      	cmp	r1, #0
 8004986:	d0f5      	beq.n	8004974 <__any_on+0x2a>
 8004988:	2001      	movs	r0, #1
 800498a:	e7f6      	b.n	800497a <__any_on+0x30>

0800498c <sulp>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	460d      	mov	r5, r1
 8004992:	4616      	mov	r6, r2
 8004994:	ec45 4b10 	vmov	d0, r4, r5
 8004998:	f7ff feba 	bl	8004710 <__ulp>
 800499c:	b17e      	cbz	r6, 80049be <sulp+0x32>
 800499e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80049a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dd09      	ble.n	80049be <sulp+0x32>
 80049aa:	051b      	lsls	r3, r3, #20
 80049ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80049b0:	2000      	movs	r0, #0
 80049b2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80049b6:	ec41 0b17 	vmov	d7, r0, r1
 80049ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80049be:	bd70      	pop	{r4, r5, r6, pc}

080049c0 <_strtod_l>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	ed2d 8b0e 	vpush	{d8-d14}
 80049c8:	b097      	sub	sp, #92	; 0x5c
 80049ca:	4604      	mov	r4, r0
 80049cc:	920d      	str	r2, [sp, #52]	; 0x34
 80049ce:	2200      	movs	r2, #0
 80049d0:	9212      	str	r2, [sp, #72]	; 0x48
 80049d2:	468a      	mov	sl, r1
 80049d4:	f04f 0800 	mov.w	r8, #0
 80049d8:	f04f 0900 	mov.w	r9, #0
 80049dc:	460a      	mov	r2, r1
 80049de:	9211      	str	r2, [sp, #68]	; 0x44
 80049e0:	7811      	ldrb	r1, [r2, #0]
 80049e2:	292b      	cmp	r1, #43	; 0x2b
 80049e4:	d04c      	beq.n	8004a80 <_strtod_l+0xc0>
 80049e6:	d839      	bhi.n	8004a5c <_strtod_l+0x9c>
 80049e8:	290d      	cmp	r1, #13
 80049ea:	d833      	bhi.n	8004a54 <_strtod_l+0x94>
 80049ec:	2908      	cmp	r1, #8
 80049ee:	d833      	bhi.n	8004a58 <_strtod_l+0x98>
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d03c      	beq.n	8004a6e <_strtod_l+0xae>
 80049f4:	2200      	movs	r2, #0
 80049f6:	9208      	str	r2, [sp, #32]
 80049f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80049fa:	7832      	ldrb	r2, [r6, #0]
 80049fc:	2a30      	cmp	r2, #48	; 0x30
 80049fe:	f040 80b8 	bne.w	8004b72 <_strtod_l+0x1b2>
 8004a02:	7872      	ldrb	r2, [r6, #1]
 8004a04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004a08:	2a58      	cmp	r2, #88	; 0x58
 8004a0a:	d170      	bne.n	8004aee <_strtod_l+0x12e>
 8004a0c:	9302      	str	r3, [sp, #8]
 8004a0e:	9b08      	ldr	r3, [sp, #32]
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	ab12      	add	r3, sp, #72	; 0x48
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4a91      	ldr	r2, [pc, #580]	; (8004c5c <_strtod_l+0x29c>)
 8004a18:	ab13      	add	r3, sp, #76	; 0x4c
 8004a1a:	a911      	add	r1, sp, #68	; 0x44
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f001 f8ff 	bl	8005c20 <__gethex>
 8004a22:	f010 070f 	ands.w	r7, r0, #15
 8004a26:	4605      	mov	r5, r0
 8004a28:	d005      	beq.n	8004a36 <_strtod_l+0x76>
 8004a2a:	2f06      	cmp	r7, #6
 8004a2c:	d12a      	bne.n	8004a84 <_strtod_l+0xc4>
 8004a2e:	3601      	adds	r6, #1
 8004a30:	2300      	movs	r3, #0
 8004a32:	9611      	str	r6, [sp, #68]	; 0x44
 8004a34:	9308      	str	r3, [sp, #32]
 8004a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 8555 	bne.w	80054e8 <_strtod_l+0xb28>
 8004a3e:	9b08      	ldr	r3, [sp, #32]
 8004a40:	ec49 8b10 	vmov	d0, r8, r9
 8004a44:	b1cb      	cbz	r3, 8004a7a <_strtod_l+0xba>
 8004a46:	eeb1 0b40 	vneg.f64	d0, d0
 8004a4a:	b017      	add	sp, #92	; 0x5c
 8004a4c:	ecbd 8b0e 	vpop	{d8-d14}
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	2920      	cmp	r1, #32
 8004a56:	d1cd      	bne.n	80049f4 <_strtod_l+0x34>
 8004a58:	3201      	adds	r2, #1
 8004a5a:	e7c0      	b.n	80049de <_strtod_l+0x1e>
 8004a5c:	292d      	cmp	r1, #45	; 0x2d
 8004a5e:	d1c9      	bne.n	80049f4 <_strtod_l+0x34>
 8004a60:	2101      	movs	r1, #1
 8004a62:	9108      	str	r1, [sp, #32]
 8004a64:	1c51      	adds	r1, r2, #1
 8004a66:	9111      	str	r1, [sp, #68]	; 0x44
 8004a68:	7852      	ldrb	r2, [r2, #1]
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d1c4      	bne.n	80049f8 <_strtod_l+0x38>
 8004a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a70:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 8535 	bne.w	80054e4 <_strtod_l+0xb24>
 8004a7a:	ec49 8b10 	vmov	d0, r8, r9
 8004a7e:	e7e4      	b.n	8004a4a <_strtod_l+0x8a>
 8004a80:	2100      	movs	r1, #0
 8004a82:	e7ee      	b.n	8004a62 <_strtod_l+0xa2>
 8004a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a86:	b13a      	cbz	r2, 8004a98 <_strtod_l+0xd8>
 8004a88:	2135      	movs	r1, #53	; 0x35
 8004a8a:	a814      	add	r0, sp, #80	; 0x50
 8004a8c:	f7ff ff3a 	bl	8004904 <__copybits>
 8004a90:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff fb10 	bl	80040b8 <_Bfree>
 8004a98:	1e7b      	subs	r3, r7, #1
 8004a9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d806      	bhi.n	8004aae <_strtod_l+0xee>
 8004aa0:	e8df f003 	tbb	[pc, r3]
 8004aa4:	201d0314 	.word	0x201d0314
 8004aa8:	14          	.byte	0x14
 8004aa9:	00          	.byte	0x00
 8004aaa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8004aae:	05eb      	lsls	r3, r5, #23
 8004ab0:	bf48      	it	mi
 8004ab2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004ab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004aba:	0d1b      	lsrs	r3, r3, #20
 8004abc:	051b      	lsls	r3, r3, #20
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1b9      	bne.n	8004a36 <_strtod_l+0x76>
 8004ac2:	f7fe fb91 	bl	80031e8 <__errno>
 8004ac6:	2322      	movs	r3, #34	; 0x22
 8004ac8:	6003      	str	r3, [r0, #0]
 8004aca:	e7b4      	b.n	8004a36 <_strtod_l+0x76>
 8004acc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8004ad0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ad4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ad8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004adc:	e7e7      	b.n	8004aae <_strtod_l+0xee>
 8004ade:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8004c64 <_strtod_l+0x2a4>
 8004ae2:	e7e4      	b.n	8004aae <_strtod_l+0xee>
 8004ae4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004ae8:	f04f 38ff 	mov.w	r8, #4294967295
 8004aec:	e7df      	b.n	8004aae <_strtod_l+0xee>
 8004aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	9211      	str	r2, [sp, #68]	; 0x44
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	2b30      	cmp	r3, #48	; 0x30
 8004af8:	d0f9      	beq.n	8004aee <_strtod_l+0x12e>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d09b      	beq.n	8004a36 <_strtod_l+0x76>
 8004afe:	2301      	movs	r3, #1
 8004b00:	9306      	str	r3, [sp, #24]
 8004b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b04:	9309      	str	r3, [sp, #36]	; 0x24
 8004b06:	2300      	movs	r3, #0
 8004b08:	9305      	str	r3, [sp, #20]
 8004b0a:	9307      	str	r3, [sp, #28]
 8004b0c:	461e      	mov	r6, r3
 8004b0e:	220a      	movs	r2, #10
 8004b10:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004b12:	7805      	ldrb	r5, [r0, #0]
 8004b14:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004b18:	b2d9      	uxtb	r1, r3
 8004b1a:	2909      	cmp	r1, #9
 8004b1c:	d92b      	bls.n	8004b76 <_strtod_l+0x1b6>
 8004b1e:	4950      	ldr	r1, [pc, #320]	; (8004c60 <_strtod_l+0x2a0>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	f000 ffa9 	bl	8005a78 <strncmp>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d035      	beq.n	8004b96 <_strtod_l+0x1d6>
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4633      	mov	r3, r6
 8004b30:	4683      	mov	fp, r0
 8004b32:	4601      	mov	r1, r0
 8004b34:	2a65      	cmp	r2, #101	; 0x65
 8004b36:	d001      	beq.n	8004b3c <_strtod_l+0x17c>
 8004b38:	2a45      	cmp	r2, #69	; 0x45
 8004b3a:	d118      	bne.n	8004b6e <_strtod_l+0x1ae>
 8004b3c:	b91b      	cbnz	r3, 8004b46 <_strtod_l+0x186>
 8004b3e:	9b06      	ldr	r3, [sp, #24]
 8004b40:	4303      	orrs	r3, r0
 8004b42:	d094      	beq.n	8004a6e <_strtod_l+0xae>
 8004b44:	2300      	movs	r3, #0
 8004b46:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8004b4a:	f10a 0201 	add.w	r2, sl, #1
 8004b4e:	9211      	str	r2, [sp, #68]	; 0x44
 8004b50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8004b54:	2a2b      	cmp	r2, #43	; 0x2b
 8004b56:	d075      	beq.n	8004c44 <_strtod_l+0x284>
 8004b58:	2a2d      	cmp	r2, #45	; 0x2d
 8004b5a:	d07b      	beq.n	8004c54 <_strtod_l+0x294>
 8004b5c:	f04f 0e00 	mov.w	lr, #0
 8004b60:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004b64:	2d09      	cmp	r5, #9
 8004b66:	f240 8083 	bls.w	8004c70 <_strtod_l+0x2b0>
 8004b6a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004b6e:	2500      	movs	r5, #0
 8004b70:	e09e      	b.n	8004cb0 <_strtod_l+0x2f0>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e7c4      	b.n	8004b00 <_strtod_l+0x140>
 8004b76:	2e08      	cmp	r6, #8
 8004b78:	bfd5      	itete	le
 8004b7a:	9907      	ldrle	r1, [sp, #28]
 8004b7c:	9905      	ldrgt	r1, [sp, #20]
 8004b7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b82:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004b86:	f100 0001 	add.w	r0, r0, #1
 8004b8a:	bfd4      	ite	le
 8004b8c:	9307      	strle	r3, [sp, #28]
 8004b8e:	9305      	strgt	r3, [sp, #20]
 8004b90:	3601      	adds	r6, #1
 8004b92:	9011      	str	r0, [sp, #68]	; 0x44
 8004b94:	e7bc      	b.n	8004b10 <_strtod_l+0x150>
 8004b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	9211      	str	r2, [sp, #68]	; 0x44
 8004b9c:	785a      	ldrb	r2, [r3, #1]
 8004b9e:	b3ae      	cbz	r6, 8004c0c <_strtod_l+0x24c>
 8004ba0:	4683      	mov	fp, r0
 8004ba2:	4633      	mov	r3, r6
 8004ba4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ba8:	2909      	cmp	r1, #9
 8004baa:	d912      	bls.n	8004bd2 <_strtod_l+0x212>
 8004bac:	2101      	movs	r1, #1
 8004bae:	e7c1      	b.n	8004b34 <_strtod_l+0x174>
 8004bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	9211      	str	r2, [sp, #68]	; 0x44
 8004bb6:	785a      	ldrb	r2, [r3, #1]
 8004bb8:	3001      	adds	r0, #1
 8004bba:	2a30      	cmp	r2, #48	; 0x30
 8004bbc:	d0f8      	beq.n	8004bb0 <_strtod_l+0x1f0>
 8004bbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	f200 8495 	bhi.w	80054f2 <_strtod_l+0xb32>
 8004bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bca:	9309      	str	r3, [sp, #36]	; 0x24
 8004bcc:	4683      	mov	fp, r0
 8004bce:	2000      	movs	r0, #0
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	3a30      	subs	r2, #48	; 0x30
 8004bd4:	f100 0101 	add.w	r1, r0, #1
 8004bd8:	d012      	beq.n	8004c00 <_strtod_l+0x240>
 8004bda:	448b      	add	fp, r1
 8004bdc:	eb00 0c03 	add.w	ip, r0, r3
 8004be0:	4619      	mov	r1, r3
 8004be2:	250a      	movs	r5, #10
 8004be4:	4561      	cmp	r1, ip
 8004be6:	d113      	bne.n	8004c10 <_strtod_l+0x250>
 8004be8:	1819      	adds	r1, r3, r0
 8004bea:	2908      	cmp	r1, #8
 8004bec:	f103 0301 	add.w	r3, r3, #1
 8004bf0:	4403      	add	r3, r0
 8004bf2:	dc1b      	bgt.n	8004c2c <_strtod_l+0x26c>
 8004bf4:	9807      	ldr	r0, [sp, #28]
 8004bf6:	210a      	movs	r1, #10
 8004bf8:	fb01 2200 	mla	r2, r1, r0, r2
 8004bfc:	9207      	str	r2, [sp, #28]
 8004bfe:	2100      	movs	r1, #0
 8004c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c02:	1c50      	adds	r0, r2, #1
 8004c04:	9011      	str	r0, [sp, #68]	; 0x44
 8004c06:	7852      	ldrb	r2, [r2, #1]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	e7cb      	b.n	8004ba4 <_strtod_l+0x1e4>
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	e7d4      	b.n	8004bba <_strtod_l+0x1fa>
 8004c10:	2908      	cmp	r1, #8
 8004c12:	f101 0101 	add.w	r1, r1, #1
 8004c16:	dc03      	bgt.n	8004c20 <_strtod_l+0x260>
 8004c18:	9f07      	ldr	r7, [sp, #28]
 8004c1a:	436f      	muls	r7, r5
 8004c1c:	9707      	str	r7, [sp, #28]
 8004c1e:	e7e1      	b.n	8004be4 <_strtod_l+0x224>
 8004c20:	2910      	cmp	r1, #16
 8004c22:	bfde      	ittt	le
 8004c24:	9f05      	ldrle	r7, [sp, #20]
 8004c26:	436f      	mulle	r7, r5
 8004c28:	9705      	strle	r7, [sp, #20]
 8004c2a:	e7db      	b.n	8004be4 <_strtod_l+0x224>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	bfdf      	itttt	le
 8004c30:	9805      	ldrle	r0, [sp, #20]
 8004c32:	210a      	movle	r1, #10
 8004c34:	fb01 2200 	mlale	r2, r1, r0, r2
 8004c38:	9205      	strle	r2, [sp, #20]
 8004c3a:	e7e0      	b.n	8004bfe <_strtod_l+0x23e>
 8004c3c:	f04f 0b00 	mov.w	fp, #0
 8004c40:	2101      	movs	r1, #1
 8004c42:	e77c      	b.n	8004b3e <_strtod_l+0x17e>
 8004c44:	f04f 0e00 	mov.w	lr, #0
 8004c48:	f10a 0202 	add.w	r2, sl, #2
 8004c4c:	9211      	str	r2, [sp, #68]	; 0x44
 8004c4e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8004c52:	e785      	b.n	8004b60 <_strtod_l+0x1a0>
 8004c54:	f04f 0e01 	mov.w	lr, #1
 8004c58:	e7f6      	b.n	8004c48 <_strtod_l+0x288>
 8004c5a:	bf00      	nop
 8004c5c:	08006a68 	.word	0x08006a68
 8004c60:	08006a64 	.word	0x08006a64
 8004c64:	7ff00000 	.word	0x7ff00000
 8004c68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c6a:	1c55      	adds	r5, r2, #1
 8004c6c:	9511      	str	r5, [sp, #68]	; 0x44
 8004c6e:	7852      	ldrb	r2, [r2, #1]
 8004c70:	2a30      	cmp	r2, #48	; 0x30
 8004c72:	d0f9      	beq.n	8004c68 <_strtod_l+0x2a8>
 8004c74:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8004c78:	2d08      	cmp	r5, #8
 8004c7a:	f63f af78 	bhi.w	8004b6e <_strtod_l+0x1ae>
 8004c7e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c84:	920a      	str	r2, [sp, #40]	; 0x28
 8004c86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c88:	1c55      	adds	r5, r2, #1
 8004c8a:	9511      	str	r5, [sp, #68]	; 0x44
 8004c8c:	7852      	ldrb	r2, [r2, #1]
 8004c8e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8004c92:	2f09      	cmp	r7, #9
 8004c94:	d937      	bls.n	8004d06 <_strtod_l+0x346>
 8004c96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004c98:	1bed      	subs	r5, r5, r7
 8004c9a:	2d08      	cmp	r5, #8
 8004c9c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004ca0:	dc02      	bgt.n	8004ca8 <_strtod_l+0x2e8>
 8004ca2:	4565      	cmp	r5, ip
 8004ca4:	bfa8      	it	ge
 8004ca6:	4665      	movge	r5, ip
 8004ca8:	f1be 0f00 	cmp.w	lr, #0
 8004cac:	d000      	beq.n	8004cb0 <_strtod_l+0x2f0>
 8004cae:	426d      	negs	r5, r5
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d14d      	bne.n	8004d50 <_strtod_l+0x390>
 8004cb4:	9b06      	ldr	r3, [sp, #24]
 8004cb6:	4303      	orrs	r3, r0
 8004cb8:	f47f aebd 	bne.w	8004a36 <_strtod_l+0x76>
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	f47f aed6 	bne.w	8004a6e <_strtod_l+0xae>
 8004cc2:	2a69      	cmp	r2, #105	; 0x69
 8004cc4:	d027      	beq.n	8004d16 <_strtod_l+0x356>
 8004cc6:	dc24      	bgt.n	8004d12 <_strtod_l+0x352>
 8004cc8:	2a49      	cmp	r2, #73	; 0x49
 8004cca:	d024      	beq.n	8004d16 <_strtod_l+0x356>
 8004ccc:	2a4e      	cmp	r2, #78	; 0x4e
 8004cce:	f47f aece 	bne.w	8004a6e <_strtod_l+0xae>
 8004cd2:	4995      	ldr	r1, [pc, #596]	; (8004f28 <_strtod_l+0x568>)
 8004cd4:	a811      	add	r0, sp, #68	; 0x44
 8004cd6:	f001 f9e3 	bl	80060a0 <__match>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f43f aec7 	beq.w	8004a6e <_strtod_l+0xae>
 8004ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b28      	cmp	r3, #40	; 0x28
 8004ce6:	d12d      	bne.n	8004d44 <_strtod_l+0x384>
 8004ce8:	4990      	ldr	r1, [pc, #576]	; (8004f2c <_strtod_l+0x56c>)
 8004cea:	aa14      	add	r2, sp, #80	; 0x50
 8004cec:	a811      	add	r0, sp, #68	; 0x44
 8004cee:	f001 f9eb 	bl	80060c8 <__hexnan>
 8004cf2:	2805      	cmp	r0, #5
 8004cf4:	d126      	bne.n	8004d44 <_strtod_l+0x384>
 8004cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004cfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004d00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004d04:	e697      	b.n	8004a36 <_strtod_l+0x76>
 8004d06:	250a      	movs	r5, #10
 8004d08:	fb05 2c0c 	mla	ip, r5, ip, r2
 8004d0c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004d10:	e7b9      	b.n	8004c86 <_strtod_l+0x2c6>
 8004d12:	2a6e      	cmp	r2, #110	; 0x6e
 8004d14:	e7db      	b.n	8004cce <_strtod_l+0x30e>
 8004d16:	4986      	ldr	r1, [pc, #536]	; (8004f30 <_strtod_l+0x570>)
 8004d18:	a811      	add	r0, sp, #68	; 0x44
 8004d1a:	f001 f9c1 	bl	80060a0 <__match>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f aea5 	beq.w	8004a6e <_strtod_l+0xae>
 8004d24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d26:	4983      	ldr	r1, [pc, #524]	; (8004f34 <_strtod_l+0x574>)
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	a811      	add	r0, sp, #68	; 0x44
 8004d2c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d2e:	f001 f9b7 	bl	80060a0 <__match>
 8004d32:	b910      	cbnz	r0, 8004d3a <_strtod_l+0x37a>
 8004d34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d36:	3301      	adds	r3, #1
 8004d38:	9311      	str	r3, [sp, #68]	; 0x44
 8004d3a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8004f48 <_strtod_l+0x588>
 8004d3e:	f04f 0800 	mov.w	r8, #0
 8004d42:	e678      	b.n	8004a36 <_strtod_l+0x76>
 8004d44:	487c      	ldr	r0, [pc, #496]	; (8004f38 <_strtod_l+0x578>)
 8004d46:	f000 fec7 	bl	8005ad8 <nan>
 8004d4a:	ec59 8b10 	vmov	r8, r9, d0
 8004d4e:	e672      	b.n	8004a36 <_strtod_l+0x76>
 8004d50:	eddd 7a07 	vldr	s15, [sp, #28]
 8004d54:	eba5 020b 	sub.w	r2, r5, fp
 8004d58:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	bf08      	it	eq
 8004d60:	461e      	moveq	r6, r3
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	9206      	str	r2, [sp, #24]
 8004d66:	461a      	mov	r2, r3
 8004d68:	bfa8      	it	ge
 8004d6a:	2210      	movge	r2, #16
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	ec59 8b17 	vmov	r8, r9, d7
 8004d72:	dd0c      	ble.n	8004d8e <_strtod_l+0x3ce>
 8004d74:	4971      	ldr	r1, [pc, #452]	; (8004f3c <_strtod_l+0x57c>)
 8004d76:	eddd 6a05 	vldr	s13, [sp, #20]
 8004d7a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004d7e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8004d82:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8004d86:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004d8a:	ec59 8b16 	vmov	r8, r9, d6
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	dc37      	bgt.n	8004e02 <_strtod_l+0x442>
 8004d92:	9906      	ldr	r1, [sp, #24]
 8004d94:	2900      	cmp	r1, #0
 8004d96:	f43f ae4e 	beq.w	8004a36 <_strtod_l+0x76>
 8004d9a:	dd23      	ble.n	8004de4 <_strtod_l+0x424>
 8004d9c:	2916      	cmp	r1, #22
 8004d9e:	dc0b      	bgt.n	8004db8 <_strtod_l+0x3f8>
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <_strtod_l+0x57c>)
 8004da2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004da6:	ed93 7b00 	vldr	d7, [r3]
 8004daa:	ec49 8b16 	vmov	d6, r8, r9
 8004dae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004db2:	ec59 8b17 	vmov	r8, r9, d7
 8004db6:	e63e      	b.n	8004a36 <_strtod_l+0x76>
 8004db8:	9806      	ldr	r0, [sp, #24]
 8004dba:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8004dbe:	4281      	cmp	r1, r0
 8004dc0:	db1f      	blt.n	8004e02 <_strtod_l+0x442>
 8004dc2:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <_strtod_l+0x57c>)
 8004dc4:	f1c3 030f 	rsb	r3, r3, #15
 8004dc8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8004dcc:	ed91 7b00 	vldr	d7, [r1]
 8004dd0:	ec49 8b16 	vmov	d6, r8, r9
 8004dd4:	1ac3      	subs	r3, r0, r3
 8004dd6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004dde:	ed92 6b00 	vldr	d6, [r2]
 8004de2:	e7e4      	b.n	8004dae <_strtod_l+0x3ee>
 8004de4:	9906      	ldr	r1, [sp, #24]
 8004de6:	3116      	adds	r1, #22
 8004de8:	db0b      	blt.n	8004e02 <_strtod_l+0x442>
 8004dea:	4b54      	ldr	r3, [pc, #336]	; (8004f3c <_strtod_l+0x57c>)
 8004dec:	ebab 0505 	sub.w	r5, fp, r5
 8004df0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004df4:	ed95 7b00 	vldr	d7, [r5]
 8004df8:	ec49 8b16 	vmov	d6, r8, r9
 8004dfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004e00:	e7d7      	b.n	8004db2 <_strtod_l+0x3f2>
 8004e02:	9906      	ldr	r1, [sp, #24]
 8004e04:	1a9a      	subs	r2, r3, r2
 8004e06:	440a      	add	r2, r1
 8004e08:	2a00      	cmp	r2, #0
 8004e0a:	dd6e      	ble.n	8004eea <_strtod_l+0x52a>
 8004e0c:	f012 000f 	ands.w	r0, r2, #15
 8004e10:	d00a      	beq.n	8004e28 <_strtod_l+0x468>
 8004e12:	494a      	ldr	r1, [pc, #296]	; (8004f3c <_strtod_l+0x57c>)
 8004e14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004e18:	ed91 7b00 	vldr	d7, [r1]
 8004e1c:	ec49 8b16 	vmov	d6, r8, r9
 8004e20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e24:	ec59 8b17 	vmov	r8, r9, d7
 8004e28:	f032 020f 	bics.w	r2, r2, #15
 8004e2c:	d04e      	beq.n	8004ecc <_strtod_l+0x50c>
 8004e2e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8004e32:	dd22      	ble.n	8004e7a <_strtod_l+0x4ba>
 8004e34:	2500      	movs	r5, #0
 8004e36:	462e      	mov	r6, r5
 8004e38:	9507      	str	r5, [sp, #28]
 8004e3a:	462f      	mov	r7, r5
 8004e3c:	2322      	movs	r3, #34	; 0x22
 8004e3e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004f48 <_strtod_l+0x588>
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	f04f 0800 	mov.w	r8, #0
 8004e48:	9b07      	ldr	r3, [sp, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f43f adf3 	beq.w	8004a36 <_strtod_l+0x76>
 8004e50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7ff f930 	bl	80040b8 <_Bfree>
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7ff f92c 	bl	80040b8 <_Bfree>
 8004e60:	4631      	mov	r1, r6
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff f928 	bl	80040b8 <_Bfree>
 8004e68:	9907      	ldr	r1, [sp, #28]
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f7ff f924 	bl	80040b8 <_Bfree>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff f920 	bl	80040b8 <_Bfree>
 8004e78:	e5dd      	b.n	8004a36 <_strtod_l+0x76>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	ec49 8b17 	vmov	d7, r8, r9
 8004e80:	4f2f      	ldr	r7, [pc, #188]	; (8004f40 <_strtod_l+0x580>)
 8004e82:	1112      	asrs	r2, r2, #4
 8004e84:	4601      	mov	r1, r0
 8004e86:	2a01      	cmp	r2, #1
 8004e88:	dc23      	bgt.n	8004ed2 <_strtod_l+0x512>
 8004e8a:	b108      	cbz	r0, 8004e90 <_strtod_l+0x4d0>
 8004e8c:	ec59 8b17 	vmov	r8, r9, d7
 8004e90:	4a2b      	ldr	r2, [pc, #172]	; (8004f40 <_strtod_l+0x580>)
 8004e92:	482c      	ldr	r0, [pc, #176]	; (8004f44 <_strtod_l+0x584>)
 8004e94:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004e98:	ed92 7b00 	vldr	d7, [r2]
 8004e9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004ea0:	ec49 8b16 	vmov	d6, r8, r9
 8004ea4:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <_strtod_l+0x588>)
 8004ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004eaa:	ee17 1a90 	vmov	r1, s15
 8004eae:	400a      	ands	r2, r1
 8004eb0:	4282      	cmp	r2, r0
 8004eb2:	ec59 8b17 	vmov	r8, r9, d7
 8004eb6:	d8bd      	bhi.n	8004e34 <_strtod_l+0x474>
 8004eb8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8004ebc:	4282      	cmp	r2, r0
 8004ebe:	bf86      	itte	hi
 8004ec0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8004f4c <_strtod_l+0x58c>
 8004ec4:	f04f 38ff 	movhi.w	r8, #4294967295
 8004ec8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8004ecc:	2200      	movs	r2, #0
 8004ece:	9205      	str	r2, [sp, #20]
 8004ed0:	e076      	b.n	8004fc0 <_strtod_l+0x600>
 8004ed2:	f012 0f01 	tst.w	r2, #1
 8004ed6:	d004      	beq.n	8004ee2 <_strtod_l+0x522>
 8004ed8:	ed97 6b00 	vldr	d6, [r7]
 8004edc:	2001      	movs	r0, #1
 8004ede:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ee2:	3101      	adds	r1, #1
 8004ee4:	1052      	asrs	r2, r2, #1
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	e7cd      	b.n	8004e86 <_strtod_l+0x4c6>
 8004eea:	d0ef      	beq.n	8004ecc <_strtod_l+0x50c>
 8004eec:	4252      	negs	r2, r2
 8004eee:	f012 000f 	ands.w	r0, r2, #15
 8004ef2:	d00a      	beq.n	8004f0a <_strtod_l+0x54a>
 8004ef4:	4911      	ldr	r1, [pc, #68]	; (8004f3c <_strtod_l+0x57c>)
 8004ef6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004efa:	ed91 7b00 	vldr	d7, [r1]
 8004efe:	ec49 8b16 	vmov	d6, r8, r9
 8004f02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004f06:	ec59 8b17 	vmov	r8, r9, d7
 8004f0a:	1112      	asrs	r2, r2, #4
 8004f0c:	d0de      	beq.n	8004ecc <_strtod_l+0x50c>
 8004f0e:	2a1f      	cmp	r2, #31
 8004f10:	dd1e      	ble.n	8004f50 <_strtod_l+0x590>
 8004f12:	2500      	movs	r5, #0
 8004f14:	462e      	mov	r6, r5
 8004f16:	9507      	str	r5, [sp, #28]
 8004f18:	462f      	mov	r7, r5
 8004f1a:	2322      	movs	r3, #34	; 0x22
 8004f1c:	f04f 0800 	mov.w	r8, #0
 8004f20:	f04f 0900 	mov.w	r9, #0
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	e78f      	b.n	8004e48 <_strtod_l+0x488>
 8004f28:	08006855 	.word	0x08006855
 8004f2c:	08006a7c 	.word	0x08006a7c
 8004f30:	0800684d 	.word	0x0800684d
 8004f34:	08006884 	.word	0x08006884
 8004f38:	08006c0d 	.word	0x08006c0d
 8004f3c:	08006990 	.word	0x08006990
 8004f40:	08006968 	.word	0x08006968
 8004f44:	7ca00000 	.word	0x7ca00000
 8004f48:	7ff00000 	.word	0x7ff00000
 8004f4c:	7fefffff 	.word	0x7fefffff
 8004f50:	f012 0110 	ands.w	r1, r2, #16
 8004f54:	bf18      	it	ne
 8004f56:	216a      	movne	r1, #106	; 0x6a
 8004f58:	9105      	str	r1, [sp, #20]
 8004f5a:	ec49 8b17 	vmov	d7, r8, r9
 8004f5e:	49be      	ldr	r1, [pc, #760]	; (8005258 <_strtod_l+0x898>)
 8004f60:	2000      	movs	r0, #0
 8004f62:	07d7      	lsls	r7, r2, #31
 8004f64:	d504      	bpl.n	8004f70 <_strtod_l+0x5b0>
 8004f66:	ed91 6b00 	vldr	d6, [r1]
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f70:	1052      	asrs	r2, r2, #1
 8004f72:	f101 0108 	add.w	r1, r1, #8
 8004f76:	d1f4      	bne.n	8004f62 <_strtod_l+0x5a2>
 8004f78:	b108      	cbz	r0, 8004f7e <_strtod_l+0x5be>
 8004f7a:	ec59 8b17 	vmov	r8, r9, d7
 8004f7e:	9a05      	ldr	r2, [sp, #20]
 8004f80:	b1ba      	cbz	r2, 8004fb2 <_strtod_l+0x5f2>
 8004f82:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8004f86:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	4648      	mov	r0, r9
 8004f8e:	dd10      	ble.n	8004fb2 <_strtod_l+0x5f2>
 8004f90:	2a1f      	cmp	r2, #31
 8004f92:	f340 812c 	ble.w	80051ee <_strtod_l+0x82e>
 8004f96:	2a34      	cmp	r2, #52	; 0x34
 8004f98:	bfde      	ittt	le
 8004f9a:	f04f 32ff 	movle.w	r2, #4294967295
 8004f9e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8004fa2:	408a      	lslle	r2, r1
 8004fa4:	f04f 0800 	mov.w	r8, #0
 8004fa8:	bfcc      	ite	gt
 8004faa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004fae:	ea02 0900 	andle.w	r9, r2, r0
 8004fb2:	ec49 8b17 	vmov	d7, r8, r9
 8004fb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fbe:	d0a8      	beq.n	8004f12 <_strtod_l+0x552>
 8004fc0:	9a07      	ldr	r2, [sp, #28]
 8004fc2:	9200      	str	r2, [sp, #0]
 8004fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff f8dd 	bl	8004188 <__s2b>
 8004fce:	9007      	str	r0, [sp, #28]
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	f43f af2f 	beq.w	8004e34 <_strtod_l+0x474>
 8004fd6:	9a06      	ldr	r2, [sp, #24]
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	ebab 0305 	sub.w	r3, fp, r5
 8004fde:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8005238 <_strtod_l+0x878>
 8004fe2:	bfa8      	it	ge
 8004fe4:	2300      	movge	r3, #0
 8004fe6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8005240 <_strtod_l+0x880>
 8004fea:	ed9f bb97 	vldr	d11, [pc, #604]	; 8005248 <_strtod_l+0x888>
 8004fee:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ff8:	462e      	mov	r6, r5
 8004ffa:	9b07      	ldr	r3, [sp, #28]
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	6859      	ldr	r1, [r3, #4]
 8005000:	f7ff f81a 	bl	8004038 <_Balloc>
 8005004:	4607      	mov	r7, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	f43f af18 	beq.w	8004e3c <_strtod_l+0x47c>
 800500c:	9b07      	ldr	r3, [sp, #28]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	3202      	adds	r2, #2
 8005012:	f103 010c 	add.w	r1, r3, #12
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	300c      	adds	r0, #12
 800501a:	f000 fd4f 	bl	8005abc <memcpy>
 800501e:	ec49 8b10 	vmov	d0, r8, r9
 8005022:	aa14      	add	r2, sp, #80	; 0x50
 8005024:	a913      	add	r1, sp, #76	; 0x4c
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff fbe2 	bl	80047f0 <__d2b>
 800502c:	ec49 8b18 	vmov	d8, r8, r9
 8005030:	9012      	str	r0, [sp, #72]	; 0x48
 8005032:	2800      	cmp	r0, #0
 8005034:	f43f af02 	beq.w	8004e3c <_strtod_l+0x47c>
 8005038:	2101      	movs	r1, #1
 800503a:	4620      	mov	r0, r4
 800503c:	f7ff f93c 	bl	80042b8 <__i2b>
 8005040:	4606      	mov	r6, r0
 8005042:	2800      	cmp	r0, #0
 8005044:	f43f aefa 	beq.w	8004e3c <_strtod_l+0x47c>
 8005048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800504a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfab      	itete	ge
 8005050:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8005052:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8005054:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8005058:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800505c:	bfac      	ite	ge
 800505e:	eb03 0b02 	addge.w	fp, r3, r2
 8005062:	eba2 0a03 	sublt.w	sl, r2, r3
 8005066:	9a05      	ldr	r2, [sp, #20]
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	440b      	add	r3, r1
 800506c:	4a7b      	ldr	r2, [pc, #492]	; (800525c <_strtod_l+0x89c>)
 800506e:	3b01      	subs	r3, #1
 8005070:	4293      	cmp	r3, r2
 8005072:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8005076:	f280 80cd 	bge.w	8005214 <_strtod_l+0x854>
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	2a1f      	cmp	r2, #31
 800507e:	eba1 0102 	sub.w	r1, r1, r2
 8005082:	f04f 0001 	mov.w	r0, #1
 8005086:	f300 80b9 	bgt.w	80051fc <_strtod_l+0x83c>
 800508a:	fa00 f302 	lsl.w	r3, r0, r2
 800508e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005090:	2300      	movs	r3, #0
 8005092:	930a      	str	r3, [sp, #40]	; 0x28
 8005094:	eb0b 0301 	add.w	r3, fp, r1
 8005098:	9a05      	ldr	r2, [sp, #20]
 800509a:	459b      	cmp	fp, r3
 800509c:	448a      	add	sl, r1
 800509e:	4492      	add	sl, r2
 80050a0:	465a      	mov	r2, fp
 80050a2:	bfa8      	it	ge
 80050a4:	461a      	movge	r2, r3
 80050a6:	4552      	cmp	r2, sl
 80050a8:	bfa8      	it	ge
 80050aa:	4652      	movge	r2, sl
 80050ac:	2a00      	cmp	r2, #0
 80050ae:	bfc2      	ittt	gt
 80050b0:	1a9b      	subgt	r3, r3, r2
 80050b2:	ebaa 0a02 	subgt.w	sl, sl, r2
 80050b6:	ebab 0b02 	subgt.w	fp, fp, r2
 80050ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050bc:	2a00      	cmp	r2, #0
 80050be:	dd18      	ble.n	80050f2 <_strtod_l+0x732>
 80050c0:	4631      	mov	r1, r6
 80050c2:	4620      	mov	r0, r4
 80050c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80050c6:	f7ff f9b7 	bl	8004438 <__pow5mult>
 80050ca:	4606      	mov	r6, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	f43f aeb5 	beq.w	8004e3c <_strtod_l+0x47c>
 80050d2:	4601      	mov	r1, r0
 80050d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050d6:	4620      	mov	r0, r4
 80050d8:	f7ff f904 	bl	80042e4 <__multiply>
 80050dc:	900e      	str	r0, [sp, #56]	; 0x38
 80050de:	2800      	cmp	r0, #0
 80050e0:	f43f aeac 	beq.w	8004e3c <_strtod_l+0x47c>
 80050e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7fe ffe6 	bl	80040b8 <_Bfree>
 80050ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050f0:	9212      	str	r2, [sp, #72]	; 0x48
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f300 8093 	bgt.w	800521e <_strtod_l+0x85e>
 80050f8:	9b06      	ldr	r3, [sp, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dd08      	ble.n	8005110 <_strtod_l+0x750>
 80050fe:	4639      	mov	r1, r7
 8005100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005102:	4620      	mov	r0, r4
 8005104:	f7ff f998 	bl	8004438 <__pow5mult>
 8005108:	4607      	mov	r7, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	f43f ae96 	beq.w	8004e3c <_strtod_l+0x47c>
 8005110:	f1ba 0f00 	cmp.w	sl, #0
 8005114:	dd08      	ble.n	8005128 <_strtod_l+0x768>
 8005116:	4639      	mov	r1, r7
 8005118:	4652      	mov	r2, sl
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff f9e6 	bl	80044ec <__lshift>
 8005120:	4607      	mov	r7, r0
 8005122:	2800      	cmp	r0, #0
 8005124:	f43f ae8a 	beq.w	8004e3c <_strtod_l+0x47c>
 8005128:	f1bb 0f00 	cmp.w	fp, #0
 800512c:	dd08      	ble.n	8005140 <_strtod_l+0x780>
 800512e:	4631      	mov	r1, r6
 8005130:	465a      	mov	r2, fp
 8005132:	4620      	mov	r0, r4
 8005134:	f7ff f9da 	bl	80044ec <__lshift>
 8005138:	4606      	mov	r6, r0
 800513a:	2800      	cmp	r0, #0
 800513c:	f43f ae7e 	beq.w	8004e3c <_strtod_l+0x47c>
 8005140:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005142:	463a      	mov	r2, r7
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff fa59 	bl	80045fc <__mdiff>
 800514a:	4605      	mov	r5, r0
 800514c:	2800      	cmp	r0, #0
 800514e:	f43f ae75 	beq.w	8004e3c <_strtod_l+0x47c>
 8005152:	2300      	movs	r3, #0
 8005154:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8005158:	60c3      	str	r3, [r0, #12]
 800515a:	4631      	mov	r1, r6
 800515c:	f7ff fa32 	bl	80045c4 <__mcmp>
 8005160:	2800      	cmp	r0, #0
 8005162:	da7f      	bge.n	8005264 <_strtod_l+0x8a4>
 8005164:	ea5a 0a08 	orrs.w	sl, sl, r8
 8005168:	f040 80a5 	bne.w	80052b6 <_strtod_l+0x8f6>
 800516c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 80a0 	bne.w	80052b6 <_strtod_l+0x8f6>
 8005176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800517a:	0d1b      	lsrs	r3, r3, #20
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005182:	f240 8098 	bls.w	80052b6 <_strtod_l+0x8f6>
 8005186:	696b      	ldr	r3, [r5, #20]
 8005188:	b91b      	cbnz	r3, 8005192 <_strtod_l+0x7d2>
 800518a:	692b      	ldr	r3, [r5, #16]
 800518c:	2b01      	cmp	r3, #1
 800518e:	f340 8092 	ble.w	80052b6 <_strtod_l+0x8f6>
 8005192:	4629      	mov	r1, r5
 8005194:	2201      	movs	r2, #1
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff f9a8 	bl	80044ec <__lshift>
 800519c:	4631      	mov	r1, r6
 800519e:	4605      	mov	r5, r0
 80051a0:	f7ff fa10 	bl	80045c4 <__mcmp>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f340 8086 	ble.w	80052b6 <_strtod_l+0x8f6>
 80051aa:	9905      	ldr	r1, [sp, #20]
 80051ac:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <_strtod_l+0x8a0>)
 80051ae:	464b      	mov	r3, r9
 80051b0:	2900      	cmp	r1, #0
 80051b2:	f000 809f 	beq.w	80052f4 <_strtod_l+0x934>
 80051b6:	ea02 0109 	and.w	r1, r2, r9
 80051ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80051be:	f300 8099 	bgt.w	80052f4 <_strtod_l+0x934>
 80051c2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80051c6:	f77f aea8 	ble.w	8004f1a <_strtod_l+0x55a>
 80051ca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005250 <_strtod_l+0x890>
 80051ce:	ec49 8b16 	vmov	d6, r8, r9
 80051d2:	4b23      	ldr	r3, [pc, #140]	; (8005260 <_strtod_l+0x8a0>)
 80051d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051d8:	ee17 2a90 	vmov	r2, s15
 80051dc:	4013      	ands	r3, r2
 80051de:	ec59 8b17 	vmov	r8, r9, d7
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f47f ae34 	bne.w	8004e50 <_strtod_l+0x490>
 80051e8:	2322      	movs	r3, #34	; 0x22
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	e630      	b.n	8004e50 <_strtod_l+0x490>
 80051ee:	f04f 31ff 	mov.w	r1, #4294967295
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	ea02 0808 	and.w	r8, r2, r8
 80051fa:	e6da      	b.n	8004fb2 <_strtod_l+0x5f2>
 80051fc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005200:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005204:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005208:	33e2      	adds	r3, #226	; 0xe2
 800520a:	fa00 f303 	lsl.w	r3, r0, r3
 800520e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8005212:	e73f      	b.n	8005094 <_strtod_l+0x6d4>
 8005214:	2200      	movs	r2, #0
 8005216:	2301      	movs	r3, #1
 8005218:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800521c:	e73a      	b.n	8005094 <_strtod_l+0x6d4>
 800521e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005220:	461a      	mov	r2, r3
 8005222:	4620      	mov	r0, r4
 8005224:	f7ff f962 	bl	80044ec <__lshift>
 8005228:	9012      	str	r0, [sp, #72]	; 0x48
 800522a:	2800      	cmp	r0, #0
 800522c:	f47f af64 	bne.w	80050f8 <_strtod_l+0x738>
 8005230:	e604      	b.n	8004e3c <_strtod_l+0x47c>
 8005232:	bf00      	nop
 8005234:	f3af 8000 	nop.w
 8005238:	94a03595 	.word	0x94a03595
 800523c:	3fcfffff 	.word	0x3fcfffff
 8005240:	94a03595 	.word	0x94a03595
 8005244:	3fdfffff 	.word	0x3fdfffff
 8005248:	35afe535 	.word	0x35afe535
 800524c:	3fe00000 	.word	0x3fe00000
 8005250:	00000000 	.word	0x00000000
 8005254:	39500000 	.word	0x39500000
 8005258:	08006a90 	.word	0x08006a90
 800525c:	fffffc02 	.word	0xfffffc02
 8005260:	7ff00000 	.word	0x7ff00000
 8005264:	46cb      	mov	fp, r9
 8005266:	d15f      	bne.n	8005328 <_strtod_l+0x968>
 8005268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800526c:	f1ba 0f00 	cmp.w	sl, #0
 8005270:	d02a      	beq.n	80052c8 <_strtod_l+0x908>
 8005272:	4aa7      	ldr	r2, [pc, #668]	; (8005510 <_strtod_l+0xb50>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d12b      	bne.n	80052d0 <_strtod_l+0x910>
 8005278:	9b05      	ldr	r3, [sp, #20]
 800527a:	4642      	mov	r2, r8
 800527c:	b1fb      	cbz	r3, 80052be <_strtod_l+0x8fe>
 800527e:	4ba5      	ldr	r3, [pc, #660]	; (8005514 <_strtod_l+0xb54>)
 8005280:	ea09 0303 	and.w	r3, r9, r3
 8005284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005288:	f04f 31ff 	mov.w	r1, #4294967295
 800528c:	d81a      	bhi.n	80052c4 <_strtod_l+0x904>
 800528e:	0d1b      	lsrs	r3, r3, #20
 8005290:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	429a      	cmp	r2, r3
 800529a:	d119      	bne.n	80052d0 <_strtod_l+0x910>
 800529c:	4b9e      	ldr	r3, [pc, #632]	; (8005518 <_strtod_l+0xb58>)
 800529e:	459b      	cmp	fp, r3
 80052a0:	d102      	bne.n	80052a8 <_strtod_l+0x8e8>
 80052a2:	3201      	adds	r2, #1
 80052a4:	f43f adca 	beq.w	8004e3c <_strtod_l+0x47c>
 80052a8:	4b9a      	ldr	r3, [pc, #616]	; (8005514 <_strtod_l+0xb54>)
 80052aa:	ea0b 0303 	and.w	r3, fp, r3
 80052ae:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d186      	bne.n	80051ca <_strtod_l+0x80a>
 80052bc:	e5c8      	b.n	8004e50 <_strtod_l+0x490>
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	e7e9      	b.n	8005298 <_strtod_l+0x8d8>
 80052c4:	460b      	mov	r3, r1
 80052c6:	e7e7      	b.n	8005298 <_strtod_l+0x8d8>
 80052c8:	ea53 0308 	orrs.w	r3, r3, r8
 80052cc:	f43f af6d 	beq.w	80051aa <_strtod_l+0x7ea>
 80052d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d2:	b1cb      	cbz	r3, 8005308 <_strtod_l+0x948>
 80052d4:	ea13 0f0b 	tst.w	r3, fp
 80052d8:	d0ed      	beq.n	80052b6 <_strtod_l+0x8f6>
 80052da:	9a05      	ldr	r2, [sp, #20]
 80052dc:	4640      	mov	r0, r8
 80052de:	4649      	mov	r1, r9
 80052e0:	f1ba 0f00 	cmp.w	sl, #0
 80052e4:	d014      	beq.n	8005310 <_strtod_l+0x950>
 80052e6:	f7ff fb51 	bl	800498c <sulp>
 80052ea:	ee38 7b00 	vadd.f64	d7, d8, d0
 80052ee:	ec59 8b17 	vmov	r8, r9, d7
 80052f2:	e7e0      	b.n	80052b6 <_strtod_l+0x8f6>
 80052f4:	4013      	ands	r3, r2
 80052f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80052fa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80052fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005302:	f04f 38ff 	mov.w	r8, #4294967295
 8005306:	e7d6      	b.n	80052b6 <_strtod_l+0x8f6>
 8005308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800530a:	ea13 0f08 	tst.w	r3, r8
 800530e:	e7e3      	b.n	80052d8 <_strtod_l+0x918>
 8005310:	f7ff fb3c 	bl	800498c <sulp>
 8005314:	ee38 0b40 	vsub.f64	d0, d8, d0
 8005318:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	ec59 8b10 	vmov	r8, r9, d0
 8005324:	d1c7      	bne.n	80052b6 <_strtod_l+0x8f6>
 8005326:	e5f8      	b.n	8004f1a <_strtod_l+0x55a>
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	f7ff faba 	bl	80048a4 <__ratio>
 8005330:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8005334:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	d85f      	bhi.n	80053fe <_strtod_l+0xa3e>
 800533e:	f1ba 0f00 	cmp.w	sl, #0
 8005342:	d166      	bne.n	8005412 <_strtod_l+0xa52>
 8005344:	f1b8 0f00 	cmp.w	r8, #0
 8005348:	d14d      	bne.n	80053e6 <_strtod_l+0xa26>
 800534a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800534e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d162      	bne.n	800541c <_strtod_l+0xa5c>
 8005356:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800535a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	d401      	bmi.n	8005368 <_strtod_l+0x9a8>
 8005364:	ee20 db0d 	vmul.f64	d13, d0, d13
 8005368:	eeb1 cb4d 	vneg.f64	d12, d13
 800536c:	4869      	ldr	r0, [pc, #420]	; (8005514 <_strtod_l+0xb54>)
 800536e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8005520 <_strtod_l+0xb60>
 8005372:	ea0b 0100 	and.w	r1, fp, r0
 8005376:	4561      	cmp	r1, ip
 8005378:	ec53 2b1c 	vmov	r2, r3, d12
 800537c:	d17a      	bne.n	8005474 <_strtod_l+0xab4>
 800537e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8005382:	ec49 8b10 	vmov	d0, r8, r9
 8005386:	910a      	str	r1, [sp, #40]	; 0x28
 8005388:	f7ff f9c2 	bl	8004710 <__ulp>
 800538c:	ec49 8b1e 	vmov	d14, r8, r9
 8005390:	4860      	ldr	r0, [pc, #384]	; (8005514 <_strtod_l+0xb54>)
 8005392:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8005396:	ee1e 3a90 	vmov	r3, s29
 800539a:	4a60      	ldr	r2, [pc, #384]	; (800551c <_strtod_l+0xb5c>)
 800539c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800539e:	4018      	ands	r0, r3
 80053a0:	4290      	cmp	r0, r2
 80053a2:	ec59 8b1e 	vmov	r8, r9, d14
 80053a6:	d93c      	bls.n	8005422 <_strtod_l+0xa62>
 80053a8:	ee18 2a90 	vmov	r2, s17
 80053ac:	4b5a      	ldr	r3, [pc, #360]	; (8005518 <_strtod_l+0xb58>)
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d104      	bne.n	80053bc <_strtod_l+0x9fc>
 80053b2:	ee18 3a10 	vmov	r3, s16
 80053b6:	3301      	adds	r3, #1
 80053b8:	f43f ad40 	beq.w	8004e3c <_strtod_l+0x47c>
 80053bc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8005518 <_strtod_l+0xb58>
 80053c0:	f04f 38ff 	mov.w	r8, #4294967295
 80053c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7fe fe76 	bl	80040b8 <_Bfree>
 80053cc:	4639      	mov	r1, r7
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7fe fe72 	bl	80040b8 <_Bfree>
 80053d4:	4631      	mov	r1, r6
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7fe fe6e 	bl	80040b8 <_Bfree>
 80053dc:	4629      	mov	r1, r5
 80053de:	4620      	mov	r0, r4
 80053e0:	f7fe fe6a 	bl	80040b8 <_Bfree>
 80053e4:	e609      	b.n	8004ffa <_strtod_l+0x63a>
 80053e6:	f1b8 0f01 	cmp.w	r8, #1
 80053ea:	d103      	bne.n	80053f4 <_strtod_l+0xa34>
 80053ec:	f1b9 0f00 	cmp.w	r9, #0
 80053f0:	f43f ad93 	beq.w	8004f1a <_strtod_l+0x55a>
 80053f4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80053f8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80053fc:	e7b6      	b.n	800536c <_strtod_l+0x9ac>
 80053fe:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8005402:	ee20 db0d 	vmul.f64	d13, d0, d13
 8005406:	f1ba 0f00 	cmp.w	sl, #0
 800540a:	d0ad      	beq.n	8005368 <_strtod_l+0x9a8>
 800540c:	eeb0 cb4d 	vmov.f64	d12, d13
 8005410:	e7ac      	b.n	800536c <_strtod_l+0x9ac>
 8005412:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8005416:	eeb0 db4c 	vmov.f64	d13, d12
 800541a:	e7a7      	b.n	800536c <_strtod_l+0x9ac>
 800541c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8005420:	e7a4      	b.n	800536c <_strtod_l+0x9ac>
 8005422:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005426:	9b05      	ldr	r3, [sp, #20]
 8005428:	46cb      	mov	fp, r9
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ca      	bne.n	80053c4 <_strtod_l+0xa04>
 800542e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005432:	0d1b      	lsrs	r3, r3, #20
 8005434:	051b      	lsls	r3, r3, #20
 8005436:	4299      	cmp	r1, r3
 8005438:	d1c4      	bne.n	80053c4 <_strtod_l+0xa04>
 800543a:	ec51 0b1d 	vmov	r0, r1, d13
 800543e:	f7fb f92b 	bl	8000698 <__aeabi_d2lz>
 8005442:	f7fb f8e3 	bl	800060c <__aeabi_l2d>
 8005446:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800544a:	ec41 0b17 	vmov	d7, r0, r1
 800544e:	ea4b 0b08 	orr.w	fp, fp, r8
 8005452:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8005456:	ee3d db47 	vsub.f64	d13, d13, d7
 800545a:	d03c      	beq.n	80054d6 <_strtod_l+0xb16>
 800545c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8005460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005464:	f53f acf4 	bmi.w	8004e50 <_strtod_l+0x490>
 8005468:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	dda8      	ble.n	80053c4 <_strtod_l+0xa04>
 8005472:	e4ed      	b.n	8004e50 <_strtod_l+0x490>
 8005474:	9805      	ldr	r0, [sp, #20]
 8005476:	b1f0      	cbz	r0, 80054b6 <_strtod_l+0xaf6>
 8005478:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800547c:	d81b      	bhi.n	80054b6 <_strtod_l+0xaf6>
 800547e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8005508 <_strtod_l+0xb48>
 8005482:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8005486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548a:	d811      	bhi.n	80054b0 <_strtod_l+0xaf0>
 800548c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8005490:	ee1d 3a10 	vmov	r3, s26
 8005494:	2b01      	cmp	r3, #1
 8005496:	bf38      	it	cc
 8005498:	2301      	movcc	r3, #1
 800549a:	ee0d 3a10 	vmov	s26, r3
 800549e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80054a2:	f1ba 0f00 	cmp.w	sl, #0
 80054a6:	d113      	bne.n	80054d0 <_strtod_l+0xb10>
 80054a8:	eeb1 7b4d 	vneg.f64	d7, d13
 80054ac:	ec53 2b17 	vmov	r2, r3, d7
 80054b0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80054b4:	1a43      	subs	r3, r0, r1
 80054b6:	eeb0 0b48 	vmov.f64	d0, d8
 80054ba:	ec43 2b1c 	vmov	d12, r2, r3
 80054be:	910a      	str	r1, [sp, #40]	; 0x28
 80054c0:	f7ff f926 	bl	8004710 <__ulp>
 80054c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054c6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80054ca:	ec59 8b18 	vmov	r8, r9, d8
 80054ce:	e7aa      	b.n	8005426 <_strtod_l+0xa66>
 80054d0:	eeb0 7b4d 	vmov.f64	d7, d13
 80054d4:	e7ea      	b.n	80054ac <_strtod_l+0xaec>
 80054d6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	f57f af71 	bpl.w	80053c4 <_strtod_l+0xa04>
 80054e2:	e4b5      	b.n	8004e50 <_strtod_l+0x490>
 80054e4:	2300      	movs	r3, #0
 80054e6:	9308      	str	r3, [sp, #32]
 80054e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	f7ff baa6 	b.w	8004a3e <_strtod_l+0x7e>
 80054f2:	2a65      	cmp	r2, #101	; 0x65
 80054f4:	f43f aba2 	beq.w	8004c3c <_strtod_l+0x27c>
 80054f8:	2a45      	cmp	r2, #69	; 0x45
 80054fa:	f43f ab9f 	beq.w	8004c3c <_strtod_l+0x27c>
 80054fe:	2101      	movs	r1, #1
 8005500:	f7ff bbd8 	b.w	8004cb4 <_strtod_l+0x2f4>
 8005504:	f3af 8000 	nop.w
 8005508:	ffc00000 	.word	0xffc00000
 800550c:	41dfffff 	.word	0x41dfffff
 8005510:	000fffff 	.word	0x000fffff
 8005514:	7ff00000 	.word	0x7ff00000
 8005518:	7fefffff 	.word	0x7fefffff
 800551c:	7c9fffff 	.word	0x7c9fffff
 8005520:	7fe00000 	.word	0x7fe00000

08005524 <_strtod_r>:
 8005524:	4b01      	ldr	r3, [pc, #4]	; (800552c <_strtod_r+0x8>)
 8005526:	f7ff ba4b 	b.w	80049c0 <_strtod_l>
 800552a:	bf00      	nop
 800552c:	200000b0 	.word	0x200000b0

08005530 <_strtol_l.constprop.0>:
 8005530:	2b01      	cmp	r3, #1
 8005532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005536:	d001      	beq.n	800553c <_strtol_l.constprop.0+0xc>
 8005538:	2b24      	cmp	r3, #36	; 0x24
 800553a:	d906      	bls.n	800554a <_strtol_l.constprop.0+0x1a>
 800553c:	f7fd fe54 	bl	80031e8 <__errno>
 8005540:	2316      	movs	r3, #22
 8005542:	6003      	str	r3, [r0, #0]
 8005544:	2000      	movs	r0, #0
 8005546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005630 <_strtol_l.constprop.0+0x100>
 800554e:	460d      	mov	r5, r1
 8005550:	462e      	mov	r6, r5
 8005552:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005556:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800555a:	f017 0708 	ands.w	r7, r7, #8
 800555e:	d1f7      	bne.n	8005550 <_strtol_l.constprop.0+0x20>
 8005560:	2c2d      	cmp	r4, #45	; 0x2d
 8005562:	d132      	bne.n	80055ca <_strtol_l.constprop.0+0x9a>
 8005564:	782c      	ldrb	r4, [r5, #0]
 8005566:	2701      	movs	r7, #1
 8005568:	1cb5      	adds	r5, r6, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d05b      	beq.n	8005626 <_strtol_l.constprop.0+0xf6>
 800556e:	2b10      	cmp	r3, #16
 8005570:	d109      	bne.n	8005586 <_strtol_l.constprop.0+0x56>
 8005572:	2c30      	cmp	r4, #48	; 0x30
 8005574:	d107      	bne.n	8005586 <_strtol_l.constprop.0+0x56>
 8005576:	782c      	ldrb	r4, [r5, #0]
 8005578:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800557c:	2c58      	cmp	r4, #88	; 0x58
 800557e:	d14d      	bne.n	800561c <_strtol_l.constprop.0+0xec>
 8005580:	786c      	ldrb	r4, [r5, #1]
 8005582:	2310      	movs	r3, #16
 8005584:	3502      	adds	r5, #2
 8005586:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800558a:	f108 38ff 	add.w	r8, r8, #4294967295
 800558e:	f04f 0e00 	mov.w	lr, #0
 8005592:	fbb8 f9f3 	udiv	r9, r8, r3
 8005596:	4676      	mov	r6, lr
 8005598:	fb03 8a19 	mls	sl, r3, r9, r8
 800559c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80055a0:	f1bc 0f09 	cmp.w	ip, #9
 80055a4:	d816      	bhi.n	80055d4 <_strtol_l.constprop.0+0xa4>
 80055a6:	4664      	mov	r4, ip
 80055a8:	42a3      	cmp	r3, r4
 80055aa:	dd24      	ble.n	80055f6 <_strtol_l.constprop.0+0xc6>
 80055ac:	f1be 3fff 	cmp.w	lr, #4294967295
 80055b0:	d008      	beq.n	80055c4 <_strtol_l.constprop.0+0x94>
 80055b2:	45b1      	cmp	r9, r6
 80055b4:	d31c      	bcc.n	80055f0 <_strtol_l.constprop.0+0xc0>
 80055b6:	d101      	bne.n	80055bc <_strtol_l.constprop.0+0x8c>
 80055b8:	45a2      	cmp	sl, r4
 80055ba:	db19      	blt.n	80055f0 <_strtol_l.constprop.0+0xc0>
 80055bc:	fb06 4603 	mla	r6, r6, r3, r4
 80055c0:	f04f 0e01 	mov.w	lr, #1
 80055c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055c8:	e7e8      	b.n	800559c <_strtol_l.constprop.0+0x6c>
 80055ca:	2c2b      	cmp	r4, #43	; 0x2b
 80055cc:	bf04      	itt	eq
 80055ce:	782c      	ldrbeq	r4, [r5, #0]
 80055d0:	1cb5      	addeq	r5, r6, #2
 80055d2:	e7ca      	b.n	800556a <_strtol_l.constprop.0+0x3a>
 80055d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80055d8:	f1bc 0f19 	cmp.w	ip, #25
 80055dc:	d801      	bhi.n	80055e2 <_strtol_l.constprop.0+0xb2>
 80055de:	3c37      	subs	r4, #55	; 0x37
 80055e0:	e7e2      	b.n	80055a8 <_strtol_l.constprop.0+0x78>
 80055e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80055e6:	f1bc 0f19 	cmp.w	ip, #25
 80055ea:	d804      	bhi.n	80055f6 <_strtol_l.constprop.0+0xc6>
 80055ec:	3c57      	subs	r4, #87	; 0x57
 80055ee:	e7db      	b.n	80055a8 <_strtol_l.constprop.0+0x78>
 80055f0:	f04f 3eff 	mov.w	lr, #4294967295
 80055f4:	e7e6      	b.n	80055c4 <_strtol_l.constprop.0+0x94>
 80055f6:	f1be 3fff 	cmp.w	lr, #4294967295
 80055fa:	d105      	bne.n	8005608 <_strtol_l.constprop.0+0xd8>
 80055fc:	2322      	movs	r3, #34	; 0x22
 80055fe:	6003      	str	r3, [r0, #0]
 8005600:	4646      	mov	r6, r8
 8005602:	b942      	cbnz	r2, 8005616 <_strtol_l.constprop.0+0xe6>
 8005604:	4630      	mov	r0, r6
 8005606:	e79e      	b.n	8005546 <_strtol_l.constprop.0+0x16>
 8005608:	b107      	cbz	r7, 800560c <_strtol_l.constprop.0+0xdc>
 800560a:	4276      	negs	r6, r6
 800560c:	2a00      	cmp	r2, #0
 800560e:	d0f9      	beq.n	8005604 <_strtol_l.constprop.0+0xd4>
 8005610:	f1be 0f00 	cmp.w	lr, #0
 8005614:	d000      	beq.n	8005618 <_strtol_l.constprop.0+0xe8>
 8005616:	1e69      	subs	r1, r5, #1
 8005618:	6011      	str	r1, [r2, #0]
 800561a:	e7f3      	b.n	8005604 <_strtol_l.constprop.0+0xd4>
 800561c:	2430      	movs	r4, #48	; 0x30
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1b1      	bne.n	8005586 <_strtol_l.constprop.0+0x56>
 8005622:	2308      	movs	r3, #8
 8005624:	e7af      	b.n	8005586 <_strtol_l.constprop.0+0x56>
 8005626:	2c30      	cmp	r4, #48	; 0x30
 8005628:	d0a5      	beq.n	8005576 <_strtol_l.constprop.0+0x46>
 800562a:	230a      	movs	r3, #10
 800562c:	e7ab      	b.n	8005586 <_strtol_l.constprop.0+0x56>
 800562e:	bf00      	nop
 8005630:	08006ab9 	.word	0x08006ab9

08005634 <_strtol_r>:
 8005634:	f7ff bf7c 	b.w	8005530 <_strtol_l.constprop.0>

08005638 <__ssputs_r>:
 8005638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	688e      	ldr	r6, [r1, #8]
 800563e:	461f      	mov	r7, r3
 8005640:	42be      	cmp	r6, r7
 8005642:	680b      	ldr	r3, [r1, #0]
 8005644:	4682      	mov	sl, r0
 8005646:	460c      	mov	r4, r1
 8005648:	4690      	mov	r8, r2
 800564a:	d82c      	bhi.n	80056a6 <__ssputs_r+0x6e>
 800564c:	898a      	ldrh	r2, [r1, #12]
 800564e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005652:	d026      	beq.n	80056a2 <__ssputs_r+0x6a>
 8005654:	6965      	ldr	r5, [r4, #20]
 8005656:	6909      	ldr	r1, [r1, #16]
 8005658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800565c:	eba3 0901 	sub.w	r9, r3, r1
 8005660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005664:	1c7b      	adds	r3, r7, #1
 8005666:	444b      	add	r3, r9
 8005668:	106d      	asrs	r5, r5, #1
 800566a:	429d      	cmp	r5, r3
 800566c:	bf38      	it	cc
 800566e:	461d      	movcc	r5, r3
 8005670:	0553      	lsls	r3, r2, #21
 8005672:	d527      	bpl.n	80056c4 <__ssputs_r+0x8c>
 8005674:	4629      	mov	r1, r5
 8005676:	f7fe fc53 	bl	8003f20 <_malloc_r>
 800567a:	4606      	mov	r6, r0
 800567c:	b360      	cbz	r0, 80056d8 <__ssputs_r+0xa0>
 800567e:	6921      	ldr	r1, [r4, #16]
 8005680:	464a      	mov	r2, r9
 8005682:	f000 fa1b 	bl	8005abc <memcpy>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800568c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	6126      	str	r6, [r4, #16]
 8005694:	6165      	str	r5, [r4, #20]
 8005696:	444e      	add	r6, r9
 8005698:	eba5 0509 	sub.w	r5, r5, r9
 800569c:	6026      	str	r6, [r4, #0]
 800569e:	60a5      	str	r5, [r4, #8]
 80056a0:	463e      	mov	r6, r7
 80056a2:	42be      	cmp	r6, r7
 80056a4:	d900      	bls.n	80056a8 <__ssputs_r+0x70>
 80056a6:	463e      	mov	r6, r7
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	4632      	mov	r2, r6
 80056ac:	4641      	mov	r1, r8
 80056ae:	f000 f9c9 	bl	8005a44 <memmove>
 80056b2:	68a3      	ldr	r3, [r4, #8]
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	60a3      	str	r3, [r4, #8]
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	4433      	add	r3, r6
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	2000      	movs	r0, #0
 80056c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c4:	462a      	mov	r2, r5
 80056c6:	f000 fdac 	bl	8006222 <_realloc_r>
 80056ca:	4606      	mov	r6, r0
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d1e0      	bne.n	8005692 <__ssputs_r+0x5a>
 80056d0:	6921      	ldr	r1, [r4, #16]
 80056d2:	4650      	mov	r0, sl
 80056d4:	f7fe fbb0 	bl	8003e38 <_free_r>
 80056d8:	230c      	movs	r3, #12
 80056da:	f8ca 3000 	str.w	r3, [sl]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	e7e9      	b.n	80056c0 <__ssputs_r+0x88>

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	4698      	mov	r8, r3
 80056f2:	898b      	ldrh	r3, [r1, #12]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	b09d      	sub	sp, #116	; 0x74
 80056f8:	4607      	mov	r7, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	4614      	mov	r4, r2
 80056fe:	d50e      	bpl.n	800571e <_svfiprintf_r+0x32>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b963      	cbnz	r3, 800571e <_svfiprintf_r+0x32>
 8005704:	2140      	movs	r1, #64	; 0x40
 8005706:	f7fe fc0b 	bl	8003f20 <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b920      	cbnz	r0, 800571a <_svfiprintf_r+0x2e>
 8005710:	230c      	movs	r3, #12
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e0d0      	b.n	80058bc <_svfiprintf_r+0x1d0>
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	616b      	str	r3, [r5, #20]
 800571e:	2300      	movs	r3, #0
 8005720:	9309      	str	r3, [sp, #36]	; 0x24
 8005722:	2320      	movs	r3, #32
 8005724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005728:	f8cd 800c 	str.w	r8, [sp, #12]
 800572c:	2330      	movs	r3, #48	; 0x30
 800572e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058d4 <_svfiprintf_r+0x1e8>
 8005732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005736:	f04f 0901 	mov.w	r9, #1
 800573a:	4623      	mov	r3, r4
 800573c:	469a      	mov	sl, r3
 800573e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005742:	b10a      	cbz	r2, 8005748 <_svfiprintf_r+0x5c>
 8005744:	2a25      	cmp	r2, #37	; 0x25
 8005746:	d1f9      	bne.n	800573c <_svfiprintf_r+0x50>
 8005748:	ebba 0b04 	subs.w	fp, sl, r4
 800574c:	d00b      	beq.n	8005766 <_svfiprintf_r+0x7a>
 800574e:	465b      	mov	r3, fp
 8005750:	4622      	mov	r2, r4
 8005752:	4629      	mov	r1, r5
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff ff6f 	bl	8005638 <__ssputs_r>
 800575a:	3001      	adds	r0, #1
 800575c:	f000 80a9 	beq.w	80058b2 <_svfiprintf_r+0x1c6>
 8005760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005762:	445a      	add	r2, fp
 8005764:	9209      	str	r2, [sp, #36]	; 0x24
 8005766:	f89a 3000 	ldrb.w	r3, [sl]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a1 	beq.w	80058b2 <_svfiprintf_r+0x1c6>
 8005770:	2300      	movs	r3, #0
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577a:	f10a 0a01 	add.w	sl, sl, #1
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	9307      	str	r3, [sp, #28]
 8005782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005786:	931a      	str	r3, [sp, #104]	; 0x68
 8005788:	4654      	mov	r4, sl
 800578a:	2205      	movs	r2, #5
 800578c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005790:	4850      	ldr	r0, [pc, #320]	; (80058d4 <_svfiprintf_r+0x1e8>)
 8005792:	f7fa fd55 	bl	8000240 <memchr>
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	b9d8      	cbnz	r0, 80057d2 <_svfiprintf_r+0xe6>
 800579a:	06d0      	lsls	r0, r2, #27
 800579c:	bf44      	itt	mi
 800579e:	2320      	movmi	r3, #32
 80057a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a4:	0711      	lsls	r1, r2, #28
 80057a6:	bf44      	itt	mi
 80057a8:	232b      	movmi	r3, #43	; 0x2b
 80057aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ae:	f89a 3000 	ldrb.w	r3, [sl]
 80057b2:	2b2a      	cmp	r3, #42	; 0x2a
 80057b4:	d015      	beq.n	80057e2 <_svfiprintf_r+0xf6>
 80057b6:	9a07      	ldr	r2, [sp, #28]
 80057b8:	4654      	mov	r4, sl
 80057ba:	2000      	movs	r0, #0
 80057bc:	f04f 0c0a 	mov.w	ip, #10
 80057c0:	4621      	mov	r1, r4
 80057c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c6:	3b30      	subs	r3, #48	; 0x30
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d94d      	bls.n	8005868 <_svfiprintf_r+0x17c>
 80057cc:	b1b0      	cbz	r0, 80057fc <_svfiprintf_r+0x110>
 80057ce:	9207      	str	r2, [sp, #28]
 80057d0:	e014      	b.n	80057fc <_svfiprintf_r+0x110>
 80057d2:	eba0 0308 	sub.w	r3, r0, r8
 80057d6:	fa09 f303 	lsl.w	r3, r9, r3
 80057da:	4313      	orrs	r3, r2
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	46a2      	mov	sl, r4
 80057e0:	e7d2      	b.n	8005788 <_svfiprintf_r+0x9c>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	1d19      	adds	r1, r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	9103      	str	r1, [sp, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfbb      	ittet	lt
 80057ee:	425b      	neglt	r3, r3
 80057f0:	f042 0202 	orrlt.w	r2, r2, #2
 80057f4:	9307      	strge	r3, [sp, #28]
 80057f6:	9307      	strlt	r3, [sp, #28]
 80057f8:	bfb8      	it	lt
 80057fa:	9204      	strlt	r2, [sp, #16]
 80057fc:	7823      	ldrb	r3, [r4, #0]
 80057fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005800:	d10c      	bne.n	800581c <_svfiprintf_r+0x130>
 8005802:	7863      	ldrb	r3, [r4, #1]
 8005804:	2b2a      	cmp	r3, #42	; 0x2a
 8005806:	d134      	bne.n	8005872 <_svfiprintf_r+0x186>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	9203      	str	r2, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	bfb8      	it	lt
 8005814:	f04f 33ff 	movlt.w	r3, #4294967295
 8005818:	3402      	adds	r4, #2
 800581a:	9305      	str	r3, [sp, #20]
 800581c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058e4 <_svfiprintf_r+0x1f8>
 8005820:	7821      	ldrb	r1, [r4, #0]
 8005822:	2203      	movs	r2, #3
 8005824:	4650      	mov	r0, sl
 8005826:	f7fa fd0b 	bl	8000240 <memchr>
 800582a:	b138      	cbz	r0, 800583c <_svfiprintf_r+0x150>
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	eba0 000a 	sub.w	r0, r0, sl
 8005832:	2240      	movs	r2, #64	; 0x40
 8005834:	4082      	lsls	r2, r0
 8005836:	4313      	orrs	r3, r2
 8005838:	3401      	adds	r4, #1
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005840:	4825      	ldr	r0, [pc, #148]	; (80058d8 <_svfiprintf_r+0x1ec>)
 8005842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005846:	2206      	movs	r2, #6
 8005848:	f7fa fcfa 	bl	8000240 <memchr>
 800584c:	2800      	cmp	r0, #0
 800584e:	d038      	beq.n	80058c2 <_svfiprintf_r+0x1d6>
 8005850:	4b22      	ldr	r3, [pc, #136]	; (80058dc <_svfiprintf_r+0x1f0>)
 8005852:	bb1b      	cbnz	r3, 800589c <_svfiprintf_r+0x1b0>
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	3307      	adds	r3, #7
 8005858:	f023 0307 	bic.w	r3, r3, #7
 800585c:	3308      	adds	r3, #8
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005862:	4433      	add	r3, r6
 8005864:	9309      	str	r3, [sp, #36]	; 0x24
 8005866:	e768      	b.n	800573a <_svfiprintf_r+0x4e>
 8005868:	fb0c 3202 	mla	r2, ip, r2, r3
 800586c:	460c      	mov	r4, r1
 800586e:	2001      	movs	r0, #1
 8005870:	e7a6      	b.n	80057c0 <_svfiprintf_r+0xd4>
 8005872:	2300      	movs	r3, #0
 8005874:	3401      	adds	r4, #1
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	4619      	mov	r1, r3
 800587a:	f04f 0c0a 	mov.w	ip, #10
 800587e:	4620      	mov	r0, r4
 8005880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005884:	3a30      	subs	r2, #48	; 0x30
 8005886:	2a09      	cmp	r2, #9
 8005888:	d903      	bls.n	8005892 <_svfiprintf_r+0x1a6>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0c6      	beq.n	800581c <_svfiprintf_r+0x130>
 800588e:	9105      	str	r1, [sp, #20]
 8005890:	e7c4      	b.n	800581c <_svfiprintf_r+0x130>
 8005892:	fb0c 2101 	mla	r1, ip, r1, r2
 8005896:	4604      	mov	r4, r0
 8005898:	2301      	movs	r3, #1
 800589a:	e7f0      	b.n	800587e <_svfiprintf_r+0x192>
 800589c:	ab03      	add	r3, sp, #12
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	462a      	mov	r2, r5
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <_svfiprintf_r+0x1f4>)
 80058a4:	a904      	add	r1, sp, #16
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7fc fd8a 	bl	80023c0 <_printf_float>
 80058ac:	1c42      	adds	r2, r0, #1
 80058ae:	4606      	mov	r6, r0
 80058b0:	d1d6      	bne.n	8005860 <_svfiprintf_r+0x174>
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	065b      	lsls	r3, r3, #25
 80058b6:	f53f af2d 	bmi.w	8005714 <_svfiprintf_r+0x28>
 80058ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058bc:	b01d      	add	sp, #116	; 0x74
 80058be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c2:	ab03      	add	r3, sp, #12
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	462a      	mov	r2, r5
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <_svfiprintf_r+0x1f4>)
 80058ca:	a904      	add	r1, sp, #16
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7fc ffff 	bl	80028d0 <_printf_i>
 80058d2:	e7eb      	b.n	80058ac <_svfiprintf_r+0x1c0>
 80058d4:	08006bb9 	.word	0x08006bb9
 80058d8:	08006bc3 	.word	0x08006bc3
 80058dc:	080023c1 	.word	0x080023c1
 80058e0:	08005639 	.word	0x08005639
 80058e4:	08006bbf 	.word	0x08006bbf

080058e8 <__sflush_r>:
 80058e8:	898a      	ldrh	r2, [r1, #12]
 80058ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ee:	4605      	mov	r5, r0
 80058f0:	0710      	lsls	r0, r2, #28
 80058f2:	460c      	mov	r4, r1
 80058f4:	d458      	bmi.n	80059a8 <__sflush_r+0xc0>
 80058f6:	684b      	ldr	r3, [r1, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dc05      	bgt.n	8005908 <__sflush_r+0x20>
 80058fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	dc02      	bgt.n	8005908 <__sflush_r+0x20>
 8005902:	2000      	movs	r0, #0
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800590a:	2e00      	cmp	r6, #0
 800590c:	d0f9      	beq.n	8005902 <__sflush_r+0x1a>
 800590e:	2300      	movs	r3, #0
 8005910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005914:	682f      	ldr	r7, [r5, #0]
 8005916:	6a21      	ldr	r1, [r4, #32]
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	d032      	beq.n	8005982 <__sflush_r+0x9a>
 800591c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	075a      	lsls	r2, r3, #29
 8005922:	d505      	bpl.n	8005930 <__sflush_r+0x48>
 8005924:	6863      	ldr	r3, [r4, #4]
 8005926:	1ac0      	subs	r0, r0, r3
 8005928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800592a:	b10b      	cbz	r3, 8005930 <__sflush_r+0x48>
 800592c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800592e:	1ac0      	subs	r0, r0, r3
 8005930:	2300      	movs	r3, #0
 8005932:	4602      	mov	r2, r0
 8005934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005936:	6a21      	ldr	r1, [r4, #32]
 8005938:	4628      	mov	r0, r5
 800593a:	47b0      	blx	r6
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	d106      	bne.n	8005950 <__sflush_r+0x68>
 8005942:	6829      	ldr	r1, [r5, #0]
 8005944:	291d      	cmp	r1, #29
 8005946:	d82b      	bhi.n	80059a0 <__sflush_r+0xb8>
 8005948:	4a29      	ldr	r2, [pc, #164]	; (80059f0 <__sflush_r+0x108>)
 800594a:	410a      	asrs	r2, r1
 800594c:	07d6      	lsls	r6, r2, #31
 800594e:	d427      	bmi.n	80059a0 <__sflush_r+0xb8>
 8005950:	2200      	movs	r2, #0
 8005952:	6062      	str	r2, [r4, #4]
 8005954:	04d9      	lsls	r1, r3, #19
 8005956:	6922      	ldr	r2, [r4, #16]
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	d504      	bpl.n	8005966 <__sflush_r+0x7e>
 800595c:	1c42      	adds	r2, r0, #1
 800595e:	d101      	bne.n	8005964 <__sflush_r+0x7c>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b903      	cbnz	r3, 8005966 <__sflush_r+0x7e>
 8005964:	6560      	str	r0, [r4, #84]	; 0x54
 8005966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005968:	602f      	str	r7, [r5, #0]
 800596a:	2900      	cmp	r1, #0
 800596c:	d0c9      	beq.n	8005902 <__sflush_r+0x1a>
 800596e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005972:	4299      	cmp	r1, r3
 8005974:	d002      	beq.n	800597c <__sflush_r+0x94>
 8005976:	4628      	mov	r0, r5
 8005978:	f7fe fa5e 	bl	8003e38 <_free_r>
 800597c:	2000      	movs	r0, #0
 800597e:	6360      	str	r0, [r4, #52]	; 0x34
 8005980:	e7c0      	b.n	8005904 <__sflush_r+0x1c>
 8005982:	2301      	movs	r3, #1
 8005984:	4628      	mov	r0, r5
 8005986:	47b0      	blx	r6
 8005988:	1c41      	adds	r1, r0, #1
 800598a:	d1c8      	bne.n	800591e <__sflush_r+0x36>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0c5      	beq.n	800591e <__sflush_r+0x36>
 8005992:	2b1d      	cmp	r3, #29
 8005994:	d001      	beq.n	800599a <__sflush_r+0xb2>
 8005996:	2b16      	cmp	r3, #22
 8005998:	d101      	bne.n	800599e <__sflush_r+0xb6>
 800599a:	602f      	str	r7, [r5, #0]
 800599c:	e7b1      	b.n	8005902 <__sflush_r+0x1a>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	e7ad      	b.n	8005904 <__sflush_r+0x1c>
 80059a8:	690f      	ldr	r7, [r1, #16]
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	d0a9      	beq.n	8005902 <__sflush_r+0x1a>
 80059ae:	0793      	lsls	r3, r2, #30
 80059b0:	680e      	ldr	r6, [r1, #0]
 80059b2:	bf08      	it	eq
 80059b4:	694b      	ldreq	r3, [r1, #20]
 80059b6:	600f      	str	r7, [r1, #0]
 80059b8:	bf18      	it	ne
 80059ba:	2300      	movne	r3, #0
 80059bc:	eba6 0807 	sub.w	r8, r6, r7
 80059c0:	608b      	str	r3, [r1, #8]
 80059c2:	f1b8 0f00 	cmp.w	r8, #0
 80059c6:	dd9c      	ble.n	8005902 <__sflush_r+0x1a>
 80059c8:	6a21      	ldr	r1, [r4, #32]
 80059ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059cc:	4643      	mov	r3, r8
 80059ce:	463a      	mov	r2, r7
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b0      	blx	r6
 80059d4:	2800      	cmp	r0, #0
 80059d6:	dc06      	bgt.n	80059e6 <__sflush_r+0xfe>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	e78e      	b.n	8005904 <__sflush_r+0x1c>
 80059e6:	4407      	add	r7, r0
 80059e8:	eba8 0800 	sub.w	r8, r8, r0
 80059ec:	e7e9      	b.n	80059c2 <__sflush_r+0xda>
 80059ee:	bf00      	nop
 80059f0:	dfbffffe 	.word	0xdfbffffe

080059f4 <_fflush_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	690b      	ldr	r3, [r1, #16]
 80059f8:	4605      	mov	r5, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	b913      	cbnz	r3, 8005a04 <_fflush_r+0x10>
 80059fe:	2500      	movs	r5, #0
 8005a00:	4628      	mov	r0, r5
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	b118      	cbz	r0, 8005a0e <_fflush_r+0x1a>
 8005a06:	6a03      	ldr	r3, [r0, #32]
 8005a08:	b90b      	cbnz	r3, 8005a0e <_fflush_r+0x1a>
 8005a0a:	f7fd fb01 	bl	8003010 <__sinit>
 8005a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f3      	beq.n	80059fe <_fflush_r+0xa>
 8005a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d404      	bmi.n	8005a26 <_fflush_r+0x32>
 8005a1c:	0599      	lsls	r1, r3, #22
 8005a1e:	d402      	bmi.n	8005a26 <_fflush_r+0x32>
 8005a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a22:	f7fd fc0b 	bl	800323c <__retarget_lock_acquire_recursive>
 8005a26:	4628      	mov	r0, r5
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f7ff ff5d 	bl	80058e8 <__sflush_r>
 8005a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a30:	07da      	lsls	r2, r3, #31
 8005a32:	4605      	mov	r5, r0
 8005a34:	d4e4      	bmi.n	8005a00 <_fflush_r+0xc>
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	059b      	lsls	r3, r3, #22
 8005a3a:	d4e1      	bmi.n	8005a00 <_fflush_r+0xc>
 8005a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3e:	f7fd fbfe 	bl	800323e <__retarget_lock_release_recursive>
 8005a42:	e7dd      	b.n	8005a00 <_fflush_r+0xc>

08005a44 <memmove>:
 8005a44:	4288      	cmp	r0, r1
 8005a46:	b510      	push	{r4, lr}
 8005a48:	eb01 0402 	add.w	r4, r1, r2
 8005a4c:	d902      	bls.n	8005a54 <memmove+0x10>
 8005a4e:	4284      	cmp	r4, r0
 8005a50:	4623      	mov	r3, r4
 8005a52:	d807      	bhi.n	8005a64 <memmove+0x20>
 8005a54:	1e43      	subs	r3, r0, #1
 8005a56:	42a1      	cmp	r1, r4
 8005a58:	d008      	beq.n	8005a6c <memmove+0x28>
 8005a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a62:	e7f8      	b.n	8005a56 <memmove+0x12>
 8005a64:	4402      	add	r2, r0
 8005a66:	4601      	mov	r1, r0
 8005a68:	428a      	cmp	r2, r1
 8005a6a:	d100      	bne.n	8005a6e <memmove+0x2a>
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a76:	e7f7      	b.n	8005a68 <memmove+0x24>

08005a78 <strncmp>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	b16a      	cbz	r2, 8005a98 <strncmp+0x20>
 8005a7c:	3901      	subs	r1, #1
 8005a7e:	1884      	adds	r4, r0, r2
 8005a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d103      	bne.n	8005a94 <strncmp+0x1c>
 8005a8c:	42a0      	cmp	r0, r4
 8005a8e:	d001      	beq.n	8005a94 <strncmp+0x1c>
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	d1f5      	bne.n	8005a80 <strncmp+0x8>
 8005a94:	1ad0      	subs	r0, r2, r3
 8005a96:	bd10      	pop	{r4, pc}
 8005a98:	4610      	mov	r0, r2
 8005a9a:	e7fc      	b.n	8005a96 <strncmp+0x1e>

08005a9c <_sbrk_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d06      	ldr	r5, [pc, #24]	; (8005ab8 <_sbrk_r+0x1c>)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	f7fb fb16 	bl	80010d8 <_sbrk>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_sbrk_r+0x1a>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_sbrk_r+0x1a>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	20000380 	.word	0x20000380

08005abc <memcpy>:
 8005abc:	440a      	add	r2, r1
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac4:	d100      	bne.n	8005ac8 <memcpy+0xc>
 8005ac6:	4770      	bx	lr
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad2:	4291      	cmp	r1, r2
 8005ad4:	d1f9      	bne.n	8005aca <memcpy+0xe>
 8005ad6:	bd10      	pop	{r4, pc}

08005ad8 <nan>:
 8005ad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ae0 <nan+0x8>
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	00000000 	.word	0x00000000
 8005ae4:	7ff80000 	.word	0x7ff80000

08005ae8 <__assert_func>:
 8005ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aea:	4614      	mov	r4, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <__assert_func+0x2c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4605      	mov	r5, r0
 8005af4:	68d8      	ldr	r0, [r3, #12]
 8005af6:	b14c      	cbz	r4, 8005b0c <__assert_func+0x24>
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <__assert_func+0x30>)
 8005afa:	9100      	str	r1, [sp, #0]
 8005afc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b00:	4906      	ldr	r1, [pc, #24]	; (8005b1c <__assert_func+0x34>)
 8005b02:	462b      	mov	r3, r5
 8005b04:	f000 fbca 	bl	800629c <fiprintf>
 8005b08:	f000 fbda 	bl	80062c0 <abort>
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <__assert_func+0x38>)
 8005b0e:	461c      	mov	r4, r3
 8005b10:	e7f3      	b.n	8005afa <__assert_func+0x12>
 8005b12:	bf00      	nop
 8005b14:	200000ac 	.word	0x200000ac
 8005b18:	08006bd2 	.word	0x08006bd2
 8005b1c:	08006bdf 	.word	0x08006bdf
 8005b20:	08006c0d 	.word	0x08006c0d

08005b24 <_calloc_r>:
 8005b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b26:	fba1 2402 	umull	r2, r4, r1, r2
 8005b2a:	b94c      	cbnz	r4, 8005b40 <_calloc_r+0x1c>
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	9201      	str	r2, [sp, #4]
 8005b30:	f7fe f9f6 	bl	8003f20 <_malloc_r>
 8005b34:	9a01      	ldr	r2, [sp, #4]
 8005b36:	4605      	mov	r5, r0
 8005b38:	b930      	cbnz	r0, 8005b48 <_calloc_r+0x24>
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	b003      	add	sp, #12
 8005b3e:	bd30      	pop	{r4, r5, pc}
 8005b40:	220c      	movs	r2, #12
 8005b42:	6002      	str	r2, [r0, #0]
 8005b44:	2500      	movs	r5, #0
 8005b46:	e7f8      	b.n	8005b3a <_calloc_r+0x16>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7fd fafa 	bl	8003142 <memset>
 8005b4e:	e7f4      	b.n	8005b3a <_calloc_r+0x16>

08005b50 <rshift>:
 8005b50:	6903      	ldr	r3, [r0, #16]
 8005b52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005b56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005b5e:	f100 0414 	add.w	r4, r0, #20
 8005b62:	dd45      	ble.n	8005bf0 <rshift+0xa0>
 8005b64:	f011 011f 	ands.w	r1, r1, #31
 8005b68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005b6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005b70:	d10c      	bne.n	8005b8c <rshift+0x3c>
 8005b72:	f100 0710 	add.w	r7, r0, #16
 8005b76:	4629      	mov	r1, r5
 8005b78:	42b1      	cmp	r1, r6
 8005b7a:	d334      	bcc.n	8005be6 <rshift+0x96>
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	1eea      	subs	r2, r5, #3
 8005b82:	4296      	cmp	r6, r2
 8005b84:	bf38      	it	cc
 8005b86:	2300      	movcc	r3, #0
 8005b88:	4423      	add	r3, r4
 8005b8a:	e015      	b.n	8005bb8 <rshift+0x68>
 8005b8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005b90:	f1c1 0820 	rsb	r8, r1, #32
 8005b94:	40cf      	lsrs	r7, r1
 8005b96:	f105 0e04 	add.w	lr, r5, #4
 8005b9a:	46a1      	mov	r9, r4
 8005b9c:	4576      	cmp	r6, lr
 8005b9e:	46f4      	mov	ip, lr
 8005ba0:	d815      	bhi.n	8005bce <rshift+0x7e>
 8005ba2:	1a9a      	subs	r2, r3, r2
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	3a04      	subs	r2, #4
 8005ba8:	3501      	adds	r5, #1
 8005baa:	42ae      	cmp	r6, r5
 8005bac:	bf38      	it	cc
 8005bae:	2200      	movcc	r2, #0
 8005bb0:	18a3      	adds	r3, r4, r2
 8005bb2:	50a7      	str	r7, [r4, r2]
 8005bb4:	b107      	cbz	r7, 8005bb8 <rshift+0x68>
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	1b1a      	subs	r2, r3, r4
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005bc0:	bf08      	it	eq
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	6102      	str	r2, [r0, #16]
 8005bc6:	bf08      	it	eq
 8005bc8:	6143      	streq	r3, [r0, #20]
 8005bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bce:	f8dc c000 	ldr.w	ip, [ip]
 8005bd2:	fa0c fc08 	lsl.w	ip, ip, r8
 8005bd6:	ea4c 0707 	orr.w	r7, ip, r7
 8005bda:	f849 7b04 	str.w	r7, [r9], #4
 8005bde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005be2:	40cf      	lsrs	r7, r1
 8005be4:	e7da      	b.n	8005b9c <rshift+0x4c>
 8005be6:	f851 cb04 	ldr.w	ip, [r1], #4
 8005bea:	f847 cf04 	str.w	ip, [r7, #4]!
 8005bee:	e7c3      	b.n	8005b78 <rshift+0x28>
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	e7e1      	b.n	8005bb8 <rshift+0x68>

08005bf4 <__hexdig_fun>:
 8005bf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d802      	bhi.n	8005c02 <__hexdig_fun+0xe>
 8005bfc:	3820      	subs	r0, #32
 8005bfe:	b2c0      	uxtb	r0, r0
 8005c00:	4770      	bx	lr
 8005c02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	d801      	bhi.n	8005c0e <__hexdig_fun+0x1a>
 8005c0a:	3847      	subs	r0, #71	; 0x47
 8005c0c:	e7f7      	b.n	8005bfe <__hexdig_fun+0xa>
 8005c0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d801      	bhi.n	8005c1a <__hexdig_fun+0x26>
 8005c16:	3827      	subs	r0, #39	; 0x27
 8005c18:	e7f1      	b.n	8005bfe <__hexdig_fun+0xa>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	4770      	bx	lr
	...

08005c20 <__gethex>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	4617      	mov	r7, r2
 8005c26:	680a      	ldr	r2, [r1, #0]
 8005c28:	b085      	sub	sp, #20
 8005c2a:	f102 0b02 	add.w	fp, r2, #2
 8005c2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005c32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005c36:	4681      	mov	r9, r0
 8005c38:	468a      	mov	sl, r1
 8005c3a:	9302      	str	r3, [sp, #8]
 8005c3c:	32fe      	adds	r2, #254	; 0xfe
 8005c3e:	eb02 030b 	add.w	r3, r2, fp
 8005c42:	46d8      	mov	r8, fp
 8005c44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	2830      	cmp	r0, #48	; 0x30
 8005c4c:	d0f7      	beq.n	8005c3e <__gethex+0x1e>
 8005c4e:	f7ff ffd1 	bl	8005bf4 <__hexdig_fun>
 8005c52:	4604      	mov	r4, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d138      	bne.n	8005cca <__gethex+0xaa>
 8005c58:	49a7      	ldr	r1, [pc, #668]	; (8005ef8 <__gethex+0x2d8>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	f7ff ff0b 	bl	8005a78 <strncmp>
 8005c62:	4606      	mov	r6, r0
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d169      	bne.n	8005d3c <__gethex+0x11c>
 8005c68:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005c6c:	465d      	mov	r5, fp
 8005c6e:	f7ff ffc1 	bl	8005bf4 <__hexdig_fun>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d064      	beq.n	8005d40 <__gethex+0x120>
 8005c76:	465a      	mov	r2, fp
 8005c78:	7810      	ldrb	r0, [r2, #0]
 8005c7a:	2830      	cmp	r0, #48	; 0x30
 8005c7c:	4690      	mov	r8, r2
 8005c7e:	f102 0201 	add.w	r2, r2, #1
 8005c82:	d0f9      	beq.n	8005c78 <__gethex+0x58>
 8005c84:	f7ff ffb6 	bl	8005bf4 <__hexdig_fun>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	fab0 f480 	clz	r4, r0
 8005c8e:	0964      	lsrs	r4, r4, #5
 8005c90:	465e      	mov	r6, fp
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	4642      	mov	r2, r8
 8005c96:	4615      	mov	r5, r2
 8005c98:	3201      	adds	r2, #1
 8005c9a:	7828      	ldrb	r0, [r5, #0]
 8005c9c:	f7ff ffaa 	bl	8005bf4 <__hexdig_fun>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d1f8      	bne.n	8005c96 <__gethex+0x76>
 8005ca4:	4994      	ldr	r1, [pc, #592]	; (8005ef8 <__gethex+0x2d8>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f7ff fee5 	bl	8005a78 <strncmp>
 8005cae:	b978      	cbnz	r0, 8005cd0 <__gethex+0xb0>
 8005cb0:	b946      	cbnz	r6, 8005cc4 <__gethex+0xa4>
 8005cb2:	1c6e      	adds	r6, r5, #1
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4615      	mov	r5, r2
 8005cb8:	3201      	adds	r2, #1
 8005cba:	7828      	ldrb	r0, [r5, #0]
 8005cbc:	f7ff ff9a 	bl	8005bf4 <__hexdig_fun>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d1f8      	bne.n	8005cb6 <__gethex+0x96>
 8005cc4:	1b73      	subs	r3, r6, r5
 8005cc6:	009e      	lsls	r6, r3, #2
 8005cc8:	e004      	b.n	8005cd4 <__gethex+0xb4>
 8005cca:	2400      	movs	r4, #0
 8005ccc:	4626      	mov	r6, r4
 8005cce:	e7e1      	b.n	8005c94 <__gethex+0x74>
 8005cd0:	2e00      	cmp	r6, #0
 8005cd2:	d1f7      	bne.n	8005cc4 <__gethex+0xa4>
 8005cd4:	782b      	ldrb	r3, [r5, #0]
 8005cd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cda:	2b50      	cmp	r3, #80	; 0x50
 8005cdc:	d13d      	bne.n	8005d5a <__gethex+0x13a>
 8005cde:	786b      	ldrb	r3, [r5, #1]
 8005ce0:	2b2b      	cmp	r3, #43	; 0x2b
 8005ce2:	d02f      	beq.n	8005d44 <__gethex+0x124>
 8005ce4:	2b2d      	cmp	r3, #45	; 0x2d
 8005ce6:	d031      	beq.n	8005d4c <__gethex+0x12c>
 8005ce8:	1c69      	adds	r1, r5, #1
 8005cea:	f04f 0b00 	mov.w	fp, #0
 8005cee:	7808      	ldrb	r0, [r1, #0]
 8005cf0:	f7ff ff80 	bl	8005bf4 <__hexdig_fun>
 8005cf4:	1e42      	subs	r2, r0, #1
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	2a18      	cmp	r2, #24
 8005cfa:	d82e      	bhi.n	8005d5a <__gethex+0x13a>
 8005cfc:	f1a0 0210 	sub.w	r2, r0, #16
 8005d00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d04:	f7ff ff76 	bl	8005bf4 <__hexdig_fun>
 8005d08:	f100 3cff 	add.w	ip, r0, #4294967295
 8005d0c:	fa5f fc8c 	uxtb.w	ip, ip
 8005d10:	f1bc 0f18 	cmp.w	ip, #24
 8005d14:	d91d      	bls.n	8005d52 <__gethex+0x132>
 8005d16:	f1bb 0f00 	cmp.w	fp, #0
 8005d1a:	d000      	beq.n	8005d1e <__gethex+0xfe>
 8005d1c:	4252      	negs	r2, r2
 8005d1e:	4416      	add	r6, r2
 8005d20:	f8ca 1000 	str.w	r1, [sl]
 8005d24:	b1dc      	cbz	r4, 8005d5e <__gethex+0x13e>
 8005d26:	9b01      	ldr	r3, [sp, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	f04f 0800 	movne.w	r8, #0
 8005d30:	f04f 0806 	moveq.w	r8, #6
 8005d34:	4640      	mov	r0, r8
 8005d36:	b005      	add	sp, #20
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	4645      	mov	r5, r8
 8005d3e:	4626      	mov	r6, r4
 8005d40:	2401      	movs	r4, #1
 8005d42:	e7c7      	b.n	8005cd4 <__gethex+0xb4>
 8005d44:	f04f 0b00 	mov.w	fp, #0
 8005d48:	1ca9      	adds	r1, r5, #2
 8005d4a:	e7d0      	b.n	8005cee <__gethex+0xce>
 8005d4c:	f04f 0b01 	mov.w	fp, #1
 8005d50:	e7fa      	b.n	8005d48 <__gethex+0x128>
 8005d52:	230a      	movs	r3, #10
 8005d54:	fb03 0002 	mla	r0, r3, r2, r0
 8005d58:	e7d0      	b.n	8005cfc <__gethex+0xdc>
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	e7e0      	b.n	8005d20 <__gethex+0x100>
 8005d5e:	eba5 0308 	sub.w	r3, r5, r8
 8005d62:	3b01      	subs	r3, #1
 8005d64:	4621      	mov	r1, r4
 8005d66:	2b07      	cmp	r3, #7
 8005d68:	dc0a      	bgt.n	8005d80 <__gethex+0x160>
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	f7fe f964 	bl	8004038 <_Balloc>
 8005d70:	4604      	mov	r4, r0
 8005d72:	b940      	cbnz	r0, 8005d86 <__gethex+0x166>
 8005d74:	4b61      	ldr	r3, [pc, #388]	; (8005efc <__gethex+0x2dc>)
 8005d76:	4602      	mov	r2, r0
 8005d78:	21e4      	movs	r1, #228	; 0xe4
 8005d7a:	4861      	ldr	r0, [pc, #388]	; (8005f00 <__gethex+0x2e0>)
 8005d7c:	f7ff feb4 	bl	8005ae8 <__assert_func>
 8005d80:	3101      	adds	r1, #1
 8005d82:	105b      	asrs	r3, r3, #1
 8005d84:	e7ef      	b.n	8005d66 <__gethex+0x146>
 8005d86:	f100 0a14 	add.w	sl, r0, #20
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	495a      	ldr	r1, [pc, #360]	; (8005ef8 <__gethex+0x2d8>)
 8005d8e:	f8cd a004 	str.w	sl, [sp, #4]
 8005d92:	469b      	mov	fp, r3
 8005d94:	45a8      	cmp	r8, r5
 8005d96:	d342      	bcc.n	8005e1e <__gethex+0x1fe>
 8005d98:	9801      	ldr	r0, [sp, #4]
 8005d9a:	f840 bb04 	str.w	fp, [r0], #4
 8005d9e:	eba0 000a 	sub.w	r0, r0, sl
 8005da2:	1080      	asrs	r0, r0, #2
 8005da4:	6120      	str	r0, [r4, #16]
 8005da6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8005daa:	4658      	mov	r0, fp
 8005dac:	f7fe fa36 	bl	800421c <__hi0bits>
 8005db0:	683d      	ldr	r5, [r7, #0]
 8005db2:	eba8 0000 	sub.w	r0, r8, r0
 8005db6:	42a8      	cmp	r0, r5
 8005db8:	dd59      	ble.n	8005e6e <__gethex+0x24e>
 8005dba:	eba0 0805 	sub.w	r8, r0, r5
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7fe fdc2 	bl	800494a <__any_on>
 8005dc6:	4683      	mov	fp, r0
 8005dc8:	b1b8      	cbz	r0, 8005dfa <__gethex+0x1da>
 8005dca:	f108 33ff 	add.w	r3, r8, #4294967295
 8005dce:	1159      	asrs	r1, r3, #5
 8005dd0:	f003 021f 	and.w	r2, r3, #31
 8005dd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005dd8:	f04f 0b01 	mov.w	fp, #1
 8005ddc:	fa0b f202 	lsl.w	r2, fp, r2
 8005de0:	420a      	tst	r2, r1
 8005de2:	d00a      	beq.n	8005dfa <__gethex+0x1da>
 8005de4:	455b      	cmp	r3, fp
 8005de6:	dd06      	ble.n	8005df6 <__gethex+0x1d6>
 8005de8:	f1a8 0102 	sub.w	r1, r8, #2
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7fe fdac 	bl	800494a <__any_on>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d138      	bne.n	8005e68 <__gethex+0x248>
 8005df6:	f04f 0b02 	mov.w	fp, #2
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff fea7 	bl	8005b50 <rshift>
 8005e02:	4446      	add	r6, r8
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	42b3      	cmp	r3, r6
 8005e08:	da41      	bge.n	8005e8e <__gethex+0x26e>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4648      	mov	r0, r9
 8005e0e:	f7fe f953 	bl	80040b8 <_Bfree>
 8005e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e14:	2300      	movs	r3, #0
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8005e1c:	e78a      	b.n	8005d34 <__gethex+0x114>
 8005e1e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005e22:	2a2e      	cmp	r2, #46	; 0x2e
 8005e24:	d014      	beq.n	8005e50 <__gethex+0x230>
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d106      	bne.n	8005e38 <__gethex+0x218>
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	f843 bb04 	str.w	fp, [r3], #4
 8005e30:	f04f 0b00 	mov.w	fp, #0
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	465b      	mov	r3, fp
 8005e38:	7828      	ldrb	r0, [r5, #0]
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	f7ff feda 	bl	8005bf4 <__hexdig_fun>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	f000 000f 	and.w	r0, r0, #15
 8005e46:	4098      	lsls	r0, r3
 8005e48:	ea4b 0b00 	orr.w	fp, fp, r0
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	e7a1      	b.n	8005d94 <__gethex+0x174>
 8005e50:	45a8      	cmp	r8, r5
 8005e52:	d8e8      	bhi.n	8005e26 <__gethex+0x206>
 8005e54:	2201      	movs	r2, #1
 8005e56:	4628      	mov	r0, r5
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	f7ff fe0d 	bl	8005a78 <strncmp>
 8005e5e:	4926      	ldr	r1, [pc, #152]	; (8005ef8 <__gethex+0x2d8>)
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d1df      	bne.n	8005e26 <__gethex+0x206>
 8005e66:	e795      	b.n	8005d94 <__gethex+0x174>
 8005e68:	f04f 0b03 	mov.w	fp, #3
 8005e6c:	e7c5      	b.n	8005dfa <__gethex+0x1da>
 8005e6e:	da0b      	bge.n	8005e88 <__gethex+0x268>
 8005e70:	eba5 0800 	sub.w	r8, r5, r0
 8005e74:	4621      	mov	r1, r4
 8005e76:	4642      	mov	r2, r8
 8005e78:	4648      	mov	r0, r9
 8005e7a:	f7fe fb37 	bl	80044ec <__lshift>
 8005e7e:	eba6 0608 	sub.w	r6, r6, r8
 8005e82:	4604      	mov	r4, r0
 8005e84:	f100 0a14 	add.w	sl, r0, #20
 8005e88:	f04f 0b00 	mov.w	fp, #0
 8005e8c:	e7ba      	b.n	8005e04 <__gethex+0x1e4>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	42b3      	cmp	r3, r6
 8005e92:	dd73      	ble.n	8005f7c <__gethex+0x35c>
 8005e94:	1b9e      	subs	r6, r3, r6
 8005e96:	42b5      	cmp	r5, r6
 8005e98:	dc34      	bgt.n	8005f04 <__gethex+0x2e4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d023      	beq.n	8005ee8 <__gethex+0x2c8>
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d025      	beq.n	8005ef0 <__gethex+0x2d0>
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d115      	bne.n	8005ed4 <__gethex+0x2b4>
 8005ea8:	42b5      	cmp	r5, r6
 8005eaa:	d113      	bne.n	8005ed4 <__gethex+0x2b4>
 8005eac:	2d01      	cmp	r5, #1
 8005eae:	d10b      	bne.n	8005ec8 <__gethex+0x2a8>
 8005eb0:	9a02      	ldr	r2, [sp, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	f8ca 3000 	str.w	r3, [sl]
 8005ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8005ec4:	601c      	str	r4, [r3, #0]
 8005ec6:	e735      	b.n	8005d34 <__gethex+0x114>
 8005ec8:	1e69      	subs	r1, r5, #1
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fe fd3d 	bl	800494a <__any_on>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1ed      	bne.n	8005eb0 <__gethex+0x290>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4648      	mov	r0, r9
 8005ed8:	f7fe f8ee 	bl	80040b8 <_Bfree>
 8005edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005ee6:	e725      	b.n	8005d34 <__gethex+0x114>
 8005ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f2      	bne.n	8005ed4 <__gethex+0x2b4>
 8005eee:	e7df      	b.n	8005eb0 <__gethex+0x290>
 8005ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1dc      	bne.n	8005eb0 <__gethex+0x290>
 8005ef6:	e7ed      	b.n	8005ed4 <__gethex+0x2b4>
 8005ef8:	08006a64 	.word	0x08006a64
 8005efc:	080068fd 	.word	0x080068fd
 8005f00:	08006c0e 	.word	0x08006c0e
 8005f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8005f08:	f1bb 0f00 	cmp.w	fp, #0
 8005f0c:	d133      	bne.n	8005f76 <__gethex+0x356>
 8005f0e:	f1b8 0f00 	cmp.w	r8, #0
 8005f12:	d004      	beq.n	8005f1e <__gethex+0x2fe>
 8005f14:	4641      	mov	r1, r8
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7fe fd17 	bl	800494a <__any_on>
 8005f1c:	4683      	mov	fp, r0
 8005f1e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8005f22:	2301      	movs	r3, #1
 8005f24:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005f28:	f008 081f 	and.w	r8, r8, #31
 8005f2c:	fa03 f308 	lsl.w	r3, r3, r8
 8005f30:	4213      	tst	r3, r2
 8005f32:	4631      	mov	r1, r6
 8005f34:	4620      	mov	r0, r4
 8005f36:	bf18      	it	ne
 8005f38:	f04b 0b02 	orrne.w	fp, fp, #2
 8005f3c:	1bad      	subs	r5, r5, r6
 8005f3e:	f7ff fe07 	bl	8005b50 <rshift>
 8005f42:	687e      	ldr	r6, [r7, #4]
 8005f44:	f04f 0802 	mov.w	r8, #2
 8005f48:	f1bb 0f00 	cmp.w	fp, #0
 8005f4c:	d04a      	beq.n	8005fe4 <__gethex+0x3c4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d016      	beq.n	8005f82 <__gethex+0x362>
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d018      	beq.n	8005f8a <__gethex+0x36a>
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d109      	bne.n	8005f70 <__gethex+0x350>
 8005f5c:	f01b 0f02 	tst.w	fp, #2
 8005f60:	d006      	beq.n	8005f70 <__gethex+0x350>
 8005f62:	f8da 3000 	ldr.w	r3, [sl]
 8005f66:	ea4b 0b03 	orr.w	fp, fp, r3
 8005f6a:	f01b 0f01 	tst.w	fp, #1
 8005f6e:	d10f      	bne.n	8005f90 <__gethex+0x370>
 8005f70:	f048 0810 	orr.w	r8, r8, #16
 8005f74:	e036      	b.n	8005fe4 <__gethex+0x3c4>
 8005f76:	f04f 0b01 	mov.w	fp, #1
 8005f7a:	e7d0      	b.n	8005f1e <__gethex+0x2fe>
 8005f7c:	f04f 0801 	mov.w	r8, #1
 8005f80:	e7e2      	b.n	8005f48 <__gethex+0x328>
 8005f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f84:	f1c3 0301 	rsb	r3, r3, #1
 8005f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0ef      	beq.n	8005f70 <__gethex+0x350>
 8005f90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005f94:	f104 0214 	add.w	r2, r4, #20
 8005f98:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4694      	mov	ip, r2
 8005fa6:	f852 1b04 	ldr.w	r1, [r2], #4
 8005faa:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005fae:	d01e      	beq.n	8005fee <__gethex+0x3ce>
 8005fb0:	3101      	adds	r1, #1
 8005fb2:	f8cc 1000 	str.w	r1, [ip]
 8005fb6:	f1b8 0f02 	cmp.w	r8, #2
 8005fba:	f104 0214 	add.w	r2, r4, #20
 8005fbe:	d13d      	bne.n	800603c <__gethex+0x41c>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	d10b      	bne.n	8005fe0 <__gethex+0x3c0>
 8005fc8:	1169      	asrs	r1, r5, #5
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f005 051f 	and.w	r5, r5, #31
 8005fd0:	fa03 f505 	lsl.w	r5, r3, r5
 8005fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fd8:	421d      	tst	r5, r3
 8005fda:	bf18      	it	ne
 8005fdc:	f04f 0801 	movne.w	r8, #1
 8005fe0:	f048 0820 	orr.w	r8, r8, #32
 8005fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fe6:	601c      	str	r4, [r3, #0]
 8005fe8:	9b02      	ldr	r3, [sp, #8]
 8005fea:	601e      	str	r6, [r3, #0]
 8005fec:	e6a2      	b.n	8005d34 <__gethex+0x114>
 8005fee:	4290      	cmp	r0, r2
 8005ff0:	f842 3c04 	str.w	r3, [r2, #-4]
 8005ff4:	d8d6      	bhi.n	8005fa4 <__gethex+0x384>
 8005ff6:	68a2      	ldr	r2, [r4, #8]
 8005ff8:	4593      	cmp	fp, r2
 8005ffa:	db17      	blt.n	800602c <__gethex+0x40c>
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4648      	mov	r0, r9
 8006000:	3101      	adds	r1, #1
 8006002:	f7fe f819 	bl	8004038 <_Balloc>
 8006006:	4682      	mov	sl, r0
 8006008:	b918      	cbnz	r0, 8006012 <__gethex+0x3f2>
 800600a:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <__gethex+0x458>)
 800600c:	4602      	mov	r2, r0
 800600e:	2184      	movs	r1, #132	; 0x84
 8006010:	e6b3      	b.n	8005d7a <__gethex+0x15a>
 8006012:	6922      	ldr	r2, [r4, #16]
 8006014:	3202      	adds	r2, #2
 8006016:	f104 010c 	add.w	r1, r4, #12
 800601a:	0092      	lsls	r2, r2, #2
 800601c:	300c      	adds	r0, #12
 800601e:	f7ff fd4d 	bl	8005abc <memcpy>
 8006022:	4621      	mov	r1, r4
 8006024:	4648      	mov	r0, r9
 8006026:	f7fe f847 	bl	80040b8 <_Bfree>
 800602a:	4654      	mov	r4, sl
 800602c:	6922      	ldr	r2, [r4, #16]
 800602e:	1c51      	adds	r1, r2, #1
 8006030:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006034:	6121      	str	r1, [r4, #16]
 8006036:	2101      	movs	r1, #1
 8006038:	6151      	str	r1, [r2, #20]
 800603a:	e7bc      	b.n	8005fb6 <__gethex+0x396>
 800603c:	6921      	ldr	r1, [r4, #16]
 800603e:	4559      	cmp	r1, fp
 8006040:	dd0b      	ble.n	800605a <__gethex+0x43a>
 8006042:	2101      	movs	r1, #1
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff fd83 	bl	8005b50 <rshift>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3601      	adds	r6, #1
 800604e:	42b3      	cmp	r3, r6
 8006050:	f6ff aedb 	blt.w	8005e0a <__gethex+0x1ea>
 8006054:	f04f 0801 	mov.w	r8, #1
 8006058:	e7c2      	b.n	8005fe0 <__gethex+0x3c0>
 800605a:	f015 051f 	ands.w	r5, r5, #31
 800605e:	d0f9      	beq.n	8006054 <__gethex+0x434>
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	441a      	add	r2, r3
 8006064:	f1c5 0520 	rsb	r5, r5, #32
 8006068:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800606c:	f7fe f8d6 	bl	800421c <__hi0bits>
 8006070:	42a8      	cmp	r0, r5
 8006072:	dbe6      	blt.n	8006042 <__gethex+0x422>
 8006074:	e7ee      	b.n	8006054 <__gethex+0x434>
 8006076:	bf00      	nop
 8006078:	080068fd 	.word	0x080068fd

0800607c <L_shift>:
 800607c:	f1c2 0208 	rsb	r2, r2, #8
 8006080:	0092      	lsls	r2, r2, #2
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	f1c2 0620 	rsb	r6, r2, #32
 8006088:	6843      	ldr	r3, [r0, #4]
 800608a:	6804      	ldr	r4, [r0, #0]
 800608c:	fa03 f506 	lsl.w	r5, r3, r6
 8006090:	432c      	orrs	r4, r5
 8006092:	40d3      	lsrs	r3, r2
 8006094:	6004      	str	r4, [r0, #0]
 8006096:	f840 3f04 	str.w	r3, [r0, #4]!
 800609a:	4288      	cmp	r0, r1
 800609c:	d3f4      	bcc.n	8006088 <L_shift+0xc>
 800609e:	bd70      	pop	{r4, r5, r6, pc}

080060a0 <__match>:
 80060a0:	b530      	push	{r4, r5, lr}
 80060a2:	6803      	ldr	r3, [r0, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060aa:	b914      	cbnz	r4, 80060b2 <__match+0x12>
 80060ac:	6003      	str	r3, [r0, #0]
 80060ae:	2001      	movs	r0, #1
 80060b0:	bd30      	pop	{r4, r5, pc}
 80060b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80060ba:	2d19      	cmp	r5, #25
 80060bc:	bf98      	it	ls
 80060be:	3220      	addls	r2, #32
 80060c0:	42a2      	cmp	r2, r4
 80060c2:	d0f0      	beq.n	80060a6 <__match+0x6>
 80060c4:	2000      	movs	r0, #0
 80060c6:	e7f3      	b.n	80060b0 <__match+0x10>

080060c8 <__hexnan>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	680b      	ldr	r3, [r1, #0]
 80060ce:	6801      	ldr	r1, [r0, #0]
 80060d0:	115e      	asrs	r6, r3, #5
 80060d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80060d6:	f013 031f 	ands.w	r3, r3, #31
 80060da:	b087      	sub	sp, #28
 80060dc:	bf18      	it	ne
 80060de:	3604      	addne	r6, #4
 80060e0:	2500      	movs	r5, #0
 80060e2:	1f37      	subs	r7, r6, #4
 80060e4:	4682      	mov	sl, r0
 80060e6:	4690      	mov	r8, r2
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80060ee:	46b9      	mov	r9, r7
 80060f0:	463c      	mov	r4, r7
 80060f2:	9502      	str	r5, [sp, #8]
 80060f4:	46ab      	mov	fp, r5
 80060f6:	784a      	ldrb	r2, [r1, #1]
 80060f8:	1c4b      	adds	r3, r1, #1
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	b342      	cbz	r2, 8006150 <__hexnan+0x88>
 80060fe:	4610      	mov	r0, r2
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	9204      	str	r2, [sp, #16]
 8006104:	f7ff fd76 	bl	8005bf4 <__hexdig_fun>
 8006108:	2800      	cmp	r0, #0
 800610a:	d14f      	bne.n	80061ac <__hexnan+0xe4>
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	9905      	ldr	r1, [sp, #20]
 8006110:	2a20      	cmp	r2, #32
 8006112:	d818      	bhi.n	8006146 <__hexnan+0x7e>
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	459b      	cmp	fp, r3
 8006118:	dd13      	ble.n	8006142 <__hexnan+0x7a>
 800611a:	454c      	cmp	r4, r9
 800611c:	d206      	bcs.n	800612c <__hexnan+0x64>
 800611e:	2d07      	cmp	r5, #7
 8006120:	dc04      	bgt.n	800612c <__hexnan+0x64>
 8006122:	462a      	mov	r2, r5
 8006124:	4649      	mov	r1, r9
 8006126:	4620      	mov	r0, r4
 8006128:	f7ff ffa8 	bl	800607c <L_shift>
 800612c:	4544      	cmp	r4, r8
 800612e:	d950      	bls.n	80061d2 <__hexnan+0x10a>
 8006130:	2300      	movs	r3, #0
 8006132:	f1a4 0904 	sub.w	r9, r4, #4
 8006136:	f844 3c04 	str.w	r3, [r4, #-4]
 800613a:	f8cd b008 	str.w	fp, [sp, #8]
 800613e:	464c      	mov	r4, r9
 8006140:	461d      	mov	r5, r3
 8006142:	9903      	ldr	r1, [sp, #12]
 8006144:	e7d7      	b.n	80060f6 <__hexnan+0x2e>
 8006146:	2a29      	cmp	r2, #41	; 0x29
 8006148:	d155      	bne.n	80061f6 <__hexnan+0x12e>
 800614a:	3102      	adds	r1, #2
 800614c:	f8ca 1000 	str.w	r1, [sl]
 8006150:	f1bb 0f00 	cmp.w	fp, #0
 8006154:	d04f      	beq.n	80061f6 <__hexnan+0x12e>
 8006156:	454c      	cmp	r4, r9
 8006158:	d206      	bcs.n	8006168 <__hexnan+0xa0>
 800615a:	2d07      	cmp	r5, #7
 800615c:	dc04      	bgt.n	8006168 <__hexnan+0xa0>
 800615e:	462a      	mov	r2, r5
 8006160:	4649      	mov	r1, r9
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff ff8a 	bl	800607c <L_shift>
 8006168:	4544      	cmp	r4, r8
 800616a:	d934      	bls.n	80061d6 <__hexnan+0x10e>
 800616c:	f1a8 0204 	sub.w	r2, r8, #4
 8006170:	4623      	mov	r3, r4
 8006172:	f853 1b04 	ldr.w	r1, [r3], #4
 8006176:	f842 1f04 	str.w	r1, [r2, #4]!
 800617a:	429f      	cmp	r7, r3
 800617c:	d2f9      	bcs.n	8006172 <__hexnan+0xaa>
 800617e:	1b3b      	subs	r3, r7, r4
 8006180:	f023 0303 	bic.w	r3, r3, #3
 8006184:	3304      	adds	r3, #4
 8006186:	3e03      	subs	r6, #3
 8006188:	3401      	adds	r4, #1
 800618a:	42a6      	cmp	r6, r4
 800618c:	bf38      	it	cc
 800618e:	2304      	movcc	r3, #4
 8006190:	4443      	add	r3, r8
 8006192:	2200      	movs	r2, #0
 8006194:	f843 2b04 	str.w	r2, [r3], #4
 8006198:	429f      	cmp	r7, r3
 800619a:	d2fb      	bcs.n	8006194 <__hexnan+0xcc>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	b91b      	cbnz	r3, 80061a8 <__hexnan+0xe0>
 80061a0:	4547      	cmp	r7, r8
 80061a2:	d126      	bne.n	80061f2 <__hexnan+0x12a>
 80061a4:	2301      	movs	r3, #1
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	2005      	movs	r0, #5
 80061aa:	e025      	b.n	80061f8 <__hexnan+0x130>
 80061ac:	3501      	adds	r5, #1
 80061ae:	2d08      	cmp	r5, #8
 80061b0:	f10b 0b01 	add.w	fp, fp, #1
 80061b4:	dd06      	ble.n	80061c4 <__hexnan+0xfc>
 80061b6:	4544      	cmp	r4, r8
 80061b8:	d9c3      	bls.n	8006142 <__hexnan+0x7a>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80061c0:	2501      	movs	r5, #1
 80061c2:	3c04      	subs	r4, #4
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	f000 000f 	and.w	r0, r0, #15
 80061ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80061ce:	6020      	str	r0, [r4, #0]
 80061d0:	e7b7      	b.n	8006142 <__hexnan+0x7a>
 80061d2:	2508      	movs	r5, #8
 80061d4:	e7b5      	b.n	8006142 <__hexnan+0x7a>
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0df      	beq.n	800619c <__hexnan+0xd4>
 80061dc:	f1c3 0320 	rsb	r3, r3, #32
 80061e0:	f04f 32ff 	mov.w	r2, #4294967295
 80061e4:	40da      	lsrs	r2, r3
 80061e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80061ea:	4013      	ands	r3, r2
 80061ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80061f0:	e7d4      	b.n	800619c <__hexnan+0xd4>
 80061f2:	3f04      	subs	r7, #4
 80061f4:	e7d2      	b.n	800619c <__hexnan+0xd4>
 80061f6:	2004      	movs	r0, #4
 80061f8:	b007      	add	sp, #28
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061fe <__ascii_mbtowc>:
 80061fe:	b082      	sub	sp, #8
 8006200:	b901      	cbnz	r1, 8006204 <__ascii_mbtowc+0x6>
 8006202:	a901      	add	r1, sp, #4
 8006204:	b142      	cbz	r2, 8006218 <__ascii_mbtowc+0x1a>
 8006206:	b14b      	cbz	r3, 800621c <__ascii_mbtowc+0x1e>
 8006208:	7813      	ldrb	r3, [r2, #0]
 800620a:	600b      	str	r3, [r1, #0]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	1e10      	subs	r0, r2, #0
 8006210:	bf18      	it	ne
 8006212:	2001      	movne	r0, #1
 8006214:	b002      	add	sp, #8
 8006216:	4770      	bx	lr
 8006218:	4610      	mov	r0, r2
 800621a:	e7fb      	b.n	8006214 <__ascii_mbtowc+0x16>
 800621c:	f06f 0001 	mvn.w	r0, #1
 8006220:	e7f8      	b.n	8006214 <__ascii_mbtowc+0x16>

08006222 <_realloc_r>:
 8006222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006226:	4680      	mov	r8, r0
 8006228:	4614      	mov	r4, r2
 800622a:	460e      	mov	r6, r1
 800622c:	b921      	cbnz	r1, 8006238 <_realloc_r+0x16>
 800622e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006232:	4611      	mov	r1, r2
 8006234:	f7fd be74 	b.w	8003f20 <_malloc_r>
 8006238:	b92a      	cbnz	r2, 8006246 <_realloc_r+0x24>
 800623a:	f7fd fdfd 	bl	8003e38 <_free_r>
 800623e:	4625      	mov	r5, r4
 8006240:	4628      	mov	r0, r5
 8006242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006246:	f000 f842 	bl	80062ce <_malloc_usable_size_r>
 800624a:	4284      	cmp	r4, r0
 800624c:	4607      	mov	r7, r0
 800624e:	d802      	bhi.n	8006256 <_realloc_r+0x34>
 8006250:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006254:	d812      	bhi.n	800627c <_realloc_r+0x5a>
 8006256:	4621      	mov	r1, r4
 8006258:	4640      	mov	r0, r8
 800625a:	f7fd fe61 	bl	8003f20 <_malloc_r>
 800625e:	4605      	mov	r5, r0
 8006260:	2800      	cmp	r0, #0
 8006262:	d0ed      	beq.n	8006240 <_realloc_r+0x1e>
 8006264:	42bc      	cmp	r4, r7
 8006266:	4622      	mov	r2, r4
 8006268:	4631      	mov	r1, r6
 800626a:	bf28      	it	cs
 800626c:	463a      	movcs	r2, r7
 800626e:	f7ff fc25 	bl	8005abc <memcpy>
 8006272:	4631      	mov	r1, r6
 8006274:	4640      	mov	r0, r8
 8006276:	f7fd fddf 	bl	8003e38 <_free_r>
 800627a:	e7e1      	b.n	8006240 <_realloc_r+0x1e>
 800627c:	4635      	mov	r5, r6
 800627e:	e7df      	b.n	8006240 <_realloc_r+0x1e>

08006280 <__ascii_wctomb>:
 8006280:	b149      	cbz	r1, 8006296 <__ascii_wctomb+0x16>
 8006282:	2aff      	cmp	r2, #255	; 0xff
 8006284:	bf85      	ittet	hi
 8006286:	238a      	movhi	r3, #138	; 0x8a
 8006288:	6003      	strhi	r3, [r0, #0]
 800628a:	700a      	strbls	r2, [r1, #0]
 800628c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006290:	bf98      	it	ls
 8006292:	2001      	movls	r0, #1
 8006294:	4770      	bx	lr
 8006296:	4608      	mov	r0, r1
 8006298:	4770      	bx	lr
	...

0800629c <fiprintf>:
 800629c:	b40e      	push	{r1, r2, r3}
 800629e:	b503      	push	{r0, r1, lr}
 80062a0:	4601      	mov	r1, r0
 80062a2:	ab03      	add	r3, sp, #12
 80062a4:	4805      	ldr	r0, [pc, #20]	; (80062bc <fiprintf+0x20>)
 80062a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	f000 f83f 	bl	8006330 <_vfiprintf_r>
 80062b2:	b002      	add	sp, #8
 80062b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b8:	b003      	add	sp, #12
 80062ba:	4770      	bx	lr
 80062bc:	200000ac 	.word	0x200000ac

080062c0 <abort>:
 80062c0:	b508      	push	{r3, lr}
 80062c2:	2006      	movs	r0, #6
 80062c4:	f000 fa0c 	bl	80066e0 <raise>
 80062c8:	2001      	movs	r0, #1
 80062ca:	f7fa fe8d 	bl	8000fe8 <_exit>

080062ce <_malloc_usable_size_r>:
 80062ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d2:	1f18      	subs	r0, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfbc      	itt	lt
 80062d8:	580b      	ldrlt	r3, [r1, r0]
 80062da:	18c0      	addlt	r0, r0, r3
 80062dc:	4770      	bx	lr

080062de <__sfputc_r>:
 80062de:	6893      	ldr	r3, [r2, #8]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	b410      	push	{r4}
 80062e6:	6093      	str	r3, [r2, #8]
 80062e8:	da08      	bge.n	80062fc <__sfputc_r+0x1e>
 80062ea:	6994      	ldr	r4, [r2, #24]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	db01      	blt.n	80062f4 <__sfputc_r+0x16>
 80062f0:	290a      	cmp	r1, #10
 80062f2:	d103      	bne.n	80062fc <__sfputc_r+0x1e>
 80062f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f8:	f000 b934 	b.w	8006564 <__swbuf_r>
 80062fc:	6813      	ldr	r3, [r2, #0]
 80062fe:	1c58      	adds	r0, r3, #1
 8006300:	6010      	str	r0, [r2, #0]
 8006302:	7019      	strb	r1, [r3, #0]
 8006304:	4608      	mov	r0, r1
 8006306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800630a:	4770      	bx	lr

0800630c <__sfputs_r>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	4606      	mov	r6, r0
 8006310:	460f      	mov	r7, r1
 8006312:	4614      	mov	r4, r2
 8006314:	18d5      	adds	r5, r2, r3
 8006316:	42ac      	cmp	r4, r5
 8006318:	d101      	bne.n	800631e <__sfputs_r+0x12>
 800631a:	2000      	movs	r0, #0
 800631c:	e007      	b.n	800632e <__sfputs_r+0x22>
 800631e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006322:	463a      	mov	r2, r7
 8006324:	4630      	mov	r0, r6
 8006326:	f7ff ffda 	bl	80062de <__sfputc_r>
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	d1f3      	bne.n	8006316 <__sfputs_r+0xa>
 800632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006330 <_vfiprintf_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	460d      	mov	r5, r1
 8006336:	b09d      	sub	sp, #116	; 0x74
 8006338:	4614      	mov	r4, r2
 800633a:	4698      	mov	r8, r3
 800633c:	4606      	mov	r6, r0
 800633e:	b118      	cbz	r0, 8006348 <_vfiprintf_r+0x18>
 8006340:	6a03      	ldr	r3, [r0, #32]
 8006342:	b90b      	cbnz	r3, 8006348 <_vfiprintf_r+0x18>
 8006344:	f7fc fe64 	bl	8003010 <__sinit>
 8006348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634a:	07d9      	lsls	r1, r3, #31
 800634c:	d405      	bmi.n	800635a <_vfiprintf_r+0x2a>
 800634e:	89ab      	ldrh	r3, [r5, #12]
 8006350:	059a      	lsls	r2, r3, #22
 8006352:	d402      	bmi.n	800635a <_vfiprintf_r+0x2a>
 8006354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006356:	f7fc ff71 	bl	800323c <__retarget_lock_acquire_recursive>
 800635a:	89ab      	ldrh	r3, [r5, #12]
 800635c:	071b      	lsls	r3, r3, #28
 800635e:	d501      	bpl.n	8006364 <_vfiprintf_r+0x34>
 8006360:	692b      	ldr	r3, [r5, #16]
 8006362:	b99b      	cbnz	r3, 800638c <_vfiprintf_r+0x5c>
 8006364:	4629      	mov	r1, r5
 8006366:	4630      	mov	r0, r6
 8006368:	f000 f93a 	bl	80065e0 <__swsetup_r>
 800636c:	b170      	cbz	r0, 800638c <_vfiprintf_r+0x5c>
 800636e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006370:	07dc      	lsls	r4, r3, #31
 8006372:	d504      	bpl.n	800637e <_vfiprintf_r+0x4e>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	b01d      	add	sp, #116	; 0x74
 800637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	0598      	lsls	r0, r3, #22
 8006382:	d4f7      	bmi.n	8006374 <_vfiprintf_r+0x44>
 8006384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006386:	f7fc ff5a 	bl	800323e <__retarget_lock_release_recursive>
 800638a:	e7f3      	b.n	8006374 <_vfiprintf_r+0x44>
 800638c:	2300      	movs	r3, #0
 800638e:	9309      	str	r3, [sp, #36]	; 0x24
 8006390:	2320      	movs	r3, #32
 8006392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006396:	f8cd 800c 	str.w	r8, [sp, #12]
 800639a:	2330      	movs	r3, #48	; 0x30
 800639c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006550 <_vfiprintf_r+0x220>
 80063a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063a4:	f04f 0901 	mov.w	r9, #1
 80063a8:	4623      	mov	r3, r4
 80063aa:	469a      	mov	sl, r3
 80063ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b0:	b10a      	cbz	r2, 80063b6 <_vfiprintf_r+0x86>
 80063b2:	2a25      	cmp	r2, #37	; 0x25
 80063b4:	d1f9      	bne.n	80063aa <_vfiprintf_r+0x7a>
 80063b6:	ebba 0b04 	subs.w	fp, sl, r4
 80063ba:	d00b      	beq.n	80063d4 <_vfiprintf_r+0xa4>
 80063bc:	465b      	mov	r3, fp
 80063be:	4622      	mov	r2, r4
 80063c0:	4629      	mov	r1, r5
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff ffa2 	bl	800630c <__sfputs_r>
 80063c8:	3001      	adds	r0, #1
 80063ca:	f000 80a9 	beq.w	8006520 <_vfiprintf_r+0x1f0>
 80063ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d0:	445a      	add	r2, fp
 80063d2:	9209      	str	r2, [sp, #36]	; 0x24
 80063d4:	f89a 3000 	ldrb.w	r3, [sl]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a1 	beq.w	8006520 <_vfiprintf_r+0x1f0>
 80063de:	2300      	movs	r3, #0
 80063e0:	f04f 32ff 	mov.w	r2, #4294967295
 80063e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e8:	f10a 0a01 	add.w	sl, sl, #1
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	9307      	str	r3, [sp, #28]
 80063f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063f4:	931a      	str	r3, [sp, #104]	; 0x68
 80063f6:	4654      	mov	r4, sl
 80063f8:	2205      	movs	r2, #5
 80063fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fe:	4854      	ldr	r0, [pc, #336]	; (8006550 <_vfiprintf_r+0x220>)
 8006400:	f7f9 ff1e 	bl	8000240 <memchr>
 8006404:	9a04      	ldr	r2, [sp, #16]
 8006406:	b9d8      	cbnz	r0, 8006440 <_vfiprintf_r+0x110>
 8006408:	06d1      	lsls	r1, r2, #27
 800640a:	bf44      	itt	mi
 800640c:	2320      	movmi	r3, #32
 800640e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006412:	0713      	lsls	r3, r2, #28
 8006414:	bf44      	itt	mi
 8006416:	232b      	movmi	r3, #43	; 0x2b
 8006418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800641c:	f89a 3000 	ldrb.w	r3, [sl]
 8006420:	2b2a      	cmp	r3, #42	; 0x2a
 8006422:	d015      	beq.n	8006450 <_vfiprintf_r+0x120>
 8006424:	9a07      	ldr	r2, [sp, #28]
 8006426:	4654      	mov	r4, sl
 8006428:	2000      	movs	r0, #0
 800642a:	f04f 0c0a 	mov.w	ip, #10
 800642e:	4621      	mov	r1, r4
 8006430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006434:	3b30      	subs	r3, #48	; 0x30
 8006436:	2b09      	cmp	r3, #9
 8006438:	d94d      	bls.n	80064d6 <_vfiprintf_r+0x1a6>
 800643a:	b1b0      	cbz	r0, 800646a <_vfiprintf_r+0x13a>
 800643c:	9207      	str	r2, [sp, #28]
 800643e:	e014      	b.n	800646a <_vfiprintf_r+0x13a>
 8006440:	eba0 0308 	sub.w	r3, r0, r8
 8006444:	fa09 f303 	lsl.w	r3, r9, r3
 8006448:	4313      	orrs	r3, r2
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	46a2      	mov	sl, r4
 800644e:	e7d2      	b.n	80063f6 <_vfiprintf_r+0xc6>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	1d19      	adds	r1, r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	9103      	str	r1, [sp, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bfbb      	ittet	lt
 800645c:	425b      	neglt	r3, r3
 800645e:	f042 0202 	orrlt.w	r2, r2, #2
 8006462:	9307      	strge	r3, [sp, #28]
 8006464:	9307      	strlt	r3, [sp, #28]
 8006466:	bfb8      	it	lt
 8006468:	9204      	strlt	r2, [sp, #16]
 800646a:	7823      	ldrb	r3, [r4, #0]
 800646c:	2b2e      	cmp	r3, #46	; 0x2e
 800646e:	d10c      	bne.n	800648a <_vfiprintf_r+0x15a>
 8006470:	7863      	ldrb	r3, [r4, #1]
 8006472:	2b2a      	cmp	r3, #42	; 0x2a
 8006474:	d134      	bne.n	80064e0 <_vfiprintf_r+0x1b0>
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	1d1a      	adds	r2, r3, #4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	9203      	str	r2, [sp, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfb8      	it	lt
 8006482:	f04f 33ff 	movlt.w	r3, #4294967295
 8006486:	3402      	adds	r4, #2
 8006488:	9305      	str	r3, [sp, #20]
 800648a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006560 <_vfiprintf_r+0x230>
 800648e:	7821      	ldrb	r1, [r4, #0]
 8006490:	2203      	movs	r2, #3
 8006492:	4650      	mov	r0, sl
 8006494:	f7f9 fed4 	bl	8000240 <memchr>
 8006498:	b138      	cbz	r0, 80064aa <_vfiprintf_r+0x17a>
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	eba0 000a 	sub.w	r0, r0, sl
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	4082      	lsls	r2, r0
 80064a4:	4313      	orrs	r3, r2
 80064a6:	3401      	adds	r4, #1
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ae:	4829      	ldr	r0, [pc, #164]	; (8006554 <_vfiprintf_r+0x224>)
 80064b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064b4:	2206      	movs	r2, #6
 80064b6:	f7f9 fec3 	bl	8000240 <memchr>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d03f      	beq.n	800653e <_vfiprintf_r+0x20e>
 80064be:	4b26      	ldr	r3, [pc, #152]	; (8006558 <_vfiprintf_r+0x228>)
 80064c0:	bb1b      	cbnz	r3, 800650a <_vfiprintf_r+0x1da>
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	3307      	adds	r3, #7
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	3308      	adds	r3, #8
 80064cc:	9303      	str	r3, [sp, #12]
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	443b      	add	r3, r7
 80064d2:	9309      	str	r3, [sp, #36]	; 0x24
 80064d4:	e768      	b.n	80063a8 <_vfiprintf_r+0x78>
 80064d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80064da:	460c      	mov	r4, r1
 80064dc:	2001      	movs	r0, #1
 80064de:	e7a6      	b.n	800642e <_vfiprintf_r+0xfe>
 80064e0:	2300      	movs	r3, #0
 80064e2:	3401      	adds	r4, #1
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	4619      	mov	r1, r3
 80064e8:	f04f 0c0a 	mov.w	ip, #10
 80064ec:	4620      	mov	r0, r4
 80064ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064f2:	3a30      	subs	r2, #48	; 0x30
 80064f4:	2a09      	cmp	r2, #9
 80064f6:	d903      	bls.n	8006500 <_vfiprintf_r+0x1d0>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0c6      	beq.n	800648a <_vfiprintf_r+0x15a>
 80064fc:	9105      	str	r1, [sp, #20]
 80064fe:	e7c4      	b.n	800648a <_vfiprintf_r+0x15a>
 8006500:	fb0c 2101 	mla	r1, ip, r1, r2
 8006504:	4604      	mov	r4, r0
 8006506:	2301      	movs	r3, #1
 8006508:	e7f0      	b.n	80064ec <_vfiprintf_r+0x1bc>
 800650a:	ab03      	add	r3, sp, #12
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	462a      	mov	r2, r5
 8006510:	4b12      	ldr	r3, [pc, #72]	; (800655c <_vfiprintf_r+0x22c>)
 8006512:	a904      	add	r1, sp, #16
 8006514:	4630      	mov	r0, r6
 8006516:	f7fb ff53 	bl	80023c0 <_printf_float>
 800651a:	4607      	mov	r7, r0
 800651c:	1c78      	adds	r0, r7, #1
 800651e:	d1d6      	bne.n	80064ce <_vfiprintf_r+0x19e>
 8006520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006522:	07d9      	lsls	r1, r3, #31
 8006524:	d405      	bmi.n	8006532 <_vfiprintf_r+0x202>
 8006526:	89ab      	ldrh	r3, [r5, #12]
 8006528:	059a      	lsls	r2, r3, #22
 800652a:	d402      	bmi.n	8006532 <_vfiprintf_r+0x202>
 800652c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800652e:	f7fc fe86 	bl	800323e <__retarget_lock_release_recursive>
 8006532:	89ab      	ldrh	r3, [r5, #12]
 8006534:	065b      	lsls	r3, r3, #25
 8006536:	f53f af1d 	bmi.w	8006374 <_vfiprintf_r+0x44>
 800653a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800653c:	e71c      	b.n	8006378 <_vfiprintf_r+0x48>
 800653e:	ab03      	add	r3, sp, #12
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	462a      	mov	r2, r5
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <_vfiprintf_r+0x22c>)
 8006546:	a904      	add	r1, sp, #16
 8006548:	4630      	mov	r0, r6
 800654a:	f7fc f9c1 	bl	80028d0 <_printf_i>
 800654e:	e7e4      	b.n	800651a <_vfiprintf_r+0x1ea>
 8006550:	08006bb9 	.word	0x08006bb9
 8006554:	08006bc3 	.word	0x08006bc3
 8006558:	080023c1 	.word	0x080023c1
 800655c:	0800630d 	.word	0x0800630d
 8006560:	08006bbf 	.word	0x08006bbf

08006564 <__swbuf_r>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	460e      	mov	r6, r1
 8006568:	4614      	mov	r4, r2
 800656a:	4605      	mov	r5, r0
 800656c:	b118      	cbz	r0, 8006576 <__swbuf_r+0x12>
 800656e:	6a03      	ldr	r3, [r0, #32]
 8006570:	b90b      	cbnz	r3, 8006576 <__swbuf_r+0x12>
 8006572:	f7fc fd4d 	bl	8003010 <__sinit>
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	60a3      	str	r3, [r4, #8]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	071a      	lsls	r2, r3, #28
 800657e:	d525      	bpl.n	80065cc <__swbuf_r+0x68>
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	b31b      	cbz	r3, 80065cc <__swbuf_r+0x68>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	6922      	ldr	r2, [r4, #16]
 8006588:	1a98      	subs	r0, r3, r2
 800658a:	6963      	ldr	r3, [r4, #20]
 800658c:	b2f6      	uxtb	r6, r6
 800658e:	4283      	cmp	r3, r0
 8006590:	4637      	mov	r7, r6
 8006592:	dc04      	bgt.n	800659e <__swbuf_r+0x3a>
 8006594:	4621      	mov	r1, r4
 8006596:	4628      	mov	r0, r5
 8006598:	f7ff fa2c 	bl	80059f4 <_fflush_r>
 800659c:	b9e0      	cbnz	r0, 80065d8 <__swbuf_r+0x74>
 800659e:	68a3      	ldr	r3, [r4, #8]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	60a3      	str	r3, [r4, #8]
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	701e      	strb	r6, [r3, #0]
 80065ac:	6962      	ldr	r2, [r4, #20]
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d004      	beq.n	80065be <__swbuf_r+0x5a>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	07db      	lsls	r3, r3, #31
 80065b8:	d506      	bpl.n	80065c8 <__swbuf_r+0x64>
 80065ba:	2e0a      	cmp	r6, #10
 80065bc:	d104      	bne.n	80065c8 <__swbuf_r+0x64>
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7ff fa17 	bl	80059f4 <_fflush_r>
 80065c6:	b938      	cbnz	r0, 80065d8 <__swbuf_r+0x74>
 80065c8:	4638      	mov	r0, r7
 80065ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065cc:	4621      	mov	r1, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f806 	bl	80065e0 <__swsetup_r>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d0d5      	beq.n	8006584 <__swbuf_r+0x20>
 80065d8:	f04f 37ff 	mov.w	r7, #4294967295
 80065dc:	e7f4      	b.n	80065c8 <__swbuf_r+0x64>
	...

080065e0 <__swsetup_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4b2a      	ldr	r3, [pc, #168]	; (800668c <__swsetup_r+0xac>)
 80065e4:	4605      	mov	r5, r0
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	460c      	mov	r4, r1
 80065ea:	b118      	cbz	r0, 80065f4 <__swsetup_r+0x14>
 80065ec:	6a03      	ldr	r3, [r0, #32]
 80065ee:	b90b      	cbnz	r3, 80065f4 <__swsetup_r+0x14>
 80065f0:	f7fc fd0e 	bl	8003010 <__sinit>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065fa:	0718      	lsls	r0, r3, #28
 80065fc:	d422      	bmi.n	8006644 <__swsetup_r+0x64>
 80065fe:	06d9      	lsls	r1, r3, #27
 8006600:	d407      	bmi.n	8006612 <__swsetup_r+0x32>
 8006602:	2309      	movs	r3, #9
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	e034      	b.n	800667c <__swsetup_r+0x9c>
 8006612:	0758      	lsls	r0, r3, #29
 8006614:	d512      	bpl.n	800663c <__swsetup_r+0x5c>
 8006616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006618:	b141      	cbz	r1, 800662c <__swsetup_r+0x4c>
 800661a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800661e:	4299      	cmp	r1, r3
 8006620:	d002      	beq.n	8006628 <__swsetup_r+0x48>
 8006622:	4628      	mov	r0, r5
 8006624:	f7fd fc08 	bl	8003e38 <_free_r>
 8006628:	2300      	movs	r3, #0
 800662a:	6363      	str	r3, [r4, #52]	; 0x34
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	2300      	movs	r3, #0
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f043 0308 	orr.w	r3, r3, #8
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	b94b      	cbnz	r3, 800665c <__swsetup_r+0x7c>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d003      	beq.n	800665c <__swsetup_r+0x7c>
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f884 	bl	8006764 <__smakebuf_r>
 800665c:	89a0      	ldrh	r0, [r4, #12]
 800665e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006662:	f010 0301 	ands.w	r3, r0, #1
 8006666:	d00a      	beq.n	800667e <__swsetup_r+0x9e>
 8006668:	2300      	movs	r3, #0
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6963      	ldr	r3, [r4, #20]
 800666e:	425b      	negs	r3, r3
 8006670:	61a3      	str	r3, [r4, #24]
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	b943      	cbnz	r3, 8006688 <__swsetup_r+0xa8>
 8006676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800667a:	d1c4      	bne.n	8006606 <__swsetup_r+0x26>
 800667c:	bd38      	pop	{r3, r4, r5, pc}
 800667e:	0781      	lsls	r1, r0, #30
 8006680:	bf58      	it	pl
 8006682:	6963      	ldrpl	r3, [r4, #20]
 8006684:	60a3      	str	r3, [r4, #8]
 8006686:	e7f4      	b.n	8006672 <__swsetup_r+0x92>
 8006688:	2000      	movs	r0, #0
 800668a:	e7f7      	b.n	800667c <__swsetup_r+0x9c>
 800668c:	200000ac 	.word	0x200000ac

08006690 <_raise_r>:
 8006690:	291f      	cmp	r1, #31
 8006692:	b538      	push	{r3, r4, r5, lr}
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	d904      	bls.n	80066a4 <_raise_r+0x14>
 800669a:	2316      	movs	r3, #22
 800669c:	6003      	str	r3, [r0, #0]
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80066a6:	b112      	cbz	r2, 80066ae <_raise_r+0x1e>
 80066a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066ac:	b94b      	cbnz	r3, 80066c2 <_raise_r+0x32>
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f830 	bl	8006714 <_getpid_r>
 80066b4:	462a      	mov	r2, r5
 80066b6:	4601      	mov	r1, r0
 80066b8:	4620      	mov	r0, r4
 80066ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066be:	f000 b817 	b.w	80066f0 <_kill_r>
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d00a      	beq.n	80066dc <_raise_r+0x4c>
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	d103      	bne.n	80066d2 <_raise_r+0x42>
 80066ca:	2316      	movs	r3, #22
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7e7      	b.n	80066a2 <_raise_r+0x12>
 80066d2:	2400      	movs	r4, #0
 80066d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066d8:	4628      	mov	r0, r5
 80066da:	4798      	blx	r3
 80066dc:	2000      	movs	r0, #0
 80066de:	e7e0      	b.n	80066a2 <_raise_r+0x12>

080066e0 <raise>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <raise+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7ff bfd3 	b.w	8006690 <_raise_r>
 80066ea:	bf00      	nop
 80066ec:	200000ac 	.word	0x200000ac

080066f0 <_kill_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_kill_r+0x20>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	f7fa fc63 	bl	8000fc8 <_kill>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d102      	bne.n	800670c <_kill_r+0x1c>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	b103      	cbz	r3, 800670c <_kill_r+0x1c>
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	20000380 	.word	0x20000380

08006714 <_getpid_r>:
 8006714:	f7fa bc50 	b.w	8000fb8 <_getpid>

08006718 <__swhatbuf_r>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006720:	2900      	cmp	r1, #0
 8006722:	b096      	sub	sp, #88	; 0x58
 8006724:	4615      	mov	r5, r2
 8006726:	461e      	mov	r6, r3
 8006728:	da0d      	bge.n	8006746 <__swhatbuf_r+0x2e>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	bf0c      	ite	eq
 8006736:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800673a:	2340      	movne	r3, #64	; 0x40
 800673c:	2000      	movs	r0, #0
 800673e:	6031      	str	r1, [r6, #0]
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	b016      	add	sp, #88	; 0x58
 8006744:	bd70      	pop	{r4, r5, r6, pc}
 8006746:	466a      	mov	r2, sp
 8006748:	f000 f848 	bl	80067dc <_fstat_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	dbec      	blt.n	800672a <__swhatbuf_r+0x12>
 8006750:	9901      	ldr	r1, [sp, #4]
 8006752:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006756:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800675a:	4259      	negs	r1, r3
 800675c:	4159      	adcs	r1, r3
 800675e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006762:	e7eb      	b.n	800673c <__swhatbuf_r+0x24>

08006764 <__smakebuf_r>:
 8006764:	898b      	ldrh	r3, [r1, #12]
 8006766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006768:	079d      	lsls	r5, r3, #30
 800676a:	4606      	mov	r6, r0
 800676c:	460c      	mov	r4, r1
 800676e:	d507      	bpl.n	8006780 <__smakebuf_r+0x1c>
 8006770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2301      	movs	r3, #1
 800677a:	6163      	str	r3, [r4, #20]
 800677c:	b002      	add	sp, #8
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	ab01      	add	r3, sp, #4
 8006782:	466a      	mov	r2, sp
 8006784:	f7ff ffc8 	bl	8006718 <__swhatbuf_r>
 8006788:	9900      	ldr	r1, [sp, #0]
 800678a:	4605      	mov	r5, r0
 800678c:	4630      	mov	r0, r6
 800678e:	f7fd fbc7 	bl	8003f20 <_malloc_r>
 8006792:	b948      	cbnz	r0, 80067a8 <__smakebuf_r+0x44>
 8006794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d4ef      	bmi.n	800677c <__smakebuf_r+0x18>
 800679c:	f023 0303 	bic.w	r3, r3, #3
 80067a0:	f043 0302 	orr.w	r3, r3, #2
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	e7e3      	b.n	8006770 <__smakebuf_r+0xc>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	6020      	str	r0, [r4, #0]
 80067ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	9b00      	ldr	r3, [sp, #0]
 80067b4:	6163      	str	r3, [r4, #20]
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	6120      	str	r0, [r4, #16]
 80067ba:	b15b      	cbz	r3, 80067d4 <__smakebuf_r+0x70>
 80067bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 f81d 	bl	8006800 <_isatty_r>
 80067c6:	b128      	cbz	r0, 80067d4 <__smakebuf_r+0x70>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	431d      	orrs	r5, r3
 80067d8:	81a5      	strh	r5, [r4, #12]
 80067da:	e7cf      	b.n	800677c <__smakebuf_r+0x18>

080067dc <_fstat_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d07      	ldr	r5, [pc, #28]	; (80067fc <_fstat_r+0x20>)
 80067e0:	2300      	movs	r3, #0
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	f7fa fc4c 	bl	8001086 <_fstat>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	d102      	bne.n	80067f8 <_fstat_r+0x1c>
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	b103      	cbz	r3, 80067f8 <_fstat_r+0x1c>
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	bd38      	pop	{r3, r4, r5, pc}
 80067fa:	bf00      	nop
 80067fc:	20000380 	.word	0x20000380

08006800 <_isatty_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	; (800681c <_isatty_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fa fc4b 	bl	80010a6 <_isatty>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_isatty_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_isatty_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20000380 	.word	0x20000380

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
